
quadcopter_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007084  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08007258  08007258  00017258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007434  08007434  00017434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08007438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d9c  20000084  080074bc  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20001e20  080074bc  00021e20  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ebcf  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000257f  00000000  00000000  0002ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e58  00000000  00000000  00031200  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d00  00000000  00000000  00032058  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006851  00000000  00000000  00032d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000047fc  00000000  00000000  000395a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003dda5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003f8c  00000000  00000000  0003de24  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00041db0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800723c 	.word	0x0800723c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	0800723c 	.word	0x0800723c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f092 0f00 	teq	r2, #0
 80004fa:	bf14      	ite	ne
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e720      	b.n	8000354 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aedc 	beq.w	8000302 <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6c1      	b.n	8000302 <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_uldivmod>:
 8000b70:	b953      	cbnz	r3, 8000b88 <__aeabi_uldivmod+0x18>
 8000b72:	b94a      	cbnz	r2, 8000b88 <__aeabi_uldivmod+0x18>
 8000b74:	2900      	cmp	r1, #0
 8000b76:	bf08      	it	eq
 8000b78:	2800      	cmpeq	r0, #0
 8000b7a:	bf1c      	itt	ne
 8000b7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b80:	f04f 30ff 	movne.w	r0, #4294967295
 8000b84:	f000 b97a 	b.w	8000e7c <__aeabi_idiv0>
 8000b88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b90:	f000 f806 	bl	8000ba0 <__udivmoddi4>
 8000b94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9c:	b004      	add	sp, #16
 8000b9e:	4770      	bx	lr

08000ba0 <__udivmoddi4>:
 8000ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	460e      	mov	r6, r1
 8000ba8:	4604      	mov	r4, r0
 8000baa:	9d08      	ldr	r5, [sp, #32]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d150      	bne.n	8000c52 <__udivmoddi4+0xb2>
 8000bb0:	428a      	cmp	r2, r1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	d96c      	bls.n	8000c90 <__udivmoddi4+0xf0>
 8000bb6:	fab2 fe82 	clz	lr, r2
 8000bba:	f1be 0f00 	cmp.w	lr, #0
 8000bbe:	d00b      	beq.n	8000bd8 <__udivmoddi4+0x38>
 8000bc0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bc4:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bc8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bcc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bd0:	ea4c 0c06 	orr.w	ip, ip, r6
 8000bd4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bd8:	0c3a      	lsrs	r2, r7, #16
 8000bda:	fbbc f9f2 	udiv	r9, ip, r2
 8000bde:	b2bb      	uxth	r3, r7
 8000be0:	fb02 cc19 	mls	ip, r2, r9, ip
 8000be4:	fb09 fa03 	mul.w	sl, r9, r3
 8000be8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000bec:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000bf0:	45b2      	cmp	sl, r6
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x6a>
 8000bf4:	19f6      	adds	r6, r6, r7
 8000bf6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bfa:	f080 8125 	bcs.w	8000e48 <__udivmoddi4+0x2a8>
 8000bfe:	45b2      	cmp	sl, r6
 8000c00:	f240 8122 	bls.w	8000e48 <__udivmoddi4+0x2a8>
 8000c04:	f1a9 0902 	sub.w	r9, r9, #2
 8000c08:	443e      	add	r6, r7
 8000c0a:	eba6 060a 	sub.w	r6, r6, sl
 8000c0e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000c12:	fb02 6610 	mls	r6, r2, r0, r6
 8000c16:	fb00 f303 	mul.w	r3, r0, r3
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000c20:	42a3      	cmp	r3, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x98>
 8000c24:	19e4      	adds	r4, r4, r7
 8000c26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2a:	f080 810b 	bcs.w	8000e44 <__udivmoddi4+0x2a4>
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	f240 8108 	bls.w	8000e44 <__udivmoddi4+0x2a4>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	2100      	movs	r1, #0
 8000c3a:	1ae4      	subs	r4, r4, r3
 8000c3c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d062      	beq.n	8000d0a <__udivmoddi4+0x16a>
 8000c44:	2300      	movs	r3, #0
 8000c46:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c4a:	602c      	str	r4, [r5, #0]
 8000c4c:	606b      	str	r3, [r5, #4]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d907      	bls.n	8000c66 <__udivmoddi4+0xc6>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d055      	beq.n	8000d06 <__udivmoddi4+0x166>
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c60:	4608      	mov	r0, r1
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	f040 808f 	bne.w	8000d8e <__udivmoddi4+0x1ee>
 8000c70:	42b3      	cmp	r3, r6
 8000c72:	d302      	bcc.n	8000c7a <__udivmoddi4+0xda>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	f200 80fc 	bhi.w	8000e72 <__udivmoddi4+0x2d2>
 8000c7a:	1a84      	subs	r4, r0, r2
 8000c7c:	eb66 0603 	sbc.w	r6, r6, r3
 8000c80:	2001      	movs	r0, #1
 8000c82:	46b4      	mov	ip, r6
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d040      	beq.n	8000d0a <__udivmoddi4+0x16a>
 8000c88:	e885 1010 	stmia.w	r5, {r4, ip}
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	b912      	cbnz	r2, 8000c98 <__udivmoddi4+0xf8>
 8000c92:	2701      	movs	r7, #1
 8000c94:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c98:	fab7 fe87 	clz	lr, r7
 8000c9c:	f1be 0f00 	cmp.w	lr, #0
 8000ca0:	d135      	bne.n	8000d0e <__udivmoddi4+0x16e>
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	1bf6      	subs	r6, r6, r7
 8000ca6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000caa:	fa1f f887 	uxth.w	r8, r7
 8000cae:	fbb6 f2fc 	udiv	r2, r6, ip
 8000cb2:	fb0c 6612 	mls	r6, ip, r2, r6
 8000cb6:	fb08 f002 	mul.w	r0, r8, r2
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000cc0:	42b0      	cmp	r0, r6
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x134>
 8000cc4:	19f6      	adds	r6, r6, r7
 8000cc6:	f102 33ff 	add.w	r3, r2, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x132>
 8000ccc:	42b0      	cmp	r0, r6
 8000cce:	f200 80d2 	bhi.w	8000e76 <__udivmoddi4+0x2d6>
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	1a36      	subs	r6, r6, r0
 8000cd6:	fbb6 f0fc 	udiv	r0, r6, ip
 8000cda:	fb0c 6610 	mls	r6, ip, r0, r6
 8000cde:	fb08 f800 	mul.w	r8, r8, r0
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x15c>
 8000cec:	19e4      	adds	r4, r4, r7
 8000cee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x15a>
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	f200 80b9 	bhi.w	8000e6c <__udivmoddi4+0x2cc>
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	eba4 0408 	sub.w	r4, r4, r8
 8000d00:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d04:	e79c      	b.n	8000c40 <__udivmoddi4+0xa0>
 8000d06:	4629      	mov	r1, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d12:	f1ce 0320 	rsb	r3, lr, #32
 8000d16:	fa26 f203 	lsr.w	r2, r6, r3
 8000d1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000d1e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000d22:	fa1f f887 	uxth.w	r8, r7
 8000d26:	fb0c 2211 	mls	r2, ip, r1, r2
 8000d2a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d2e:	fa20 f303 	lsr.w	r3, r0, r3
 8000d32:	fb01 f908 	mul.w	r9, r1, r8
 8000d36:	4333      	orrs	r3, r6
 8000d38:	0c1e      	lsrs	r6, r3, #16
 8000d3a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000d3e:	45b1      	cmp	r9, r6
 8000d40:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x1ba>
 8000d46:	19f6      	adds	r6, r6, r7
 8000d48:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d4c:	f080 808c 	bcs.w	8000e68 <__udivmoddi4+0x2c8>
 8000d50:	45b1      	cmp	r9, r6
 8000d52:	f240 8089 	bls.w	8000e68 <__udivmoddi4+0x2c8>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443e      	add	r6, r7
 8000d5a:	eba6 0609 	sub.w	r6, r6, r9
 8000d5e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000d62:	fb0c 6210 	mls	r2, ip, r0, r6
 8000d66:	fb00 f908 	mul.w	r9, r0, r8
 8000d6a:	b29e      	uxth	r6, r3
 8000d6c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000d70:	45b1      	cmp	r9, r6
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1e4>
 8000d74:	19f6      	adds	r6, r6, r7
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d271      	bcs.n	8000e60 <__udivmoddi4+0x2c0>
 8000d7c:	45b1      	cmp	r9, r6
 8000d7e:	d96f      	bls.n	8000e60 <__udivmoddi4+0x2c0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443e      	add	r6, r7
 8000d84:	eba6 0609 	sub.w	r6, r6, r9
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	e78f      	b.n	8000cae <__udivmoddi4+0x10e>
 8000d8e:	f1c1 0720 	rsb	r7, r1, #32
 8000d92:	fa22 f807 	lsr.w	r8, r2, r7
 8000d96:	408b      	lsls	r3, r1
 8000d98:	ea48 0303 	orr.w	r3, r8, r3
 8000d9c:	fa26 f407 	lsr.w	r4, r6, r7
 8000da0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000da4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000da8:	fa1f fc83 	uxth.w	ip, r3
 8000dac:	fb0e 4419 	mls	r4, lr, r9, r4
 8000db0:	408e      	lsls	r6, r1
 8000db2:	fa20 f807 	lsr.w	r8, r0, r7
 8000db6:	fb09 fa0c 	mul.w	sl, r9, ip
 8000dba:	ea48 0806 	orr.w	r8, r8, r6
 8000dbe:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000dc2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000dc6:	45a2      	cmp	sl, r4
 8000dc8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dcc:	fa00 f601 	lsl.w	r6, r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x244>
 8000dd2:	18e4      	adds	r4, r4, r3
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	d244      	bcs.n	8000e64 <__udivmoddi4+0x2c4>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d942      	bls.n	8000e64 <__udivmoddi4+0x2c4>
 8000dde:	f1a9 0902 	sub.w	r9, r9, #2
 8000de2:	441c      	add	r4, r3
 8000de4:	eba4 040a 	sub.w	r4, r4, sl
 8000de8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000dec:	fb0e 4410 	mls	r4, lr, r0, r4
 8000df0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000df4:	fa1f f888 	uxth.w	r8, r8
 8000df8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dfc:	45a4      	cmp	ip, r4
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x270>
 8000e00:	18e4      	adds	r4, r4, r3
 8000e02:	f100 3eff 	add.w	lr, r0, #4294967295
 8000e06:	d229      	bcs.n	8000e5c <__udivmoddi4+0x2bc>
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d927      	bls.n	8000e5c <__udivmoddi4+0x2bc>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	441c      	add	r4, r3
 8000e10:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e14:	fba0 8902 	umull	r8, r9, r0, r2
 8000e18:	eba4 0c0c 	sub.w	ip, r4, ip
 8000e1c:	45cc      	cmp	ip, r9
 8000e1e:	46c2      	mov	sl, r8
 8000e20:	46ce      	mov	lr, r9
 8000e22:	d315      	bcc.n	8000e50 <__udivmoddi4+0x2b0>
 8000e24:	d012      	beq.n	8000e4c <__udivmoddi4+0x2ac>
 8000e26:	b155      	cbz	r5, 8000e3e <__udivmoddi4+0x29e>
 8000e28:	ebb6 030a 	subs.w	r3, r6, sl
 8000e2c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000e30:	fa06 f707 	lsl.w	r7, r6, r7
 8000e34:	40cb      	lsrs	r3, r1
 8000e36:	431f      	orrs	r7, r3
 8000e38:	40ce      	lsrs	r6, r1
 8000e3a:	602f      	str	r7, [r5, #0]
 8000e3c:	606e      	str	r6, [r5, #4]
 8000e3e:	2100      	movs	r1, #0
 8000e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e44:	4610      	mov	r0, r2
 8000e46:	e6f7      	b.n	8000c38 <__udivmoddi4+0x98>
 8000e48:	4689      	mov	r9, r1
 8000e4a:	e6de      	b.n	8000c0a <__udivmoddi4+0x6a>
 8000e4c:	4546      	cmp	r6, r8
 8000e4e:	d2ea      	bcs.n	8000e26 <__udivmoddi4+0x286>
 8000e50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e54:	eb69 0e03 	sbc.w	lr, r9, r3
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7e4      	b.n	8000e26 <__udivmoddi4+0x286>
 8000e5c:	4670      	mov	r0, lr
 8000e5e:	e7d7      	b.n	8000e10 <__udivmoddi4+0x270>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e78f      	b.n	8000d84 <__udivmoddi4+0x1e4>
 8000e64:	4681      	mov	r9, r0
 8000e66:	e7bd      	b.n	8000de4 <__udivmoddi4+0x244>
 8000e68:	4611      	mov	r1, r2
 8000e6a:	e776      	b.n	8000d5a <__udivmoddi4+0x1ba>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	e744      	b.n	8000cfc <__udivmoddi4+0x15c>
 8000e72:	4608      	mov	r0, r1
 8000e74:	e706      	b.n	8000c84 <__udivmoddi4+0xe4>
 8000e76:	3a02      	subs	r2, #2
 8000e78:	443e      	add	r6, r7
 8000e7a:	e72b      	b.n	8000cd4 <__udivmoddi4+0x134>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f103 0208 	add.w	r2, r3, #8
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f103 0208 	add.w	r2, r3, #8
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f103 0208 	add.w	r2, r3, #8
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f32:	d103      	bne.n	8000f3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	e00c      	b.n	8000f56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3308      	adds	r3, #8
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e002      	b.n	8000f4a <vListInsert+0x2e>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d9f6      	bls.n	8000f44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	6892      	ldr	r2, [r2, #8]
 8000fa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	6852      	ldr	r2, [r2, #4]
 8000fac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d103      	bne.n	8000fc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3b04      	subs	r3, #4
 8000ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f023 0201 	bic.w	r2, r3, #1
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3b04      	subs	r3, #4
 800100e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001010:	4a08      	ldr	r2, [pc, #32]	; (8001034 <pxPortInitialiseStack+0x54>)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3b14      	subs	r3, #20
 800101a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3b20      	subs	r3, #32
 8001026:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001028:	68fb      	ldr	r3, [r7, #12]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	08001039 	.word	0x08001039

08001038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <prvTaskExitError+0x4c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104a:	d009      	beq.n	8001060 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800104c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001050:	f383 8811 	msr	BASEPRI, r3
 8001054:	f3bf 8f6f 	isb	sy
 8001058:	f3bf 8f4f 	dsb	sy
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e7fe      	b.n	800105e <prvTaskExitError+0x26>
 8001060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001072:	bf00      	nop
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0fc      	beq.n	8001074 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000000 	.word	0x20000000
	...

08001090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <pxCurrentTCBConst2>)
 8001092:	6819      	ldr	r1, [r3, #0]
 8001094:	6808      	ldr	r0, [r1, #0]
 8001096:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800109a:	f380 8809 	msr	PSP, r0
 800109e:	f3bf 8f6f 	isb	sy
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	f380 8811 	msr	BASEPRI, r0
 80010aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80010ae:	4770      	bx	lr

080010b0 <pxCurrentTCBConst2>:
 80010b0:	20001cbc 	.word	0x20001cbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop

080010b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <prvPortStartFirstTask+0x1c>)
 80010ba:	6800      	ldr	r0, [r0, #0]
 80010bc:	6800      	ldr	r0, [r0, #0]
 80010be:	f380 8808 	msr	MSP, r0
 80010c2:	b662      	cpsie	i
 80010c4:	b661      	cpsie	f
 80010c6:	f3bf 8f4f 	dsb	sy
 80010ca:	f3bf 8f6f 	isb	sy
 80010ce:	df00      	svc	0
 80010d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80010d2:	bf00      	nop
 80010d4:	e000ed08 	.word	0xe000ed08

080010d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <xPortStartScheduler+0xcc>)
 80010e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	22ff      	movs	r2, #255	; 0xff
 80010ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <xPortStartScheduler+0xd0>)
 8001104:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <xPortStartScheduler+0xd4>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800110c:	e009      	b.n	8001122 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <xPortStartScheduler+0xd4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	4a25      	ldr	r2, [pc, #148]	; (80011ac <xPortStartScheduler+0xd4>)
 8001116:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	2b80      	cmp	r3, #128	; 0x80
 800112c:	d0ef      	beq.n	800110e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <xPortStartScheduler+0xd4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	d009      	beq.n	800114e <xPortStartScheduler+0x76>
 800113a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	e7fe      	b.n	800114c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <xPortStartScheduler+0xd4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <xPortStartScheduler+0xd4>)
 8001156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <xPortStartScheduler+0xd4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <xPortStartScheduler+0xd4>)
 8001162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <xPortStartScheduler+0xd8>)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <xPortStartScheduler+0xd8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <xPortStartScheduler+0xd8>)
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <xPortStartScheduler+0xd8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001184:	f000 f8b0 	bl	80012e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <xPortStartScheduler+0xdc>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800118e:	f7ff ff93 	bl	80010b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001192:	f001 fa23 	bl	80025dc <vTaskSwitchContext>
	prvTaskExitError();
 8001196:	f7ff ff4f 	bl	8001038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	e000e400 	.word	0xe000e400
 80011a8:	200000a0 	.word	0x200000a0
 80011ac:	200000a4 	.word	0x200000a4
 80011b0:	e000ed20 	.word	0xe000ed20
 80011b4:	20000000 	.word	0x20000000

080011b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c2:	f383 8811 	msr	BASEPRI, r3
 80011c6:	f3bf 8f6f 	isb	sy
 80011ca:	f3bf 8f4f 	dsb	sy
 80011ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <vPortEnterCritical+0x54>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <vPortEnterCritical+0x54>)
 80011d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <vPortEnterCritical+0x54>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d10e      	bne.n	8001200 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <vPortEnterCritical+0x58>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d009      	beq.n	8001200 <vPortEnterCritical+0x48>
 80011ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f0:	f383 8811 	msr	BASEPRI, r3
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	f3bf 8f4f 	dsb	sy
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	e7fe      	b.n	80011fe <vPortEnterCritical+0x46>
	}
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000
 8001210:	e000ed04 	.word	0xe000ed04

08001214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <vPortExitCritical+0x48>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <vPortExitCritical+0x22>
 8001222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001226:	f383 8811 	msr	BASEPRI, r3
 800122a:	f3bf 8f6f 	isb	sy
 800122e:	f3bf 8f4f 	dsb	sy
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	e7fe      	b.n	8001234 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <vPortExitCritical+0x48>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <vPortExitCritical+0x48>)
 800123e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <vPortExitCritical+0x48>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <vPortExitCritical+0x3e>
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000000 	.word	0x20000000

08001260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001260:	f3ef 8009 	mrs	r0, PSP
 8001264:	f3bf 8f6f 	isb	sy
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <pxCurrentTCBConst>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001270:	6010      	str	r0, [r2, #0]
 8001272:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001276:	f04f 0050 	mov.w	r0, #80	; 0x50
 800127a:	f380 8811 	msr	BASEPRI, r0
 800127e:	f001 f9ad 	bl	80025dc <vTaskSwitchContext>
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	f380 8811 	msr	BASEPRI, r0
 800128a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	6808      	ldr	r0, [r1, #0]
 8001292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001296:	f380 8809 	msr	PSP, r0
 800129a:	f3bf 8f6f 	isb	sy
 800129e:	4770      	bx	lr

080012a0 <pxCurrentTCBConst>:
 80012a0:	20001cbc 	.word	0x20001cbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop

080012a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	__asm volatile
 80012ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80012c0:	f001 f8d4 	bl	800246c <xTaskIncrementTick>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <SysTick_Handler+0x3c>)
 80012cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	e000ed04 	.word	0xe000ed04

080012e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <vPortSetupTimerInterrupt+0x28>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <vPortSetupTimerInterrupt+0x2c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <vPortSetupTimerInterrupt+0x30>)
 80012fa:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80012fe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <vPortSetupTimerInterrupt+0x28>)
 8001302:	2207      	movs	r2, #7
 8001304:	601a      	str	r2, [r3, #0]
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010
 8001314:	e000e018 	.word	0xe000e018
 8001318:	e000e014 	.word	0xe000e014

0800131c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001322:	f3ef 8305 	mrs	r3, IPSR
 8001326:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d913      	bls.n	8001356 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <vPortValidateInterruptPriority+0x68>)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <vPortValidateInterruptPriority+0x6c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	7afa      	ldrb	r2, [r7, #11]
 800133e:	429a      	cmp	r2, r3
 8001340:	d209      	bcs.n	8001356 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001346:	f383 8811 	msr	BASEPRI, r3
 800134a:	f3bf 8f6f 	isb	sy
 800134e:	f3bf 8f4f 	dsb	sy
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	e7fe      	b.n	8001354 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <vPortValidateInterruptPriority+0x70>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <vPortValidateInterruptPriority+0x74>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d909      	bls.n	800137a <vPortValidateInterruptPriority+0x5e>
 8001366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136a:	f383 8811 	msr	BASEPRI, r3
 800136e:	f3bf 8f6f 	isb	sy
 8001372:	f3bf 8f4f 	dsb	sy
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	e7fe      	b.n	8001378 <vPortValidateInterruptPriority+0x5c>
	}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	e000e3f0 	.word	0xe000e3f0
 8001388:	200000a0 	.word	0x200000a0
 800138c:	e000ed0c 	.word	0xe000ed0c
 8001390:	200000a4 	.word	0x200000a4

08001394 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 80013a0:	f000 ffac 	bl	80022fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80013a4:	4b40      	ldr	r3, [pc, #256]	; (80014a8 <pvPortMalloc+0x114>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d104      	bne.n	80013b6 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 80013ac:	f000 f8c8 	bl	8001540 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 80013b0:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <pvPortMalloc+0x114>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00e      	beq.n	80013da <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80013bc:	2308      	movs	r3, #8
 80013be:	461a      	mov	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f023 0307 	bic.w	r3, r3, #7
 80013d6:	3308      	adds	r3, #8
 80013d8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d057      	beq.n	8001490 <pvPortMalloc+0xfc>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d852      	bhi.n	8001490 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <pvPortMalloc+0x118>)
 80013ec:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80013ee:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <pvPortMalloc+0x118>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013f4:	e004      	b.n	8001400 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	d203      	bcs.n	8001412 <pvPortMalloc+0x7e>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f1      	bne.n	80013f6 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <pvPortMalloc+0x11c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d03a      	beq.n	8001490 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2208      	movs	r2, #8
 8001420:	4413      	add	r3, r2
 8001422:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2208      	movs	r2, #8
 8001436:	0052      	lsls	r2, r2, #1
 8001438:	4293      	cmp	r3, r2
 800143a:	d922      	bls.n	8001482 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1ad2      	subs	r2, r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <pvPortMalloc+0x118>)
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	e002      	b.n	8001468 <pvPortMalloc+0xd4>
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3f6      	bcc.n	8001462 <pvPortMalloc+0xce>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <pvPortMalloc+0x120>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <pvPortMalloc+0x120>)
 800148e:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001490:	f000 ff42 	bl	8002318 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800149a:	f003 fd33 	bl	8004f04 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800149e:	697b      	ldr	r3, [r7, #20]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20001cb8 	.word	0x20001cb8
 80014ac:	20001ca8 	.word	0x20001ca8
 80014b0:	20001cb0 	.word	0x20001cb0
 80014b4:	20000004 	.word	0x20000004

080014b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d027      	beq.n	800151a <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80014ca:	2308      	movs	r3, #8
 80014cc:	425b      	negs	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4413      	add	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 80014d8:	f000 ff10 	bl	80022fc <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <vPortFree+0x6c>)
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e002      	b.n	80014ee <vPortFree+0x36>
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3f6      	bcc.n	80014e8 <vPortFree+0x30>
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <vPortFree+0x70>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <vPortFree+0x70>)
 8001514:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8001516:	f000 feff 	bl	8002318 <xTaskResumeAll>
	}
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20001ca8 	.word	0x20001ca8
 8001528:	20000004 	.word	0x20000004

0800152c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <xPortGetFreeHeapSize+0x10>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000004 	.word	0x20000004

08001540 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <prvHeapInit+0x44>)
 8001548:	f023 0307 	bic.w	r3, r3, #7
 800154c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <prvHeapInit+0x48>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <prvHeapInit+0x48>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <prvHeapInit+0x4c>)
 800155c:	f641 32f8 	movw	r2, #7160	; 0x1bf8
 8001560:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <prvHeapInit+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f641 32f8 	movw	r2, #7160	; 0x1bf8
 8001572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <prvHeapInit+0x4c>)
 8001578:	601a      	str	r2, [r3, #0]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	200000b0 	.word	0x200000b0
 8001588:	20001ca8 	.word	0x20001ca8
 800158c:	20001cb0 	.word	0x20001cb0

08001590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <xQueueGenericReset+0x28>
 80015a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a8:	f383 8811 	msr	BASEPRI, r3
 80015ac:	f3bf 8f6f 	isb	sy
 80015b0:	f3bf 8f4f 	dsb	sy
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	e7fe      	b.n	80015b6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80015b8:	f7ff fdfe 	bl	80011b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	441a      	add	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	3b01      	subs	r3, #1
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	441a      	add	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	22ff      	movs	r2, #255	; 0xff
 80015fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	22ff      	movs	r2, #255	; 0xff
 8001604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d114      	bne.n	8001638 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01a      	beq.n	800164c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3310      	adds	r3, #16
 800161a:	4618      	mov	r0, r3
 800161c:	f001 f8ac 	bl	8002778 <xTaskRemoveFromEventList>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d012      	beq.n	800164c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <xQueueGenericReset+0xcc>)
 8001628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f3bf 8f4f 	dsb	sy
 8001632:	f3bf 8f6f 	isb	sy
 8001636:	e009      	b.n	800164c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3310      	adds	r3, #16
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fc1f 	bl	8000e80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3324      	adds	r3, #36	; 0x24
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fc1a 	bl	8000e80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800164c:	f7ff fde2 	bl	8001214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000ed04 	.word	0xe000ed04

08001660 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af02      	add	r7, sp, #8
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <xQueueGenericCreate+0x28>
 8001674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001678:	f383 8811 	msr	BASEPRI, r3
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	e7fe      	b.n	8001686 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3348      	adds	r3, #72	; 0x48
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fe7c 	bl	8001394 <pvPortMalloc>
 800169c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00d      	beq.n	80016c0 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3348      	adds	r3, #72	; 0x48
 80016ac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f805 	bl	80016ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80016c0:	69bb      	ldr	r3, [r7, #24]
	}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e002      	b.n	80016ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80016f8:	2101      	movs	r1, #1
 80016fa:	69b8      	ldr	r0, [r7, #24]
 80016fc:	f7ff ff48 	bl	8001590 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08e      	sub	sp, #56	; 0x38
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001716:	2300      	movs	r3, #0
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800171e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001720:	2b00      	cmp	r3, #0
 8001722:	d109      	bne.n	8001738 <xQueueGenericSend+0x30>
 8001724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001728:	f383 8811 	msr	BASEPRI, r3
 800172c:	f3bf 8f6f 	isb	sy
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
 8001736:	e7fe      	b.n	8001736 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <xQueueGenericSend+0x3e>
 800173e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <xQueueGenericSend+0x42>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <xQueueGenericSend+0x44>
 800174a:	2300      	movs	r3, #0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <xQueueGenericSend+0x5c>
 8001750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001754:	f383 8811 	msr	BASEPRI, r3
 8001758:	f3bf 8f6f 	isb	sy
 800175c:	f3bf 8f4f 	dsb	sy
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	e7fe      	b.n	8001762 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d103      	bne.n	8001772 <xQueueGenericSend+0x6a>
 800176a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <xQueueGenericSend+0x6e>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <xQueueGenericSend+0x70>
 8001776:	2300      	movs	r3, #0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d109      	bne.n	8001790 <xQueueGenericSend+0x88>
 800177c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001780:	f383 8811 	msr	BASEPRI, r3
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	623b      	str	r3, [r7, #32]
 800178e:	e7fe      	b.n	800178e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001790:	f001 f98c 	bl	8002aac <xTaskGetSchedulerState>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <xQueueGenericSend+0x98>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <xQueueGenericSend+0x9c>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <xQueueGenericSend+0x9e>
 80017a4:	2300      	movs	r3, #0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <xQueueGenericSend+0xb6>
 80017aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ae:	f383 8811 	msr	BASEPRI, r3
 80017b2:	f3bf 8f6f 	isb	sy
 80017b6:	f3bf 8f4f 	dsb	sy
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	e7fe      	b.n	80017bc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80017be:	f7ff fcfb 	bl	80011b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d302      	bcc.n	80017d4 <xQueueGenericSend+0xcc>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d129      	bne.n	8001828 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	68b9      	ldr	r1, [r7, #8]
 80017d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017da:	f000 fa03 	bl	8001be4 <prvCopyDataToQueue>
 80017de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d010      	beq.n	800180a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ea:	3324      	adds	r3, #36	; 0x24
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 ffc3 	bl	8002778 <xTaskRemoveFromEventList>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <xQueueGenericSend+0x1f0>)
 80017fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	f3bf 8f4f 	dsb	sy
 8001804:	f3bf 8f6f 	isb	sy
 8001808:	e00a      	b.n	8001820 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <xQueueGenericSend+0x1f0>)
 8001812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001820:	f7ff fcf8 	bl	8001214 <vPortExitCritical>
				return pdPASS;
 8001824:	2301      	movs	r3, #1
 8001826:	e063      	b.n	80018f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d103      	bne.n	8001836 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800182e:	f7ff fcf1 	bl	8001214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001832:	2300      	movs	r3, #0
 8001834:	e05c      	b.n	80018f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fffb 	bl	800283c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001846:	2301      	movs	r3, #1
 8001848:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800184a:	f7ff fce3 	bl	8001214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800184e:	f000 fd55 	bl	80022fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001852:	f7ff fcb1 	bl	80011b8 <vPortEnterCritical>
 8001856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800185c:	b25b      	sxtb	r3, r3
 800185e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001862:	d103      	bne.n	800186c <xQueueGenericSend+0x164>
 8001864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800186c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001872:	b25b      	sxtb	r3, r3
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d103      	bne.n	8001882 <xQueueGenericSend+0x17a>
 800187a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001882:	f7ff fcc7 	bl	8001214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001886:	1d3a      	adds	r2, r7, #4
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f000 ffea 	bl	8002868 <xTaskCheckForTimeOut>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d124      	bne.n	80018e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800189a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800189c:	f000 fa9a 	bl	8001dd4 <prvIsQueueFull>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d018      	beq.n	80018d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80018a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a8:	3310      	adds	r3, #16
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 ff14 	bl	80026dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80018b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018b6:	f000 fa25 	bl	8001d04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80018ba:	f000 fd2d 	bl	8002318 <xTaskResumeAll>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f47f af7c 	bne.w	80017be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <xQueueGenericSend+0x1f0>)
 80018c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	f3bf 8f6f 	isb	sy
 80018d6:	e772      	b.n	80017be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80018d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018da:	f000 fa13 	bl	8001d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80018de:	f000 fd1b 	bl	8002318 <xTaskResumeAll>
 80018e2:	e76c      	b.n	80017be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80018e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018e6:	f000 fa0d 	bl	8001d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80018ea:	f000 fd15 	bl	8002318 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80018ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3738      	adds	r7, #56	; 0x38
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	e000ed04 	.word	0xe000ed04

080018fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b090      	sub	sp, #64	; 0x40
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800190e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <xQueueGenericSendFromISR+0x2c>
 8001914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001918:	f383 8811 	msr	BASEPRI, r3
 800191c:	f3bf 8f6f 	isb	sy
 8001920:	f3bf 8f4f 	dsb	sy
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
 8001926:	e7fe      	b.n	8001926 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <xQueueGenericSendFromISR+0x3a>
 800192e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <xQueueGenericSendFromISR+0x3e>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <xQueueGenericSendFromISR+0x40>
 800193a:	2300      	movs	r3, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <xQueueGenericSendFromISR+0x58>
 8001940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001944:	f383 8811 	msr	BASEPRI, r3
 8001948:	f3bf 8f6f 	isb	sy
 800194c:	f3bf 8f4f 	dsb	sy
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	e7fe      	b.n	8001952 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d103      	bne.n	8001962 <xQueueGenericSendFromISR+0x66>
 800195a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <xQueueGenericSendFromISR+0x6a>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <xQueueGenericSendFromISR+0x6c>
 8001966:	2300      	movs	r3, #0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <xQueueGenericSendFromISR+0x84>
 800196c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001970:	f383 8811 	msr	BASEPRI, r3
 8001974:	f3bf 8f6f 	isb	sy
 8001978:	f3bf 8f4f 	dsb	sy
 800197c:	623b      	str	r3, [r7, #32]
 800197e:	e7fe      	b.n	800197e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001980:	f7ff fccc 	bl	800131c <vPortValidateInterruptPriority>
	__asm volatile
 8001984:	f3ef 8211 	mrs	r2, BASEPRI
 8001988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	61fa      	str	r2, [r7, #28]
 800199a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800199c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80019a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d302      	bcc.n	80019b2 <xQueueGenericSendFromISR+0xb6>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d12f      	bne.n	8001a12 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80019b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80019bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019c8:	f000 f90c 	bl	8001be4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80019cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d112      	bne.n	80019fc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d016      	beq.n	8001a0c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e0:	3324      	adds	r3, #36	; 0x24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fec8 	bl	8002778 <xTaskRemoveFromEventList>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00e      	beq.n	8001a0c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80019fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a00:	3301      	adds	r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	b25a      	sxtb	r2, r3
 8001a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001a10:	e001      	b.n	8001a16 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a18:	617b      	str	r3, [r7, #20]
	__asm volatile
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3740      	adds	r7, #64	; 0x40
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	; 0x30
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <xQueueReceive+0x2e>
	__asm volatile
 8001a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4a:	f383 8811 	msr	BASEPRI, r3
 8001a4e:	f3bf 8f6f 	isb	sy
 8001a52:	f3bf 8f4f 	dsb	sy
 8001a56:	623b      	str	r3, [r7, #32]
 8001a58:	e7fe      	b.n	8001a58 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d103      	bne.n	8001a68 <xQueueReceive+0x3c>
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <xQueueReceive+0x40>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <xQueueReceive+0x42>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <xQueueReceive+0x5a>
 8001a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a76:	f383 8811 	msr	BASEPRI, r3
 8001a7a:	f3bf 8f6f 	isb	sy
 8001a7e:	f3bf 8f4f 	dsb	sy
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	e7fe      	b.n	8001a84 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a86:	f001 f811 	bl	8002aac <xTaskGetSchedulerState>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <xQueueReceive+0x6a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <xQueueReceive+0x6e>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <xQueueReceive+0x70>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <xQueueReceive+0x88>
 8001aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa4:	f383 8811 	msr	BASEPRI, r3
 8001aa8:	f3bf 8f6f 	isb	sy
 8001aac:	f3bf 8f4f 	dsb	sy
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	e7fe      	b.n	8001ab2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ab4:	f7ff fb80 	bl	80011b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01f      	beq.n	8001b04 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ac8:	f000 f8f6 	bl	8001cb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	1e5a      	subs	r2, r3, #1
 8001ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00f      	beq.n	8001afc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	3310      	adds	r3, #16
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fe49 	bl	8002778 <xTaskRemoveFromEventList>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001aec:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <xQueueReceive+0x1b4>)
 8001aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001afc:	f7ff fb8a 	bl	8001214 <vPortExitCritical>
				return pdPASS;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e069      	b.n	8001bd8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001b0a:	f7ff fb83 	bl	8001214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e062      	b.n	8001bd8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fe8d 	bl	800283c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001b26:	f7ff fb75 	bl	8001214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001b2a:	f000 fbe7 	bl	80022fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b2e:	f7ff fb43 	bl	80011b8 <vPortEnterCritical>
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d103      	bne.n	8001b48 <xQueueReceive+0x11c>
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d103      	bne.n	8001b5e <xQueueReceive+0x132>
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b5e:	f7ff fb59 	bl	8001214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b62:	1d3a      	adds	r2, r7, #4
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fe7c 	bl	8002868 <xTaskCheckForTimeOut>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d123      	bne.n	8001bbe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b78:	f000 f916 	bl	8001da8 <prvIsQueueEmpty>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d017      	beq.n	8001bb2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	3324      	adds	r3, #36	; 0x24
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fda6 	bl	80026dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b92:	f000 f8b7 	bl	8001d04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b96:	f000 fbbf 	bl	8002318 <xTaskResumeAll>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d189      	bne.n	8001ab4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <xQueueReceive+0x1b4>)
 8001ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	f3bf 8f6f 	isb	sy
 8001bb0:	e780      	b.n	8001ab4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bb4:	f000 f8a6 	bl	8001d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001bb8:	f000 fbae 	bl	8002318 <xTaskResumeAll>
 8001bbc:	e77a      	b.n	8001ab4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bc0:	f000 f8a0 	bl	8001d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001bc4:	f000 fba8 	bl	8002318 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bca:	f000 f8ed 	bl	8001da8 <prvIsQueueEmpty>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f43f af6f 	beq.w	8001ab4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001bd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3730      	adds	r7, #48	; 0x30
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	e000ed04 	.word	0xe000ed04

08001be4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d14d      	bne.n	8001ca6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 ff6a 	bl	8002ae8 <xTaskPriorityDisinherit>
 8001c14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	e043      	b.n	8001ca6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d119      	bne.n	8001c58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6858      	ldr	r0, [r3, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	f005 f852 	bl	8006cd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	441a      	add	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d32b      	bcc.n	8001ca6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	e026      	b.n	8001ca6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	68d8      	ldr	r0, [r3, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	461a      	mov	r2, r3
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	f005 f838 	bl	8006cd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	425b      	negs	r3, r3
 8001c72:	441a      	add	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	425b      	negs	r3, r3
 8001c8e:	441a      	add	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d105      	bne.n	8001ca6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001cae:	697b      	ldr	r3, [r7, #20]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d018      	beq.n	8001cfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	441a      	add	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d303      	bcc.n	8001cec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68d9      	ldr	r1, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	6838      	ldr	r0, [r7, #0]
 8001cf8:	f004 ffee 	bl	8006cd8 <memcpy>
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001d0c:	f7ff fa54 	bl	80011b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d18:	e011      	b.n	8001d3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d012      	beq.n	8001d48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3324      	adds	r3, #36	; 0x24
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fd26 	bl	8002778 <xTaskRemoveFromEventList>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001d32:	f000 fdf9 	bl	8002928 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dce9      	bgt.n	8001d1a <prvUnlockQueue+0x16>
 8001d46:	e000      	b.n	8001d4a <prvUnlockQueue+0x46>
					break;
 8001d48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	22ff      	movs	r2, #255	; 0xff
 8001d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001d52:	f7ff fa5f 	bl	8001214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001d56:	f7ff fa2f 	bl	80011b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d62:	e011      	b.n	8001d88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d012      	beq.n	8001d92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3310      	adds	r3, #16
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fd01 	bl	8002778 <xTaskRemoveFromEventList>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001d7c:	f000 fdd4 	bl	8002928 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001d80:	7bbb      	ldrb	r3, [r7, #14]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	dce9      	bgt.n	8001d64 <prvUnlockQueue+0x60>
 8001d90:	e000      	b.n	8001d94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001d92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	22ff      	movs	r2, #255	; 0xff
 8001d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001d9c:	f7ff fa3a 	bl	8001214 <vPortExitCritical>
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001db0:	f7ff fa02 	bl	80011b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e001      	b.n	8001dc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001dc6:	f7ff fa25 	bl	8001214 <vPortExitCritical>

	return xReturn;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001ddc:	f7ff f9ec 	bl	80011b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d102      	bne.n	8001df2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001dec:	2301      	movs	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e001      	b.n	8001df6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001df6:	f7ff fa0d 	bl	8001214 <vPortExitCritical>

	return xReturn;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001e14:	f7ff f9d0 	bl	80011b8 <vPortEnterCritical>
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d103      	bne.n	8001e2e <vQueueWaitForMessageRestricted+0x2a>
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3a:	d103      	bne.n	8001e44 <vQueueWaitForMessageRestricted+0x40>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e44:	f7ff f9e6 	bl	8001214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d106      	bne.n	8001e5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3324      	adds	r3, #36	; 0x24
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fc63 	bl	8002724 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff50 	bl	8001d04 <prvUnlockQueue>
	}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af04      	add	r7, sp, #16
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fa87 	bl	8001394 <pvPortMalloc>
 8001e86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00e      	beq.n	8001eac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001e8e:	2050      	movs	r0, #80	; 0x50
 8001e90:	f7ff fa80 	bl	8001394 <pvPortMalloc>
 8001e94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea2:	e005      	b.n	8001eb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001ea4:	6978      	ldr	r0, [r7, #20]
 8001ea6:	f7ff fb07 	bl	80014b8 <vPortFree>
 8001eaa:	e001      	b.n	8001eb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d013      	beq.n	8001ede <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9303      	str	r3, [sp, #12]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f80e 	bl	8001eee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ed2:	69f8      	ldr	r0, [r7, #28]
 8001ed4:	f000 f89a 	bl	800200c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e002      	b.n	8001ee4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
	}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b088      	sub	sp, #32
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	461a      	mov	r2, r3
 8001f06:	21a5      	movs	r1, #165	; 0xa5
 8001f08:	f004 fef1 	bl	8006cee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f16:	3b01      	subs	r3, #1
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f023 0307 	bic.w	r3, r3, #7
 8001f24:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <prvInitialiseNewTask+0x56>
 8001f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f34:	f383 8811 	msr	BASEPRI, r3
 8001f38:	f3bf 8f6f 	isb	sy
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e7fe      	b.n	8001f42 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01f      	beq.n	8001f8a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e012      	b.n	8001f76 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	7819      	ldrb	r1, [r3, #0]
 8001f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3334      	adds	r3, #52	; 0x34
 8001f60:	460a      	mov	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3301      	adds	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	d9e9      	bls.n	8001f50 <prvInitialiseNewTask+0x62>
 8001f7c:	e000      	b.n	8001f80 <prvInitialiseNewTask+0x92>
			{
				break;
 8001f7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001f88:	e003      	b.n	8001f92 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d901      	bls.n	8001f9c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe ff83 	bl	8000ebe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	3318      	adds	r3, #24
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe ff7e 	bl	8000ebe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fca:	f1c3 0205 	rsb	r2, r3, #5
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	2200      	movs	r2, #0
 8001fdc:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	68f9      	ldr	r1, [r7, #12]
 8001fea:	69b8      	ldr	r0, [r7, #24]
 8001fec:	f7fe fff8 	bl	8000fe0 <pxPortInitialiseStack>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002002:	bf00      	nop
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002014:	f7ff f8d0 	bl	80011b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <prvAddNewTaskToReadyList+0xb8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <prvAddNewTaskToReadyList+0xb8>)
 8002020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800202a:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <prvAddNewTaskToReadyList+0xb8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d110      	bne.n	800205a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002038:	f000 fc9c 	bl	8002974 <prvInitialiseTaskLists>
 800203c:	e00d      	b.n	800205a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <prvAddNewTaskToReadyList+0xc0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	429a      	cmp	r2, r3
 8002052:	d802      	bhi.n	800205a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <prvAddNewTaskToReadyList+0xc4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <prvAddNewTaskToReadyList+0xc4>)
 8002062:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	2201      	movs	r2, #1
 800206a:	409a      	lsls	r2, r3
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <prvAddNewTaskToReadyList+0xc8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <prvAddNewTaskToReadyList+0xc8>)
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <prvAddNewTaskToReadyList+0xcc>)
 8002084:	441a      	add	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f7fe ff22 	bl	8000ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002092:	f7ff f8bf 	bl	8001214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <prvAddNewTaskToReadyList+0xc0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00e      	beq.n	80020bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <prvAddNewTaskToReadyList+0xbc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <prvAddNewTaskToReadyList+0xd0>)
 80020ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20001d94 	.word	0x20001d94
 80020c8:	20001cbc 	.word	0x20001cbc
 80020cc:	20001da0 	.word	0x20001da0
 80020d0:	20001db0 	.word	0x20001db0
 80020d4:	20001d9c 	.word	0x20001d9c
 80020d8:	20001cc0 	.word	0x20001cc0
 80020dc:	e000ed04 	.word	0xe000ed04

080020e0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80020e8:	f7ff f866 	bl	80011b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <vTaskDelete+0x18>
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <vTaskDelete+0xf4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e000      	b.n	80020fa <vTaskDelete+0x1a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3304      	adds	r3, #4
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe ff43 	bl	8000f8c <uxListRemove>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d115      	bne.n	8002138 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002110:	4931      	ldr	r1, [pc, #196]	; (80021d8 <vTaskDelete+0xf8>)
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <vTaskDelete+0x58>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	2201      	movs	r2, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43da      	mvns	r2, r3
 800212e:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <vTaskDelete+0xfc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4013      	ands	r3, r2
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <vTaskDelete+0xfc>)
 8002136:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3318      	adds	r3, #24
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe ff21 	bl	8000f8c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800214a:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <vTaskDelete+0x100>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <vTaskDelete+0x100>)
 8002152:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <vTaskDelete+0xf4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	429a      	cmp	r2, r3
 800215c:	d10b      	bne.n	8002176 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3304      	adds	r3, #4
 8002162:	4619      	mov	r1, r3
 8002164:	481f      	ldr	r0, [pc, #124]	; (80021e4 <vTaskDelete+0x104>)
 8002166:	f7fe feb6 	bl	8000ed6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <vTaskDelete+0x108>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <vTaskDelete+0x108>)
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e009      	b.n	800218a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <vTaskDelete+0x10c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3b01      	subs	r3, #1
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <vTaskDelete+0x10c>)
 800217e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fc63 	bl	8002a4c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002186:	f000 fc71 	bl	8002a6c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800218a:	f7ff f843 	bl	8001214 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <vTaskDelete+0x110>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01a      	beq.n	80021cc <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <vTaskDelete+0xf4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d115      	bne.n	80021cc <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <vTaskDelete+0x114>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <vTaskDelete+0xdc>
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	e7fe      	b.n	80021ba <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <vTaskDelete+0x118>)
 80021be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20001cbc 	.word	0x20001cbc
 80021d8:	20001cc0 	.word	0x20001cc0
 80021dc:	20001d9c 	.word	0x20001d9c
 80021e0:	20001db0 	.word	0x20001db0
 80021e4:	20001d68 	.word	0x20001d68
 80021e8:	20001d7c 	.word	0x20001d7c
 80021ec:	20001d94 	.word	0x20001d94
 80021f0:	20001da0 	.word	0x20001da0
 80021f4:	20001dbc 	.word	0x20001dbc
 80021f8:	e000ed04 	.word	0xe000ed04

080021fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <vTaskDelay+0x60>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <vTaskDelay+0x2e>
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	e7fe      	b.n	8002228 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800222a:	f000 f867 	bl	80022fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800222e:	2100      	movs	r1, #0
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fcdd 	bl	8002bf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002236:	f000 f86f 	bl	8002318 <xTaskResumeAll>
 800223a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <vTaskDelay+0x64>)
 8002244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20001dbc 	.word	0x20001dbc
 8002260:	e000ed04 	.word	0xe000ed04

08002264 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <vTaskStartScheduler+0x80>)
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	2300      	movs	r3, #0
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2300      	movs	r3, #0
 8002274:	2246      	movs	r2, #70	; 0x46
 8002276:	491c      	ldr	r1, [pc, #112]	; (80022e8 <vTaskStartScheduler+0x84>)
 8002278:	481c      	ldr	r0, [pc, #112]	; (80022ec <vTaskStartScheduler+0x88>)
 800227a:	f7ff fdf7 	bl	8001e6c <xTaskCreate>
 800227e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002286:	f000 fd19 	bl	8002cbc <xTimerCreateTimerTask>
 800228a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d115      	bne.n	80022be <vTaskStartScheduler+0x5a>
 8002292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <vTaskStartScheduler+0x8c>)
 80022a6:	f04f 32ff 	mov.w	r2, #4294967295
 80022aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <vTaskStartScheduler+0x90>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <vTaskStartScheduler+0x94>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80022b8:	f7fe ff0e 	bl	80010d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80022bc:	e00d      	b.n	80022da <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d109      	bne.n	80022da <vTaskStartScheduler+0x76>
 80022c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	e7fe      	b.n	80022d8 <vTaskStartScheduler+0x74>
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20001db8 	.word	0x20001db8
 80022e8:	08007258 	.word	0x08007258
 80022ec:	08002941 	.word	0x08002941
 80022f0:	20001db4 	.word	0x20001db4
 80022f4:	20001da0 	.word	0x20001da0
 80022f8:	20001d98 	.word	0x20001d98

080022fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <vTaskSuspendAll+0x18>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	4a03      	ldr	r2, [pc, #12]	; (8002314 <vTaskSuspendAll+0x18>)
 8002308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20001dbc 	.word	0x20001dbc

08002318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <xTaskResumeAll+0x114>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <xTaskResumeAll+0x2a>
 800232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002332:	f383 8811 	msr	BASEPRI, r3
 8002336:	f3bf 8f6f 	isb	sy
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	e7fe      	b.n	8002340 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002342:	f7fe ff39 	bl	80011b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002346:	4b39      	ldr	r3, [pc, #228]	; (800242c <xTaskResumeAll+0x114>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3b01      	subs	r3, #1
 800234c:	4a37      	ldr	r2, [pc, #220]	; (800242c <xTaskResumeAll+0x114>)
 800234e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <xTaskResumeAll+0x114>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d161      	bne.n	800241c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002358:	4b35      	ldr	r3, [pc, #212]	; (8002430 <xTaskResumeAll+0x118>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05d      	beq.n	800241c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002360:	e02e      	b.n	80023c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002362:	4b34      	ldr	r3, [pc, #208]	; (8002434 <xTaskResumeAll+0x11c>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3318      	adds	r3, #24
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fe0c 	bl	8000f8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3304      	adds	r3, #4
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fe07 	bl	8000f8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	2201      	movs	r2, #1
 8002384:	409a      	lsls	r2, r3
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <xTaskResumeAll+0x120>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <xTaskResumeAll+0x120>)
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <xTaskResumeAll+0x124>)
 800239e:	441a      	add	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f7fe fd95 	bl	8000ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <xTaskResumeAll+0x128>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <xTaskResumeAll+0x12c>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <xTaskResumeAll+0x11c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1cc      	bne.n	8002362 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80023ce:	f000 fb4d 	bl	8002a6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <xTaskResumeAll+0x130>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d010      	beq.n	8002400 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80023de:	f000 f845 	bl	800246c <xTaskIncrementTick>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80023e8:	4b16      	ldr	r3, [pc, #88]	; (8002444 <xTaskResumeAll+0x12c>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f1      	bne.n	80023de <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <xTaskResumeAll+0x130>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <xTaskResumeAll+0x12c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002408:	2301      	movs	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <xTaskResumeAll+0x134>)
 800240e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800241c:	f7fe fefa 	bl	8001214 <vPortExitCritical>

	return xAlreadyYielded;
 8002420:	68bb      	ldr	r3, [r7, #8]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20001dbc 	.word	0x20001dbc
 8002430:	20001d94 	.word	0x20001d94
 8002434:	20001d54 	.word	0x20001d54
 8002438:	20001d9c 	.word	0x20001d9c
 800243c:	20001cc0 	.word	0x20001cc0
 8002440:	20001cbc 	.word	0x20001cbc
 8002444:	20001da8 	.word	0x20001da8
 8002448:	20001da4 	.word	0x20001da4
 800244c:	e000ed04 	.word	0xe000ed04

08002450 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <xTaskGetTickCount+0x18>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800245c:	687b      	ldr	r3, [r7, #4]
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20001d98 	.word	0x20001d98

0800246c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002476:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <xTaskIncrementTick+0x144>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 808d 	bne.w	800259a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <xTaskIncrementTick+0x148>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002488:	4a4a      	ldr	r2, [pc, #296]	; (80025b4 <xTaskIncrementTick+0x148>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11f      	bne.n	80024d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002494:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <xTaskIncrementTick+0x14c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <xTaskIncrementTick+0x46>
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	e7fe      	b.n	80024b0 <xTaskIncrementTick+0x44>
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <xTaskIncrementTick+0x14c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <xTaskIncrementTick+0x150>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a3e      	ldr	r2, [pc, #248]	; (80025b8 <xTaskIncrementTick+0x14c>)
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4a3e      	ldr	r2, [pc, #248]	; (80025bc <xTaskIncrementTick+0x150>)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <xTaskIncrementTick+0x154>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	4a3c      	ldr	r2, [pc, #240]	; (80025c0 <xTaskIncrementTick+0x154>)
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	f000 facc 	bl	8002a6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <xTaskIncrementTick+0x158>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d348      	bcc.n	8002570 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <xTaskIncrementTick+0x14c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d104      	bne.n	80024f2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <xTaskIncrementTick+0x158>)
 80024ea:	f04f 32ff 	mov.w	r2, #4294967295
 80024ee:	601a      	str	r2, [r3, #0]
					break;
 80024f0:	e03e      	b.n	8002570 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024f2:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <xTaskIncrementTick+0x14c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	d203      	bcs.n	8002512 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800250a:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <xTaskIncrementTick+0x158>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002510:	e02e      	b.n	8002570 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3304      	adds	r3, #4
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fd38 	bl	8000f8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3318      	adds	r3, #24
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fd2f 	bl	8000f8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	2201      	movs	r2, #1
 8002534:	409a      	lsls	r2, r3
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <xTaskIncrementTick+0x15c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <xTaskIncrementTick+0x15c>)
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <xTaskIncrementTick+0x160>)
 800254e:	441a      	add	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f7fe fcbd 	bl	8000ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <xTaskIncrementTick+0x164>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	429a      	cmp	r2, r3
 8002568:	d3b9      	bcc.n	80024de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800256a:	2301      	movs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800256e:	e7b6      	b.n	80024de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <xTaskIncrementTick+0x164>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	4915      	ldr	r1, [pc, #84]	; (80025cc <xTaskIncrementTick+0x160>)
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d901      	bls.n	800258c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8002588:	2301      	movs	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <xTaskIncrementTick+0x168>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002594:	2301      	movs	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e004      	b.n	80025a4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <xTaskIncrementTick+0x16c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3301      	adds	r3, #1
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <xTaskIncrementTick+0x16c>)
 80025a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80025a4:	697b      	ldr	r3, [r7, #20]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20001dbc 	.word	0x20001dbc
 80025b4:	20001d98 	.word	0x20001d98
 80025b8:	20001d4c 	.word	0x20001d4c
 80025bc:	20001d50 	.word	0x20001d50
 80025c0:	20001dac 	.word	0x20001dac
 80025c4:	20001db4 	.word	0x20001db4
 80025c8:	20001d9c 	.word	0x20001d9c
 80025cc:	20001cc0 	.word	0x20001cc0
 80025d0:	20001cbc 	.word	0x20001cbc
 80025d4:	20001da8 	.word	0x20001da8
 80025d8:	20001da4 	.word	0x20001da4

080025dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025e2:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <vTaskSwitchContext+0xec>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80025ea:	4b38      	ldr	r3, [pc, #224]	; (80026cc <vTaskSwitchContext+0xf0>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025f0:	e065      	b.n	80026be <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <vTaskSwitchContext+0xf0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80025f8:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <vTaskSwitchContext+0xf4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	429a      	cmp	r2, r3
 800260e:	d111      	bne.n	8002634 <vTaskSwitchContext+0x58>
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	3304      	adds	r3, #4
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	429a      	cmp	r2, r3
 800261a:	d10b      	bne.n	8002634 <vTaskSwitchContext+0x58>
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3308      	adds	r3, #8
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	429a      	cmp	r2, r3
 8002626:	d105      	bne.n	8002634 <vTaskSwitchContext+0x58>
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	330c      	adds	r3, #12
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	429a      	cmp	r2, r3
 8002632:	d008      	beq.n	8002646 <vTaskSwitchContext+0x6a>
 8002634:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <vTaskSwitchContext+0xf4>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <vTaskSwitchContext+0xf4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3334      	adds	r3, #52	; 0x34
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f002 fc62 	bl	8004f0a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002646:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <vTaskSwitchContext+0xf8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f1c3 031f 	rsb	r3, r3, #31
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	491e      	ldr	r1, [pc, #120]	; (80026d8 <vTaskSwitchContext+0xfc>)
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <vTaskSwitchContext+0xa8>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	e7fe      	b.n	8002682 <vTaskSwitchContext+0xa6>
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <vTaskSwitchContext+0xfc>)
 8002690:	4413      	add	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	3308      	adds	r3, #8
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d104      	bne.n	80026b4 <vTaskSwitchContext+0xd8>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <vTaskSwitchContext+0xf4>)
 80026bc:	6013      	str	r3, [r2, #0]
}
 80026be:	bf00      	nop
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20001dbc 	.word	0x20001dbc
 80026cc:	20001da8 	.word	0x20001da8
 80026d0:	20001cbc 	.word	0x20001cbc
 80026d4:	20001d9c 	.word	0x20001d9c
 80026d8:	20001cc0 	.word	0x20001cc0

080026dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <vTaskPlaceOnEventList+0x24>
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	e7fe      	b.n	80026fe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <vTaskPlaceOnEventList+0x44>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3318      	adds	r3, #24
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7fe fc07 	bl	8000f1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800270e:	2101      	movs	r1, #1
 8002710:	6838      	ldr	r0, [r7, #0]
 8002712:	f000 fa6d 	bl	8002bf0 <prvAddCurrentTaskToDelayedList>
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20001cbc 	.word	0x20001cbc

08002724 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <vTaskPlaceOnEventListRestricted+0x26>
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	e7fe      	b.n	8002748 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <vTaskPlaceOnEventListRestricted+0x50>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3318      	adds	r3, #24
 8002750:	4619      	mov	r1, r3
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7fe fbbf 	bl	8000ed6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	68b8      	ldr	r0, [r7, #8]
 8002768:	f000 fa42 	bl	8002bf0 <prvAddCurrentTaskToDelayedList>
	}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20001cbc 	.word	0x20001cbc

08002778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <xTaskRemoveFromEventList+0x2a>
 800278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e7fe      	b.n	80027a0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	3318      	adds	r3, #24
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fbf0 	bl	8000f8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ac:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <xTaskRemoveFromEventList+0xac>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d11c      	bne.n	80027ee <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	3304      	adds	r3, #4
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fbe7 	bl	8000f8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	2201      	movs	r2, #1
 80027c4:	409a      	lsls	r2, r3
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <xTaskRemoveFromEventList+0xb0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	4a16      	ldr	r2, [pc, #88]	; (8002828 <xTaskRemoveFromEventList+0xb0>)
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4a13      	ldr	r2, [pc, #76]	; (800282c <xTaskRemoveFromEventList+0xb4>)
 80027de:	441a      	add	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f7fe fb75 	bl	8000ed6 <vListInsertEnd>
 80027ec:	e005      	b.n	80027fa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	3318      	adds	r3, #24
 80027f2:	4619      	mov	r1, r3
 80027f4:	480e      	ldr	r0, [pc, #56]	; (8002830 <xTaskRemoveFromEventList+0xb8>)
 80027f6:	f7fe fb6e 	bl	8000ed6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <xTaskRemoveFromEventList+0xbc>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	429a      	cmp	r2, r3
 8002806:	d905      	bls.n	8002814 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002808:	2301      	movs	r3, #1
 800280a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <xTaskRemoveFromEventList+0xc0>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e001      	b.n	8002818 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002818:	697b      	ldr	r3, [r7, #20]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20001dbc 	.word	0x20001dbc
 8002828:	20001d9c 	.word	0x20001d9c
 800282c:	20001cc0 	.word	0x20001cc0
 8002830:	20001d54 	.word	0x20001d54
 8002834:	20001cbc 	.word	0x20001cbc
 8002838:	20001da8 	.word	0x20001da8

0800283c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <vTaskInternalSetTimeOutState+0x24>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <vTaskInternalSetTimeOutState+0x28>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	605a      	str	r2, [r3, #4]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20001dac 	.word	0x20001dac
 8002864:	20001d98 	.word	0x20001d98

08002868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <xTaskCheckForTimeOut+0x24>
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	e7fe      	b.n	800288a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <xTaskCheckForTimeOut+0x3e>
 8002892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	e7fe      	b.n	80028a4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80028a6:	f7fe fc87 	bl	80011b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <xTaskCheckForTimeOut+0xb8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c2:	d102      	bne.n	80028ca <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	e023      	b.n	8002912 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <xTaskCheckForTimeOut+0xbc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d007      	beq.n	80028e6 <xTaskCheckForTimeOut+0x7e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d802      	bhi.n	80028e6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	e015      	b.n	8002912 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d90b      	bls.n	8002908 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	1ad2      	subs	r2, r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ff9d 	bl	800283c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e004      	b.n	8002912 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800290e:	2301      	movs	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002912:	f7fe fc7f 	bl	8001214 <vPortExitCritical>

	return xReturn;
 8002916:	69fb      	ldr	r3, [r7, #28]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20001d98 	.word	0x20001d98
 8002924:	20001dac 	.word	0x20001dac

08002928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <vTaskMissedYield+0x14>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20001da8 	.word	0x20001da8

08002940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002948:	f000 f854 	bl	80029f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <prvIdleTask+0x2c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d907      	bls.n	8002964 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <prvIdleTask+0x30>)
 8002956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002964:	f002 fad7 	bl	8004f16 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002968:	e7ee      	b.n	8002948 <prvIdleTask+0x8>
 800296a:	bf00      	nop
 800296c:	20001cc0 	.word	0x20001cc0
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	e00c      	b.n	800299a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <prvInitialiseTaskLists+0x60>)
 800298c:	4413      	add	r3, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fa76 	bl	8000e80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3301      	adds	r3, #1
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d9ef      	bls.n	8002980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80029a0:	480d      	ldr	r0, [pc, #52]	; (80029d8 <prvInitialiseTaskLists+0x64>)
 80029a2:	f7fe fa6d 	bl	8000e80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80029a6:	480d      	ldr	r0, [pc, #52]	; (80029dc <prvInitialiseTaskLists+0x68>)
 80029a8:	f7fe fa6a 	bl	8000e80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <prvInitialiseTaskLists+0x6c>)
 80029ae:	f7fe fa67 	bl	8000e80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80029b2:	480c      	ldr	r0, [pc, #48]	; (80029e4 <prvInitialiseTaskLists+0x70>)
 80029b4:	f7fe fa64 	bl	8000e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80029b8:	480b      	ldr	r0, [pc, #44]	; (80029e8 <prvInitialiseTaskLists+0x74>)
 80029ba:	f7fe fa61 	bl	8000e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <prvInitialiseTaskLists+0x78>)
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <prvInitialiseTaskLists+0x64>)
 80029c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <prvInitialiseTaskLists+0x7c>)
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <prvInitialiseTaskLists+0x68>)
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20001cc0 	.word	0x20001cc0
 80029d8:	20001d24 	.word	0x20001d24
 80029dc:	20001d38 	.word	0x20001d38
 80029e0:	20001d54 	.word	0x20001d54
 80029e4:	20001d68 	.word	0x20001d68
 80029e8:	20001d80 	.word	0x20001d80
 80029ec:	20001d4c 	.word	0x20001d4c
 80029f0:	20001d50 	.word	0x20001d50

080029f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029fa:	e019      	b.n	8002a30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80029fc:	f7fe fbdc 	bl	80011b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <prvCheckTasksWaitingTermination+0x4c>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fabd 	bl	8000f8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <prvCheckTasksWaitingTermination+0x50>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <prvCheckTasksWaitingTermination+0x50>)
 8002a1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <prvCheckTasksWaitingTermination+0x54>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <prvCheckTasksWaitingTermination+0x54>)
 8002a24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002a26:	f7fe fbf5 	bl	8001214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f80e 	bl	8002a4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <prvCheckTasksWaitingTermination+0x54>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e1      	bne.n	80029fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20001d68 	.word	0x20001d68
 8002a44:	20001d94 	.word	0x20001d94
 8002a48:	20001d7c 	.word	0x20001d7c

08002a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fd2d 	bl	80014b8 <vPortFree>
			vPortFree( pxTCB );
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fd2a 	bl	80014b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <prvResetNextTaskUnblockTime+0x38>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8002a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002a84:	e008      	b.n	8002a98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <prvResetNextTaskUnblockTime+0x38>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <prvResetNextTaskUnblockTime+0x3c>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20001d4c 	.word	0x20001d4c
 8002aa8:	20001db4 	.word	0x20001db4

08002aac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <xTaskGetSchedulerState+0x34>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002aba:	2301      	movs	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	e008      	b.n	8002ad2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <xTaskGetSchedulerState+0x38>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	e001      	b.n	8002ad2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002ad2:	687b      	ldr	r3, [r7, #4]
	}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20001da0 	.word	0x20001da0
 8002ae4:	20001dbc 	.word	0x20001dbc

08002ae8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d06c      	beq.n	8002bd8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <xTaskPriorityDisinherit+0xfc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d009      	beq.n	8002b1c <xTaskPriorityDisinherit+0x34>
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e7fe      	b.n	8002b1a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <xTaskPriorityDisinherit+0x50>
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	e7fe      	b.n	8002b36 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	1e5a      	subs	r2, r3, #1
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d044      	beq.n	8002bd8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d140      	bne.n	8002bd8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fa16 	bl	8000f8c <uxListRemove>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d115      	bne.n	8002b92 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6a:	491f      	ldr	r1, [pc, #124]	; (8002be8 <xTaskPriorityDisinherit+0x100>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <xTaskPriorityDisinherit+0xaa>
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	2201      	movs	r2, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <xTaskPriorityDisinherit+0x104>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <xTaskPriorityDisinherit+0x104>)
 8002b90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f1c3 0205 	rsb	r2, r3, #5
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	2201      	movs	r2, #1
 8002bac:	409a      	lsls	r2, r3
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <xTaskPriorityDisinherit+0x104>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <xTaskPriorityDisinherit+0x104>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <xTaskPriorityDisinherit+0x100>)
 8002bc6:	441a      	add	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f7fe f981 	bl	8000ed6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002bd8:	697b      	ldr	r3, [r7, #20]
	}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20001cbc 	.word	0x20001cbc
 8002be8:	20001cc0 	.word	0x20001cc0
 8002bec:	20001d9c 	.word	0x20001d9c

08002bf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c00:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3304      	adds	r3, #4
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe f9c0 	bl	8000f8c <uxListRemove>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10b      	bne.n	8002c2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	2201      	movs	r2, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4013      	ands	r3, r2
 8002c26:	4a20      	ldr	r2, [pc, #128]	; (8002ca8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d10a      	bne.n	8002c48 <prvAddCurrentTaskToDelayedList+0x58>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	4619      	mov	r1, r3
 8002c40:	481a      	ldr	r0, [pc, #104]	; (8002cac <prvAddCurrentTaskToDelayedList+0xbc>)
 8002c42:	f7fe f948 	bl	8000ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c46:	e026      	b.n	8002c96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d209      	bcs.n	8002c74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	f7fe f955 	bl	8000f1c <vListInsert>
}
 8002c72:	e010      	b.n	8002c96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f7fe f94b 	bl	8000f1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d202      	bcs.n	8002c96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002c90:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6013      	str	r3, [r2, #0]
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20001d98 	.word	0x20001d98
 8002ca4:	20001cbc 	.word	0x20001cbc
 8002ca8:	20001d9c 	.word	0x20001d9c
 8002cac:	20001d80 	.word	0x20001d80
 8002cb0:	20001d50 	.word	0x20001d50
 8002cb4:	20001d4c 	.word	0x20001d4c
 8002cb8:	20001db4 	.word	0x20001db4

08002cbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002cc6:	f000 facd 	bl	8003264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <xTimerCreateTimerTask+0x50>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <xTimerCreateTimerTask+0x54>)
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2246      	movs	r2, #70	; 0x46
 8002cde:	490d      	ldr	r1, [pc, #52]	; (8002d14 <xTimerCreateTimerTask+0x58>)
 8002ce0:	480d      	ldr	r0, [pc, #52]	; (8002d18 <xTimerCreateTimerTask+0x5c>)
 8002ce2:	f7ff f8c3 	bl	8001e6c <xTaskCreate>
 8002ce6:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <xTimerCreateTimerTask+0x46>
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	e7fe      	b.n	8002d00 <xTimerCreateTimerTask+0x44>
	return xReturn;
 8002d02:	687b      	ldr	r3, [r7, #4]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20001df0 	.word	0x20001df0
 8002d10:	20001df4 	.word	0x20001df4
 8002d14:	08007260 	.word	0x08007260
 8002d18:	08002e4d 	.word	0x08002e4d

08002d1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <xTimerGenericCommand+0x2c>
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	623b      	str	r3, [r7, #32]
 8002d46:	e7fe      	b.n	8002d46 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <xTimerGenericCommand+0x94>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d02a      	beq.n	8002da6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	dc18      	bgt.n	8002d94 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002d62:	f7ff fea3 	bl	8002aac <xTaskGetSchedulerState>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d109      	bne.n	8002d80 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002d6c:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <xTimerGenericCommand+0x94>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	f107 0114 	add.w	r1, r7, #20
 8002d74:	2300      	movs	r3, #0
 8002d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d78:	f7fe fcc6 	bl	8001708 <xQueueGenericSend>
 8002d7c:	6278      	str	r0, [r7, #36]	; 0x24
 8002d7e:	e012      	b.n	8002da6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <xTimerGenericCommand+0x94>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	f107 0114 	add.w	r1, r7, #20
 8002d88:	2300      	movs	r3, #0
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f7fe fcbc 	bl	8001708 <xQueueGenericSend>
 8002d90:	6278      	str	r0, [r7, #36]	; 0x24
 8002d92:	e008      	b.n	8002da6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <xTimerGenericCommand+0x94>)
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	f107 0114 	add.w	r1, r7, #20
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	f7fe fdac 	bl	80018fc <xQueueGenericSendFromISR>
 8002da4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20001df0 	.word	0x20001df0

08002db4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dbe:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <prvProcessExpiredTimer+0x94>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f8dd 	bl	8000f8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d021      	beq.n	8002e24 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	18d1      	adds	r1, r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f000 f8cf 	bl	8002f90 <prvInsertTimerInActiveList>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01e      	beq.n	8002e36 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	2100      	movs	r1, #0
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f7ff ff8a 	bl	8002d1c <xTimerGenericCommand>
 8002e08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d112      	bne.n	8002e36 <prvProcessExpiredTimer+0x82>
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	e7fe      	b.n	8002e22 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	4798      	blx	r3
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20001de8 	.word	0x20001de8

08002e4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002e54:	f107 0308 	add.w	r3, r7, #8
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 f857 	bl	8002f0c <prvGetNextExpireTime>
 8002e5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4619      	mov	r1, r3
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f803 	bl	8002e70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002e6a:	f000 f8d3 	bl	8003014 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002e6e:	e7f1      	b.n	8002e54 <prvTimerTask+0x8>

08002e70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002e7a:	f7ff fa3f 	bl	80022fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f864 	bl	8002f50 <prvSampleTimeNow>
 8002e88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d130      	bne.n	8002ef2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <prvProcessTimerOrBlockTask+0x3c>
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d806      	bhi.n	8002eac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002e9e:	f7ff fa3b 	bl	8002318 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff85 	bl	8002db4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002eaa:	e024      	b.n	8002ef6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <prvProcessTimerOrBlockTask+0x90>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <prvProcessTimerOrBlockTask+0x50>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <prvProcessTimerOrBlockTask+0x52>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <prvProcessTimerOrBlockTask+0x94>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7fe ff97 	bl	8001e04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002ed6:	f7ff fa1f 	bl	8002318 <xTaskResumeAll>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10a      	bne.n	8002ef6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <prvProcessTimerOrBlockTask+0x98>)
 8002ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	f3bf 8f6f 	isb	sy
}
 8002ef0:	e001      	b.n	8002ef6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002ef2:	f7ff fa11 	bl	8002318 <xTaskResumeAll>
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20001dec 	.word	0x20001dec
 8002f04:	20001df0 	.word	0x20001df0
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <prvGetNextExpireTime+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <prvGetNextExpireTime+0x16>
 8002f1e:	2201      	movs	r2, #1
 8002f20:	e000      	b.n	8002f24 <prvGetNextExpireTime+0x18>
 8002f22:	2200      	movs	r2, #0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <prvGetNextExpireTime+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e001      	b.n	8002f40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002f40:	68fb      	ldr	r3, [r7, #12]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	20001de8 	.word	0x20001de8

08002f50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002f58:	f7ff fa7a 	bl	8002450 <xTaskGetTickCount>
 8002f5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <prvSampleTimeNow+0x3c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d205      	bcs.n	8002f74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002f68:	f000 f918 	bl	800319c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e002      	b.n	8002f7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <prvSampleTimeNow+0x3c>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20001df8 	.word	0x20001df8

08002f90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d812      	bhi.n	8002fdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	1ad2      	subs	r2, r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d302      	bcc.n	8002fca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e01b      	b.n	8003002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <prvInsertTimerInActiveList+0x7c>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f7fd ffa1 	bl	8000f1c <vListInsert>
 8002fda:	e012      	b.n	8003002 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d206      	bcs.n	8002ff2 <prvInsertTimerInActiveList+0x62>
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d302      	bcc.n	8002ff2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002fec:	2301      	movs	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e007      	b.n	8003002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <prvInsertTimerInActiveList+0x80>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f7fd ff8d 	bl	8000f1c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003002:	697b      	ldr	r3, [r7, #20]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20001dec 	.word	0x20001dec
 8003010:	20001de8 	.word	0x20001de8

08003014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	; 0x30
 8003018:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800301a:	e0ac      	b.n	8003176 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f2c0 80a9 	blt.w	8003176 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	3304      	adds	r3, #4
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd ffa9 	bl	8000f8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff87 	bl	8002f50 <prvSampleTimeNow>
 8003042:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b09      	cmp	r3, #9
 8003048:	f200 8094 	bhi.w	8003174 <prvProcessReceivedCommands+0x160>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <prvProcessReceivedCommands+0x40>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	0800307d 	.word	0x0800307d
 8003058:	0800307d 	.word	0x0800307d
 800305c:	0800307d 	.word	0x0800307d
 8003060:	080030ef 	.word	0x080030ef
 8003064:	08003103 	.word	0x08003103
 8003068:	0800314b 	.word	0x0800314b
 800306c:	0800307d 	.word	0x0800307d
 8003070:	0800307d 	.word	0x0800307d
 8003074:	080030ef 	.word	0x080030ef
 8003078:	08003103 	.word	0x08003103
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	b2da      	uxtb	r2, r3
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	18d1      	adds	r1, r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800309c:	f7ff ff78 	bl	8002f90 <prvInsertTimerInActiveList>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d067      	beq.n	8003176 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05c      	beq.n	8003176 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	441a      	add	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2300      	movs	r3, #0
 80030ca:	2100      	movs	r1, #0
 80030cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ce:	f7ff fe25 	bl	8002d1c <xTimerGenericCommand>
 80030d2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d14d      	bne.n	8003176 <prvProcessReceivedCommands+0x162>
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	e7fe      	b.n	80030ec <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8003100:	e039      	b.n	8003176 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	b2da      	uxtb	r2, r3
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <prvProcessReceivedCommands+0x122>
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e7fe      	b.n	8003134 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	18d1      	adds	r1, r2, r3
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003144:	f7ff ff24 	bl	8002f90 <prvInsertTimerInActiveList>
					break;
 8003148:	e015      	b.n	8003176 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8003158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800315a:	f7fe f9ad 	bl	80014b8 <vPortFree>
 800315e:	e00a      	b.n	8003176 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	b2da      	uxtb	r2, r3
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003172:	e000      	b.n	8003176 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8003174:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <prvProcessReceivedCommands+0x184>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f107 0108 	add.w	r1, r7, #8
 800317e:	2200      	movs	r2, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fc53 	bl	8001a2c <xQueueReceive>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f af47 	bne.w	800301c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800318e:	bf00      	nop
 8003190:	3728      	adds	r7, #40	; 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20001df0 	.word	0x20001df0

0800319c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80031a2:	e047      	b.n	8003234 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <prvSwitchTimerLists+0xc0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <prvSwitchTimerLists+0xc0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd fee5 	bl	8000f8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	6938      	ldr	r0, [r7, #16]
 80031c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02d      	beq.n	8003234 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d90e      	bls.n	8003208 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80031f6:	4b19      	ldr	r3, [pc, #100]	; (800325c <prvSwitchTimerLists+0xc0>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f7fd fe8b 	bl	8000f1c <vListInsert>
 8003206:	e015      	b.n	8003234 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003208:	2300      	movs	r3, #0
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	2100      	movs	r1, #0
 8003212:	6938      	ldr	r0, [r7, #16]
 8003214:	f7ff fd82 	bl	8002d1c <xTimerGenericCommand>
 8003218:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <prvSwitchTimerLists+0x98>
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	e7fe      	b.n	8003232 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <prvSwitchTimerLists+0xc0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1b2      	bne.n	80031a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <prvSwitchTimerLists+0xc0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <prvSwitchTimerLists+0xc4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <prvSwitchTimerLists+0xc0>)
 800324a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <prvSwitchTimerLists+0xc4>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
}
 8003252:	bf00      	nop
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20001de8 	.word	0x20001de8
 8003260:	20001dec 	.word	0x20001dec

08003264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003268:	f7fd ffa6 	bl	80011b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <prvCheckForValidListAndQueue+0x40>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8003274:	480c      	ldr	r0, [pc, #48]	; (80032a8 <prvCheckForValidListAndQueue+0x44>)
 8003276:	f7fd fe03 	bl	8000e80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800327a:	480c      	ldr	r0, [pc, #48]	; (80032ac <prvCheckForValidListAndQueue+0x48>)
 800327c:	f7fd fe00 	bl	8000e80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <prvCheckForValidListAndQueue+0x4c>)
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <prvCheckForValidListAndQueue+0x44>)
 8003284:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <prvCheckForValidListAndQueue+0x50>)
 8003288:	4a08      	ldr	r2, [pc, #32]	; (80032ac <prvCheckForValidListAndQueue+0x48>)
 800328a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800328c:	2200      	movs	r2, #0
 800328e:	210c      	movs	r1, #12
 8003290:	2005      	movs	r0, #5
 8003292:	f7fe f9e5 	bl	8001660 <xQueueGenericCreate>
 8003296:	4602      	mov	r2, r0
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <prvCheckForValidListAndQueue+0x40>)
 800329a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800329c:	f7fd ffba 	bl	8001214 <vPortExitCritical>
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20001df0 	.word	0x20001df0
 80032a8:	20001dc0 	.word	0x20001dc0
 80032ac:	20001dd4 	.word	0x20001dd4
 80032b0:	20001de8 	.word	0x20001de8
 80032b4:	20001dec 	.word	0x20001dec

080032b8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	230f      	movs	r3, #15
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d03a      	beq.n	800334a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80032d4:	4b27      	ldr	r3, [pc, #156]	; (8003374 <NVIC_Init+0xbc>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f1c3 0304 	rsb	r3, r3, #4
 80032e8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	461a      	mov	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	789b      	ldrb	r3, [r3, #2]
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4013      	ands	r3, r2
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003318:	4a17      	ldr	r2, [pc, #92]	; (8003378 <NVIC_Init+0xc0>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	6979      	ldr	r1, [r7, #20]
 8003320:	b2c9      	uxtb	r1, r1
 8003322:	4413      	add	r3, r2
 8003324:	460a      	mov	r2, r1
 8003326:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800332a:	4a13      	ldr	r2, [pc, #76]	; (8003378 <NVIC_Init+0xc0>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	b2db      	uxtb	r3, r3
 8003334:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2101      	movs	r1, #1
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003344:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003348:	e00f      	b.n	800336a <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800334a:	490b      	ldr	r1, [pc, #44]	; (8003378 <NVIC_Init+0xc0>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	b2db      	uxtb	r3, r3
 8003354:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2201      	movs	r2, #1
 8003360:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003362:	f100 0320 	add.w	r3, r0, #32
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00
 8003378:	e000e100 	.word	0xe000e100

0800337c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	78db      	ldrb	r3, [r3, #3]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	78db      	ldrb	r3, [r3, #3]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	789b      	ldrb	r3, [r3, #2]
 80033b8:	461a      	mov	r2, r3
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d044      	beq.n	8003454 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	e038      	b.n	8003448 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80033d6:	2201      	movs	r2, #1
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d126      	bne.n	8003442 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80033fa:	220f      	movs	r2, #15
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	43db      	mvns	r3, r3
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4013      	ands	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	78db      	ldrb	r3, [r3, #3]
 8003420:	2b28      	cmp	r3, #40	; 0x28
 8003422:	d105      	bne.n	8003430 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8003424:	2201      	movs	r2, #1
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	409a      	lsls	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	615a      	str	r2, [r3, #20]
 800342e:	e008      	b.n	8003442 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	78db      	ldrb	r3, [r3, #3]
 8003434:	2b48      	cmp	r3, #72	; 0x48
 8003436:	d104      	bne.n	8003442 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8003438:	2201      	movs	r2, #1
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	409a      	lsls	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	3301      	adds	r3, #1
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b07      	cmp	r3, #7
 800344c:	d9c3      	bls.n	80033d6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	2bff      	cmp	r3, #255	; 0xff
 800345a:	d946      	bls.n	80034ea <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e03a      	b.n	80034de <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	3308      	adds	r3, #8
 800346c:	2201      	movs	r2, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	429a      	cmp	r2, r3
 8003486:	d127      	bne.n	80034d8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800348e:	220f      	movs	r2, #15
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	43db      	mvns	r3, r3
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4013      	ands	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	78db      	ldrb	r3, [r3, #3]
 80034b4:	2b28      	cmp	r3, #40	; 0x28
 80034b6:	d105      	bne.n	80034c4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	3308      	adds	r3, #8
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	78db      	ldrb	r3, [r3, #3]
 80034c8:	2b48      	cmp	r3, #72	; 0x48
 80034ca:	d105      	bne.n	80034d8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	3308      	adds	r3, #8
 80034d0:	2201      	movs	r2, #1
 80034d2:	409a      	lsls	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	3301      	adds	r3, #1
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	d9c1      	bls.n	8003468 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	605a      	str	r2, [r3, #4]
  }
}
 80034ea:	bf00      	nop
 80034ec:	3724      	adds	r7, #36	; 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003502:	2300      	movs	r3, #0
 8003504:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8003506:	2304      	movs	r3, #4
 8003508:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800350a:	4b57      	ldr	r3, [pc, #348]	; (8003668 <I2C_Init+0x174>)
 800350c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	889b      	ldrh	r3, [r3, #4]
 8003512:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8003514:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003516:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800351a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800351c:	f107 0308 	add.w	r3, r7, #8
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f98d 	bl	8003840 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	4a4f      	ldr	r2, [pc, #316]	; (800366c <I2C_Init+0x178>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0c9b      	lsrs	r3, r3, #18
 8003534:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8003536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800353a:	4313      	orrs	r3, r2
 800353c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003542:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a44      	ldr	r2, [pc, #272]	; (8003670 <I2C_Init+0x17c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d815      	bhi.n	800358e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8003570:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003572:	2b03      	cmp	r3, #3
 8003574:	d801      	bhi.n	800357a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8003576:	2304      	movs	r3, #4
 8003578:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800357a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800357c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800357e:	4313      	orrs	r3, r2
 8003580:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003584:	3301      	adds	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	841a      	strh	r2, [r3, #32]
 800358c:	e040      	b.n	8003610 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	88db      	ldrh	r3, [r3, #6]
 8003592:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8003596:	4293      	cmp	r3, r2
 8003598:	d109      	bne.n	80035ae <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80035ac:	e00e      	b.n	80035cc <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009a      	lsls	r2, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80035c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 80035cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80035d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80035de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ee:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80035f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <I2C_Init+0x180>)
 80035fc:	fb82 1203 	smull	r1, r2, r2, r3
 8003600:	1192      	asrs	r2, r2, #6
 8003602:	17db      	asrs	r3, r3, #31
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	b29b      	uxth	r3, r3
 8003608:	3301      	adds	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003614:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 800362c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800362e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8003632:	f023 0302 	bic.w	r3, r3, #2
 8003636:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	889a      	ldrh	r2, [r3, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	895b      	ldrh	r3, [r3, #10]
 8003640:	4313      	orrs	r3, r2
 8003642:	b29a      	uxth	r2, r3
 8003644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003646:	4313      	orrs	r3, r2
 8003648:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800364e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	899a      	ldrh	r2, [r3, #12]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	891b      	ldrh	r3, [r3, #8]
 8003658:	4313      	orrs	r3, r2
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	811a      	strh	r2, [r3, #8]
}
 8003660:	bf00      	nop
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	007a1200 	.word	0x007a1200
 800366c:	431bde83 	.word	0x431bde83
 8003670:	000186a0 	.word	0x000186a0
 8003674:	10624dd3 	.word	0x10624dd3

08003678 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 800369a:	e007      	b.n	80036ac <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	801a      	strh	r2, [r3, #0]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 80036d8:	e007      	b.n	80036ea <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	801a      	strh	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8003716:	e007      	b.n	8003728 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	801a      	strh	r2, [r3, #0]
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr

08003732 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8003754:	e007      	b.n	8003766 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	801a      	strh	r2, [r3, #0]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	821a      	strh	r2, [r3, #16]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8a1b      	ldrh	r3, [r3, #16]
 800379a:	b29b      	uxth	r3, r3
 800379c:	b2db      	uxtb	r3, r3
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	70fb      	strb	r3, [r7, #3]
 80037b4:	4613      	mov	r3, r2
 80037b6:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80037b8:	78bb      	ldrb	r3, [r7, #2]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	70fb      	strb	r3, [r7, #3]
 80037c6:	e003      	b.n	80037d0 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	821a      	strh	r2, [r3, #16]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b087      	sub	sp, #28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80037f8:	2300      	movs	r3, #0
 80037fa:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8a9b      	ldrh	r3, [r3, #20]
 8003800:	b29b      	uxth	r3, r3
 8003802:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8b1b      	ldrh	r3, [r3, #24]
 8003808:	b29b      	uxth	r3, r3
 800380a:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	041b      	lsls	r3, r3, #16
 8003810:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
 8003818:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800381c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	401a      	ands	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d102      	bne.n	8003830 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
 800382e:	e001      	b.n	8003834 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8003830:	2300      	movs	r3, #0
 8003832:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8003834:	7dfb      	ldrb	r3, [r7, #23]
}
 8003836:	4618      	mov	r0, r3
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800385c:	4b4a      	ldr	r3, [pc, #296]	; (8003988 <RCC_GetClocksFreq+0x148>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d007      	beq.n	800387c <RCC_GetClocksFreq+0x3c>
 800386c:	2b08      	cmp	r3, #8
 800386e:	d009      	beq.n	8003884 <RCC_GetClocksFreq+0x44>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d12f      	bne.n	80038d4 <RCC_GetClocksFreq+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a45      	ldr	r2, [pc, #276]	; (800398c <RCC_GetClocksFreq+0x14c>)
 8003878:	601a      	str	r2, [r3, #0]
      break;
 800387a:	e02f      	b.n	80038dc <RCC_GetClocksFreq+0x9c>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a43      	ldr	r2, [pc, #268]	; (800398c <RCC_GetClocksFreq+0x14c>)
 8003880:	601a      	str	r2, [r3, #0]
      break;
 8003882:	e02b      	b.n	80038dc <RCC_GetClocksFreq+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8003884:	4b40      	ldr	r3, [pc, #256]	; (8003988 <RCC_GetClocksFreq+0x148>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800388c:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800388e:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <RCC_GetClocksFreq+0x148>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003896:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	0c9b      	lsrs	r3, r3, #18
 800389c:	3302      	adds	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <RCC_GetClocksFreq+0x74>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	4a39      	ldr	r2, [pc, #228]	; (8003990 <RCC_GetClocksFreq+0x150>)
 80038aa:	fb02 f203 	mul.w	r2, r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80038b2:	e013      	b.n	80038dc <RCC_GetClocksFreq+0x9c>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 80038b4:	4b34      	ldr	r3, [pc, #208]	; (8003988 <RCC_GetClocksFreq+0x148>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	3301      	adds	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 80038c0:	4a32      	ldr	r2, [pc, #200]	; (800398c <RCC_GetClocksFreq+0x14c>)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	fb02 f203 	mul.w	r2, r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
      break;
 80038d2:	e003      	b.n	80038dc <RCC_GetClocksFreq+0x9c>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a2d      	ldr	r2, [pc, #180]	; (800398c <RCC_GetClocksFreq+0x14c>)
 80038d8:	601a      	str	r2, [r3, #0]
      break;
 80038da:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80038dc:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <RCC_GetClocksFreq+0x148>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <RCC_GetClocksFreq+0x154>)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	40da      	lsrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <RCC_GetClocksFreq+0x148>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800390c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003914:	4a1f      	ldr	r2, [pc, #124]	; (8003994 <RCC_GetClocksFreq+0x154>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	40da      	lsrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800392c:	4b16      	ldr	r3, [pc, #88]	; (8003988 <RCC_GetClocksFreq+0x148>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003934:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	0adb      	lsrs	r3, r3, #11
 800393a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <RCC_GetClocksFreq+0x154>)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	40da      	lsrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <RCC_GetClocksFreq+0x148>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800395c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	0b9b      	lsrs	r3, r3, #14
 8003962:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 8003964:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <RCC_GetClocksFreq+0x158>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	fbb2 f2f3 	udiv	r2, r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]
}
 800397e:	bf00      	nop
 8003980:	3724      	adds	r7, #36	; 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	40021000 	.word	0x40021000
 800398c:	007a1200 	.word	0x007a1200
 8003990:	003d0900 	.word	0x003d0900
 8003994:	20000008 	.word	0x20000008
 8003998:	20000018 	.word	0x20000018

0800399c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80039ae:	4909      	ldr	r1, [pc, #36]	; (80039d4 <RCC_APB2PeriphClockCmd+0x38>)
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <RCC_APB2PeriphClockCmd+0x38>)
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80039ba:	e006      	b.n	80039ca <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80039bc:	4905      	ldr	r1, [pc, #20]	; (80039d4 <RCC_APB2PeriphClockCmd+0x38>)
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <RCC_APB2PeriphClockCmd+0x38>)
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	4013      	ands	r3, r2
 80039c8:	618b      	str	r3, [r1, #24]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	40021000 	.word	0x40021000

080039d8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d006      	beq.n	80039f8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80039ea:	4909      	ldr	r1, [pc, #36]	; (8003a10 <RCC_APB1PeriphClockCmd+0x38>)
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <RCC_APB1PeriphClockCmd+0x38>)
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80039f6:	e006      	b.n	8003a06 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80039f8:	4905      	ldr	r1, [pc, #20]	; (8003a10 <RCC_APB1PeriphClockCmd+0x38>)
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <RCC_APB1PeriphClockCmd+0x38>)
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	4013      	ands	r3, r2
 8003a04:	61cb      	str	r3, [r1, #28]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40021000 	.word	0x40021000

08003a14 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a2e      	ldr	r2, [pc, #184]	; (8003ae4 <TIM_TimeBaseInit+0xd0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <TIM_TimeBaseInit+0x44>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a2d      	ldr	r2, [pc, #180]	; (8003ae8 <TIM_TimeBaseInit+0xd4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00f      	beq.n	8003a58 <TIM_TimeBaseInit+0x44>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d00b      	beq.n	8003a58 <TIM_TimeBaseInit+0x44>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2a      	ldr	r2, [pc, #168]	; (8003aec <TIM_TimeBaseInit+0xd8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_TimeBaseInit+0x44>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <TIM_TimeBaseInit+0xdc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a28      	ldr	r2, [pc, #160]	; (8003af4 <TIM_TimeBaseInit+0xe0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d108      	bne.n	8003a6a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8003a58:	89fb      	ldrh	r3, [r7, #14]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	885a      	ldrh	r2, [r3, #2]
 8003a64:	89fb      	ldrh	r3, [r7, #14]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a22      	ldr	r2, [pc, #136]	; (8003af8 <TIM_TimeBaseInit+0xe4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00c      	beq.n	8003a8c <TIM_TimeBaseInit+0x78>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a21      	ldr	r2, [pc, #132]	; (8003afc <TIM_TimeBaseInit+0xe8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d008      	beq.n	8003a8c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8003a7a:	89fb      	ldrh	r3, [r7, #14]
 8003a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a80:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	88da      	ldrh	r2, [r3, #6]
 8003a86:	89fb      	ldrh	r3, [r7, #14]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	89fa      	ldrh	r2, [r7, #14]
 8003a90:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	889a      	ldrh	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	881a      	ldrh	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <TIM_TimeBaseInit+0xd0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00f      	beq.n	8003aca <TIM_TimeBaseInit+0xb6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <TIM_TimeBaseInit+0xd4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_TimeBaseInit+0xb6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <TIM_TimeBaseInit+0xec>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_TimeBaseInit+0xb6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <TIM_TimeBaseInit+0xf0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_TimeBaseInit+0xb6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a10      	ldr	r2, [pc, #64]	; (8003b08 <TIM_TimeBaseInit+0xf4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d104      	bne.n	8003ad4 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	7a1b      	ldrb	r3, [r3, #8]
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	829a      	strh	r2, [r3, #20]
}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40013400 	.word	0x40013400
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800
 8003af4:	40000c00 	.word	0x40000c00
 8003af8:	40001000 	.word	0x40001000
 8003afc:	40001400 	.word	0x40001400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40014400 	.word	0x40014400
 8003b08:	40014800 	.word	0x40014800

08003b0c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	81fb      	strh	r3, [r7, #14]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8c1b      	ldrh	r3, [r3, #32]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8c1b      	ldrh	r3, [r3, #32]
 8003b36:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	889b      	ldrh	r3, [r3, #4]
 8003b3c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8b1b      	ldrh	r3, [r3, #24]
 8003b42:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8003b44:	897b      	ldrh	r3, [r7, #10]
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8003b4c:	897b      	ldrh	r3, [r7, #10]
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	881a      	ldrh	r2, [r3, #0]
 8003b58:	897b      	ldrh	r3, [r7, #10]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8003b5e:	89fb      	ldrh	r3, [r7, #14]
 8003b60:	f023 0302 	bic.w	r3, r3, #2
 8003b64:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	891a      	ldrh	r2, [r3, #8]
 8003b6a:	89fb      	ldrh	r3, [r7, #14]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	885a      	ldrh	r2, [r3, #2]
 8003b74:	89fb      	ldrh	r3, [r7, #14]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <TIM_OC1Init+0x104>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00f      	beq.n	8003ba2 <TIM_OC1Init+0x96>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <TIM_OC1Init+0x108>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00b      	beq.n	8003ba2 <TIM_OC1Init+0x96>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a22      	ldr	r2, [pc, #136]	; (8003c18 <TIM_OC1Init+0x10c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <TIM_OC1Init+0x96>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <TIM_OC1Init+0x110>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <TIM_OC1Init+0x114>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d123      	bne.n	8003bea <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8003ba2:	89fb      	ldrh	r3, [r7, #14]
 8003ba4:	f023 0308 	bic.w	r3, r3, #8
 8003ba8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	895a      	ldrh	r2, [r3, #10]
 8003bae:	89fb      	ldrh	r3, [r7, #14]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8003bb4:	89fb      	ldrh	r3, [r7, #14]
 8003bb6:	f023 0304 	bic.w	r3, r3, #4
 8003bba:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	889a      	ldrh	r2, [r3, #4]
 8003bc0:	89fb      	ldrh	r3, [r7, #14]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8003bc6:	89bb      	ldrh	r3, [r7, #12]
 8003bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bcc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8003bce:	89bb      	ldrh	r3, [r7, #12]
 8003bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bd4:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	899a      	ldrh	r2, [r3, #12]
 8003bda:	89bb      	ldrh	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	89da      	ldrh	r2, [r3, #14]
 8003be4:	89bb      	ldrh	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	89ba      	ldrh	r2, [r7, #12]
 8003bee:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	897a      	ldrh	r2, [r7, #10]
 8003bf4:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	88da      	ldrh	r2, [r3, #6]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	89fa      	ldrh	r2, [r7, #14]
 8003c02:	841a      	strh	r2, [r3, #32]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40013400 	.word	0x40013400
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40014400 	.word	0x40014400
 8003c20:	40014800 	.word	0x40014800

08003c24 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	817b      	strh	r3, [r7, #10]
 8003c32:	2300      	movs	r3, #0
 8003c34:	81fb      	strh	r3, [r7, #14]
 8003c36:	2300      	movs	r3, #0
 8003c38:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8c1b      	ldrh	r3, [r3, #32]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f023 0310 	bic.w	r3, r3, #16
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8c1b      	ldrh	r3, [r3, #32]
 8003c4e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	889b      	ldrh	r3, [r3, #4]
 8003c54:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8b1b      	ldrh	r3, [r3, #24]
 8003c5a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8003c5c:	897b      	ldrh	r3, [r7, #10]
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c62:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8003c64:	897b      	ldrh	r3, [r7, #10]
 8003c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6a:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	897b      	ldrh	r3, [r7, #10]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8003c7a:	89fb      	ldrh	r3, [r7, #14]
 8003c7c:	f023 0320 	bic.w	r3, r3, #32
 8003c80:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	891b      	ldrh	r3, [r3, #8]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	89fb      	ldrh	r3, [r7, #14]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	885b      	ldrh	r3, [r3, #2]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	89fb      	ldrh	r3, [r7, #14]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <TIM_OC2Init+0x108>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC2Init+0x8a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <TIM_OC2Init+0x10c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d12b      	bne.n	8003d06 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8003cae:	89fb      	ldrh	r3, [r7, #14]
 8003cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	895b      	ldrh	r3, [r3, #10]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	89fb      	ldrh	r3, [r7, #14]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8003cc4:	89fb      	ldrh	r3, [r7, #14]
 8003cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cca:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	889b      	ldrh	r3, [r3, #4]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	89fb      	ldrh	r3, [r7, #14]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8003cda:	89bb      	ldrh	r3, [r7, #12]
 8003cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8003ce2:	89bb      	ldrh	r3, [r7, #12]
 8003ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce8:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	899b      	ldrh	r3, [r3, #12]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	89bb      	ldrh	r3, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	89db      	ldrh	r3, [r3, #14]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	89bb      	ldrh	r3, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	89ba      	ldrh	r2, [r7, #12]
 8003d0a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	897a      	ldrh	r2, [r7, #10]
 8003d10:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	88da      	ldrh	r2, [r3, #6]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	89fa      	ldrh	r2, [r7, #14]
 8003d1e:	841a      	strh	r2, [r3, #32]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400

08003d34 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	2300      	movs	r3, #0
 8003d44:	81fb      	strh	r3, [r7, #14]
 8003d46:	2300      	movs	r3, #0
 8003d48:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8c1b      	ldrh	r3, [r3, #32]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8c1b      	ldrh	r3, [r3, #32]
 8003d5e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	889b      	ldrh	r3, [r3, #4]
 8003d64:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8b9b      	ldrh	r3, [r3, #28]
 8003d6a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8003d6c:	897b      	ldrh	r3, [r7, #10]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8003d74:	897b      	ldrh	r3, [r7, #10]
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	881a      	ldrh	r2, [r3, #0]
 8003d80:	897b      	ldrh	r3, [r7, #10]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8003d86:	89fb      	ldrh	r3, [r7, #14]
 8003d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d8c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	891b      	ldrh	r3, [r3, #8]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	89fb      	ldrh	r3, [r7, #14]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	885b      	ldrh	r3, [r3, #2]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	89fb      	ldrh	r3, [r7, #14]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <TIM_OC3Init+0x104>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_OC3Init+0x86>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <TIM_OC3Init+0x108>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d12b      	bne.n	8003e12 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8003dba:	89fb      	ldrh	r3, [r7, #14]
 8003dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	895b      	ldrh	r3, [r3, #10]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	89fb      	ldrh	r3, [r7, #14]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8003dd0:	89fb      	ldrh	r3, [r7, #14]
 8003dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	889b      	ldrh	r3, [r3, #4]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	89fb      	ldrh	r3, [r7, #14]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8003de6:	89bb      	ldrh	r3, [r7, #12]
 8003de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dec:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8003dee:	89bb      	ldrh	r3, [r7, #12]
 8003df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003df4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	899b      	ldrh	r3, [r3, #12]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	89bb      	ldrh	r3, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	89db      	ldrh	r3, [r3, #14]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	89bb      	ldrh	r3, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	89ba      	ldrh	r2, [r7, #12]
 8003e16:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	897a      	ldrh	r2, [r7, #10]
 8003e1c:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	88da      	ldrh	r2, [r3, #6]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	89fa      	ldrh	r2, [r7, #14]
 8003e2a:	841a      	strh	r2, [r3, #32]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40013400 	.word	0x40013400

08003e40 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	81bb      	strh	r3, [r7, #12]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	817b      	strh	r3, [r7, #10]
 8003e52:	2300      	movs	r3, #0
 8003e54:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8c1b      	ldrh	r3, [r3, #32]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8c1b      	ldrh	r3, [r3, #32]
 8003e6a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	889b      	ldrh	r3, [r3, #4]
 8003e70:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8b9b      	ldrh	r3, [r3, #28]
 8003e76:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8003e78:	89bb      	ldrh	r3, [r7, #12]
 8003e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8003e80:	89bb      	ldrh	r3, [r7, #12]
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	89bb      	ldrh	r3, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8003e96:	897b      	ldrh	r3, [r7, #10]
 8003e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e9c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	891b      	ldrh	r3, [r3, #8]
 8003ea2:	031b      	lsls	r3, r3, #12
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	885b      	ldrh	r3, [r3, #2]
 8003eb0:	031b      	lsls	r3, r3, #12
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	897b      	ldrh	r3, [r7, #10]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <TIM_OC4Init+0xc8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_OC4Init+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <TIM_OC4Init+0xcc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10a      	bne.n	8003ee0 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8003eca:	89fb      	ldrh	r3, [r7, #14]
 8003ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ed0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	899b      	ldrh	r3, [r3, #12]
 8003ed6:	019b      	lsls	r3, r3, #6
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	89fb      	ldrh	r3, [r7, #14]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	89fa      	ldrh	r2, [r7, #14]
 8003ee4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	89ba      	ldrh	r2, [r7, #12]
 8003eea:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	88da      	ldrh	r2, [r3, #6]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	897a      	ldrh	r2, [r7, #10]
 8003efa:	841a      	strh	r2, [r3, #32]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40013400 	.word	0x40013400

08003f10 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8003f32:	e007      	b.n	8003f44 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	801a      	strh	r2, [r3, #0]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	807b      	strh	r3, [r7, #2]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003f5e:	787b      	ldrb	r3, [r7, #1]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	899b      	ldrh	r3, [r3, #12]
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8003f74:	e009      	b.n	8003f8a <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	899b      	ldrh	r3, [r3, #12]
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	887b      	ldrh	r3, [r7, #2]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	4013      	ands	r3, r2
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	819a      	strh	r2, [r3, #12]
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8003fb6:	e007      	b.n	8003fc8 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	801a      	strh	r2, [r3, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8b1b      	ldrh	r3, [r3, #24]
 8003fe6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8003fe8:	89fb      	ldrh	r3, [r7, #14]
 8003fea:	f023 0308 	bic.w	r3, r3, #8
 8003fee:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8003ff0:	89fa      	ldrh	r2, [r7, #14]
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	89fa      	ldrh	r2, [r7, #14]
 8003ffc:	831a      	strh	r2, [r3, #24]
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8b1b      	ldrh	r3, [r3, #24]
 800401c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 800401e:	89fb      	ldrh	r3, [r7, #14]
 8004020:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004024:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	b29a      	uxth	r2, r3
 800402c:	89fb      	ldrh	r3, [r7, #14]
 800402e:	4313      	orrs	r3, r2
 8004030:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	89fa      	ldrh	r2, [r7, #14]
 8004036:	831a      	strh	r2, [r3, #24]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8b9b      	ldrh	r3, [r3, #28]
 8004056:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8004058:	89fb      	ldrh	r3, [r7, #14]
 800405a:	f023 0308 	bic.w	r3, r3, #8
 800405e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8004060:	89fa      	ldrh	r2, [r7, #14]
 8004062:	887b      	ldrh	r3, [r7, #2]
 8004064:	4313      	orrs	r3, r2
 8004066:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	89fa      	ldrh	r2, [r7, #14]
 800406c:	839a      	strh	r2, [r3, #28]
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8b9b      	ldrh	r3, [r3, #28]
 800408c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004094:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	b29a      	uxth	r2, r3
 800409c:	89fb      	ldrh	r3, [r7, #14]
 800409e:	4313      	orrs	r3, r2
 80040a0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	89fa      	ldrh	r2, [r7, #14]
 80040a6:	839a      	strh	r2, [r3, #28]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	81bb      	strh	r3, [r7, #12]
 80040c6:	2300      	movs	r3, #0
 80040c8:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8a1b      	ldrh	r3, [r3, #16]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	887b      	ldrh	r3, [r7, #2]
 80040d2:	4013      	ands	r3, r2
 80040d4:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	899b      	ldrh	r3, [r3, #12]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	4013      	ands	r3, r2
 80040e0:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80040e2:	89bb      	ldrh	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <TIM_GetITStatus+0x42>
 80040e8:	897b      	ldrh	r3, [r7, #10]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	e001      	b.n	80040f8 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8004110:	887b      	ldrh	r3, [r7, #2]
 8004112:	43db      	mvns	r3, r3
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	821a      	strh	r2, [r3, #16]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08c      	sub	sp, #48	; 0x30
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800412e:	2300      	movs	r3, #0
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004132:	2300      	movs	r3, #0
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8004136:	2300      	movs	r3, #0
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800413a:	2300      	movs	r3, #0
 800413c:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8a1b      	ldrh	r3, [r3, #16]
 800414a:	b29b      	uxth	r3, r3
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800414e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004150:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8004154:	4013      	ands	r3, r2
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	88db      	ldrh	r3, [r3, #6]
 800415c:	461a      	mov	r2, r3
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	4313      	orrs	r3, r2
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	899b      	ldrh	r3, [r3, #12]
 8004170:	b29b      	uxth	r3, r3
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8004174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004176:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800417a:	4013      	ands	r3, r2
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	889a      	ldrh	r2, [r3, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	891b      	ldrh	r3, [r3, #8]
 8004186:	4313      	orrs	r3, r2
 8004188:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800418e:	4313      	orrs	r3, r2
 8004190:	b29b      	uxth	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	4313      	orrs	r3, r2
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	b29a      	uxth	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8a9b      	ldrh	r3, [r3, #20]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80041aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ac:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80041b0:	4013      	ands	r3, r2
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	899b      	ldrh	r3, [r3, #12]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	4313      	orrs	r3, r2
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80041c8:	f107 0308 	add.w	r3, r7, #8
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fb37 	bl	8003840 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <USART_Init+0x16c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d102      	bne.n	80041e0 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041de:	e001      	b.n	80041e4 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	899b      	ldrh	r3, [r3, #12]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	b21b      	sxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	da0c      	bge.n	800420a <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80041f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009a      	lsls	r2, r3, #2
 80041fa:	441a      	add	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	e00b      	b.n	8004222 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800420a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009a      	lsls	r2, r3, #2
 8004214:	441a      	add	r2, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <USART_Init+0x170>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	091b      	lsrs	r3, r3, #4
 8004234:	2264      	movs	r2, #100	; 0x64
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	899b      	ldrh	r3, [r3, #12]
 8004244:	b29b      	uxth	r3, r3
 8004246:	b21b      	sxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	da0c      	bge.n	8004266 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	3332      	adds	r3, #50	; 0x32
 8004252:	4a10      	ldr	r2, [pc, #64]	; (8004294 <USART_Init+0x170>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004260:	4313      	orrs	r3, r2
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004264:	e00b      	b.n	800427e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	3332      	adds	r3, #50	; 0x32
 800426c:	4a09      	ldr	r2, [pc, #36]	; (8004294 <USART_Init+0x170>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427a:	4313      	orrs	r3, r2
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	811a      	strh	r2, [r3, #8]
}
 8004286:	bf00      	nop
 8004288:	3730      	adds	r7, #48	; 0x30
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40013800 	.word	0x40013800
 8004294:	51eb851f 	.word	0x51eb851f

08004298 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	899b      	ldrh	r3, [r3, #12]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80042ba:	e007      	b.n	80042cc <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	899b      	ldrh	r3, [r3, #12]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	819a      	strh	r2, [r3, #12]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	460b      	mov	r3, r1
 80042e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80042e2:	887b      	ldrh	r3, [r7, #2]
 80042e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	809a      	strh	r2, [r3, #4]
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29a      	uxth	r2, r3
 800430e:	887b      	ldrh	r3, [r7, #2]
 8004310:	4013      	ands	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e001      	b.n	8004322 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr
	...

08004330 <debug_led_init>:
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#include "debug.h"

void debug_led_init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable GPIO clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8004336:	2101      	movs	r1, #1
 8004338:	2001      	movs	r0, #1
 800433a:	f7ff fb2f 	bl	800399c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800433e:	2101      	movs	r1, #1
 8004340:	2010      	movs	r0, #16
 8004342:	f7ff fb2b 	bl	800399c <RCC_APB2PeriphClockCmd>

	// Configure pin as output push-pull (LED)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8004346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800434a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800434c:	2310      	movs	r3, #16
 800434e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004350:	2303      	movs	r3, #3
 8004352:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4803      	ldr	r0, [pc, #12]	; (8004368 <debug_led_init+0x38>)
 800435a:	f7ff f80f 	bl	800337c <GPIO_Init>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40011000 	.word	0x40011000

0800436c <mpu6050_init>:
 * 0x10:  error:
 * 0x18:  error:
 *
 */
int8_t mpu6050_init(uint8_t gyroFullScaleRange, uint8_t accelFullScaleRange)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	460a      	mov	r2, r1
 8004376:	71fb      	strb	r3, [r7, #7]
 8004378:	4613      	mov	r3, r2
 800437a:	71bb      	strb	r3, [r7, #6]
	int8_t returnCode=0;
 800437c:	2300      	movs	r3, #0
 800437e:	73fb      	strb	r3, [r7, #15]

	/* turn off sleep mode */
	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x6B, 0);
 8004380:	2200      	movs	r2, #0
 8004382:	216b      	movs	r1, #107	; 0x6b
 8004384:	2068      	movs	r0, #104	; 0x68
 8004386:	f000 faf9 	bl	800497c <i2c_slave_mem_write>
 800438a:	4603      	mov	r3, r0
 800438c:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 800438e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d102      	bne.n	800439e <mpu6050_init+0x32>
		return -1;
 8004398:	f04f 33ff 	mov.w	r3, #4294967295
 800439c:	e020      	b.n	80043e0 <mpu6050_init+0x74>

	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1B, gyroFullScaleRange);
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	461a      	mov	r2, r3
 80043a2:	211b      	movs	r1, #27
 80043a4:	2068      	movs	r0, #104	; 0x68
 80043a6:	f000 fae9 	bl	800497c <i2c_slave_mem_write>
 80043aa:	4603      	mov	r3, r0
 80043ac:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 80043ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d102      	bne.n	80043be <mpu6050_init+0x52>
		return -1;
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	e010      	b.n	80043e0 <mpu6050_init+0x74>

	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1C, accelFullScaleRange);
 80043be:	79bb      	ldrb	r3, [r7, #6]
 80043c0:	461a      	mov	r2, r3
 80043c2:	211c      	movs	r1, #28
 80043c4:	2068      	movs	r0, #104	; 0x68
 80043c6:	f000 fad9 	bl	800497c <i2c_slave_mem_write>
 80043ca:	4603      	mov	r3, r0
 80043cc:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 80043ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d102      	bne.n	80043de <mpu6050_init+0x72>
		return -1;
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295
 80043dc:	e000      	b.n	80043e0 <mpu6050_init+0x74>

	return 0;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <gyro_measurement_read>:
 * Reads the raw X, Y and Z angular velocity from gyro.
 * @param gyroBuffer: buffer for the read data to be stored.
 * @retval 0 on success, -1 on timeout.
 */
int8_t gyro_measurement_read(int16_t* gyroBuffer)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	uint8_t gyroReadValues[6];
	int8_t errorValue;

	errorValue = i2c_slave_mem_read(MPU6050_ID, 0x43, gyroReadValues, 6);
 80043f0:	f107 0208 	add.w	r2, r7, #8
 80043f4:	2306      	movs	r3, #6
 80043f6:	2143      	movs	r1, #67	; 0x43
 80043f8:	2068      	movs	r0, #104	; 0x68
 80043fa:	f000 f9fb 	bl	80047f4 <i2c_slave_mem_read>
 80043fe:	4603      	mov	r3, r0
 8004400:	73fb      	strb	r3, [r7, #15]

	if(errorValue == 0)
 8004402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d11e      	bne.n	8004448 <gyro_measurement_read+0x60>
	{
		gyroBuffer[0] = (gyroReadValues[0]<<8)|gyroReadValues[1];//x_out
 800440a:	7a3b      	ldrb	r3, [r7, #8]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	b21a      	sxth	r2, r3
 8004410:	7a7b      	ldrb	r3, [r7, #9]
 8004412:	b21b      	sxth	r3, r3
 8004414:	4313      	orrs	r3, r2
 8004416:	b21a      	sxth	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	801a      	strh	r2, [r3, #0]
		gyroBuffer[1] = (gyroReadValues[2]<<8)|gyroReadValues[3];//y_out
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3302      	adds	r3, #2
 8004420:	7aba      	ldrb	r2, [r7, #10]
 8004422:	0212      	lsls	r2, r2, #8
 8004424:	b211      	sxth	r1, r2
 8004426:	7afa      	ldrb	r2, [r7, #11]
 8004428:	b212      	sxth	r2, r2
 800442a:	430a      	orrs	r2, r1
 800442c:	b212      	sxth	r2, r2
 800442e:	801a      	strh	r2, [r3, #0]
		gyroBuffer[2] = (gyroReadValues[4]<<8)|gyroReadValues[5];//z_out
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	7b3a      	ldrb	r2, [r7, #12]
 8004436:	0212      	lsls	r2, r2, #8
 8004438:	b211      	sxth	r1, r2
 800443a:	7b7a      	ldrb	r2, [r7, #13]
 800443c:	b212      	sxth	r2, r2
 800443e:	430a      	orrs	r2, r1
 8004440:	b212      	sxth	r2, r2
 8004442:	801a      	strh	r2, [r3, #0]
		return 0;
 8004444:	2300      	movs	r3, #0
 8004446:	e001      	b.n	800444c <gyro_measurement_read+0x64>
	}
	else
		return -1;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <accel_measurement_read>:
 * Reads the raw X, Y and Z values from accelerometer.
 * @param accelBuffer: buffer for the read data to be stored.
 * @retval 0 on success, -1 on timeout.
 */
int8_t accel_measurement_read(int16_t* accelBuffer)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	uint8_t accelReadValues[6];
	int8_t errorValue;

	errorValue = i2c_slave_mem_read(MPU6050_ID, 0x3B, accelReadValues, 6);
 800445c:	f107 0208 	add.w	r2, r7, #8
 8004460:	2306      	movs	r3, #6
 8004462:	213b      	movs	r1, #59	; 0x3b
 8004464:	2068      	movs	r0, #104	; 0x68
 8004466:	f000 f9c5 	bl	80047f4 <i2c_slave_mem_read>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]

	if(errorValue == 0)
 800446e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d11e      	bne.n	80044b4 <accel_measurement_read+0x60>
	{
		accelBuffer[0] = (accelReadValues[0]<<8)|accelReadValues[1];//x_out
 8004476:	7a3b      	ldrb	r3, [r7, #8]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	b21a      	sxth	r2, r3
 800447c:	7a7b      	ldrb	r3, [r7, #9]
 800447e:	b21b      	sxth	r3, r3
 8004480:	4313      	orrs	r3, r2
 8004482:	b21a      	sxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	801a      	strh	r2, [r3, #0]
		accelBuffer[1] = (accelReadValues[2]<<8)|accelReadValues[3];//y_out
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3302      	adds	r3, #2
 800448c:	7aba      	ldrb	r2, [r7, #10]
 800448e:	0212      	lsls	r2, r2, #8
 8004490:	b211      	sxth	r1, r2
 8004492:	7afa      	ldrb	r2, [r7, #11]
 8004494:	b212      	sxth	r2, r2
 8004496:	430a      	orrs	r2, r1
 8004498:	b212      	sxth	r2, r2
 800449a:	801a      	strh	r2, [r3, #0]
		accelBuffer[2] = (accelReadValues[4]<<8)|accelReadValues[5];//z_out
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	7b3a      	ldrb	r2, [r7, #12]
 80044a2:	0212      	lsls	r2, r2, #8
 80044a4:	b211      	sxth	r1, r2
 80044a6:	7b7a      	ldrb	r2, [r7, #13]
 80044a8:	b212      	sxth	r2, r2
 80044aa:	430a      	orrs	r2, r1
 80044ac:	b212      	sxth	r2, r2
 80044ae:	801a      	strh	r2, [r3, #0]
		return 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e001      	b.n	80044b8 <accel_measurement_read+0x64>
	}
	else
		return -1;
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <gyro_do_calibration>:
 * @param gyroCalibData: gyro axis calibration values return buffer.
 * @retval 0 if success, -1 on failure.
 *
 */
int8_t gyro_do_calibration(double* gyroCalibData)
{
 80044c0:	b5b0      	push	{r4, r5, r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	uint32_t sampleCount=0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
	int16_t gyroRawData[3];

	gyroCalibData[X_AXIS_INDEX]=0;
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	f04f 0400 	mov.w	r4, #0
 80044d6:	e882 0018 	stmia.w	r2, {r3, r4}
	gyroCalibData[Y_AXIS_INDEX]=0;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f103 0208 	add.w	r2, r3, #8
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	f04f 0400 	mov.w	r4, #0
 80044e8:	e882 0018 	stmia.w	r2, {r3, r4}
	gyroCalibData[Z_AXIS_INDEX]=0;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f103 0210 	add.w	r2, r3, #16
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	f04f 0400 	mov.w	r4, #0
 80044fa:	e882 0018 	stmia.w	r2, {r3, r4}

	while(sampleCount<200)
 80044fe:	e046      	b.n	800458e <gyro_do_calibration+0xce>
	{
		if(gyro_measurement_read(gyroRawData)<0)
 8004500:	f107 030c 	add.w	r3, r7, #12
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff6f 	bl	80043e8 <gyro_measurement_read>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	da02      	bge.n	8004516 <gyro_do_calibration+0x56>
			return -1;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295
 8004514:	e06c      	b.n	80045f0 <gyro_do_calibration+0x130>

		gyroCalibData[X_AXIS_INDEX] = (gyroRawData[X_AXIS_INDEX]+gyroCalibData[X_AXIS_INDEX]);
 8004516:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fb ffca 	bl	80004b4 <__aeabi_i2d>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	cb18      	ldmia	r3, {r3, r4}
 8004524:	461a      	mov	r2, r3
 8004526:	4623      	mov	r3, r4
 8004528:	f7fb fe78 	bl	800021c <__adddf3>
 800452c:	4603      	mov	r3, r0
 800452e:	460c      	mov	r4, r1
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	e882 0018 	stmia.w	r2, {r3, r4}
		gyroCalibData[Y_AXIS_INDEX] = (gyroRawData[Y_AXIS_INDEX]+gyroCalibData[Y_AXIS_INDEX]);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f103 0508 	add.w	r5, r3, #8
 800453c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004540:	4618      	mov	r0, r3
 8004542:	f7fb ffb7 	bl	80004b4 <__aeabi_i2d>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3308      	adds	r3, #8
 800454a:	cb18      	ldmia	r3, {r3, r4}
 800454c:	461a      	mov	r2, r3
 800454e:	4623      	mov	r3, r4
 8004550:	f7fb fe64 	bl	800021c <__adddf3>
 8004554:	4603      	mov	r3, r0
 8004556:	460c      	mov	r4, r1
 8004558:	e885 0018 	stmia.w	r5, {r3, r4}
		gyroCalibData[Z_AXIS_INDEX] = (gyroRawData[Z_AXIS_INDEX]+gyroCalibData[Z_AXIS_INDEX]);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f103 0510 	add.w	r5, r3, #16
 8004562:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fb ffa4 	bl	80004b4 <__aeabi_i2d>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3310      	adds	r3, #16
 8004570:	cb18      	ldmia	r3, {r3, r4}
 8004572:	461a      	mov	r2, r3
 8004574:	4623      	mov	r3, r4
 8004576:	f7fb fe51 	bl	800021c <__adddf3>
 800457a:	4603      	mov	r3, r0
 800457c:	460c      	mov	r4, r1
 800457e:	e885 0018 	stmia.w	r5, {r3, r4}
		sampleCount++;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	3301      	adds	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
		delay_ms(15);
 8004588:	200f      	movs	r0, #15
 800458a:	f002 faf1 	bl	8006b70 <delay_ms>
	while(sampleCount<200)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2bc7      	cmp	r3, #199	; 0xc7
 8004592:	d9b5      	bls.n	8004500 <gyro_do_calibration+0x40>
	}

	gyroCalibData[X_AXIS_INDEX] = gyroCalibData[X_AXIS_INDEX]/200;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <gyro_do_calibration+0x138>)
 80045a0:	f7fc f918 	bl	80007d4 <__aeabi_ddiv>
 80045a4:	4603      	mov	r3, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	e882 0018 	stmia.w	r2, {r3, r4}
	gyroCalibData[Y_AXIS_INDEX] = gyroCalibData[Y_AXIS_INDEX]/200;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f103 0508 	add.w	r5, r3, #8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3308      	adds	r3, #8
 80045b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <gyro_do_calibration+0x138>)
 80045c2:	f7fc f907 	bl	80007d4 <__aeabi_ddiv>
 80045c6:	4603      	mov	r3, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	e885 0018 	stmia.w	r5, {r3, r4}
	gyroCalibData[Z_AXIS_INDEX] = gyroCalibData[Z_AXIS_INDEX]/200;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f103 0510 	add.w	r5, r3, #16
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3310      	adds	r3, #16
 80045d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <gyro_do_calibration+0x138>)
 80045e2:	f7fc f8f7 	bl	80007d4 <__aeabi_ddiv>
 80045e6:	4603      	mov	r3, r0
 80045e8:	460c      	mov	r4, r1
 80045ea:	e885 0018 	stmia.w	r5, {r3, r4}

	return 0;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bdb0      	pop	{r4, r5, r7, pc}
 80045f8:	40690000 	.word	0x40690000

080045fc <accel_do_calibration>:
 * @param accelCalibData: accelerometer axis calibration values return buffer.
 * @retval 0 if success, -1 on failure.
 *
 */
int8_t accel_do_calibration(double* accelCalibData)
{
 80045fc:	b5b0      	push	{r4, r5, r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	uint32_t sampleCount=0;
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
	int16_t accelRawData[3];

	accelCalibData[X_AXIS_INDEX]=0;
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	f04f 0400 	mov.w	r4, #0
 8004612:	e882 0018 	stmia.w	r2, {r3, r4}
	accelCalibData[Y_AXIS_INDEX]=0;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f103 0208 	add.w	r2, r3, #8
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	f04f 0400 	mov.w	r4, #0
 8004624:	e882 0018 	stmia.w	r2, {r3, r4}
	accelCalibData[Z_AXIS_INDEX]=0;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f103 0210 	add.w	r2, r3, #16
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	f04f 0400 	mov.w	r4, #0
 8004636:	e882 0018 	stmia.w	r2, {r3, r4}

	while(sampleCount<200)
 800463a:	e046      	b.n	80046ca <accel_do_calibration+0xce>
	{
		if(accel_measurement_read(accelRawData)<0)
 800463c:	f107 030c 	add.w	r3, r7, #12
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff07 	bl	8004454 <accel_measurement_read>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	da02      	bge.n	8004652 <accel_do_calibration+0x56>
			return -1;
 800464c:	f04f 33ff 	mov.w	r3, #4294967295
 8004650:	e089      	b.n	8004766 <accel_do_calibration+0x16a>

		accelCalibData[X_AXIS_INDEX] = (accelRawData[X_AXIS_INDEX]+accelCalibData[X_AXIS_INDEX]);
 8004652:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fb ff2c 	bl	80004b4 <__aeabi_i2d>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	cb18      	ldmia	r3, {r3, r4}
 8004660:	461a      	mov	r2, r3
 8004662:	4623      	mov	r3, r4
 8004664:	f7fb fdda 	bl	800021c <__adddf3>
 8004668:	4603      	mov	r3, r0
 800466a:	460c      	mov	r4, r1
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	e882 0018 	stmia.w	r2, {r3, r4}
		accelCalibData[Y_AXIS_INDEX] = (accelRawData[Y_AXIS_INDEX]+accelCalibData[Y_AXIS_INDEX]);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f103 0508 	add.w	r5, r3, #8
 8004678:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fb ff19 	bl	80004b4 <__aeabi_i2d>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3308      	adds	r3, #8
 8004686:	cb18      	ldmia	r3, {r3, r4}
 8004688:	461a      	mov	r2, r3
 800468a:	4623      	mov	r3, r4
 800468c:	f7fb fdc6 	bl	800021c <__adddf3>
 8004690:	4603      	mov	r3, r0
 8004692:	460c      	mov	r4, r1
 8004694:	e885 0018 	stmia.w	r5, {r3, r4}
		accelCalibData[Z_AXIS_INDEX] = (accelRawData[Z_AXIS_INDEX]+accelCalibData[Z_AXIS_INDEX]);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f103 0510 	add.w	r5, r3, #16
 800469e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fb ff06 	bl	80004b4 <__aeabi_i2d>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3310      	adds	r3, #16
 80046ac:	cb18      	ldmia	r3, {r3, r4}
 80046ae:	461a      	mov	r2, r3
 80046b0:	4623      	mov	r3, r4
 80046b2:	f7fb fdb3 	bl	800021c <__adddf3>
 80046b6:	4603      	mov	r3, r0
 80046b8:	460c      	mov	r4, r1
 80046ba:	e885 0018 	stmia.w	r5, {r3, r4}
		sampleCount++;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	3301      	adds	r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
		delay_ms(15);
 80046c4:	200f      	movs	r0, #15
 80046c6:	f002 fa53 	bl	8006b70 <delay_ms>
	while(sampleCount<200)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2bc7      	cmp	r3, #199	; 0xc7
 80046ce:	d9b5      	bls.n	800463c <accel_do_calibration+0x40>
	}

	accelCalibData[X_AXIS_INDEX] = 0-(accelCalibData[X_AXIS_INDEX]/200);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	4b25      	ldr	r3, [pc, #148]	; (8004770 <accel_do_calibration+0x174>)
 80046dc:	f7fc f87a 	bl	80007d4 <__aeabi_ddiv>
 80046e0:	4603      	mov	r3, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	461a      	mov	r2, r3
 80046e6:	4623      	mov	r3, r4
 80046e8:	f04f 0000 	mov.w	r0, #0
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	f7fb fd92 	bl	8000218 <__aeabi_dsub>
 80046f4:	4603      	mov	r3, r0
 80046f6:	460c      	mov	r4, r1
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	e882 0018 	stmia.w	r2, {r3, r4}
	accelCalibData[Y_AXIS_INDEX] = 0-(accelCalibData[Y_AXIS_INDEX]/200);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f103 0508 	add.w	r5, r3, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3308      	adds	r3, #8
 8004708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	4b17      	ldr	r3, [pc, #92]	; (8004770 <accel_do_calibration+0x174>)
 8004712:	f7fc f85f 	bl	80007d4 <__aeabi_ddiv>
 8004716:	4603      	mov	r3, r0
 8004718:	460c      	mov	r4, r1
 800471a:	461a      	mov	r2, r3
 800471c:	4623      	mov	r3, r4
 800471e:	f04f 0000 	mov.w	r0, #0
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	f7fb fd77 	bl	8000218 <__aeabi_dsub>
 800472a:	4603      	mov	r3, r0
 800472c:	460c      	mov	r4, r1
 800472e:	e885 0018 	stmia.w	r5, {r3, r4}
	accelCalibData[Z_AXIS_INDEX] = 8192-(accelCalibData[Z_AXIS_INDEX]/200);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f103 0510 	add.w	r5, r3, #16
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3310      	adds	r3, #16
 800473c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <accel_do_calibration+0x174>)
 8004746:	f7fc f845 	bl	80007d4 <__aeabi_ddiv>
 800474a:	4603      	mov	r3, r0
 800474c:	460c      	mov	r4, r1
 800474e:	461a      	mov	r2, r3
 8004750:	4623      	mov	r3, r4
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	4907      	ldr	r1, [pc, #28]	; (8004774 <accel_do_calibration+0x178>)
 8004758:	f7fb fd5e 	bl	8000218 <__aeabi_dsub>
 800475c:	4603      	mov	r3, r0
 800475e:	460c      	mov	r4, r1
 8004760:	e885 0018 	stmia.w	r5, {r3, r4}

	return 0;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bdb0      	pop	{r4, r5, r7, pc}
 800476e:	bf00      	nop
 8004770:	40690000 	.word	0x40690000
 8004774:	40c00000 	.word	0x40c00000

08004778 <I2C_LowLevel_Init>:
 * @param ClockSpeed Bus communication frequency in Hz
 * @param OwnAddress MCU I2C address
 * @return none.
 */
void I2C_LowLevel_Init(uint32_t ClockSpeed, uint8_t OwnAddress)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
	I2C_InitTypeDef  I2C_InitStructure;
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8004784:	2101      	movs	r1, #1
 8004786:	2008      	movs	r0, #8
 8004788:	f7ff f908 	bl	800399c <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800478c:	2101      	movs	r1, #1
 800478e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004792:	f7ff f921 	bl	80039d8 <RCC_APB1PeriphClockCmd>


	/* Configure I2C_EE pins: SCL and SDA */
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
 8004796:	23c0      	movs	r3, #192	; 0xc0
 8004798:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800479a:	2303      	movs	r3, #3
 800479c:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800479e:	231c      	movs	r3, #28
 80047a0:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	4619      	mov	r1, r3
 80047a8:	4810      	ldr	r0, [pc, #64]	; (80047ec <I2C_LowLevel_Init+0x74>)
 80047aa:	f7fe fde7 	bl	800337c <GPIO_Init>

	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80047ae:	2300      	movs	r3, #0
 80047b0:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80047b2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80047b6:	82fb      	strh	r3, [r7, #22]
	I2C_InitStructure.I2C_OwnAddress1 = OwnAddress;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	833b      	strh	r3, [r7, #24]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80047be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047c2:	837b      	strh	r3, [r7, #26]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80047c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047c8:	83bb      	strh	r3, [r7, #28]
	I2C_InitStructure.I2C_ClockSpeed = ClockSpeed;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	613b      	str	r3, [r7, #16]

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 80047ce:	2101      	movs	r1, #1
 80047d0:	4807      	ldr	r0, [pc, #28]	; (80047f0 <I2C_LowLevel_Init+0x78>)
 80047d2:	f7fe ff51 	bl	8003678 <I2C_Cmd>
	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80047d6:	f107 0310 	add.w	r3, r7, #16
 80047da:	4619      	mov	r1, r3
 80047dc:	4804      	ldr	r0, [pc, #16]	; (80047f0 <I2C_LowLevel_Init+0x78>)
 80047de:	f7fe fe89 	bl	80034f4 <I2C_Init>
}
 80047e2:	bf00      	nop
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40010c00 	.word	0x40010c00
 80047f0:	40005400 	.word	0x40005400

080047f4 <i2c_slave_mem_read>:
 * @param bytesNum number of bytes to read from slave.
 * @return 0 on success, -1 on timeout.
 *
 */
int8_t i2c_slave_mem_read(uint8_t slaveAddr, uint8_t registerAddr, uint8_t* writeBuffer, uint8_t bytesNum)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	603a      	str	r2, [r7, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	71fb      	strb	r3, [r7, #7]
 8004802:	460b      	mov	r3, r1
 8004804:	71bb      	strb	r3, [r7, #6]
 8004806:	4613      	mov	r3, r2
 8004808:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	i = bytesNum;
 800480a:	797b      	ldrb	r3, [r7, #5]
 800480c:	73fb      	strb	r3, [r7, #15]
	timeout_alarm_set(5*bytesNum);
 800480e:	797a      	ldrb	r2, [r7, #5]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f002 f9c0 	bl	8006b9c <timeout_alarm_set>

	I2C_AcknowledgeConfig(I2C1,ENABLE);
 800481c:	2101      	movs	r1, #1
 800481e:	4851      	ldr	r0, [pc, #324]	; (8004964 <i2c_slave_mem_read+0x170>)
 8004820:	f7fe ff87 	bl	8003732 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2C1,ENABLE);
 8004824:	2101      	movs	r1, #1
 8004826:	484f      	ldr	r0, [pc, #316]	; (8004964 <i2c_slave_mem_read+0x170>)
 8004828:	f7fe ff45 	bl	80036b6 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800482c:	e007      	b.n	800483e <i2c_slave_mem_read+0x4a>
	{
		if(timeout_alarm_status_check() == 1)
 800482e:	f002 f9d3 	bl	8006bd8 <timeout_alarm_status_check>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d102      	bne.n	800483e <i2c_slave_mem_read+0x4a>
			return -1;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295
 800483c:	e08e      	b.n	800495c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800483e:	494a      	ldr	r1, [pc, #296]	; (8004968 <i2c_slave_mem_read+0x174>)
 8004840:	4848      	ldr	r0, [pc, #288]	; (8004964 <i2c_slave_mem_read+0x170>)
 8004842:	f7fe ffce 	bl	80037e2 <I2C_CheckEvent>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <i2c_slave_mem_read+0x3a>
	}
	//uart_printf("aa\n");

	I2C_Send7bitAddress(I2C1, (slaveAddr<<1), I2C_Direction_Transmitter);
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2200      	movs	r2, #0
 8004854:	4619      	mov	r1, r3
 8004856:	4843      	ldr	r0, [pc, #268]	; (8004964 <i2c_slave_mem_read+0x170>)
 8004858:	f7fe ffa6 	bl	80037a8 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800485c:	e007      	b.n	800486e <i2c_slave_mem_read+0x7a>
	{
		if(timeout_alarm_status_check() == 1)
 800485e:	f002 f9bb 	bl	8006bd8 <timeout_alarm_status_check>
 8004862:	4603      	mov	r3, r0
 8004864:	2b01      	cmp	r3, #1
 8004866:	d102      	bne.n	800486e <i2c_slave_mem_read+0x7a>
			return -1;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295
 800486c:	e076      	b.n	800495c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800486e:	493f      	ldr	r1, [pc, #252]	; (800496c <i2c_slave_mem_read+0x178>)
 8004870:	483c      	ldr	r0, [pc, #240]	; (8004964 <i2c_slave_mem_read+0x170>)
 8004872:	f7fe ffb6 	bl	80037e2 <I2C_CheckEvent>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <i2c_slave_mem_read+0x6a>
	}
	//uart_printf("bb\n");


	I2C_SendData(I2C1, registerAddr);
 800487c:	79bb      	ldrb	r3, [r7, #6]
 800487e:	4619      	mov	r1, r3
 8004880:	4838      	ldr	r0, [pc, #224]	; (8004964 <i2c_slave_mem_read+0x170>)
 8004882:	f7fe ff75 	bl	8003770 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004886:	e007      	b.n	8004898 <i2c_slave_mem_read+0xa4>
	{
		if(timeout_alarm_status_check() == 1)
 8004888:	f002 f9a6 	bl	8006bd8 <timeout_alarm_status_check>
 800488c:	4603      	mov	r3, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	d102      	bne.n	8004898 <i2c_slave_mem_read+0xa4>
			return -1;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
 8004896:	e061      	b.n	800495c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004898:	4935      	ldr	r1, [pc, #212]	; (8004970 <i2c_slave_mem_read+0x17c>)
 800489a:	4832      	ldr	r0, [pc, #200]	; (8004964 <i2c_slave_mem_read+0x170>)
 800489c:	f7fe ffa1 	bl	80037e2 <I2C_CheckEvent>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <i2c_slave_mem_read+0x94>
	}
	//uart_printf("cc\n");

	I2C_GenerateSTART(I2C1,ENABLE);
 80048a6:	2101      	movs	r1, #1
 80048a8:	482e      	ldr	r0, [pc, #184]	; (8004964 <i2c_slave_mem_read+0x170>)
 80048aa:	f7fe ff04 	bl	80036b6 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80048ae:	e007      	b.n	80048c0 <i2c_slave_mem_read+0xcc>
	{
		if(timeout_alarm_status_check() == 1)
 80048b0:	f002 f992 	bl	8006bd8 <timeout_alarm_status_check>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d102      	bne.n	80048c0 <i2c_slave_mem_read+0xcc>
			return -1;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	e04d      	b.n	800495c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80048c0:	4929      	ldr	r1, [pc, #164]	; (8004968 <i2c_slave_mem_read+0x174>)
 80048c2:	4828      	ldr	r0, [pc, #160]	; (8004964 <i2c_slave_mem_read+0x170>)
 80048c4:	f7fe ff8d 	bl	80037e2 <I2C_CheckEvent>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <i2c_slave_mem_read+0xbc>
	}
	//uart_printf("dd\n");

	I2C_Send7bitAddress(I2C1, slaveAddr<<1, I2C_Direction_Receiver);
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2201      	movs	r2, #1
 80048d6:	4619      	mov	r1, r3
 80048d8:	4822      	ldr	r0, [pc, #136]	; (8004964 <i2c_slave_mem_read+0x170>)
 80048da:	f7fe ff65 	bl	80037a8 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 80048de:	e007      	b.n	80048f0 <i2c_slave_mem_read+0xfc>
	{
		if(timeout_alarm_status_check() == 1)
 80048e0:	f002 f97a 	bl	8006bd8 <timeout_alarm_status_check>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d102      	bne.n	80048f0 <i2c_slave_mem_read+0xfc>
			return -1;
 80048ea:	f04f 33ff 	mov.w	r3, #4294967295
 80048ee:	e035      	b.n	800495c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 80048f0:	4920      	ldr	r1, [pc, #128]	; (8004974 <i2c_slave_mem_read+0x180>)
 80048f2:	481c      	ldr	r0, [pc, #112]	; (8004964 <i2c_slave_mem_read+0x170>)
 80048f4:	f7fe ff75 	bl	80037e2 <I2C_CheckEvent>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <i2c_slave_mem_read+0xec>
	}
	//uart_printf("ee\n");

	while(i>0)
 80048fe:	e023      	b.n	8004948 <i2c_slave_mem_read+0x154>
	{
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
		{
			if(timeout_alarm_status_check() == 1)
 8004900:	f002 f96a 	bl	8006bd8 <timeout_alarm_status_check>
 8004904:	4603      	mov	r3, r0
 8004906:	2b01      	cmp	r3, #1
 8004908:	d102      	bne.n	8004910 <i2c_slave_mem_read+0x11c>
				return -1;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295
 800490e:	e025      	b.n	800495c <i2c_slave_mem_read+0x168>
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
 8004910:	4919      	ldr	r1, [pc, #100]	; (8004978 <i2c_slave_mem_read+0x184>)
 8004912:	4814      	ldr	r0, [pc, #80]	; (8004964 <i2c_slave_mem_read+0x170>)
 8004914:	f7fe ff65 	bl	80037e2 <I2C_CheckEvent>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <i2c_slave_mem_read+0x10c>
		}
		if(i==1)
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d103      	bne.n	800492c <i2c_slave_mem_read+0x138>
			I2C_AcknowledgeConfig(I2C1,DISABLE);
 8004924:	2100      	movs	r1, #0
 8004926:	480f      	ldr	r0, [pc, #60]	; (8004964 <i2c_slave_mem_read+0x170>)
 8004928:	f7fe ff03 	bl	8003732 <I2C_AcknowledgeConfig>
		writeBuffer[bytesNum-i] = I2C_ReceiveData(I2C1);
 800492c:	797a      	ldrb	r2, [r7, #5]
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	461a      	mov	r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	189c      	adds	r4, r3, r2
 8004938:	480a      	ldr	r0, [pc, #40]	; (8004964 <i2c_slave_mem_read+0x170>)
 800493a:	f7fe ff28 	bl	800378e <I2C_ReceiveData>
 800493e:	4603      	mov	r3, r0
 8004940:	7023      	strb	r3, [r4, #0]
		i--;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	3b01      	subs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
	while(i>0)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e0      	bne.n	8004910 <i2c_slave_mem_read+0x11c>
		//uart_printf("ff\n");
	}
	I2C_GenerateSTOP(I2C1,ENABLE);
 800494e:	2101      	movs	r1, #1
 8004950:	4804      	ldr	r0, [pc, #16]	; (8004964 <i2c_slave_mem_read+0x170>)
 8004952:	f7fe fecf 	bl	80036f4 <I2C_GenerateSTOP>
	//uart_printf("gg\n");
	timeout_alarm_off();
 8004956:	f002 f94b 	bl	8006bf0 <timeout_alarm_off>
	return 0;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	bd90      	pop	{r4, r7, pc}
 8004964:	40005400 	.word	0x40005400
 8004968:	00030001 	.word	0x00030001
 800496c:	00070082 	.word	0x00070082
 8004970:	00070084 	.word	0x00070084
 8004974:	00030002 	.word	0x00030002
 8004978:	00030040 	.word	0x00030040

0800497c <i2c_slave_mem_write>:
 * @param writedata data to be written to the slave register.
 * @return 0 on success, -1 on timeout.
 *
 */
int8_t i2c_slave_mem_write(uint8_t slaveAddr, uint8_t registerAddr, uint8_t writeData)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	71fb      	strb	r3, [r7, #7]
 8004986:	460b      	mov	r3, r1
 8004988:	71bb      	strb	r3, [r7, #6]
 800498a:	4613      	mov	r3, r2
 800498c:	717b      	strb	r3, [r7, #5]
	timeout_alarm_set(20);
 800498e:	2014      	movs	r0, #20
 8004990:	f002 f904 	bl	8006b9c <timeout_alarm_set>

	I2C_GenerateSTART(I2C1,ENABLE);
 8004994:	2101      	movs	r1, #1
 8004996:	482f      	ldr	r0, [pc, #188]	; (8004a54 <i2c_slave_mem_write+0xd8>)
 8004998:	f7fe fe8d 	bl	80036b6 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800499c:	e007      	b.n	80049ae <i2c_slave_mem_write+0x32>
	{
			if(timeout_alarm_status_check() == 1)
 800499e:	f002 f91b 	bl	8006bd8 <timeout_alarm_status_check>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d102      	bne.n	80049ae <i2c_slave_mem_write+0x32>
				return -1;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ac:	e04d      	b.n	8004a4a <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80049ae:	492a      	ldr	r1, [pc, #168]	; (8004a58 <i2c_slave_mem_write+0xdc>)
 80049b0:	4828      	ldr	r0, [pc, #160]	; (8004a54 <i2c_slave_mem_write+0xd8>)
 80049b2:	f7fe ff16 	bl	80037e2 <I2C_CheckEvent>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <i2c_slave_mem_write+0x22>
	}

	I2C_Send7bitAddress(I2C1, (slaveAddr<<1), I2C_Direction_Transmitter);
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2200      	movs	r2, #0
 80049c4:	4619      	mov	r1, r3
 80049c6:	4823      	ldr	r0, [pc, #140]	; (8004a54 <i2c_slave_mem_write+0xd8>)
 80049c8:	f7fe feee 	bl	80037a8 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80049cc:	e007      	b.n	80049de <i2c_slave_mem_write+0x62>
	{
			if(timeout_alarm_status_check() == 1)
 80049ce:	f002 f903 	bl	8006bd8 <timeout_alarm_status_check>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <i2c_slave_mem_write+0x62>
				return -1;
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	e035      	b.n	8004a4a <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80049de:	491f      	ldr	r1, [pc, #124]	; (8004a5c <i2c_slave_mem_write+0xe0>)
 80049e0:	481c      	ldr	r0, [pc, #112]	; (8004a54 <i2c_slave_mem_write+0xd8>)
 80049e2:	f7fe fefe 	bl	80037e2 <I2C_CheckEvent>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <i2c_slave_mem_write+0x52>
	}

	I2C_SendData(I2C1,registerAddr);
 80049ec:	79bb      	ldrb	r3, [r7, #6]
 80049ee:	4619      	mov	r1, r3
 80049f0:	4818      	ldr	r0, [pc, #96]	; (8004a54 <i2c_slave_mem_write+0xd8>)
 80049f2:	f7fe febd 	bl	8003770 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80049f6:	e007      	b.n	8004a08 <i2c_slave_mem_write+0x8c>
	{
			if(timeout_alarm_status_check() == 1)
 80049f8:	f002 f8ee 	bl	8006bd8 <timeout_alarm_status_check>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d102      	bne.n	8004a08 <i2c_slave_mem_write+0x8c>
				return -1;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	e020      	b.n	8004a4a <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004a08:	4915      	ldr	r1, [pc, #84]	; (8004a60 <i2c_slave_mem_write+0xe4>)
 8004a0a:	4812      	ldr	r0, [pc, #72]	; (8004a54 <i2c_slave_mem_write+0xd8>)
 8004a0c:	f7fe fee9 	bl	80037e2 <I2C_CheckEvent>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <i2c_slave_mem_write+0x7c>
	}

	I2C_SendData(I2C1,writeData);
 8004a16:	797b      	ldrb	r3, [r7, #5]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	480e      	ldr	r0, [pc, #56]	; (8004a54 <i2c_slave_mem_write+0xd8>)
 8004a1c:	f7fe fea8 	bl	8003770 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004a20:	e007      	b.n	8004a32 <i2c_slave_mem_write+0xb6>
	{
			if(timeout_alarm_status_check() == 1)
 8004a22:	f002 f8d9 	bl	8006bd8 <timeout_alarm_status_check>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d102      	bne.n	8004a32 <i2c_slave_mem_write+0xb6>
				return -1;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	e00b      	b.n	8004a4a <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004a32:	490b      	ldr	r1, [pc, #44]	; (8004a60 <i2c_slave_mem_write+0xe4>)
 8004a34:	4807      	ldr	r0, [pc, #28]	; (8004a54 <i2c_slave_mem_write+0xd8>)
 8004a36:	f7fe fed4 	bl	80037e2 <I2C_CheckEvent>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <i2c_slave_mem_write+0xa6>
	}

	I2C_GenerateSTOP(I2C1,ENABLE);
 8004a40:	2101      	movs	r1, #1
 8004a42:	4804      	ldr	r0, [pc, #16]	; (8004a54 <i2c_slave_mem_write+0xd8>)
 8004a44:	f7fe fe56 	bl	80036f4 <I2C_GenerateSTOP>

	return 0;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40005400 	.word	0x40005400
 8004a58:	00030001 	.word	0x00030001
 8004a5c:	00070082 	.word	0x00070082
 8004a60:	00070084 	.word	0x00070084
 8004a64:	00000000 	.word	0x00000000

08004a68 <motion_control_task>:
//    	vTaskDelay(50/portTICK_PERIOD_MS);
//	}
//}

void motion_control_task(void *pvParameters)
{
 8004a68:	b5b0      	push	{r4, r5, r7, lr}
 8004a6a:	b0ac      	sub	sp, #176	; 0xb0
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
	double accelAngleValues[3]={0};
 8004a70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	611a      	str	r2, [r3, #16]
 8004a80:	615a      	str	r2, [r3, #20]
	uint8_t accelCalibFlag=0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	double accelCalibVal[3]={0};
 8004a88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	611a      	str	r2, [r3, #16]
 8004a98:	615a      	str	r2, [r3, #20]
	double squareOfRawAccel_X;
	double squareOfRawAccel_Y;
	double squareOfRawAccel_Z;

	double gyroAngleValues[3]={0};
 8004a9a:	f107 0320 	add.w	r3, r7, #32
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
 8004aa6:	60da      	str	r2, [r3, #12]
 8004aa8:	611a      	str	r2, [r3, #16]
 8004aaa:	615a      	str	r2, [r3, #20]
	uint8_t gyroCalibFlag=0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	double gyroCalibVal[3]={0};
 8004ab2:	f107 0308 	add.w	r3, r7, #8
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	605a      	str	r2, [r3, #4]
 8004abc:	609a      	str	r2, [r3, #8]
 8004abe:	60da      	str	r2, [r3, #12]
 8004ac0:	611a      	str	r2, [r3, #16]
 8004ac2:	615a      	str	r2, [r3, #20]
	double calc1;
	double calc2;

	uint32_t previousTime=0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint32_t currentTime=0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint32_t elapsed_time_in_seconds=0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	uint32_t i=0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


	while(1)
	{
    	if(!gyroCalibFlag)
 8004adc:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d112      	bne.n	8004b0a <motion_control_task+0xa2>
    	{
    		uart_printf("gyro calibration started\n");
 8004ae4:	4814      	ldr	r0, [pc, #80]	; (8004b38 <motion_control_task+0xd0>)
 8004ae6:	f001 fe57 	bl	8006798 <printf_>
    		if(gyro_do_calibration(gyroCalibVal)<0)
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fce6 	bl	80044c0 <gyro_do_calibration>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da03      	bge.n	8004b02 <motion_control_task+0x9a>
    		{
    			uart_printf("gyro calibration fail\n");
 8004afa:	4810      	ldr	r0, [pc, #64]	; (8004b3c <motion_control_task+0xd4>)
 8004afc:	f001 fe4c 	bl	8006798 <printf_>
    			while(1);
 8004b00:	e7fe      	b.n	8004b00 <motion_control_task+0x98>
    		}
    		gyroCalibFlag = 1;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8004b08:	e7e8      	b.n	8004adc <motion_control_task+0x74>
//    		uart_printf("calib value: %.1f\n", gyroCalibVal[X_AXIS_INDEX]);
    	}
    	else if(!accelCalibFlag)
 8004b0a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d11a      	bne.n	8004b48 <motion_control_task+0xe0>
		{
			uart_printf("accel calibration started\n");
 8004b12:	480b      	ldr	r0, [pc, #44]	; (8004b40 <motion_control_task+0xd8>)
 8004b14:	f001 fe40 	bl	8006798 <printf_>
			if(accel_do_calibration(accelCalibVal)<0)
 8004b18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fd6d 	bl	80045fc <accel_do_calibration>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	da03      	bge.n	8004b30 <motion_control_task+0xc8>
			{
				uart_printf("accel calibration fail\n");
 8004b28:	4806      	ldr	r0, [pc, #24]	; (8004b44 <motion_control_task+0xdc>)
 8004b2a:	f001 fe35 	bl	8006798 <printf_>
				while(1);
 8004b2e:	e7fe      	b.n	8004b2e <motion_control_task+0xc6>
			}
			accelCalibFlag = 1;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004b36:	e7d1      	b.n	8004adc <motion_control_task+0x74>
 8004b38:	08007278 	.word	0x08007278
 8004b3c:	08007294 	.word	0x08007294
 8004b40:	080072ac 	.word	0x080072ac
 8004b44:	080072c8 	.word	0x080072c8
//    		uart_printf("calib value: %.1f\n", gyroCalibVal[X_AXIS_INDEX]);
		}

    	else if((gyroCalibFlag == 1)&&(accelCalibFlag == 1))
 8004b48:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d1c5      	bne.n	8004adc <motion_control_task+0x74>
 8004b50:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d1c1      	bne.n	8004adc <motion_control_task+0x74>
    	{
    		if(accel_measurement_read(accelRawData)<0)
 8004b58:	48b9      	ldr	r0, [pc, #740]	; (8004e40 <motion_control_task+0x3d8>)
 8004b5a:	f7ff fc7b 	bl	8004454 <accel_measurement_read>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	da02      	bge.n	8004b6a <motion_control_task+0x102>
    			uart_printf("accel read fail\n");
 8004b64:	48b7      	ldr	r0, [pc, #732]	; (8004e44 <motion_control_task+0x3dc>)
 8004b66:	f001 fe17 	bl	8006798 <printf_>

    		accelRawData[X_AXIS_INDEX] = accelRawData[X_AXIS_INDEX]+accelCalibVal[X_AXIS_INDEX];
 8004b6a:	4bb5      	ldr	r3, [pc, #724]	; (8004e40 <motion_control_task+0x3d8>)
 8004b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fb fc9f 	bl	80004b4 <__aeabi_i2d>
 8004b76:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	f7fb fb4d 	bl	800021c <__adddf3>
 8004b82:	4603      	mov	r3, r0
 8004b84:	460c      	mov	r4, r1
 8004b86:	4618      	mov	r0, r3
 8004b88:	4621      	mov	r1, r4
 8004b8a:	f7fb ffa9 	bl	8000ae0 <__aeabi_d2iz>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	b21a      	sxth	r2, r3
 8004b92:	4bab      	ldr	r3, [pc, #684]	; (8004e40 <motion_control_task+0x3d8>)
 8004b94:	801a      	strh	r2, [r3, #0]
    		accelRawData[Y_AXIS_INDEX] = accelRawData[Y_AXIS_INDEX]+accelCalibVal[Y_AXIS_INDEX];
 8004b96:	4baa      	ldr	r3, [pc, #680]	; (8004e40 <motion_control_task+0x3d8>)
 8004b98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fb fc89 	bl	80004b4 <__aeabi_i2d>
 8004ba2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4623      	mov	r3, r4
 8004baa:	f7fb fb37 	bl	800021c <__adddf3>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	f7fb ff93 	bl	8000ae0 <__aeabi_d2iz>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	b21a      	sxth	r2, r3
 8004bbe:	4ba0      	ldr	r3, [pc, #640]	; (8004e40 <motion_control_task+0x3d8>)
 8004bc0:	805a      	strh	r2, [r3, #2]
    		accelRawData[Z_AXIS_INDEX] = accelRawData[Z_AXIS_INDEX]+accelCalibVal[Z_AXIS_INDEX];
 8004bc2:	4b9f      	ldr	r3, [pc, #636]	; (8004e40 <motion_control_task+0x3d8>)
 8004bc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fb fc73 	bl	80004b4 <__aeabi_i2d>
 8004bce:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	f7fb fb21 	bl	800021c <__adddf3>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	460c      	mov	r4, r1
 8004bde:	4618      	mov	r0, r3
 8004be0:	4621      	mov	r1, r4
 8004be2:	f7fb ff7d 	bl	8000ae0 <__aeabi_d2iz>
 8004be6:	4603      	mov	r3, r0
 8004be8:	b21a      	sxth	r2, r3
 8004bea:	4b95      	ldr	r3, [pc, #596]	; (8004e40 <motion_control_task+0x3d8>)
 8004bec:	809a      	strh	r2, [r3, #4]

			/*
			 * This will increase speed of execution since we don't have to calculate
			 * the squares each data more than once in one iteration. also this increases readability.
			 */
			squareOfRawAccel_X = accelRawData[X_AXIS_INDEX]*accelRawData[X_AXIS_INDEX];
 8004bee:	4b94      	ldr	r3, [pc, #592]	; (8004e40 <motion_control_task+0x3d8>)
 8004bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4b92      	ldr	r3, [pc, #584]	; (8004e40 <motion_control_task+0x3d8>)
 8004bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bfc:	fb03 f302 	mul.w	r3, r3, r2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fb fc57 	bl	80004b4 <__aeabi_i2d>
 8004c06:	4603      	mov	r3, r0
 8004c08:	460c      	mov	r4, r1
 8004c0a:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			squareOfRawAccel_Y = accelRawData[Y_AXIS_INDEX]*accelRawData[Y_AXIS_INDEX];
 8004c0e:	4b8c      	ldr	r3, [pc, #560]	; (8004e40 <motion_control_task+0x3d8>)
 8004c10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c14:	461a      	mov	r2, r3
 8004c16:	4b8a      	ldr	r3, [pc, #552]	; (8004e40 <motion_control_task+0x3d8>)
 8004c18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c1c:	fb03 f302 	mul.w	r3, r3, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fb fc47 	bl	80004b4 <__aeabi_i2d>
 8004c26:	4603      	mov	r3, r0
 8004c28:	460c      	mov	r4, r1
 8004c2a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			squareOfRawAccel_Z = accelRawData[Z_AXIS_INDEX]*accelRawData[Z_AXIS_INDEX];
 8004c2e:	4b84      	ldr	r3, [pc, #528]	; (8004e40 <motion_control_task+0x3d8>)
 8004c30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c34:	461a      	mov	r2, r3
 8004c36:	4b82      	ldr	r3, [pc, #520]	; (8004e40 <motion_control_task+0x3d8>)
 8004c38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c3c:	fb03 f302 	mul.w	r3, r3, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fb fc37 	bl	80004b4 <__aeabi_i2d>
 8004c46:	4603      	mov	r3, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

			accelAngleValues[Y_AXIS_INDEX] = atan(accelRawData[X_AXIS_INDEX] / sqrt((squareOfRawAccel_Y+squareOfRawAccel_Z)) );
 8004c4e:	4b7c      	ldr	r3, [pc, #496]	; (8004e40 <motion_control_task+0x3d8>)
 8004c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fb fc2d 	bl	80004b4 <__aeabi_i2d>
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	460d      	mov	r5, r1
 8004c5e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c66:	f7fb fad9 	bl	800021c <__adddf3>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4610      	mov	r0, r2
 8004c70:	4619      	mov	r1, r3
 8004c72:	f002 f9db 	bl	800702c <sqrt>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	f7fb fda9 	bl	80007d4 <__aeabi_ddiv>
 8004c82:	4603      	mov	r3, r0
 8004c84:	460c      	mov	r4, r1
 8004c86:	4618      	mov	r0, r3
 8004c88:	4621      	mov	r1, r4
 8004c8a:	f002 f839 	bl	8006d00 <atan>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	460c      	mov	r4, r1
 8004c92:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			accelAngleValues[X_AXIS_INDEX] = atan(accelRawData[Y_AXIS_INDEX] / sqrt((squareOfRawAccel_X+squareOfRawAccel_Z)) );
 8004c96:	4b6a      	ldr	r3, [pc, #424]	; (8004e40 <motion_control_task+0x3d8>)
 8004c98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fc09 	bl	80004b4 <__aeabi_i2d>
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	460d      	mov	r5, r1
 8004ca6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004caa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004cae:	f7fb fab5 	bl	800021c <__adddf3>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f002 f9b7 	bl	800702c <sqrt>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f7fb fd85 	bl	80007d4 <__aeabi_ddiv>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f002 f815 	bl	8006d00 <atan>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	460c      	mov	r4, r1
 8004cda:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

			/* convert radians to degrees */
			accelAngleValues[X_AXIS_INDEX] = accelAngleValues[X_AXIS_INDEX]*DEGREE_CNVRT_CONST;
 8004cde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ce2:	a353      	add	r3, pc, #332	; (adr r3, 8004e30 <motion_control_task+0x3c8>)
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f7fb fc4a 	bl	8000580 <__aeabi_dmul>
 8004cec:	4603      	mov	r3, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			accelAngleValues[Y_AXIS_INDEX] = accelAngleValues[Y_AXIS_INDEX]*DEGREE_CNVRT_CONST;
 8004cf4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cf8:	a34d      	add	r3, pc, #308	; (adr r3, 8004e30 <motion_control_task+0x3c8>)
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	f7fb fc3f 	bl	8000580 <__aeabi_dmul>
 8004d02:	4603      	mov	r3, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

			/*
			 * delay for sampling gyro values and to give a
			 * delay b/w reads of gyro and accelerometer.
			 */
			vTaskDelay(5/portTICK_PERIOD_MS);
 8004d0a:	2005      	movs	r0, #5
 8004d0c:	f7fd fa76 	bl	80021fc <vTaskDelay>

			if(gyro_measurement_read(gyroRawData)<0)
 8004d10:	484d      	ldr	r0, [pc, #308]	; (8004e48 <motion_control_task+0x3e0>)
 8004d12:	f7ff fb69 	bl	80043e8 <gyro_measurement_read>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	da02      	bge.n	8004d22 <motion_control_task+0x2ba>
				uart_printf("gyro read fail\n");
 8004d1c:	484b      	ldr	r0, [pc, #300]	; (8004e4c <motion_control_task+0x3e4>)
 8004d1e:	f001 fd3b 	bl	8006798 <printf_>

    		currentTime = millis();
 8004d22:	f001 ff1b 	bl	8006b5c <millis>
 8004d26:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    		elapsed_time_in_seconds = (1000/(currentTime-previousTime));
 8004d2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    		if(elapsed_time_in_seconds!=0)
 8004d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d054      	beq.n	8004df2 <motion_control_task+0x38a>
    		{
    			calc1 = ((double)elapsed_time_in_seconds)*16.4f;
 8004d48:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004d4c:	f7fb fba2 	bl	8000494 <__aeabi_ui2d>
 8004d50:	a339      	add	r3, pc, #228	; (adr r3, 8004e38 <motion_control_task+0x3d0>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fc13 	bl	8000580 <__aeabi_dmul>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

				calc2 = ((double)gyroRawData[X_AXIS_INDEX])-gyroCalibVal[X_AXIS_INDEX];
 8004d62:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <motion_control_task+0x3e0>)
 8004d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fb fba3 	bl	80004b4 <__aeabi_i2d>
 8004d6e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004d72:	461a      	mov	r2, r3
 8004d74:	4623      	mov	r3, r4
 8004d76:	f7fb fa4f 	bl	8000218 <__aeabi_dsub>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				gyroAngleValues[X_AXIS_INDEX] = (calc2/calc1)+gyroAngleValues[X_AXIS_INDEX];
 8004d82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004d86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d8a:	f7fb fd23 	bl	80007d4 <__aeabi_ddiv>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	4618      	mov	r0, r3
 8004d94:	4621      	mov	r1, r4
 8004d96:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4623      	mov	r3, r4
 8004d9e:	f7fb fa3d 	bl	800021c <__adddf3>
 8004da2:	4603      	mov	r3, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	e9c7 3408 	strd	r3, r4, [r7, #32]

				calc2 = (double)gyroRawData[Y_AXIS_INDEX]-gyroCalibVal[Y_AXIS_INDEX];
 8004daa:	4b27      	ldr	r3, [pc, #156]	; (8004e48 <motion_control_task+0x3e0>)
 8004dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb fb7f 	bl	80004b4 <__aeabi_i2d>
 8004db6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	f7fb fa2b 	bl	8000218 <__aeabi_dsub>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				gyroAngleValues[Y_AXIS_INDEX] = (calc2/calc1)+gyroAngleValues[Y_AXIS_INDEX];
 8004dca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004dce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dd2:	f7fb fcff 	bl	80007d4 <__aeabi_ddiv>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	460c      	mov	r4, r1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	4621      	mov	r1, r4
 8004dde:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004de2:	461a      	mov	r2, r3
 8004de4:	4623      	mov	r3, r4
 8004de6:	f7fb fa19 	bl	800021c <__adddf3>
 8004dea:	4603      	mov	r3, r0
 8004dec:	460c      	mov	r4, r1
 8004dee:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    		}
			previousTime = currentTime;
 8004df2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

//				uart_printf("raw x: %d     x: %.1f \n",gyroData[0], gyroSum);
			i++;
 8004dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if(i==20)
 8004e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e08:	2b14      	cmp	r3, #20
 8004e0a:	f47f ae67 	bne.w	8004adc <motion_control_task+0x74>
			{
				uart_printf("gyro: %.1f  accel: %.1f\n", gyroAngleValues[X_AXIS_INDEX], accelAngleValues[X_AXIS_INDEX]);
 8004e0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e12:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004e16:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	460a      	mov	r2, r1
 8004e1e:	480c      	ldr	r0, [pc, #48]	; (8004e50 <motion_control_task+0x3e8>)
 8004e20:	f001 fcba 	bl	8006798 <printf_>
//				uart_printf("x: %d  y: %d  z: %d\n", accelRawData[X_AXIS_INDEX], accelRawData[Y_AXIS_INDEX], accelRawData[Z_AXIS_INDEX]);
				i=0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    	if(!gyroCalibFlag)
 8004e2a:	e657      	b.n	8004adc <motion_control_task+0x74>
 8004e2c:	f3af 8000 	nop.w
 8004e30:	7f62b6ae 	.word	0x7f62b6ae
 8004e34:	404ca5d9 	.word	0x404ca5d9
 8004e38:	60000000 	.word	0x60000000
 8004e3c:	40306666 	.word	0x40306666
 8004e40:	20001e10 	.word	0x20001e10
 8004e44:	080072e0 	.word	0x080072e0
 8004e48:	20001e18 	.word	0x20001e18
 8004e4c:	080072f4 	.word	0x080072f4
 8004e50:	08007304 	.word	0x08007304

08004e54 <drone_init_task>:
    	}
	}
}

void drone_init_task(void *pvParameters)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	6078      	str	r0, [r7, #4]
	timer3_init();
 8004e5c:	f001 fdd4 	bl	8006a08 <timer3_init>
	motors_pwm_init();
 8004e60:	f001 fe06 	bl	8006a70 <motors_pwm_init>
	I2C_LowLevel_Init(400000, 0x38);
 8004e64:	2138      	movs	r1, #56	; 0x38
 8004e66:	4818      	ldr	r0, [pc, #96]	; (8004ec8 <drone_init_task+0x74>)
 8004e68:	f7ff fc86 	bl	8004778 <I2C_LowLevel_Init>
	debug_led_init();
 8004e6c:	f7ff fa60 	bl	8004330 <debug_led_init>
	uart_console_init(9600);
 8004e70:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8004e74:	f001 fecc 	bl	8006c10 <uart_console_init>
	/*safety delay for mpu6050 to powerup*/
	vTaskDelay(500/portTICK_PERIOD_MS);
 8004e78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e7c:	f7fd f9be 	bl	80021fc <vTaskDelay>
	if(mpu6050_init(FS_SEL3, FS_SEL1)<0)
 8004e80:	2108      	movs	r1, #8
 8004e82:	2018      	movs	r0, #24
 8004e84:	f7ff fa72 	bl	800436c <mpu6050_init>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	da03      	bge.n	8004e96 <drone_init_task+0x42>
	{
		uart_printf("mpu6050 init failed.\n");
 8004e8e:	480f      	ldr	r0, [pc, #60]	; (8004ecc <drone_init_task+0x78>)
 8004e90:	f001 fc82 	bl	8006798 <printf_>
		while(1);
 8004e94:	e7fe      	b.n	8004e94 <drone_init_task+0x40>
	}
	else
	{
		uart_printf("drone init complete.\n");
 8004e96:	480e      	ldr	r0, [pc, #56]	; (8004ed0 <drone_init_task+0x7c>)
 8004e98:	f001 fc7e 	bl	8006798 <printf_>
		vTaskDelay(2000/portTICK_PERIOD_MS);
 8004e9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004ea0:	f7fd f9ac 	bl	80021fc <vTaskDelay>
		xTaskCreate(motion_control_task, "motion_control_task", 500, NULL, 1, NULL );
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004eb2:	4908      	ldr	r1, [pc, #32]	; (8004ed4 <drone_init_task+0x80>)
 8004eb4:	4808      	ldr	r0, [pc, #32]	; (8004ed8 <drone_init_task+0x84>)
 8004eb6:	f7fc ffd9 	bl	8001e6c <xTaskCreate>
		vTaskDelete(NULL);
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f7fd f910 	bl	80020e0 <vTaskDelete>
	}
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	00061a80 	.word	0x00061a80
 8004ecc:	08007320 	.word	0x08007320
 8004ed0:	08007338 	.word	0x08007338
 8004ed4:	08007350 	.word	0x08007350
 8004ed8:	08004a69 	.word	0x08004a69

08004edc <main>:

int main(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af02      	add	r7, sp, #8
	xTaskCreate(drone_init_task, "drone_init_task", 200, NULL, 0, NULL );
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	2300      	movs	r3, #0
 8004eec:	22c8      	movs	r2, #200	; 0xc8
 8004eee:	4903      	ldr	r1, [pc, #12]	; (8004efc <main+0x20>)
 8004ef0:	4803      	ldr	r0, [pc, #12]	; (8004f00 <main+0x24>)
 8004ef2:	f7fc ffbb 	bl	8001e6c <xTaskCreate>
	vTaskStartScheduler();
 8004ef6:	f7fd f9b5 	bl	8002264 <vTaskStartScheduler>
	while(1);
 8004efa:	e7fe      	b.n	8004efa <main+0x1e>
 8004efc:	08007364 	.word	0x08007364
 8004f00:	08004e55 	.word	0x08004e55

08004f04 <vApplicationMallocFailedHook>:

    }
}

void vApplicationMallocFailedHook( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8004f08:	e7fe      	b.n	8004f08 <vApplicationMallocFailedHook+0x4>

08004f0a <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8004f14:	e7fe      	b.n	8004f14 <vApplicationStackOverflowHook+0xa>

08004f16 <vApplicationIdleHook>:
}

void vApplicationIdleHook( void )
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8004f1c:	f7fc fb06 	bl	800152c <xPortGetFreeHeapSize>
 8004f20:	4603      	mov	r3, r0
 8004f22:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8004f24:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <_putchar>:
  void* arg;
} out_fct_wrap_type;

// custom function
void _putchar(char character)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
	USART_SendData(PRINTF_USART, character);
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4807      	ldr	r0, [pc, #28]	; (8004f60 <_putchar+0x30>)
 8004f42:	f7ff f9c8 	bl	80042d6 <USART_SendData>
	while(USART_GetFlagStatus(PRINTF_USART, USART_FLAG_TC) == 0);
 8004f46:	bf00      	nop
 8004f48:	2140      	movs	r1, #64	; 0x40
 8004f4a:	4805      	ldr	r0, [pc, #20]	; (8004f60 <_putchar+0x30>)
 8004f4c:	f7ff f9d4 	bl	80042f8 <USART_GetFlagStatus>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f8      	beq.n	8004f48 <_putchar+0x18>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40013800 	.word	0x40013800

08004f64 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4603      	mov	r3, r0
 8004f72:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <_out_char+0x1e>
    _putchar(character);
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ffca 	bl	8004f30 <_putchar>
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e002      	b.n	8004fba <_strnlen_s+0x16>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d004      	beq.n	8004fcc <_strnlen_s+0x28>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	1e5a      	subs	r2, r3, #1
 8004fc6:	603a      	str	r2, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f3      	bne.n	8004fb4 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	1ad3      	subs	r3, r2, r3
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	2b2f      	cmp	r3, #47	; 0x2f
 8004fea:	d904      	bls.n	8004ff6 <_is_digit+0x1a>
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b39      	cmp	r3, #57	; 0x39
 8004ff0:	d801      	bhi.n	8004ff6 <_is_digit+0x1a>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <_is_digit+0x1c>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	b2db      	uxtb	r3, r3
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8005014:	e00e      	b.n	8005034 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4618      	mov	r0, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	1c59      	adds	r1, r3, #1
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6011      	str	r1, [r2, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	4403      	add	r3, r0
 8005030:	3b30      	subs	r3, #48	; 0x30
 8005032:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff ffce 	bl	8004fdc <_is_digit>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e7      	bne.n	8005016 <_atoi+0xe>
  }
  return i;
 8005046:	68fb      	ldr	r3, [r7, #12]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8005062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d125      	bne.n	80050b8 <_out_rev+0x68>
 800506c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d120      	bne.n	80050b8 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e00a      	b.n	8005092 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	1c53      	adds	r3, r2, #1
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	68fc      	ldr	r4, [r7, #12]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	2020      	movs	r0, #32
 800508a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	3301      	adds	r3, #1
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	429a      	cmp	r2, r3
 8005098:	d3f0      	bcc.n	800507c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800509a:	e00d      	b.n	80050b8 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	3b01      	subs	r3, #1
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	4413      	add	r3, r2
 80050a8:	7818      	ldrb	r0, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	1c53      	adds	r3, r2, #1
 80050ae:	607b      	str	r3, [r7, #4]
 80050b0:	68fc      	ldr	r4, [r7, #12]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	47a0      	blx	r4
  while (len) {
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ee      	bne.n	800509c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80050c8:	e007      	b.n	80050da <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	1c53      	adds	r3, r2, #1
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	68fc      	ldr	r4, [r7, #12]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	2020      	movs	r0, #32
 80050d8:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad2      	subs	r2, r2, r3
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3f1      	bcc.n	80050ca <_out_rev+0x7a>
    }
  }

  return idx;
 80050e6:	687b      	ldr	r3, [r7, #4]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd90      	pop	{r4, r7, pc}

080050f0 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af04      	add	r7, sp, #16
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d136      	bne.n	8005176 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <_ntoa_format+0x50>
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d013      	beq.n	8005140 <_ntoa_format+0x50>
 8005118:	f897 3020 	ldrb.w	r3, [r7, #32]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <_ntoa_format+0x3a>
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <_ntoa_format+0x50>
      width--;
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	3b01      	subs	r3, #1
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005130:	e006      	b.n	8005140 <_ntoa_format+0x50>
      buf[len++] = '0';
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	61fa      	str	r2, [r7, #28]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4413      	add	r3, r2
 800513c:	2230      	movs	r2, #48	; 0x30
 800513e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	429a      	cmp	r2, r3
 8005146:	d20a      	bcs.n	800515e <_ntoa_format+0x6e>
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b1f      	cmp	r3, #31
 800514c:	d9f1      	bls.n	8005132 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800514e:	e006      	b.n	800515e <_ntoa_format+0x6e>
      buf[len++] = '0';
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	61fa      	str	r2, [r7, #28]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4413      	add	r3, r2
 800515a:	2230      	movs	r2, #48	; 0x30
 800515c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d006      	beq.n	8005176 <_ntoa_format+0x86>
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d202      	bcs.n	8005176 <_ntoa_format+0x86>
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b1f      	cmp	r3, #31
 8005174:	d9ec      	bls.n	8005150 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b00      	cmp	r3, #0
 800517e:	d058      	beq.n	8005232 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005186:	2b00      	cmp	r3, #0
 8005188:	d116      	bne.n	80051b8 <_ntoa_format+0xc8>
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d013      	beq.n	80051b8 <_ntoa_format+0xc8>
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	429a      	cmp	r2, r3
 8005196:	d003      	beq.n	80051a0 <_ntoa_format+0xb0>
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	429a      	cmp	r2, r3
 800519e:	d10b      	bne.n	80051b8 <_ntoa_format+0xc8>
      len--;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <_ntoa_format+0xc8>
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d102      	bne.n	80051b8 <_ntoa_format+0xc8>
        len--;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d10f      	bne.n	80051de <_ntoa_format+0xee>
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <_ntoa_format+0xee>
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b1f      	cmp	r3, #31
 80051cc:	d807      	bhi.n	80051de <_ntoa_format+0xee>
      buf[len++] = 'x';
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	61fa      	str	r2, [r7, #28]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4413      	add	r3, r2
 80051d8:	2278      	movs	r2, #120	; 0x78
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e01f      	b.n	800521e <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d10f      	bne.n	8005204 <_ntoa_format+0x114>
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <_ntoa_format+0x114>
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	2b1f      	cmp	r3, #31
 80051f2:	d807      	bhi.n	8005204 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	61fa      	str	r2, [r7, #28]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4413      	add	r3, r2
 80051fe:	2258      	movs	r2, #88	; 0x58
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e00c      	b.n	800521e <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	2b02      	cmp	r3, #2
 8005208:	d109      	bne.n	800521e <_ntoa_format+0x12e>
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2b1f      	cmp	r3, #31
 800520e:	d806      	bhi.n	800521e <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	61fa      	str	r2, [r7, #28]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4413      	add	r3, r2
 800521a:	2262      	movs	r2, #98	; 0x62
 800521c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b1f      	cmp	r3, #31
 8005222:	d806      	bhi.n	8005232 <_ntoa_format+0x142>
      buf[len++] = '0';
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4413      	add	r3, r2
 800522e:	2230      	movs	r2, #48	; 0x30
 8005230:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b1f      	cmp	r3, #31
 8005236:	d824      	bhi.n	8005282 <_ntoa_format+0x192>
    if (negative) {
 8005238:	f897 3020 	ldrb.w	r3, [r7, #32]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <_ntoa_format+0x160>
      buf[len++] = '-';
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	61fa      	str	r2, [r7, #28]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4413      	add	r3, r2
 800524a:	222d      	movs	r2, #45	; 0x2d
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e018      	b.n	8005282 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	61fa      	str	r2, [r7, #28]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4413      	add	r3, r2
 8005264:	222b      	movs	r2, #43	; 0x2b
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e00b      	b.n	8005282 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	61fa      	str	r2, [r7, #28]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4413      	add	r3, r2
 800527e:	2220      	movs	r2, #32
 8005280:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	9303      	str	r3, [sp, #12]
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	9302      	str	r3, [sp, #8]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff fed9 	bl	8005050 <_out_rev>
 800529e:	4603      	mov	r3, r0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b096      	sub	sp, #88	; 0x58
 80052ac:	af08      	add	r7, sp, #32
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80052ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d103      	bne.n	80052c8 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80052c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c2:	f023 0310 	bic.w	r3, r3, #16
 80052c6:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80052c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <_ntoa_long+0x30>
 80052d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d033      	beq.n	8005340 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80052d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80052e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052e2:	fb01 f202 	mul.w	r2, r1, r2
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80052ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	637a      	str	r2, [r7, #52]	; 0x34
 80052f2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80052f6:	2a09      	cmp	r2, #9
 80052f8:	d804      	bhi.n	8005304 <_ntoa_long+0x5c>
 80052fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80052fe:	3230      	adds	r2, #48	; 0x30
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	e00d      	b.n	8005320 <_ntoa_long+0x78>
 8005304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005306:	f002 0220 	and.w	r2, r2, #32
 800530a:	2a00      	cmp	r2, #0
 800530c:	d001      	beq.n	8005312 <_ntoa_long+0x6a>
 800530e:	2141      	movs	r1, #65	; 0x41
 8005310:	e000      	b.n	8005314 <_ntoa_long+0x6c>
 8005312:	2161      	movs	r1, #97	; 0x61
 8005314:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005318:	440a      	add	r2, r1
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	3a0a      	subs	r2, #10
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005324:	440b      	add	r3, r1
 8005326:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800532a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800532c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8005334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <_ntoa_long+0x98>
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	2b1f      	cmp	r3, #31
 800533e:	d9cb      	bls.n	80052d8 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8005340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005342:	9306      	str	r3, [sp, #24]
 8005344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005346:	9305      	str	r3, [sp, #20]
 8005348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534a:	9304      	str	r3, [sp, #16]
 800534c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534e:	9303      	str	r3, [sp, #12]
 8005350:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005354:	9302      	str	r3, [sp, #8]
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	f107 0310 	add.w	r3, r7, #16
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7ff fec2 	bl	80050f0 <_ntoa_format>
 800536c:	4603      	mov	r3, r0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3738      	adds	r7, #56	; 0x38
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005376:	b590      	push	{r4, r7, lr}
 8005378:	b097      	sub	sp, #92	; 0x5c
 800537a:	af08      	add	r7, sp, #32
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8005388:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800538c:	4323      	orrs	r3, r4
 800538e:	d103      	bne.n	8005398 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8005390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005392:	f023 0310 	bic.w	r3, r3, #16
 8005396:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8005398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800539a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <_ntoa_long_long+0x34>
 80053a2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80053a6:	4323      	orrs	r3, r4
 80053a8:	d039      	beq.n	800541e <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 80053aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053b2:	f7fb fbdd 	bl	8000b70 <__aeabi_uldivmod>
 80053b6:	461c      	mov	r4, r3
 80053b8:	4613      	mov	r3, r2
 80053ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	637a      	str	r2, [r7, #52]	; 0x34
 80053c4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80053c8:	2a09      	cmp	r2, #9
 80053ca:	d804      	bhi.n	80053d6 <_ntoa_long_long+0x60>
 80053cc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80053d0:	3230      	adds	r2, #48	; 0x30
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	e00d      	b.n	80053f2 <_ntoa_long_long+0x7c>
 80053d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053d8:	f002 0220 	and.w	r2, r2, #32
 80053dc:	2a00      	cmp	r2, #0
 80053de:	d001      	beq.n	80053e4 <_ntoa_long_long+0x6e>
 80053e0:	2141      	movs	r1, #65	; 0x41
 80053e2:	e000      	b.n	80053e6 <_ntoa_long_long+0x70>
 80053e4:	2161      	movs	r1, #97	; 0x61
 80053e6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80053ea:	440a      	add	r2, r1
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	3a0a      	subs	r2, #10
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80053f6:	440b      	add	r3, r1
 80053f8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80053fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005400:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005404:	f7fb fbb4 	bl	8000b70 <__aeabi_uldivmod>
 8005408:	4603      	mov	r3, r0
 800540a:	460c      	mov	r4, r1
 800540c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8005410:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005414:	4323      	orrs	r3, r4
 8005416:	d002      	beq.n	800541e <_ntoa_long_long+0xa8>
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541a:	2b1f      	cmp	r3, #31
 800541c:	d9c5      	bls.n	80053aa <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800541e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005420:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005422:	9206      	str	r2, [sp, #24]
 8005424:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005426:	9205      	str	r2, [sp, #20]
 8005428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800542a:	9204      	str	r2, [sp, #16]
 800542c:	9303      	str	r3, [sp, #12]
 800542e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005432:	9302      	str	r3, [sp, #8]
 8005434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	f107 0310 	add.w	r3, r7, #16
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f7ff fe53 	bl	80050f0 <_ntoa_format>
 800544a:	4603      	mov	r3, r0
}
 800544c:	4618      	mov	r0, r3
 800544e:	373c      	adds	r7, #60	; 0x3c
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}
 8005454:	0000      	movs	r0, r0
	...

08005458 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b09d      	sub	sp, #116	; 0x74
 800545c:	af06      	add	r7, sp, #24
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	f04f 0400 	mov.w	r4, #0
 8005472:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8005476:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800547a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800547e:	f7fb fae7 	bl	8000a50 <__aeabi_dcmpeq>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10f      	bne.n	80054a8 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8005488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548a:	9303      	str	r3, [sp, #12]
 800548c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548e:	9302      	str	r3, [sp, #8]
 8005490:	2303      	movs	r3, #3
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	4bac      	ldr	r3, [pc, #688]	; (8005748 <_ftoa+0x2f0>)
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff fdd6 	bl	8005050 <_out_rev>
 80054a4:	4603      	mov	r3, r0
 80054a6:	e234      	b.n	8005912 <_ftoa+0x4ba>
  if (value < -DBL_MAX)
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80054b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054b4:	f7fb fad6 	bl	8000a64 <__aeabi_dcmplt>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00f      	beq.n	80054de <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80054be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c0:	9303      	str	r3, [sp, #12]
 80054c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c4:	9302      	str	r3, [sp, #8]
 80054c6:	2304      	movs	r3, #4
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	4ba0      	ldr	r3, [pc, #640]	; (800574c <_ftoa+0x2f4>)
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff fdbb 	bl	8005050 <_out_rev>
 80054da:	4603      	mov	r3, r0
 80054dc:	e219      	b.n	8005912 <_ftoa+0x4ba>
  if (value > DBL_MAX)
 80054de:	f04f 32ff 	mov.w	r2, #4294967295
 80054e2:	4b9b      	ldr	r3, [pc, #620]	; (8005750 <_ftoa+0x2f8>)
 80054e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054e8:	f7fb fada 	bl	8000aa0 <__aeabi_dcmpgt>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01d      	beq.n	800552e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80054f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <_ftoa+0xa8>
 80054fc:	4b95      	ldr	r3, [pc, #596]	; (8005754 <_ftoa+0x2fc>)
 80054fe:	e000      	b.n	8005502 <_ftoa+0xaa>
 8005500:	4b95      	ldr	r3, [pc, #596]	; (8005758 <_ftoa+0x300>)
 8005502:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005504:	f002 0204 	and.w	r2, r2, #4
 8005508:	2a00      	cmp	r2, #0
 800550a:	d001      	beq.n	8005510 <_ftoa+0xb8>
 800550c:	2204      	movs	r2, #4
 800550e:	e000      	b.n	8005512 <_ftoa+0xba>
 8005510:	2203      	movs	r2, #3
 8005512:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005514:	9103      	str	r1, [sp, #12]
 8005516:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005518:	9102      	str	r1, [sp, #8]
 800551a:	9201      	str	r2, [sp, #4]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff fd93 	bl	8005050 <_out_rev>
 800552a:	4603      	mov	r3, r0
 800552c:	e1f1      	b.n	8005912 <_ftoa+0x4ba>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800552e:	a382      	add	r3, pc, #520	; (adr r3, 8005738 <_ftoa+0x2e0>)
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005538:	f7fb fab2 	bl	8000aa0 <__aeabi_dcmpgt>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <_ftoa+0xfe>
 8005542:	a37f      	add	r3, pc, #508	; (adr r3, 8005740 <_ftoa+0x2e8>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800554c:	f7fb fa8a 	bl	8000a64 <__aeabi_dcmplt>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d011      	beq.n	800557a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005558:	9304      	str	r3, [sp, #16]
 800555a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800555c:	9303      	str	r3, [sp, #12]
 800555e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005560:	9302      	str	r3, [sp, #8]
 8005562:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005566:	e88d 0018 	stmia.w	sp, {r3, r4}
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f9d9 	bl	8005928 <_etoa>
 8005576:	4603      	mov	r3, r0
 8005578:	e1cb      	b.n	8005912 <_ftoa+0x4ba>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800557a:	2300      	movs	r3, #0
 800557c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800558c:	f7fb fa6a 	bl	8000a64 <__aeabi_dcmplt>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00e      	beq.n	80055b4 <_ftoa+0x15c>
    negative = true;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 800559c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80055a0:	f04f 0000 	mov.w	r0, #0
 80055a4:	f04f 0100 	mov.w	r1, #0
 80055a8:	f7fa fe36 	bl	8000218 <__aeabi_dsub>
 80055ac:	4603      	mov	r3, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80055b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10e      	bne.n	80055dc <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80055be:	2306      	movs	r3, #6
 80055c0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80055c2:	e00b      	b.n	80055dc <_ftoa+0x184>
    buf[len++] = '0';
 80055c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	657a      	str	r2, [r7, #84]	; 0x54
 80055ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80055ce:	4413      	add	r3, r2
 80055d0:	2230      	movs	r2, #48	; 0x30
 80055d2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80055d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055d8:	3b01      	subs	r3, #1
 80055da:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80055dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055de:	2b1f      	cmp	r3, #31
 80055e0:	d802      	bhi.n	80055e8 <_ftoa+0x190>
 80055e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055e4:	2b09      	cmp	r3, #9
 80055e6:	d8ed      	bhi.n	80055c4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 80055e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055ec:	f7fb fa78 	bl	8000ae0 <__aeabi_d2iz>
 80055f0:	4603      	mov	r3, r0
 80055f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 80055f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80055f6:	f7fa ff5d 	bl	80004b4 <__aeabi_i2d>
 80055fa:	4603      	mov	r3, r0
 80055fc:	460c      	mov	r4, r1
 80055fe:	461a      	mov	r2, r3
 8005600:	4623      	mov	r3, r4
 8005602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005606:	f7fa fe07 	bl	8000218 <__aeabi_dsub>
 800560a:	4603      	mov	r3, r0
 800560c:	460c      	mov	r4, r1
 800560e:	4618      	mov	r0, r3
 8005610:	4621      	mov	r1, r4
 8005612:	4a52      	ldr	r2, [pc, #328]	; (800575c <_ftoa+0x304>)
 8005614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4413      	add	r3, r2
 800561a:	cb18      	ldmia	r3, {r3, r4}
 800561c:	461a      	mov	r2, r3
 800561e:	4623      	mov	r3, r4
 8005620:	f7fa ffae 	bl	8000580 <__aeabi_dmul>
 8005624:	4603      	mov	r3, r0
 8005626:	460c      	mov	r4, r1
 8005628:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 800562c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005630:	f7fb fa7e 	bl	8000b30 <__aeabi_d2uiz>
 8005634:	4603      	mov	r3, r0
 8005636:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8005638:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800563a:	f7fa ff2b 	bl	8000494 <__aeabi_ui2d>
 800563e:	4603      	mov	r3, r0
 8005640:	460c      	mov	r4, r1
 8005642:	461a      	mov	r2, r3
 8005644:	4623      	mov	r3, r4
 8005646:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800564a:	f7fa fde5 	bl	8000218 <__aeabi_dsub>
 800564e:	4603      	mov	r3, r0
 8005650:	460c      	mov	r4, r1
 8005652:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  if (diff > 0.5) {
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	4b41      	ldr	r3, [pc, #260]	; (8005760 <_ftoa+0x308>)
 800565c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005660:	f7fb fa1e 	bl	8000aa0 <__aeabi_dcmpgt>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d017      	beq.n	800569a <_ftoa+0x242>
    ++frac;
 800566a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566c:	3301      	adds	r3, #1
 800566e:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8005670:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005672:	f7fa ff0f 	bl	8000494 <__aeabi_ui2d>
 8005676:	4a39      	ldr	r2, [pc, #228]	; (800575c <_ftoa+0x304>)
 8005678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4413      	add	r3, r2
 800567e:	cb18      	ldmia	r3, {r3, r4}
 8005680:	461a      	mov	r2, r3
 8005682:	4623      	mov	r3, r4
 8005684:	f7fb fa02 	bl	8000a8c <__aeabi_dcmpge>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d01a      	beq.n	80056c4 <_ftoa+0x26c>
      frac = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 8005692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005694:	3301      	adds	r3, #1
 8005696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005698:	e014      	b.n	80056c4 <_ftoa+0x26c>
    }
  }
  else if (diff < 0.5) {
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	4b30      	ldr	r3, [pc, #192]	; (8005760 <_ftoa+0x308>)
 80056a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80056a4:	f7fb f9de 	bl	8000a64 <__aeabi_dcmplt>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <_ftoa+0x26c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80056ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <_ftoa+0x266>
 80056b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <_ftoa+0x26c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80056be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c0:	3301      	adds	r3, #1
 80056c2:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 80056c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d14c      	bne.n	8005764 <_ftoa+0x30c>
    diff = value - (double)whole;
 80056ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80056cc:	f7fa fef2 	bl	80004b4 <__aeabi_i2d>
 80056d0:	4603      	mov	r3, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	461a      	mov	r2, r3
 80056d6:	4623      	mov	r3, r4
 80056d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056dc:	f7fa fd9c 	bl	8000218 <__aeabi_dsub>
 80056e0:	4603      	mov	r3, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80056e8:	2301      	movs	r3, #1
 80056ea:	461c      	mov	r4, r3
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <_ftoa+0x308>)
 80056f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80056f6:	f7fb f9b5 	bl	8000a64 <__aeabi_dcmplt>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <_ftoa+0x2ac>
 8005700:	2300      	movs	r3, #0
 8005702:	461c      	mov	r4, r3
 8005704:	b2e3      	uxtb	r3, r4
 8005706:	f083 0301 	eor.w	r3, r3, #1
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d109      	bne.n	8005724 <_ftoa+0x2cc>
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	4b12      	ldr	r3, [pc, #72]	; (8005760 <_ftoa+0x308>)
 8005716:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800571a:	f7fb f9c1 	bl	8000aa0 <__aeabi_dcmpgt>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d066      	beq.n	80057f2 <_ftoa+0x39a>
 8005724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8084 	beq.w	8005838 <_ftoa+0x3e0>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8005730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005732:	3301      	adds	r3, #1
 8005734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005736:	e07f      	b.n	8005838 <_ftoa+0x3e0>
 8005738:	00000000 	.word	0x00000000
 800573c:	41cdcd65 	.word	0x41cdcd65
 8005740:	00000000 	.word	0x00000000
 8005744:	c1cdcd65 	.word	0xc1cdcd65
 8005748:	08007374 	.word	0x08007374
 800574c:	08007378 	.word	0x08007378
 8005750:	7fefffff 	.word	0x7fefffff
 8005754:	08007380 	.word	0x08007380
 8005758:	08007388 	.word	0x08007388
 800575c:	08007390 	.word	0x08007390
 8005760:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8005764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005766:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005768:	e020      	b.n	80057ac <_ftoa+0x354>
      --count;
 800576a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576c:	3b01      	subs	r3, #1
 800576e:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8005770:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005772:	1c4b      	adds	r3, r1, #1
 8005774:	657b      	str	r3, [r7, #84]	; 0x54
 8005776:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005778:	4b68      	ldr	r3, [pc, #416]	; (800591c <_ftoa+0x4c4>)
 800577a:	fba3 2300 	umull	r2, r3, r3, r0
 800577e:	08da      	lsrs	r2, r3, #3
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	1ac2      	subs	r2, r0, r3
 800578a:	b2d3      	uxtb	r3, r2
 800578c:	3330      	adds	r3, #48	; 0x30
 800578e:	b2da      	uxtb	r2, r3
 8005790:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005794:	440b      	add	r3, r1
 8005796:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800579a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800579c:	4a5f      	ldr	r2, [pc, #380]	; (800591c <_ftoa+0x4c4>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	08db      	lsrs	r3, r3, #3
 80057a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <_ftoa+0x35c>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ae:	2b1f      	cmp	r3, #31
 80057b0:	d9db      	bls.n	800576a <_ftoa+0x312>
 80057b2:	e00a      	b.n	80057ca <_ftoa+0x372>
        break;
 80057b4:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80057b6:	e008      	b.n	80057ca <_ftoa+0x372>
      buf[len++] = '0';
 80057b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	657a      	str	r2, [r7, #84]	; 0x54
 80057be:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80057c2:	4413      	add	r3, r2
 80057c4:	2230      	movs	r2, #48	; 0x30
 80057c6:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80057ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057cc:	2b1f      	cmp	r3, #31
 80057ce:	d804      	bhi.n	80057da <_ftoa+0x382>
 80057d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d2:	1e5a      	subs	r2, r3, #1
 80057d4:	647a      	str	r2, [r7, #68]	; 0x44
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1ee      	bne.n	80057b8 <_ftoa+0x360>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057dc:	2b1f      	cmp	r3, #31
 80057de:	d82b      	bhi.n	8005838 <_ftoa+0x3e0>
      // add decimal
      buf[len++] = '.';
 80057e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	657a      	str	r2, [r7, #84]	; 0x54
 80057e6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80057ea:	4413      	add	r3, r2
 80057ec:	222e      	movs	r2, #46	; 0x2e
 80057ee:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057f2:	e021      	b.n	8005838 <_ftoa+0x3e0>
    buf[len++] = (char)(48 + (whole % 10));
 80057f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	657b      	str	r3, [r7, #84]	; 0x54
 80057fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057fc:	4b48      	ldr	r3, [pc, #288]	; (8005920 <_ftoa+0x4c8>)
 80057fe:	fb83 1302 	smull	r1, r3, r3, r2
 8005802:	1099      	asrs	r1, r3, #2
 8005804:	17d3      	asrs	r3, r2, #31
 8005806:	1ac9      	subs	r1, r1, r3
 8005808:	460b      	mov	r3, r1
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	1ad1      	subs	r1, r2, r3
 8005812:	b2cb      	uxtb	r3, r1
 8005814:	3330      	adds	r3, #48	; 0x30
 8005816:	b2da      	uxtb	r2, r3
 8005818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800581c:	4403      	add	r3, r0
 800581e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8005822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005824:	4a3e      	ldr	r2, [pc, #248]	; (8005920 <_ftoa+0x4c8>)
 8005826:	fb82 1203 	smull	r1, r2, r2, r3
 800582a:	1092      	asrs	r2, r2, #2
 800582c:	17db      	asrs	r3, r3, #31
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <_ftoa+0x3e8>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800583a:	2b1f      	cmp	r3, #31
 800583c:	d9da      	bls.n	80057f4 <_ftoa+0x39c>
 800583e:	e000      	b.n	8005842 <_ftoa+0x3ea>
      break;
 8005840:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8005842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d124      	bne.n	8005896 <_ftoa+0x43e>
 800584c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01f      	beq.n	8005896 <_ftoa+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005858:	2b00      	cmp	r3, #0
 800585a:	d015      	beq.n	8005888 <_ftoa+0x430>
 800585c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <_ftoa+0x416>
 8005864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00c      	beq.n	8005888 <_ftoa+0x430>
      width--;
 800586e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005870:	3b01      	subs	r3, #1
 8005872:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005874:	e008      	b.n	8005888 <_ftoa+0x430>
      buf[len++] = '0';
 8005876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	657a      	str	r2, [r7, #84]	; 0x54
 800587c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005880:	4413      	add	r3, r2
 8005882:	2230      	movs	r2, #48	; 0x30
 8005884:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800588a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800588c:	429a      	cmp	r2, r3
 800588e:	d202      	bcs.n	8005896 <_ftoa+0x43e>
 8005890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005892:	2b1f      	cmp	r3, #31
 8005894:	d9ef      	bls.n	8005876 <_ftoa+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005898:	2b1f      	cmp	r3, #31
 800589a:	d82a      	bhi.n	80058f2 <_ftoa+0x49a>
    if (negative) {
 800589c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d009      	beq.n	80058b8 <_ftoa+0x460>
      buf[len++] = '-';
 80058a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	657a      	str	r2, [r7, #84]	; 0x54
 80058aa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80058ae:	4413      	add	r3, r2
 80058b0:	222d      	movs	r2, #45	; 0x2d
 80058b2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80058b6:	e01c      	b.n	80058f2 <_ftoa+0x49a>
    }
    else if (flags & FLAGS_PLUS) {
 80058b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <_ftoa+0x47e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80058c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	657a      	str	r2, [r7, #84]	; 0x54
 80058c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80058cc:	4413      	add	r3, r2
 80058ce:	222b      	movs	r2, #43	; 0x2b
 80058d0:	f803 2c48 	strb.w	r2, [r3, #-72]
 80058d4:	e00d      	b.n	80058f2 <_ftoa+0x49a>
    }
    else if (flags & FLAGS_SPACE) {
 80058d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <_ftoa+0x49a>
      buf[len++] = ' ';
 80058e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	657a      	str	r2, [r7, #84]	; 0x54
 80058e6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80058ea:	4413      	add	r3, r2
 80058ec:	2220      	movs	r2, #32
 80058ee:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80058f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058f4:	9303      	str	r3, [sp, #12]
 80058f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f8:	9302      	str	r3, [sp, #8]
 80058fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	f107 0310 	add.w	r3, r7, #16
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff fba0 	bl	8005050 <_out_rev>
 8005910:	4603      	mov	r3, r0
}
 8005912:	4618      	mov	r0, r3
 8005914:	375c      	adds	r7, #92	; 0x5c
 8005916:	46bd      	mov	sp, r7
 8005918:	bd90      	pop	{r4, r7, pc}
 800591a:	bf00      	nop
 800591c:	cccccccd 	.word	0xcccccccd
 8005920:	66666667 	.word	0x66666667
 8005924:	00000000 	.word	0x00000000

08005928 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	b09b      	sub	sp, #108	; 0x6c
 800592e:	af06      	add	r7, sp, #24
 8005930:	6178      	str	r0, [r7, #20]
 8005932:	6139      	str	r1, [r7, #16]
 8005934:	60fa      	str	r2, [r7, #12]
 8005936:	60bb      	str	r3, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8005938:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800593c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005940:	f7fb f886 	bl	8000a50 <__aeabi_dcmpeq>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d014      	beq.n	8005974 <_etoa+0x4c>
 800594a:	f04f 32ff 	mov.w	r2, #4294967295
 800594e:	4bc0      	ldr	r3, [pc, #768]	; (8005c50 <_etoa+0x328>)
 8005950:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005954:	f7fb f8a4 	bl	8000aa0 <__aeabi_dcmpgt>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <_etoa+0x4c>
 800595e:	f04f 32ff 	mov.w	r2, #4294967295
 8005962:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005966:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800596a:	f7fb f87b 	bl	8000a64 <__aeabi_dcmplt>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d014      	beq.n	800599e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800597e:	9303      	str	r3, [sp, #12]
 8005980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005984:	9302      	str	r3, [sp, #8]
 8005986:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800598a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	6939      	ldr	r1, [r7, #16]
 8005994:	6978      	ldr	r0, [r7, #20]
 8005996:	f7ff fd5f 	bl	8005458 <_ftoa>
 800599a:	4603      	mov	r3, r0
 800599c:	e241      	b.n	8005e22 <_etoa+0x4fa>
  }

  // determine the sign
  const bool negative = value < 0;
 800599e:	2301      	movs	r3, #1
 80059a0:	461e      	mov	r6, r3
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80059ae:	f7fb f859 	bl	8000a64 <__aeabi_dcmplt>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <_etoa+0x94>
 80059b8:	2300      	movs	r3, #0
 80059ba:	461e      	mov	r6, r3
 80059bc:	f887 6043 	strb.w	r6, [r7, #67]	; 0x43
  if (negative) {
 80059c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <_etoa+0xac>
    value = -value;
 80059c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80059cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80059d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80059d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80059e0:	2306      	movs	r3, #6
 80059e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80059e6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80059ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80059ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059f2:	ea4f 5813 	mov.w	r8, r3, lsr #20
 80059f6:	f04f 0900 	mov.w	r9, #0
 80059fa:	4643      	mov	r3, r8
 80059fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8005a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0e:	4991      	ldr	r1, [pc, #580]	; (8005c54 <_etoa+0x32c>)
 8005a10:	ea02 0200 	and.w	r2, r2, r0
 8005a14:	ea03 0301 	and.w	r3, r3, r1
 8005a18:	f04f 0000 	mov.w	r0, #0
 8005a1c:	498e      	ldr	r1, [pc, #568]	; (8005c58 <_etoa+0x330>)
 8005a1e:	ea42 0200 	orr.w	r2, r2, r0
 8005a22:	ea43 0301 	orr.w	r3, r3, r1
 8005a26:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005a2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a2c:	f7fa fd42 	bl	80004b4 <__aeabi_i2d>
 8005a30:	a37b      	add	r3, pc, #492	; (adr r3, 8005c20 <_etoa+0x2f8>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f7fa fda3 	bl	8000580 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4619      	mov	r1, r3
 8005a42:	a379      	add	r3, pc, #484	; (adr r3, 8005c28 <_etoa+0x300>)
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f7fa fbe8 	bl	800021c <__adddf3>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4690      	mov	r8, r2
 8005a52:	4699      	mov	r9, r3
 8005a54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	4b7f      	ldr	r3, [pc, #508]	; (8005c5c <_etoa+0x334>)
 8005a5e:	f7fa fbdb 	bl	8000218 <__aeabi_dsub>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	a371      	add	r3, pc, #452	; (adr r3, 8005c30 <_etoa+0x308>)
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	f7fa fd86 	bl	8000580 <__aeabi_dmul>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fa fbce 	bl	800021c <__adddf3>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	f7fb f82a 	bl	8000ae0 <__aeabi_d2iz>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005a90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005a92:	f7fa fd0f 	bl	80004b4 <__aeabi_i2d>
 8005a96:	a368      	add	r3, pc, #416	; (adr r3, 8005c38 <_etoa+0x310>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa fd70 	bl	8000580 <__aeabi_dmul>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	4b6c      	ldr	r3, [pc, #432]	; (8005c60 <_etoa+0x338>)
 8005aae:	f7fa fbb5 	bl	800021c <__adddf3>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f7fb f811 	bl	8000ae0 <__aeabi_d2iz>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005ac2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005ac4:	f7fa fcf6 	bl	80004b4 <__aeabi_i2d>
 8005ac8:	a35d      	add	r3, pc, #372	; (adr r3, 8005c40 <_etoa+0x318>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa fd57 	bl	8000580 <__aeabi_dmul>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4690      	mov	r8, r2
 8005ad8:	4699      	mov	r9, r3
 8005ada:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005adc:	f7fa fcea 	bl	80004b4 <__aeabi_i2d>
 8005ae0:	a359      	add	r3, pc, #356	; (adr r3, 8005c48 <_etoa+0x320>)
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f7fa fd4b 	bl	8000580 <__aeabi_dmul>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4640      	mov	r0, r8
 8005af0:	4649      	mov	r1, r9
 8005af2:	f7fa fb91 	bl	8000218 <__aeabi_dsub>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  const double z2 = z * z;
 8005afe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005b06:	f7fa fd3b 	bl	8000580 <__aeabi_dmul>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b14:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005b18:	461a      	mov	r2, r3
 8005b1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005b1e:	0515      	lsls	r5, r2, #20
 8005b20:	2400      	movs	r4, #0
 8005b22:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005b26:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8005b2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	f7fa fb73 	bl	800021c <__adddf3>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4690      	mov	r8, r2
 8005b3c:	4699      	mov	r9, r3
 8005b3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b42:	f04f 0000 	mov.w	r0, #0
 8005b46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005b4a:	f7fa fb65 	bl	8000218 <__aeabi_dsub>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4692      	mov	sl, r2
 8005b54:	469b      	mov	fp, r3
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <_etoa+0x33c>)
 8005b5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b60:	f7fa fe38 	bl	80007d4 <__aeabi_ddiv>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	4b3d      	ldr	r3, [pc, #244]	; (8005c68 <_etoa+0x340>)
 8005b72:	f7fa fb53 	bl	800021c <__adddf3>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b7e:	f7fa fe29 	bl	80007d4 <__aeabi_ddiv>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4610      	mov	r0, r2
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	4b37      	ldr	r3, [pc, #220]	; (8005c6c <_etoa+0x344>)
 8005b90:	f7fa fb44 	bl	800021c <__adddf3>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b9c:	f7fa fe1a 	bl	80007d4 <__aeabi_ddiv>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	4659      	mov	r1, fp
 8005ba8:	f7fa fb38 	bl	800021c <__adddf3>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	f7fa fe0e 	bl	80007d4 <__aeabi_ddiv>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <_etoa+0x330>)
 8005bc6:	f7fa fb29 	bl	800021c <__adddf3>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f7fa fcd5 	bl	8000580 <__aeabi_dmul>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	460c      	mov	r4, r1
 8005bda:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8005bde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005be2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005be6:	f7fa ff5b 	bl	8000aa0 <__aeabi_dcmpgt>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00d      	beq.n	8005c0c <_etoa+0x2e4>
    expval--;
 8005bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 8005bf6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <_etoa+0x340>)
 8005c00:	f7fa fde8 	bl	80007d4 <__aeabi_ddiv>
 8005c04:	4603      	mov	r3, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0e:	2b63      	cmp	r3, #99	; 0x63
 8005c10:	dc2e      	bgt.n	8005c70 <_etoa+0x348>
 8005c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c14:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005c18:	db2a      	blt.n	8005c70 <_etoa+0x348>
 8005c1a:	2304      	movs	r3, #4
 8005c1c:	e029      	b.n	8005c72 <_etoa+0x34a>
 8005c1e:	bf00      	nop
 8005c20:	509f79fb 	.word	0x509f79fb
 8005c24:	3fd34413 	.word	0x3fd34413
 8005c28:	8b60c8b3 	.word	0x8b60c8b3
 8005c2c:	3fc68a28 	.word	0x3fc68a28
 8005c30:	636f4361 	.word	0x636f4361
 8005c34:	3fd287a7 	.word	0x3fd287a7
 8005c38:	0979a371 	.word	0x0979a371
 8005c3c:	400a934f 	.word	0x400a934f
 8005c40:	bbb55516 	.word	0xbbb55516
 8005c44:	40026bb1 	.word	0x40026bb1
 8005c48:	fefa39ef 	.word	0xfefa39ef
 8005c4c:	3fe62e42 	.word	0x3fe62e42
 8005c50:	7fefffff 	.word	0x7fefffff
 8005c54:	000fffff 	.word	0x000fffff
 8005c58:	3ff00000 	.word	0x3ff00000
 8005c5c:	3ff80000 	.word	0x3ff80000
 8005c60:	3fe00000 	.word	0x3fe00000
 8005c64:	402c0000 	.word	0x402c0000
 8005c68:	40240000 	.word	0x40240000
 8005c6c:	40180000 	.word	0x40180000
 8005c70:	2305      	movs	r3, #5
 8005c72:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d03d      	beq.n	8005cfc <_etoa+0x3d4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8005c80:	a36b      	add	r3, pc, #428	; (adr r3, 8005e30 <_etoa+0x508>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005c8a:	f7fa feff 	bl	8000a8c <__aeabi_dcmpge>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d024      	beq.n	8005cde <_etoa+0x3b6>
 8005c94:	a368      	add	r3, pc, #416	; (adr r3, 8005e38 <_etoa+0x510>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005c9e:	f7fa fee1 	bl	8000a64 <__aeabi_dcmplt>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01a      	beq.n	8005cde <_etoa+0x3b6>
      if ((int)prec > expval) {
 8005ca8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	dd07      	ble.n	8005cc2 <_etoa+0x39a>
        prec = (unsigned)((int)prec - expval - 1);
 8005cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cc0:	e002      	b.n	8005cc8 <_etoa+0x3a0>
      }
      else {
        prec = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cdc:	e00e      	b.n	8005cfc <_etoa+0x3d4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8005cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <_etoa+0x3d4>
 8005ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <_etoa+0x3d4>
        --prec;
 8005cf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d00:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 8005d02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d904      	bls.n	8005d16 <_etoa+0x3ee>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	647b      	str	r3, [r7, #68]	; 0x44
 8005d14:	e001      	b.n	8005d1a <_etoa+0x3f2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <_etoa+0x408>
 8005d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <_etoa+0x408>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 8005d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <_etoa+0x426>
    value /= conv.F;
 8005d36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4623      	mov	r3, r4
 8005d3e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005d42:	f7fa fd47 	bl	80007d4 <__aeabi_ddiv>
 8005d46:	4603      	mov	r3, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
  }

  // output the floating part
  const size_t start_idx = idx;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005d52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d006      	beq.n	8005d68 <_etoa+0x440>
 8005d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5c:	603b      	str	r3, [r7, #0]
 8005d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	e003      	b.n	8005d70 <_etoa+0x448>
 8005d68:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005d6c:	e887 0018 	stmia.w	r7, {r3, r4}
 8005d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d78:	9304      	str	r3, [sp, #16]
 8005d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7c:	9303      	str	r3, [sp, #12]
 8005d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d82:	9302      	str	r3, [sp, #8]
 8005d84:	e897 0018 	ldmia.w	r7, {r3, r4}
 8005d88:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	6939      	ldr	r1, [r7, #16]
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	f7ff fb60 	bl	8005458 <_ftoa>
 8005d98:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 8005d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d03f      	beq.n	8005e20 <_etoa+0x4f8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <_etoa+0x488>
 8005dac:	2045      	movs	r0, #69	; 0x45
 8005dae:	e000      	b.n	8005db2 <_etoa+0x48a>
 8005db0:	2065      	movs	r0, #101	; 0x65
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	1c53      	adds	r3, r2, #1
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	697c      	ldr	r4, [r7, #20]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6939      	ldr	r1, [r7, #16]
 8005dbe:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bfb8      	it	lt
 8005dc6:	425b      	neglt	r3, r3
 8005dc8:	4618      	mov	r0, r3
 8005dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dcc:	0fdb      	lsrs	r3, r3, #31
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dd2:	3a01      	subs	r2, #1
 8005dd4:	2105      	movs	r1, #5
 8005dd6:	9105      	str	r1, [sp, #20]
 8005dd8:	9204      	str	r2, [sp, #16]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	9203      	str	r2, [sp, #12]
 8005dde:	220a      	movs	r2, #10
 8005de0:	9202      	str	r2, [sp, #8]
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	9000      	str	r0, [sp, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	6939      	ldr	r1, [r7, #16]
 8005dec:	6978      	ldr	r0, [r7, #20]
 8005dee:	f7ff fa5b 	bl	80052a8 <_ntoa_long>
 8005df2:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00f      	beq.n	8005e20 <_etoa+0x4f8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005e00:	e007      	b.n	8005e12 <_etoa+0x4ea>
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	1c53      	adds	r3, r2, #1
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	697c      	ldr	r4, [r7, #20]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6939      	ldr	r1, [r7, #16]
 8005e0e:	2020      	movs	r0, #32
 8005e10:	47a0      	blx	r4
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	1ad2      	subs	r2, r2, r3
 8005e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d3f0      	bcc.n	8005e02 <_etoa+0x4da>
    }
  }
  return idx;
 8005e20:	68fb      	ldr	r3, [r7, #12]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3754      	adds	r7, #84	; 0x54
 8005e26:	46bd      	mov	sp, r7
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	f3af 8000 	nop.w
 8005e30:	eb1c432d 	.word	0xeb1c432d
 8005e34:	3f1a36e2 	.word	0x3f1a36e2
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	412e8480 	.word	0x412e8480

08005e40 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005e40:	b5b0      	push	{r4, r5, r7, lr}
 8005e42:	b0a0      	sub	sp, #128	; 0x80
 8005e44:	af0a      	add	r7, sp, #40	; 0x28
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 8488 	bne.w	800676a <_vsnprintf+0x92a>
    // use null output function
    out = _out_null;
 8005e5a:	4ba0      	ldr	r3, [pc, #640]	; (80060dc <_vsnprintf+0x29c>)
 8005e5c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8005e5e:	f000 bc84 	b.w	800676a <_vsnprintf+0x92a>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b25      	cmp	r3, #37	; 0x25
 8005e68:	d00d      	beq.n	8005e86 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	7818      	ldrb	r0, [r3, #0]
 8005e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e70:	1c53      	adds	r3, r2, #1
 8005e72:	647b      	str	r3, [r7, #68]	; 0x44
 8005e74:	68fc      	ldr	r4, [r7, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	47a0      	blx	r4
      format++;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	603b      	str	r3, [r7, #0]
      continue;
 8005e82:	f000 bc72 	b.w	800676a <_vsnprintf+0x92a>
    }
    else {
      // yes, evaluate it
      format++;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	3b20      	subs	r3, #32
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d856      	bhi.n	8005f48 <_vsnprintf+0x108>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <_vsnprintf+0x60>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005f21 	.word	0x08005f21
 8005ea4:	08005f49 	.word	0x08005f49
 8005ea8:	08005f49 	.word	0x08005f49
 8005eac:	08005f35 	.word	0x08005f35
 8005eb0:	08005f49 	.word	0x08005f49
 8005eb4:	08005f49 	.word	0x08005f49
 8005eb8:	08005f49 	.word	0x08005f49
 8005ebc:	08005f49 	.word	0x08005f49
 8005ec0:	08005f49 	.word	0x08005f49
 8005ec4:	08005f49 	.word	0x08005f49
 8005ec8:	08005f49 	.word	0x08005f49
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005f49 	.word	0x08005f49
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005f49 	.word	0x08005f49
 8005edc:	08005f49 	.word	0x08005f49
 8005ee0:	08005ee5 	.word	0x08005ee5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	657b      	str	r3, [r7, #84]	; 0x54
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ef6:	e02a      	b.n	8005f4e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efa:	f043 0302 	orr.w	r3, r3, #2
 8005efe:	657b      	str	r3, [r7, #84]	; 0x54
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	2301      	movs	r3, #1
 8005f08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f0a:	e020      	b.n	8005f4e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f0e:	f043 0304 	orr.w	r3, r3, #4
 8005f12:	657b      	str	r3, [r7, #84]	; 0x54
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f1e:	e016      	b.n	8005f4e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f22:	f043 0308 	orr.w	r3, r3, #8
 8005f26:	657b      	str	r3, [r7, #84]	; 0x54
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	2301      	movs	r3, #1
 8005f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f32:	e00c      	b.n	8005f4e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f36:	f043 0310 	orr.w	r3, r3, #16
 8005f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	2301      	movs	r3, #1
 8005f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f46:	e002      	b.n	8005f4e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4c:	bf00      	nop
      }
    } while (n);
 8005f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d19d      	bne.n	8005e90 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff f83d 	bl	8004fdc <_is_digit>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <_vsnprintf+0x134>
      width = _atoi(&format);
 8005f68:	463b      	mov	r3, r7
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff f84c 	bl	8005008 <_atoi>
 8005f70:	6538      	str	r0, [r7, #80]	; 0x50
 8005f72:	e018      	b.n	8005fa6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7a:	d114      	bne.n	8005fa6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8005f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f7e:	1d1a      	adds	r2, r3, #4
 8005f80:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da07      	bge.n	8005f9c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8005f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8e:	f043 0302 	orr.w	r3, r3, #2
 8005f92:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	425b      	negs	r3, r3
 8005f98:	653b      	str	r3, [r7, #80]	; 0x50
 8005f9a:	e001      	b.n	8005fa0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb0:	d124      	bne.n	8005ffc <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8005fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fb8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff f809 	bl	8004fdc <_is_digit>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff f818 	bl	8005008 <_atoi>
 8005fd8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005fda:	e00f      	b.n	8005ffc <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe2:	d10b      	bne.n	8005ffc <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8005fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fe6:	1d1a      	adds	r2, r3, #4
 8005fe8:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	3b68      	subs	r3, #104	; 0x68
 8006002:	2b12      	cmp	r3, #18
 8006004:	d866      	bhi.n	80060d4 <_vsnprintf+0x294>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <_vsnprintf+0x1cc>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800607f 	.word	0x0800607f
 8006010:	080060d5 	.word	0x080060d5
 8006014:	080060b5 	.word	0x080060b5
 8006018:	080060d5 	.word	0x080060d5
 800601c:	08006059 	.word	0x08006059
 8006020:	080060d5 	.word	0x080060d5
 8006024:	080060d5 	.word	0x080060d5
 8006028:	080060d5 	.word	0x080060d5
 800602c:	080060d5 	.word	0x080060d5
 8006030:	080060d5 	.word	0x080060d5
 8006034:	080060d5 	.word	0x080060d5
 8006038:	080060d5 	.word	0x080060d5
 800603c:	080060a5 	.word	0x080060a5
 8006040:	080060d5 	.word	0x080060d5
 8006044:	080060d5 	.word	0x080060d5
 8006048:	080060d5 	.word	0x080060d5
 800604c:	080060d5 	.word	0x080060d5
 8006050:	080060d5 	.word	0x080060d5
 8006054:	080060c5 	.word	0x080060c5
      case 'l' :
        flags |= FLAGS_LONG;
 8006058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b6c      	cmp	r3, #108	; 0x6c
 800606c:	d134      	bne.n	80060d8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800606e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006070:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006074:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	603b      	str	r3, [r7, #0]
        }
        break;
 800607c:	e02c      	b.n	80060d8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800607e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b68      	cmp	r3, #104	; 0x68
 8006092:	d125      	bne.n	80060e0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8006094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800609a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	3301      	adds	r3, #1
 80060a0:	603b      	str	r3, [r7, #0]
        }
        break;
 80060a2:	e01d      	b.n	80060e0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80060a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060aa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	603b      	str	r3, [r7, #0]
        break;
 80060b2:	e016      	b.n	80060e2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80060b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ba:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	3301      	adds	r3, #1
 80060c0:	603b      	str	r3, [r7, #0]
        break;
 80060c2:	e00e      	b.n	80060e2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80060c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	3301      	adds	r3, #1
 80060d0:	603b      	str	r3, [r7, #0]
        break;
 80060d2:	e006      	b.n	80060e2 <_vsnprintf+0x2a2>
      default :
        break;
 80060d4:	bf00      	nop
 80060d6:	e004      	b.n	80060e2 <_vsnprintf+0x2a2>
        break;
 80060d8:	bf00      	nop
 80060da:	e002      	b.n	80060e2 <_vsnprintf+0x2a2>
 80060dc:	08004f65 	.word	0x08004f65
        break;
 80060e0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	3b25      	subs	r3, #37	; 0x25
 80060e8:	2b53      	cmp	r3, #83	; 0x53
 80060ea:	f200 8331 	bhi.w	8006750 <_vsnprintf+0x910>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <_vsnprintf+0x2b4>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006739 	.word	0x08006739
 80060f8:	08006751 	.word	0x08006751
 80060fc:	08006751 	.word	0x08006751
 8006100:	08006751 	.word	0x08006751
 8006104:	08006751 	.word	0x08006751
 8006108:	08006751 	.word	0x08006751
 800610c:	08006751 	.word	0x08006751
 8006110:	08006751 	.word	0x08006751
 8006114:	08006751 	.word	0x08006751
 8006118:	08006751 	.word	0x08006751
 800611c:	08006751 	.word	0x08006751
 8006120:	08006751 	.word	0x08006751
 8006124:	08006751 	.word	0x08006751
 8006128:	08006751 	.word	0x08006751
 800612c:	08006751 	.word	0x08006751
 8006130:	08006751 	.word	0x08006751
 8006134:	08006751 	.word	0x08006751
 8006138:	08006751 	.word	0x08006751
 800613c:	08006751 	.word	0x08006751
 8006140:	08006751 	.word	0x08006751
 8006144:	08006751 	.word	0x08006751
 8006148:	08006751 	.word	0x08006751
 800614c:	08006751 	.word	0x08006751
 8006150:	08006751 	.word	0x08006751
 8006154:	08006751 	.word	0x08006751
 8006158:	08006751 	.word	0x08006751
 800615c:	08006751 	.word	0x08006751
 8006160:	08006751 	.word	0x08006751
 8006164:	08006751 	.word	0x08006751
 8006168:	08006751 	.word	0x08006751
 800616c:	08006751 	.word	0x08006751
 8006170:	08006751 	.word	0x08006751
 8006174:	08006513 	.word	0x08006513
 8006178:	080064cd 	.word	0x080064cd
 800617c:	08006513 	.word	0x08006513
 8006180:	08006751 	.word	0x08006751
 8006184:	08006751 	.word	0x08006751
 8006188:	08006751 	.word	0x08006751
 800618c:	08006751 	.word	0x08006751
 8006190:	08006751 	.word	0x08006751
 8006194:	08006751 	.word	0x08006751
 8006198:	08006751 	.word	0x08006751
 800619c:	08006751 	.word	0x08006751
 80061a0:	08006751 	.word	0x08006751
 80061a4:	08006751 	.word	0x08006751
 80061a8:	08006751 	.word	0x08006751
 80061ac:	08006751 	.word	0x08006751
 80061b0:	08006751 	.word	0x08006751
 80061b4:	08006751 	.word	0x08006751
 80061b8:	08006751 	.word	0x08006751
 80061bc:	08006751 	.word	0x08006751
 80061c0:	08006245 	.word	0x08006245
 80061c4:	08006751 	.word	0x08006751
 80061c8:	08006751 	.word	0x08006751
 80061cc:	08006751 	.word	0x08006751
 80061d0:	08006751 	.word	0x08006751
 80061d4:	08006751 	.word	0x08006751
 80061d8:	08006751 	.word	0x08006751
 80061dc:	08006751 	.word	0x08006751
 80061e0:	08006751 	.word	0x08006751
 80061e4:	08006751 	.word	0x08006751
 80061e8:	08006245 	.word	0x08006245
 80061ec:	08006579 	.word	0x08006579
 80061f0:	08006245 	.word	0x08006245
 80061f4:	08006513 	.word	0x08006513
 80061f8:	080064cd 	.word	0x080064cd
 80061fc:	08006513 	.word	0x08006513
 8006200:	08006751 	.word	0x08006751
 8006204:	08006245 	.word	0x08006245
 8006208:	08006751 	.word	0x08006751
 800620c:	08006751 	.word	0x08006751
 8006210:	08006751 	.word	0x08006751
 8006214:	08006751 	.word	0x08006751
 8006218:	08006751 	.word	0x08006751
 800621c:	08006245 	.word	0x08006245
 8006220:	080066b1 	.word	0x080066b1
 8006224:	08006751 	.word	0x08006751
 8006228:	08006751 	.word	0x08006751
 800622c:	080065ed 	.word	0x080065ed
 8006230:	08006751 	.word	0x08006751
 8006234:	08006245 	.word	0x08006245
 8006238:	08006751 	.word	0x08006751
 800623c:	08006751 	.word	0x08006751
 8006240:	08006245 	.word	0x08006245
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b78      	cmp	r3, #120	; 0x78
 800624a:	d003      	beq.n	8006254 <_vsnprintf+0x414>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b58      	cmp	r3, #88	; 0x58
 8006252:	d102      	bne.n	800625a <_vsnprintf+0x41a>
          base = 16U;
 8006254:	2310      	movs	r3, #16
 8006256:	643b      	str	r3, [r7, #64]	; 0x40
 8006258:	e013      	b.n	8006282 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b6f      	cmp	r3, #111	; 0x6f
 8006260:	d102      	bne.n	8006268 <_vsnprintf+0x428>
          base =  8U;
 8006262:	2308      	movs	r3, #8
 8006264:	643b      	str	r3, [r7, #64]	; 0x40
 8006266:	e00c      	b.n	8006282 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b62      	cmp	r3, #98	; 0x62
 800626e:	d102      	bne.n	8006276 <_vsnprintf+0x436>
          base =  2U;
 8006270:	2302      	movs	r3, #2
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
 8006274:	e005      	b.n	8006282 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8006276:	230a      	movs	r3, #10
 8006278:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800627a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800627c:	f023 0310 	bic.w	r3, r3, #16
 8006280:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b58      	cmp	r3, #88	; 0x58
 8006288:	d103      	bne.n	8006292 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800628a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628c:	f043 0320 	orr.w	r3, r3, #32
 8006290:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b69      	cmp	r3, #105	; 0x69
 8006298:	d007      	beq.n	80062aa <_vsnprintf+0x46a>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b64      	cmp	r3, #100	; 0x64
 80062a0:	d003      	beq.n	80062aa <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80062a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a4:	f023 030c 	bic.w	r3, r3, #12
 80062a8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80062aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 80062b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b69      	cmp	r3, #105	; 0x69
 80062c2:	d004      	beq.n	80062ce <_vsnprintf+0x48e>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b64      	cmp	r3, #100	; 0x64
 80062ca:	f040 808c 	bne.w	80063e6 <_vsnprintf+0x5a6>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80062ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d02d      	beq.n	8006334 <_vsnprintf+0x4f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80062d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062da:	3307      	adds	r3, #7
 80062dc:	f023 0307 	bic.w	r3, r3, #7
 80062e0:	f103 0208 	add.w	r2, r3, #8
 80062e4:	66ba      	str	r2, [r7, #104]	; 0x68
 80062e6:	cb18      	ldmia	r3, {r3, r4}
 80062e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80062ec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f174 0200 	sbcs.w	r2, r4, #0
 80062f6:	da02      	bge.n	80062fe <_vsnprintf+0x4be>
 80062f8:	425b      	negs	r3, r3
 80062fa:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 80062fe:	4619      	mov	r1, r3
 8006300:	4622      	mov	r2, r4
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	0fdb      	lsrs	r3, r3, #31
 8006306:	b2d8      	uxtb	r0, r3
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	f04f 0400 	mov.w	r4, #0
 800630e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8006310:	9508      	str	r5, [sp, #32]
 8006312:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8006314:	9507      	str	r5, [sp, #28]
 8006316:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8006318:	9506      	str	r5, [sp, #24]
 800631a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800631e:	9002      	str	r0, [sp, #8]
 8006320:	e88d 0006 	stmia.w	sp, {r1, r2}
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff f823 	bl	8005376 <_ntoa_long_long>
 8006330:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8006332:	e0c7      	b.n	80064c4 <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8006334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633a:	2b00      	cmp	r3, #0
 800633c:	d01e      	beq.n	800637c <_vsnprintf+0x53c>
            const long value = va_arg(va, long);
 800633e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006340:	1d1a      	adds	r2, r3, #4
 8006342:	66ba      	str	r2, [r7, #104]	; 0x68
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	2b00      	cmp	r3, #0
 800634c:	bfb8      	it	lt
 800634e:	425b      	neglt	r3, r3
 8006350:	4619      	mov	r1, r3
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	0fdb      	lsrs	r3, r3, #31
 8006356:	b2db      	uxtb	r3, r3
 8006358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800635a:	9205      	str	r2, [sp, #20]
 800635c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800635e:	9204      	str	r2, [sp, #16]
 8006360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006362:	9203      	str	r2, [sp, #12]
 8006364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006366:	9202      	str	r2, [sp, #8]
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	9100      	str	r1, [sp, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7fe ff98 	bl	80052a8 <_ntoa_long>
 8006378:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800637a:	e0a3      	b.n	80064c4 <_vsnprintf+0x684>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800637c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800637e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <_vsnprintf+0x552>
 8006386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006388:	1d1a      	adds	r2, r3, #4
 800638a:	66ba      	str	r2, [r7, #104]	; 0x68
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	e00e      	b.n	80063b0 <_vsnprintf+0x570>
 8006392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <_vsnprintf+0x568>
 800639c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800639e:	1d1a      	adds	r2, r3, #4
 80063a0:	66ba      	str	r2, [r7, #104]	; 0x68
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	b21b      	sxth	r3, r3
 80063a6:	e003      	b.n	80063b0 <_vsnprintf+0x570>
 80063a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063aa:	1d1a      	adds	r2, r3, #4
 80063ac:	66ba      	str	r2, [r7, #104]	; 0x68
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bfb8      	it	lt
 80063b8:	425b      	neglt	r3, r3
 80063ba:	4619      	mov	r1, r3
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	0fdb      	lsrs	r3, r3, #31
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063c4:	9205      	str	r2, [sp, #20]
 80063c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063c8:	9204      	str	r2, [sp, #16]
 80063ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063cc:	9203      	str	r2, [sp, #12]
 80063ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063d0:	9202      	str	r2, [sp, #8]
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	9100      	str	r1, [sp, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7fe ff63 	bl	80052a8 <_ntoa_long>
 80063e2:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80063e4:	e06e      	b.n	80064c4 <_vsnprintf+0x684>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80063e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01f      	beq.n	8006430 <_vsnprintf+0x5f0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80063f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063f2:	3307      	adds	r3, #7
 80063f4:	f023 0307 	bic.w	r3, r3, #7
 80063f8:	f103 0208 	add.w	r2, r3, #8
 80063fc:	66ba      	str	r2, [r7, #104]	; 0x68
 80063fe:	cb18      	ldmia	r3, {r3, r4}
 8006400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006402:	4611      	mov	r1, r2
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800640a:	9008      	str	r0, [sp, #32]
 800640c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800640e:	9007      	str	r0, [sp, #28]
 8006410:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006412:	9006      	str	r0, [sp, #24]
 8006414:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8006418:	2200      	movs	r2, #0
 800641a:	9202      	str	r2, [sp, #8]
 800641c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7fe ffa5 	bl	8005376 <_ntoa_long_long>
 800642c:	6478      	str	r0, [r7, #68]	; 0x44
 800642e:	e049      	b.n	80064c4 <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8006430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006436:	2b00      	cmp	r3, #0
 8006438:	d016      	beq.n	8006468 <_vsnprintf+0x628>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800643a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800643c:	1d1a      	adds	r2, r3, #4
 800643e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006444:	9205      	str	r2, [sp, #20]
 8006446:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006448:	9204      	str	r2, [sp, #16]
 800644a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800644c:	9203      	str	r2, [sp, #12]
 800644e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006450:	9202      	str	r2, [sp, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	9201      	str	r2, [sp, #4]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7fe ff22 	bl	80052a8 <_ntoa_long>
 8006464:	6478      	str	r0, [r7, #68]	; 0x44
 8006466:	e02d      	b.n	80064c4 <_vsnprintf+0x684>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8006468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <_vsnprintf+0x63e>
 8006472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006474:	1d1a      	adds	r2, r3, #4
 8006476:	66ba      	str	r2, [r7, #104]	; 0x68
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	e00e      	b.n	800649c <_vsnprintf+0x65c>
 800647e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <_vsnprintf+0x654>
 8006488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800648a:	1d1a      	adds	r2, r3, #4
 800648c:	66ba      	str	r2, [r7, #104]	; 0x68
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	e003      	b.n	800649c <_vsnprintf+0x65c>
 8006494:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	66ba      	str	r2, [r7, #104]	; 0x68
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800649e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a0:	9305      	str	r3, [sp, #20]
 80064a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	2300      	movs	r3, #0
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7fe fef3 	bl	80052a8 <_ntoa_long>
 80064c2:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	3301      	adds	r3, #1
 80064c8:	603b      	str	r3, [r7, #0]
        break;
 80064ca:	e14e      	b.n	800676a <_vsnprintf+0x92a>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b46      	cmp	r3, #70	; 0x46
 80064d2:	d103      	bne.n	80064dc <_vsnprintf+0x69c>
 80064d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d6:	f043 0320 	orr.w	r3, r3, #32
 80064da:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80064dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064de:	3307      	adds	r3, #7
 80064e0:	f023 0307 	bic.w	r3, r3, #7
 80064e4:	f103 0208 	add.w	r2, r3, #8
 80064e8:	66ba      	str	r2, [r7, #104]	; 0x68
 80064ea:	cb18      	ldmia	r3, {r3, r4}
 80064ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064ee:	9204      	str	r2, [sp, #16]
 80064f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064f2:	9203      	str	r2, [sp, #12]
 80064f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064f6:	9202      	str	r2, [sp, #8]
 80064f8:	e88d 0018 	stmia.w	sp, {r3, r4}
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7fe ffa8 	bl	8005458 <_ftoa>
 8006508:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	603b      	str	r3, [r7, #0]
        break;
 8006510:	e12b      	b.n	800676a <_vsnprintf+0x92a>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b67      	cmp	r3, #103	; 0x67
 8006518:	d003      	beq.n	8006522 <_vsnprintf+0x6e2>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b47      	cmp	r3, #71	; 0x47
 8006520:	d103      	bne.n	800652a <_vsnprintf+0x6ea>
 8006522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006524:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006528:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b45      	cmp	r3, #69	; 0x45
 8006530:	d003      	beq.n	800653a <_vsnprintf+0x6fa>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b47      	cmp	r3, #71	; 0x47
 8006538:	d103      	bne.n	8006542 <_vsnprintf+0x702>
 800653a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006544:	3307      	adds	r3, #7
 8006546:	f023 0307 	bic.w	r3, r3, #7
 800654a:	f103 0208 	add.w	r2, r3, #8
 800654e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006550:	cb18      	ldmia	r3, {r3, r4}
 8006552:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006554:	9204      	str	r2, [sp, #16]
 8006556:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006558:	9203      	str	r2, [sp, #12]
 800655a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800655c:	9202      	str	r2, [sp, #8]
 800655e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7ff f9dd 	bl	8005928 <_etoa>
 800656e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	603b      	str	r3, [r7, #0]
        break;
 8006576:	e0f8      	b.n	800676a <_vsnprintf+0x92a>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8006578:	2301      	movs	r3, #1
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800657c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10e      	bne.n	80065a4 <_vsnprintf+0x764>
          while (l++ < width) {
 8006586:	e007      	b.n	8006598 <_vsnprintf+0x758>
            out(' ', buffer, idx++, maxlen);
 8006588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800658a:	1c53      	adds	r3, r2, #1
 800658c:	647b      	str	r3, [r7, #68]	; 0x44
 800658e:	68fc      	ldr	r4, [r7, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	2020      	movs	r0, #32
 8006596:	47a0      	blx	r4
          while (l++ < width) {
 8006598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800659e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d3f1      	bcc.n	8006588 <_vsnprintf+0x748>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80065a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a6:	1d1a      	adds	r2, r3, #4
 80065a8:	66ba      	str	r2, [r7, #104]	; 0x68
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	b2d8      	uxtb	r0, r3
 80065ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b0:	1c53      	adds	r3, r2, #1
 80065b2:	647b      	str	r3, [r7, #68]	; 0x44
 80065b4:	68fc      	ldr	r4, [r7, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80065bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00e      	beq.n	80065e4 <_vsnprintf+0x7a4>
          while (l++ < width) {
 80065c6:	e007      	b.n	80065d8 <_vsnprintf+0x798>
            out(' ', buffer, idx++, maxlen);
 80065c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ca:	1c53      	adds	r3, r2, #1
 80065cc:	647b      	str	r3, [r7, #68]	; 0x44
 80065ce:	68fc      	ldr	r4, [r7, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68b9      	ldr	r1, [r7, #8]
 80065d4:	2020      	movs	r0, #32
 80065d6:	47a0      	blx	r4
          while (l++ < width) {
 80065d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d3f1      	bcc.n	80065c8 <_vsnprintf+0x788>
          }
        }
        format++;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	603b      	str	r3, [r7, #0]
        break;
 80065ea:	e0be      	b.n	800676a <_vsnprintf+0x92a>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80065ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065ee:	1d1a      	adds	r2, r3, #4
 80065f0:	66ba      	str	r2, [r7, #104]	; 0x68
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80065f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <_vsnprintf+0x7c0>
 80065fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fe:	e001      	b.n	8006604 <_vsnprintf+0x7c4>
 8006600:	f04f 33ff 	mov.w	r3, #4294967295
 8006604:	4619      	mov	r1, r3
 8006606:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006608:	f7fe fccc 	bl	8004fa4 <_strnlen_s>
 800660c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800660e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <_vsnprintf+0x7e4>
          l = (l < precision ? l : precision);
 8006618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661c:	4293      	cmp	r3, r2
 800661e:	bf28      	it	cs
 8006620:	4613      	movcs	r3, r2
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8006624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d11a      	bne.n	8006664 <_vsnprintf+0x824>
          while (l++ < width) {
 800662e:	e007      	b.n	8006640 <_vsnprintf+0x800>
            out(' ', buffer, idx++, maxlen);
 8006630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006632:	1c53      	adds	r3, r2, #1
 8006634:	647b      	str	r3, [r7, #68]	; 0x44
 8006636:	68fc      	ldr	r4, [r7, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	2020      	movs	r0, #32
 800663e:	47a0      	blx	r4
          while (l++ < width) {
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	637a      	str	r2, [r7, #52]	; 0x34
 8006646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006648:	4293      	cmp	r3, r2
 800664a:	d3f1      	bcc.n	8006630 <_vsnprintf+0x7f0>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800664c:	e00a      	b.n	8006664 <_vsnprintf+0x824>
          out(*(p++), buffer, idx++, maxlen);
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	63ba      	str	r2, [r7, #56]	; 0x38
 8006654:	7818      	ldrb	r0, [r3, #0]
 8006656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006658:	1c53      	adds	r3, r2, #1
 800665a:	647b      	str	r3, [r7, #68]	; 0x44
 800665c:	68fc      	ldr	r4, [r7, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68b9      	ldr	r1, [r7, #8]
 8006662:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <_vsnprintf+0x840>
 800666c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0eb      	beq.n	800664e <_vsnprintf+0x80e>
 8006676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006678:	1e5a      	subs	r2, r3, #1
 800667a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e6      	bne.n	800664e <_vsnprintf+0x80e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8006680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00e      	beq.n	80066a8 <_vsnprintf+0x868>
          while (l++ < width) {
 800668a:	e007      	b.n	800669c <_vsnprintf+0x85c>
            out(' ', buffer, idx++, maxlen);
 800668c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800668e:	1c53      	adds	r3, r2, #1
 8006690:	647b      	str	r3, [r7, #68]	; 0x44
 8006692:	68fc      	ldr	r4, [r7, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	2020      	movs	r0, #32
 800669a:	47a0      	blx	r4
          while (l++ < width) {
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	637a      	str	r2, [r7, #52]	; 0x34
 80066a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d3f1      	bcc.n	800668c <_vsnprintf+0x84c>
          }
        }
        format++;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	3301      	adds	r3, #1
 80066ac:	603b      	str	r3, [r7, #0]
        break;
 80066ae:	e05c      	b.n	800676a <_vsnprintf+0x92a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80066b0:	2308      	movs	r3, #8
 80066b2:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80066b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b6:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80066ba:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80066bc:	2300      	movs	r3, #0
 80066be:	75fb      	strb	r3, [r7, #23]
        if (is_ll) {
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01d      	beq.n	8006702 <_vsnprintf+0x8c2>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80066c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066c8:	1d1a      	adds	r2, r3, #4
 80066ca:	66ba      	str	r2, [r7, #104]	; 0x68
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f04f 0400 	mov.w	r4, #0
 80066d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066d4:	9208      	str	r2, [sp, #32]
 80066d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066d8:	9207      	str	r2, [sp, #28]
 80066da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066dc:	9206      	str	r2, [sp, #24]
 80066de:	f04f 0110 	mov.w	r1, #16
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80066ea:	2200      	movs	r2, #0
 80066ec:	9202      	str	r2, [sp, #8]
 80066ee:	e88d 0018 	stmia.w	sp, {r3, r4}
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7fe fe3c 	bl	8005376 <_ntoa_long_long>
 80066fe:	6478      	str	r0, [r7, #68]	; 0x44
 8006700:	e016      	b.n	8006730 <_vsnprintf+0x8f0>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8006702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006704:	1d1a      	adds	r2, r3, #4
 8006706:	66ba      	str	r2, [r7, #104]	; 0x68
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800670e:	9305      	str	r3, [sp, #20]
 8006710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006712:	9304      	str	r3, [sp, #16]
 8006714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006716:	9303      	str	r3, [sp, #12]
 8006718:	2310      	movs	r3, #16
 800671a:	9302      	str	r3, [sp, #8]
 800671c:	2300      	movs	r3, #0
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	9200      	str	r2, [sp, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7fe fdbd 	bl	80052a8 <_ntoa_long>
 800672e:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	3301      	adds	r3, #1
 8006734:	603b      	str	r3, [r7, #0]
        break;
 8006736:	e018      	b.n	800676a <_vsnprintf+0x92a>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8006738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800673a:	1c53      	adds	r3, r2, #1
 800673c:	647b      	str	r3, [r7, #68]	; 0x44
 800673e:	68fc      	ldr	r4, [r7, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	2025      	movs	r0, #37	; 0x25
 8006746:	47a0      	blx	r4
        format++;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	603b      	str	r3, [r7, #0]
        break;
 800674e:	e00c      	b.n	800676a <_vsnprintf+0x92a>

      default :
        out(*format, buffer, idx++, maxlen);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	7818      	ldrb	r0, [r3, #0]
 8006754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006756:	1c53      	adds	r3, r2, #1
 8006758:	647b      	str	r3, [r7, #68]	; 0x44
 800675a:	68fc      	ldr	r4, [r7, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	47a0      	blx	r4
        format++;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	603b      	str	r3, [r7, #0]
        break;
 8006768:	bf00      	nop
  while (*format)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f47f ab77 	bne.w	8005e62 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8006774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d302      	bcc.n	8006782 <_vsnprintf+0x942>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	1e5a      	subs	r2, r3, #1
 8006780:	e000      	b.n	8006784 <_vsnprintf+0x944>
 8006782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006784:	68fc      	ldr	r4, [r7, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	2000      	movs	r0, #0
 800678c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800678e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006790:	4618      	mov	r0, r3
 8006792:	3758      	adds	r7, #88	; 0x58
 8006794:	46bd      	mov	sp, r7
 8006796:	bdb0      	pop	{r4, r5, r7, pc}

08006798 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8006798:	b40f      	push	{r0, r1, r2, r3}
 800679a:	b580      	push	{r7, lr}
 800679c:	b086      	sub	sp, #24
 800679e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80067a0:	f107 031c 	add.w	r3, r7, #28
 80067a4:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80067a6:	1d39      	adds	r1, r7, #4
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295
 80067b2:	4806      	ldr	r0, [pc, #24]	; (80067cc <printf_+0x34>)
 80067b4:	f7ff fb44 	bl	8005e40 <_vsnprintf>
 80067b8:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80067ba:	68fb      	ldr	r3, [r7, #12]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c6:	b004      	add	sp, #16
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	08004f7f 	.word	0x08004f7f

080067d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80067d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006808 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80067d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80067d6:	e003      	b.n	80067e0 <LoopCopyDataInit>

080067d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80067d8:	4b0c      	ldr	r3, [pc, #48]	; (800680c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80067da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80067dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80067de:	3104      	adds	r1, #4

080067e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80067e0:	480b      	ldr	r0, [pc, #44]	; (8006810 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80067e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80067e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80067e8:	d3f6      	bcc.n	80067d8 <CopyDataInit>
	ldr	r2, =_sbss
 80067ea:	4a0b      	ldr	r2, [pc, #44]	; (8006818 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80067ec:	e002      	b.n	80067f4 <LoopFillZerobss>

080067ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80067ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80067f0:	f842 3b04 	str.w	r3, [r2], #4

080067f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80067f4:	4b09      	ldr	r3, [pc, #36]	; (800681c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80067f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80067f8:	d3f9      	bcc.n	80067ee <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 80067fa:	f000 f82b 	bl	8006854 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 80067fe:	f000 fa47 	bl	8006c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006802:	f7fe fb6b 	bl	8004edc <main>
	bx	lr
 8006806:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006808:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 800680c:	08007438 	.word	0x08007438
	ldr	r0, =_sdata
 8006810:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006814:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8006818:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 800681c:	20001e20 	.word	0x20001e20

08006820 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006820:	e7fe      	b.n	8006820 <ADC1_IRQHandler>

08006822 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006822:	b480      	push	{r7}
 8006824:	af00      	add	r7, sp, #0
}
 8006826:	bf00      	nop
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800682e:	b480      	push	{r7}
 8006830:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006832:	e7fe      	b.n	8006832 <HardFault_Handler+0x4>

08006834 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006838:	e7fe      	b.n	8006838 <MemManage_Handler+0x4>

0800683a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800683a:	b480      	push	{r7}
 800683c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800683e:	e7fe      	b.n	800683e <BusFault_Handler+0x4>

08006840 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006844:	e7fe      	b.n	8006844 <UsageFault_Handler+0x4>

08006846 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006846:	b480      	push	{r7}
 8006848:	af00      	add	r7, sp, #0
}
 800684a:	bf00      	nop
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr
	...

08006854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006858:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <SystemInit+0x64>)
 800685a:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <SystemInit+0x64>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8006864:	4914      	ldr	r1, [pc, #80]	; (80068b8 <SystemInit+0x64>)
 8006866:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <SystemInit+0x64>)
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	4b14      	ldr	r3, [pc, #80]	; (80068bc <SystemInit+0x68>)
 800686c:	4013      	ands	r3, r2
 800686e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006870:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <SystemInit+0x64>)
 8006872:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <SystemInit+0x64>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800687a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006880:	4a0d      	ldr	r2, [pc, #52]	; (80068b8 <SystemInit+0x64>)
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <SystemInit+0x64>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800688a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800688c:	4a0a      	ldr	r2, [pc, #40]	; (80068b8 <SystemInit+0x64>)
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <SystemInit+0x64>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006896:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8006898:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <SystemInit+0x64>)
 800689a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800689e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80068a0:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <SystemInit+0x64>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80068a6:	f000 f80d 	bl	80068c4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <SystemInit+0x6c>)
 80068ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068b0:	609a      	str	r2, [r3, #8]
#endif 
}
 80068b2:	bf00      	nop
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40021000 	.word	0x40021000
 80068bc:	f8ff0000 	.word	0xf8ff0000
 80068c0:	e000ed00 	.word	0xe000ed00

080068c4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 80068c8:	f000 f802 	bl	80068d0 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80068cc:	bf00      	nop
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	2300      	movs	r3, #0
 80068dc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80068de:	4a30      	ldr	r2, [pc, #192]	; (80069a0 <SetSysClockTo24+0xd0>)
 80068e0:	4b2f      	ldr	r3, [pc, #188]	; (80069a0 <SetSysClockTo24+0xd0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80068ea:	4b2d      	ldr	r3, [pc, #180]	; (80069a0 <SetSysClockTo24+0xd0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3301      	adds	r3, #1
 80068f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d103      	bne.n	8006908 <SetSysClockTo24+0x38>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006906:	d1f0      	bne.n	80068ea <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8006908:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <SetSysClockTo24+0xd0>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8006914:	2301      	movs	r3, #1
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	e001      	b.n	800691e <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800691a:	2300      	movs	r3, #0
 800691c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d137      	bne.n	8006994 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8006924:	4a1e      	ldr	r2, [pc, #120]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006926:	4b1e      	ldr	r3, [pc, #120]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800692c:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <SetSysClockTo24+0xd0>)
 800692e:	4b1c      	ldr	r3, [pc, #112]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8006934:	4a1a      	ldr	r2, [pc, #104]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006936:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800693c:	4a18      	ldr	r2, [pc, #96]	; (80069a0 <SetSysClockTo24+0xd0>)
 800693e:	4b18      	ldr	r3, [pc, #96]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006946:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8006948:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <SetSysClockTo24+0xd0>)
 800694a:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <SetSysClockTo24+0xd0>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 8006952:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8006954:	4a12      	ldr	r2, [pc, #72]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800695e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006960:	bf00      	nop
 8006962:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f9      	beq.n	8006962 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800696e:	4a0c      	ldr	r2, [pc, #48]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <SetSysClockTo24+0xd0>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f023 0303 	bic.w	r3, r3, #3
 8006978:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800697a:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <SetSysClockTo24+0xd0>)
 800697c:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <SetSysClockTo24+0xd0>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f043 0302 	orr.w	r3, r3, #2
 8006984:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8006986:	bf00      	nop
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <SetSysClockTo24+0xd0>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 030c 	and.w	r3, r3, #12
 8006990:	2b08      	cmp	r3, #8
 8006992:	d1f9      	bne.n	8006988 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40021000 	.word	0x40021000

080069a4 <TIM3_IRQHandler>:
volatile uint8_t timeOutTimerAlarmStatus=0;



void TIM3_IRQHandler(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
    if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 80069a8:	2101      	movs	r1, #1
 80069aa:	4811      	ldr	r0, [pc, #68]	; (80069f0 <TIM3_IRQHandler+0x4c>)
 80069ac:	f7fd fb81 	bl	80040b2 <TIM_GetITStatus>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d015      	beq.n	80069e2 <TIM3_IRQHandler+0x3e>
    {
    	elapsed_ms++;
 80069b6:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <TIM3_IRQHandler+0x50>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <TIM3_IRQHandler+0x50>)
 80069be:	6013      	str	r3, [r2, #0]
    	if(timeOutTimerStatus == 1)
 80069c0:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <TIM3_IRQHandler+0x54>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10b      	bne.n	80069e2 <TIM3_IRQHandler+0x3e>
    	{
    		if((elapsed_ms - timeOutTimerStartTime) > timeOutTimerAlarmTime)
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <TIM3_IRQHandler+0x50>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <TIM3_IRQHandler+0x58>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	1ad2      	subs	r2, r2, r3
 80069d4:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <TIM3_IRQHandler+0x5c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d902      	bls.n	80069e2 <TIM3_IRQHandler+0x3e>
    			timeOutTimerAlarmStatus = 1;
 80069dc:	4b09      	ldr	r3, [pc, #36]	; (8006a04 <TIM3_IRQHandler+0x60>)
 80069de:	2201      	movs	r2, #1
 80069e0:	701a      	strb	r2, [r3, #0]
    	}
   }

    TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 80069e2:	2101      	movs	r1, #1
 80069e4:	4802      	ldr	r0, [pc, #8]	; (80069f0 <TIM3_IRQHandler+0x4c>)
 80069e6:	f7fd fb8d 	bl	8004104 <TIM_ClearITPendingBit>
}
 80069ea:	bf00      	nop
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40000400 	.word	0x40000400
 80069f4:	20001dfc 	.word	0x20001dfc
 80069f8:	20001e00 	.word	0x20001e00
 80069fc:	20001e08 	.word	0x20001e08
 8006a00:	20001e04 	.word	0x20001e04
 8006a04:	20001e0c 	.word	0x20001e0c

08006a08 <timer3_init>:

void timer3_init(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8006a0e:	2101      	movs	r1, #1
 8006a10:	2002      	movs	r0, #2
 8006a12:	f7fc ffe1 	bl	80039d8 <RCC_APB1PeriphClockCmd>

	//configure timer 3 interrupt
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8006a16:	231d      	movs	r3, #29
 8006a18:	733b      	strb	r3, [r7, #12]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	737b      	strb	r3, [r7, #13]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	73bb      	strb	r3, [r7, #14]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8006a22:	2301      	movs	r3, #1
 8006a24:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&nvicStructure);
 8006a26:	f107 030c 	add.w	r3, r7, #12
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fc fc44 	bl	80032b8 <NVIC_Init>
	 * interrupt.
	 *
	 * TIM_Period is actually auto reload register(ARR).
	 */
	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 2400-1;
 8006a30:	f640 135f 	movw	r3, #2399	; 0x95f
 8006a34:	803b      	strh	r3, [r7, #0]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006a36:	2300      	movs	r3, #0
 8006a38:	807b      	strh	r3, [r7, #2]
	timerInitStructure.TIM_Period = 10-1;
 8006a3a:	2309      	movs	r3, #9
 8006a3c:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_RepetitionCounter = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	723b      	strb	r3, [r7, #8]
	TIM_TimeBaseInit(TIM3, &timerInitStructure);
 8006a46:	463b      	mov	r3, r7
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4808      	ldr	r0, [pc, #32]	; (8006a6c <timer3_init+0x64>)
 8006a4c:	f7fc ffe2 	bl	8003a14 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM3, TIM_IT_Update , ENABLE);
 8006a50:	2201      	movs	r2, #1
 8006a52:	2101      	movs	r1, #1
 8006a54:	4805      	ldr	r0, [pc, #20]	; (8006a6c <timer3_init+0x64>)
 8006a56:	f7fd fa7a 	bl	8003f4e <TIM_ITConfig>
	TIM_Cmd(TIM3, ENABLE);
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	4803      	ldr	r0, [pc, #12]	; (8006a6c <timer3_init+0x64>)
 8006a5e:	f7fd fa57 	bl	8003f10 <TIM_Cmd>
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40000400 	.word	0x40000400

08006a70 <motors_pwm_init>:

void motors_pwm_init(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8006a76:	2101      	movs	r1, #1
 8006a78:	2001      	movs	r0, #1
 8006a7a:	f7fc ffad 	bl	80039d8 <RCC_APB1PeriphClockCmd>
	/* GPIOA and GPIOB clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8006a7e:	2101      	movs	r1, #1
 8006a80:	2005      	movs	r0, #5
 8006a82:	f7fc ff8b 	bl	800399c <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 8006a86:	230f      	movs	r3, #15
 8006a88:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8006a8a:	2318      	movs	r3, #24
 8006a8c:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006a92:	463b      	mov	r3, r7
 8006a94:	4619      	mov	r1, r3
 8006a96:	4830      	ldr	r0, [pc, #192]	; (8006b58 <motors_pwm_init+0xe8>)
 8006a98:	f7fc fc70 	bl	800337c <GPIO_Init>

	TIM_TimeBaseStructure.TIM_Period = MOTOR_TIM_ARR_REG_VAL;
 8006a9c:	23c7      	movs	r3, #199	; 0xc7
 8006a9e:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = MOTOR_TIM_PRESCALER_VAL;
 8006aa0:	f640 135f 	movw	r3, #2399	; 0x95f
 8006aa4:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8006aae:	f107 0314 	add.w	r3, r7, #20
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ab8:	f7fc ffac 	bl	8003a14 <TIM_TimeBaseInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8006abc:	2360      	movs	r3, #96	; 0x60
 8006abe:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	81bb      	strh	r3, [r7, #12]
	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8006acc:	1d3b      	adds	r3, r7, #4
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ad4:	f7fd f81a 	bl	8003b0c <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8006ad8:	2108      	movs	r1, #8
 8006ada:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ade:	f7fd fa78 	bl	8003fd2 <TIM_OC1PreloadConfig>

	/* PWM1 Mode configuration: Channel2 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	817b      	strh	r3, [r7, #10]
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006af2:	f7fd f897 	bl	8003c24 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8006af6:	2108      	movs	r1, #8
 8006af8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006afc:	f7fd fa84 	bl	8004008 <TIM_OC2PreloadConfig>

	/* PWM1 Mode configuration: Channel3 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8006b00:	2301      	movs	r3, #1
 8006b02:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	817b      	strh	r3, [r7, #10]
	TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8006b08:	1d3b      	adds	r3, r7, #4
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b10:	f7fd f910 	bl	8003d34 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8006b14:	2108      	movs	r1, #8
 8006b16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b1a:	f7fd fa92 	bl	8004042 <TIM_OC3PreloadConfig>

	/* PWM1 Mode configuration: Channel4 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	817b      	strh	r3, [r7, #10]
	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b2e:	f7fd f987 	bl	8003e40 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8006b32:	2108      	movs	r1, #8
 8006b34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b38:	f7fd fa9e 	bl	8004078 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b42:	f7fd fa27 	bl	8003f94 <TIM_ARRPreloadConfig>
	/* TIM3 enable counter */
	TIM_Cmd(TIM2, ENABLE);
 8006b46:	2101      	movs	r1, #1
 8006b48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b4c:	f7fd f9e0 	bl	8003f10 <TIM_Cmd>
}
 8006b50:	bf00      	nop
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40010800 	.word	0x40010800

08006b5c <millis>:
	if(channelID == PWM_CHANNEL4)
		TIM_SetCompare4(TIM2, pwm_value);
}

uint32_t millis(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
	return elapsed_ms;
 8006b60:	4b02      	ldr	r3, [pc, #8]	; (8006b6c <millis+0x10>)
 8006b62:	681b      	ldr	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr
 8006b6c:	20001dfc 	.word	0x20001dfc

08006b70 <delay_ms>:

void delay_ms(uint32_t delay_ms)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
	uint32_t currentTime_ms;
	uint32_t startTime_ms;

	startTime_ms = millis();
 8006b78:	f7ff fff0 	bl	8006b5c <millis>
 8006b7c:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		currentTime_ms = millis();
 8006b7e:	f7ff ffed 	bl	8006b5c <millis>
 8006b82:	60b8      	str	r0, [r7, #8]
		if((currentTime_ms-startTime_ms)>delay_ms)
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1ad2      	subs	r2, r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d800      	bhi.n	8006b92 <delay_ms+0x22>
		currentTime_ms = millis();
 8006b90:	e7f5      	b.n	8006b7e <delay_ms+0xe>
			return ;
 8006b92:	bf00      	nop
	}
}
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <timeout_alarm_set>:

void timeout_alarm_set(uint32_t alarmTime_ms)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	timeOutTimerStartTime = millis();
 8006ba4:	f7ff ffda 	bl	8006b5c <millis>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <timeout_alarm_set+0x2c>)
 8006bac:	601a      	str	r2, [r3, #0]
	timeOutTimerStatus = 1;
 8006bae:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <timeout_alarm_set+0x30>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	701a      	strb	r2, [r3, #0]
	timeOutTimerAlarmTime = alarmTime_ms;
 8006bb4:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <timeout_alarm_set+0x34>)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6013      	str	r3, [r2, #0]
	timeOutTimerAlarmStatus = 0;
 8006bba:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <timeout_alarm_set+0x38>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20001e08 	.word	0x20001e08
 8006bcc:	20001e00 	.word	0x20001e00
 8006bd0:	20001e04 	.word	0x20001e04
 8006bd4:	20001e0c 	.word	0x20001e0c

08006bd8 <timeout_alarm_status_check>:

uint8_t timeout_alarm_status_check(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
	return timeOutTimerAlarmStatus;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	; (8006bec <timeout_alarm_status_check+0x14>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	b2db      	uxtb	r3, r3
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20001e0c 	.word	0x20001e0c

08006bf0 <timeout_alarm_off>:

void timeout_alarm_off(void)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
	timeOutTimerStatus = 0;
 8006bf4:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <timeout_alarm_off+0x18>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]
	timeOutTimerAlarmStatus = 0;
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <timeout_alarm_off+0x1c>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]
}
 8006c00:	bf00      	nop
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr
 8006c08:	20001e00 	.word	0x20001e00
 8006c0c:	20001e0c 	.word	0x20001e0c

08006c10 <uart_console_init>:
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#include "uart_comm.h"

void uart_console_init(uint32_t baudRate)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;

	/* Enable peripheral clocks for USART1 on GPIOA */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA |
 8006c18:	2101      	movs	r1, #1
 8006c1a:	f244 0005 	movw	r0, #16389	; 0x4005
 8006c1e:	f7fc febd 	bl	800399c <RCC_APB2PeriphClockCmd>
						   RCC_APB2Periph_AFIO, ENABLE);

	/* Configure PA9 and PA10 as USART1 TX/RX */

	/* PA9 = alternate function push/pull output */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8006c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c26:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8006c2c:	2318      	movs	r3, #24
 8006c2e:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006c30:	f107 031c 	add.w	r3, r7, #28
 8006c34:	4619      	mov	r1, r3
 8006c36:	4814      	ldr	r0, [pc, #80]	; (8006c88 <uart_console_init+0x78>)
 8006c38:	f7fc fba0 	bl	800337c <GPIO_Init>

	/* PA10 = floating input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8006c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c40:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8006c42:	2304      	movs	r3, #4
 8006c44:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006c46:	f107 031c 	add.w	r3, r7, #28
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	480e      	ldr	r0, [pc, #56]	; (8006c88 <uart_console_init+0x78>)
 8006c4e:	f7fc fb95 	bl	800337c <GPIO_Init>

	/* Configure and initialize usart... */
	USART_InitStructure.USART_BaudRate = baudRate;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8006c56:	2300      	movs	r3, #0
 8006c58:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8006c62:	2300      	movs	r3, #0
 8006c64:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8006c66:	230c      	movs	r3, #12
 8006c68:	82fb      	strh	r3, [r7, #22]

	USART_Init(USART1, &USART_InitStructure);
 8006c6a:	f107 030c 	add.w	r3, r7, #12
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4806      	ldr	r0, [pc, #24]	; (8006c8c <uart_console_init+0x7c>)
 8006c72:	f7fd fa57 	bl	8004124 <USART_Init>

	/* Enable USART1 */
	USART_Cmd(USART1, ENABLE);
 8006c76:	2101      	movs	r1, #1
 8006c78:	4804      	ldr	r0, [pc, #16]	; (8006c8c <uart_console_init+0x7c>)
 8006c7a:	f7fd fb0d 	bl	8004298 <USART_Cmd>
}
 8006c7e:	bf00      	nop
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	40010800 	.word	0x40010800
 8006c8c:	40013800 	.word	0x40013800

08006c90 <__libc_init_array>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	2500      	movs	r5, #0
 8006c94:	4e0c      	ldr	r6, [pc, #48]	; (8006cc8 <__libc_init_array+0x38>)
 8006c96:	4c0d      	ldr	r4, [pc, #52]	; (8006ccc <__libc_init_array+0x3c>)
 8006c98:	1ba4      	subs	r4, r4, r6
 8006c9a:	10a4      	asrs	r4, r4, #2
 8006c9c:	42a5      	cmp	r5, r4
 8006c9e:	d109      	bne.n	8006cb4 <__libc_init_array+0x24>
 8006ca0:	f000 facc 	bl	800723c <_init>
 8006ca4:	2500      	movs	r5, #0
 8006ca6:	4e0a      	ldr	r6, [pc, #40]	; (8006cd0 <__libc_init_array+0x40>)
 8006ca8:	4c0a      	ldr	r4, [pc, #40]	; (8006cd4 <__libc_init_array+0x44>)
 8006caa:	1ba4      	subs	r4, r4, r6
 8006cac:	10a4      	asrs	r4, r4, #2
 8006cae:	42a5      	cmp	r5, r4
 8006cb0:	d105      	bne.n	8006cbe <__libc_init_array+0x2e>
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
 8006cb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cb8:	4798      	blx	r3
 8006cba:	3501      	adds	r5, #1
 8006cbc:	e7ee      	b.n	8006c9c <__libc_init_array+0xc>
 8006cbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cc2:	4798      	blx	r3
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	e7f2      	b.n	8006cae <__libc_init_array+0x1e>
 8006cc8:	08007430 	.word	0x08007430
 8006ccc:	08007430 	.word	0x08007430
 8006cd0:	08007430 	.word	0x08007430
 8006cd4:	08007434 	.word	0x08007434

08006cd8 <memcpy>:
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	1e43      	subs	r3, r0, #1
 8006cdc:	440a      	add	r2, r1
 8006cde:	4291      	cmp	r1, r2
 8006ce0:	d100      	bne.n	8006ce4 <memcpy+0xc>
 8006ce2:	bd10      	pop	{r4, pc}
 8006ce4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cec:	e7f7      	b.n	8006cde <memcpy+0x6>

08006cee <memset>:
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4402      	add	r2, r0
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d100      	bne.n	8006cf8 <memset+0xa>
 8006cf6:	4770      	bx	lr
 8006cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfc:	e7f9      	b.n	8006cf2 <memset+0x4>
	...

08006d00 <atan>:
 8006d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	4bba      	ldr	r3, [pc, #744]	; (8006ff0 <atan+0x2f0>)
 8006d06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006d0a:	429e      	cmp	r6, r3
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	460d      	mov	r5, r1
 8006d10:	468b      	mov	fp, r1
 8006d12:	dd17      	ble.n	8006d44 <atan+0x44>
 8006d14:	4ab7      	ldr	r2, [pc, #732]	; (8006ff4 <atan+0x2f4>)
 8006d16:	4296      	cmp	r6, r2
 8006d18:	dc01      	bgt.n	8006d1e <atan+0x1e>
 8006d1a:	d109      	bne.n	8006d30 <atan+0x30>
 8006d1c:	b140      	cbz	r0, 8006d30 <atan+0x30>
 8006d1e:	4622      	mov	r2, r4
 8006d20:	462b      	mov	r3, r5
 8006d22:	4620      	mov	r0, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7f9 fa79 	bl	800021c <__adddf3>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	e005      	b.n	8006d3c <atan+0x3c>
 8006d30:	f1bb 0f00 	cmp.w	fp, #0
 8006d34:	4cb0      	ldr	r4, [pc, #704]	; (8006ff8 <atan+0x2f8>)
 8006d36:	f300 8129 	bgt.w	8006f8c <atan+0x28c>
 8006d3a:	4db0      	ldr	r5, [pc, #704]	; (8006ffc <atan+0x2fc>)
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	4629      	mov	r1, r5
 8006d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d44:	4bae      	ldr	r3, [pc, #696]	; (8007000 <atan+0x300>)
 8006d46:	429e      	cmp	r6, r3
 8006d48:	dc11      	bgt.n	8006d6e <atan+0x6e>
 8006d4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006d4e:	429e      	cmp	r6, r3
 8006d50:	dc0a      	bgt.n	8006d68 <atan+0x68>
 8006d52:	a38f      	add	r3, pc, #572	; (adr r3, 8006f90 <atan+0x290>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f7f9 fa60 	bl	800021c <__adddf3>
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4ba9      	ldr	r3, [pc, #676]	; (8007004 <atan+0x304>)
 8006d60:	f7f9 fe9e 	bl	8000aa0 <__aeabi_dcmpgt>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d1e9      	bne.n	8006d3c <atan+0x3c>
 8006d68:	f04f 3aff 	mov.w	sl, #4294967295
 8006d6c:	e027      	b.n	8006dbe <atan+0xbe>
 8006d6e:	f000 f959 	bl	8007024 <fabs>
 8006d72:	4ba5      	ldr	r3, [pc, #660]	; (8007008 <atan+0x308>)
 8006d74:	4604      	mov	r4, r0
 8006d76:	429e      	cmp	r6, r3
 8006d78:	460d      	mov	r5, r1
 8006d7a:	f300 80b8 	bgt.w	8006eee <atan+0x1ee>
 8006d7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006d82:	429e      	cmp	r6, r3
 8006d84:	f300 809c 	bgt.w	8006ec0 <atan+0x1c0>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	f7f9 fa46 	bl	800021c <__adddf3>
 8006d90:	2200      	movs	r2, #0
 8006d92:	4b9c      	ldr	r3, [pc, #624]	; (8007004 <atan+0x304>)
 8006d94:	f7f9 fa40 	bl	8000218 <__aeabi_dsub>
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	460f      	mov	r7, r1
 8006d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006da2:	4620      	mov	r0, r4
 8006da4:	4629      	mov	r1, r5
 8006da6:	f7f9 fa39 	bl	800021c <__adddf3>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4630      	mov	r0, r6
 8006db0:	4639      	mov	r1, r7
 8006db2:	f7f9 fd0f 	bl	80007d4 <__aeabi_ddiv>
 8006db6:	f04f 0a00 	mov.w	sl, #0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	460d      	mov	r5, r1
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	462b      	mov	r3, r5
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	f7f9 fbdb 	bl	8000580 <__aeabi_dmul>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4680      	mov	r8, r0
 8006dd0:	4689      	mov	r9, r1
 8006dd2:	f7f9 fbd5 	bl	8000580 <__aeabi_dmul>
 8006dd6:	a370      	add	r3, pc, #448	; (adr r3, 8006f98 <atan+0x298>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	4606      	mov	r6, r0
 8006dde:	460f      	mov	r7, r1
 8006de0:	f7f9 fbce 	bl	8000580 <__aeabi_dmul>
 8006de4:	a36e      	add	r3, pc, #440	; (adr r3, 8006fa0 <atan+0x2a0>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 fa17 	bl	800021c <__adddf3>
 8006dee:	4632      	mov	r2, r6
 8006df0:	463b      	mov	r3, r7
 8006df2:	f7f9 fbc5 	bl	8000580 <__aeabi_dmul>
 8006df6:	a36c      	add	r3, pc, #432	; (adr r3, 8006fa8 <atan+0x2a8>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 fa0e 	bl	800021c <__adddf3>
 8006e00:	4632      	mov	r2, r6
 8006e02:	463b      	mov	r3, r7
 8006e04:	f7f9 fbbc 	bl	8000580 <__aeabi_dmul>
 8006e08:	a369      	add	r3, pc, #420	; (adr r3, 8006fb0 <atan+0x2b0>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fa05 	bl	800021c <__adddf3>
 8006e12:	4632      	mov	r2, r6
 8006e14:	463b      	mov	r3, r7
 8006e16:	f7f9 fbb3 	bl	8000580 <__aeabi_dmul>
 8006e1a:	a367      	add	r3, pc, #412	; (adr r3, 8006fb8 <atan+0x2b8>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f7f9 f9fc 	bl	800021c <__adddf3>
 8006e24:	4632      	mov	r2, r6
 8006e26:	463b      	mov	r3, r7
 8006e28:	f7f9 fbaa 	bl	8000580 <__aeabi_dmul>
 8006e2c:	a364      	add	r3, pc, #400	; (adr r3, 8006fc0 <atan+0x2c0>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f7f9 f9f3 	bl	800021c <__adddf3>
 8006e36:	4642      	mov	r2, r8
 8006e38:	464b      	mov	r3, r9
 8006e3a:	f7f9 fba1 	bl	8000580 <__aeabi_dmul>
 8006e3e:	a362      	add	r3, pc, #392	; (adr r3, 8006fc8 <atan+0x2c8>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	4680      	mov	r8, r0
 8006e46:	4689      	mov	r9, r1
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fb98 	bl	8000580 <__aeabi_dmul>
 8006e50:	a35f      	add	r3, pc, #380	; (adr r3, 8006fd0 <atan+0x2d0>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 f9df 	bl	8000218 <__aeabi_dsub>
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	f7f9 fb8f 	bl	8000580 <__aeabi_dmul>
 8006e62:	a35d      	add	r3, pc, #372	; (adr r3, 8006fd8 <atan+0x2d8>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f7f9 f9d6 	bl	8000218 <__aeabi_dsub>
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	463b      	mov	r3, r7
 8006e70:	f7f9 fb86 	bl	8000580 <__aeabi_dmul>
 8006e74:	a35a      	add	r3, pc, #360	; (adr r3, 8006fe0 <atan+0x2e0>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 f9cd 	bl	8000218 <__aeabi_dsub>
 8006e7e:	4632      	mov	r2, r6
 8006e80:	463b      	mov	r3, r7
 8006e82:	f7f9 fb7d 	bl	8000580 <__aeabi_dmul>
 8006e86:	a358      	add	r3, pc, #352	; (adr r3, 8006fe8 <atan+0x2e8>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f7f9 f9c4 	bl	8000218 <__aeabi_dsub>
 8006e90:	4632      	mov	r2, r6
 8006e92:	463b      	mov	r3, r7
 8006e94:	f7f9 fb74 	bl	8000580 <__aeabi_dmul>
 8006e98:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	d14e      	bne.n	8006f40 <atan+0x240>
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	f7f9 f9b9 	bl	800021c <__adddf3>
 8006eaa:	4622      	mov	r2, r4
 8006eac:	462b      	mov	r3, r5
 8006eae:	f7f9 fb67 	bl	8000580 <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f7f9 f9ad 	bl	8000218 <__aeabi_dsub>
 8006ebe:	e734      	b.n	8006d2a <atan+0x2a>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4b50      	ldr	r3, [pc, #320]	; (8007004 <atan+0x304>)
 8006ec4:	f7f9 f9a8 	bl	8000218 <__aeabi_dsub>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460f      	mov	r7, r1
 8006ece:	4b4d      	ldr	r3, [pc, #308]	; (8007004 <atan+0x304>)
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	f7f9 f9a2 	bl	800021c <__adddf3>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4630      	mov	r0, r6
 8006ede:	4639      	mov	r1, r7
 8006ee0:	f7f9 fc78 	bl	80007d4 <__aeabi_ddiv>
 8006ee4:	f04f 0a01 	mov.w	sl, #1
 8006ee8:	4604      	mov	r4, r0
 8006eea:	460d      	mov	r5, r1
 8006eec:	e767      	b.n	8006dbe <atan+0xbe>
 8006eee:	4b47      	ldr	r3, [pc, #284]	; (800700c <atan+0x30c>)
 8006ef0:	429e      	cmp	r6, r3
 8006ef2:	dc1a      	bgt.n	8006f2a <atan+0x22a>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4b46      	ldr	r3, [pc, #280]	; (8007010 <atan+0x310>)
 8006ef8:	f7f9 f98e 	bl	8000218 <__aeabi_dsub>
 8006efc:	2200      	movs	r2, #0
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	4b43      	ldr	r3, [pc, #268]	; (8007010 <atan+0x310>)
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 fb3a 	bl	8000580 <__aeabi_dmul>
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4b3d      	ldr	r3, [pc, #244]	; (8007004 <atan+0x304>)
 8006f10:	f7f9 f984 	bl	800021c <__adddf3>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 fc5a 	bl	80007d4 <__aeabi_ddiv>
 8006f20:	f04f 0a02 	mov.w	sl, #2
 8006f24:	4604      	mov	r4, r0
 8006f26:	460d      	mov	r5, r1
 8006f28:	e749      	b.n	8006dbe <atan+0xbe>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	2000      	movs	r0, #0
 8006f30:	4938      	ldr	r1, [pc, #224]	; (8007014 <atan+0x314>)
 8006f32:	f7f9 fc4f 	bl	80007d4 <__aeabi_ddiv>
 8006f36:	f04f 0a03 	mov.w	sl, #3
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	e73e      	b.n	8006dbe <atan+0xbe>
 8006f40:	4640      	mov	r0, r8
 8006f42:	4649      	mov	r1, r9
 8006f44:	f7f9 f96a 	bl	800021c <__adddf3>
 8006f48:	4622      	mov	r2, r4
 8006f4a:	462b      	mov	r3, r5
 8006f4c:	f7f9 fb18 	bl	8000580 <__aeabi_dmul>
 8006f50:	4e31      	ldr	r6, [pc, #196]	; (8007018 <atan+0x318>)
 8006f52:	4b32      	ldr	r3, [pc, #200]	; (800701c <atan+0x31c>)
 8006f54:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006f58:	4456      	add	r6, sl
 8006f5a:	449a      	add	sl, r3
 8006f5c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006f60:	f7f9 f95a 	bl	8000218 <__aeabi_dsub>
 8006f64:	4622      	mov	r2, r4
 8006f66:	462b      	mov	r3, r5
 8006f68:	f7f9 f956 	bl	8000218 <__aeabi_dsub>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006f74:	f7f9 f950 	bl	8000218 <__aeabi_dsub>
 8006f78:	f1bb 0f00 	cmp.w	fp, #0
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	f6bf aedc 	bge.w	8006d3c <atan+0x3c>
 8006f84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f88:	461d      	mov	r5, r3
 8006f8a:	e6d7      	b.n	8006d3c <atan+0x3c>
 8006f8c:	4d24      	ldr	r5, [pc, #144]	; (8007020 <atan+0x320>)
 8006f8e:	e6d5      	b.n	8006d3c <atan+0x3c>
 8006f90:	8800759c 	.word	0x8800759c
 8006f94:	7e37e43c 	.word	0x7e37e43c
 8006f98:	e322da11 	.word	0xe322da11
 8006f9c:	3f90ad3a 	.word	0x3f90ad3a
 8006fa0:	24760deb 	.word	0x24760deb
 8006fa4:	3fa97b4b 	.word	0x3fa97b4b
 8006fa8:	a0d03d51 	.word	0xa0d03d51
 8006fac:	3fb10d66 	.word	0x3fb10d66
 8006fb0:	c54c206e 	.word	0xc54c206e
 8006fb4:	3fb745cd 	.word	0x3fb745cd
 8006fb8:	920083ff 	.word	0x920083ff
 8006fbc:	3fc24924 	.word	0x3fc24924
 8006fc0:	5555550d 	.word	0x5555550d
 8006fc4:	3fd55555 	.word	0x3fd55555
 8006fc8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006fcc:	bfa2b444 	.word	0xbfa2b444
 8006fd0:	52defd9a 	.word	0x52defd9a
 8006fd4:	3fadde2d 	.word	0x3fadde2d
 8006fd8:	af749a6d 	.word	0xaf749a6d
 8006fdc:	3fb3b0f2 	.word	0x3fb3b0f2
 8006fe0:	fe231671 	.word	0xfe231671
 8006fe4:	3fbc71c6 	.word	0x3fbc71c6
 8006fe8:	9998ebc4 	.word	0x9998ebc4
 8006fec:	3fc99999 	.word	0x3fc99999
 8006ff0:	440fffff 	.word	0x440fffff
 8006ff4:	7ff00000 	.word	0x7ff00000
 8006ff8:	54442d18 	.word	0x54442d18
 8006ffc:	bff921fb 	.word	0xbff921fb
 8007000:	3fdbffff 	.word	0x3fdbffff
 8007004:	3ff00000 	.word	0x3ff00000
 8007008:	3ff2ffff 	.word	0x3ff2ffff
 800700c:	40037fff 	.word	0x40037fff
 8007010:	3ff80000 	.word	0x3ff80000
 8007014:	bff00000 	.word	0xbff00000
 8007018:	080073e0 	.word	0x080073e0
 800701c:	08007400 	.word	0x08007400
 8007020:	3ff921fb 	.word	0x3ff921fb

08007024 <fabs>:
 8007024:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007028:	4770      	bx	lr
	...

0800702c <sqrt>:
 800702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	b08b      	sub	sp, #44	; 0x2c
 8007032:	4604      	mov	r4, r0
 8007034:	460d      	mov	r5, r1
 8007036:	f000 f84d 	bl	80070d4 <__ieee754_sqrt>
 800703a:	4b24      	ldr	r3, [pc, #144]	; (80070cc <sqrt+0xa0>)
 800703c:	4680      	mov	r8, r0
 800703e:	f993 a000 	ldrsb.w	sl, [r3]
 8007042:	4689      	mov	r9, r1
 8007044:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007048:	d02b      	beq.n	80070a2 <sqrt+0x76>
 800704a:	4622      	mov	r2, r4
 800704c:	462b      	mov	r3, r5
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fd2f 	bl	8000ab4 <__aeabi_dcmpun>
 8007056:	4683      	mov	fp, r0
 8007058:	bb18      	cbnz	r0, 80070a2 <sqrt+0x76>
 800705a:	2600      	movs	r6, #0
 800705c:	2700      	movs	r7, #0
 800705e:	4632      	mov	r2, r6
 8007060:	463b      	mov	r3, r7
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 fcfd 	bl	8000a64 <__aeabi_dcmplt>
 800706a:	b1d0      	cbz	r0, 80070a2 <sqrt+0x76>
 800706c:	2301      	movs	r3, #1
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4b17      	ldr	r3, [pc, #92]	; (80070d0 <sqrt+0xa4>)
 8007072:	f8cd b020 	str.w	fp, [sp, #32]
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800707c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007080:	f1ba 0f00 	cmp.w	sl, #0
 8007084:	d112      	bne.n	80070ac <sqrt+0x80>
 8007086:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800708a:	4668      	mov	r0, sp
 800708c:	f000 f8ce 	bl	800722c <matherr>
 8007090:	b1b8      	cbz	r0, 80070c2 <sqrt+0x96>
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	b11b      	cbz	r3, 800709e <sqrt+0x72>
 8007096:	f000 f8cb 	bl	8007230 <__errno>
 800709a:	9b08      	ldr	r3, [sp, #32]
 800709c:	6003      	str	r3, [r0, #0]
 800709e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80070a2:	4640      	mov	r0, r8
 80070a4:	4649      	mov	r1, r9
 80070a6:	b00b      	add	sp, #44	; 0x2c
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	4632      	mov	r2, r6
 80070ae:	463b      	mov	r3, r7
 80070b0:	4630      	mov	r0, r6
 80070b2:	4639      	mov	r1, r7
 80070b4:	f7f9 fb8e 	bl	80007d4 <__aeabi_ddiv>
 80070b8:	f1ba 0f02 	cmp.w	sl, #2
 80070bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070c0:	d1e3      	bne.n	800708a <sqrt+0x5e>
 80070c2:	f000 f8b5 	bl	8007230 <__errno>
 80070c6:	2321      	movs	r3, #33	; 0x21
 80070c8:	6003      	str	r3, [r0, #0]
 80070ca:	e7e2      	b.n	8007092 <sqrt+0x66>
 80070cc:	2000001c 	.word	0x2000001c
 80070d0:	08007420 	.word	0x08007420

080070d4 <__ieee754_sqrt>:
 80070d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d8:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8007228 <__ieee754_sqrt+0x154>
 80070dc:	4606      	mov	r6, r0
 80070de:	ea3e 0e01 	bics.w	lr, lr, r1
 80070e2:	460d      	mov	r5, r1
 80070e4:	4607      	mov	r7, r0
 80070e6:	460a      	mov	r2, r1
 80070e8:	460c      	mov	r4, r1
 80070ea:	4603      	mov	r3, r0
 80070ec:	d10f      	bne.n	800710e <__ieee754_sqrt+0x3a>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	f7f9 fa45 	bl	8000580 <__aeabi_dmul>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4630      	mov	r0, r6
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 f88d 	bl	800021c <__adddf3>
 8007102:	4606      	mov	r6, r0
 8007104:	460d      	mov	r5, r1
 8007106:	4630      	mov	r0, r6
 8007108:	4629      	mov	r1, r5
 800710a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800710e:	2900      	cmp	r1, #0
 8007110:	dc0e      	bgt.n	8007130 <__ieee754_sqrt+0x5c>
 8007112:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8007116:	ea5e 0707 	orrs.w	r7, lr, r7
 800711a:	d0f4      	beq.n	8007106 <__ieee754_sqrt+0x32>
 800711c:	b141      	cbz	r1, 8007130 <__ieee754_sqrt+0x5c>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	f7f9 f879 	bl	8000218 <__aeabi_dsub>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	f7f9 fb53 	bl	80007d4 <__aeabi_ddiv>
 800712e:	e7e8      	b.n	8007102 <__ieee754_sqrt+0x2e>
 8007130:	1512      	asrs	r2, r2, #20
 8007132:	d10c      	bne.n	800714e <__ieee754_sqrt+0x7a>
 8007134:	2c00      	cmp	r4, #0
 8007136:	d06e      	beq.n	8007216 <__ieee754_sqrt+0x142>
 8007138:	2100      	movs	r1, #0
 800713a:	02e6      	lsls	r6, r4, #11
 800713c:	d56f      	bpl.n	800721e <__ieee754_sqrt+0x14a>
 800713e:	1e48      	subs	r0, r1, #1
 8007140:	1a12      	subs	r2, r2, r0
 8007142:	f1c1 0020 	rsb	r0, r1, #32
 8007146:	fa23 f000 	lsr.w	r0, r3, r0
 800714a:	4304      	orrs	r4, r0
 800714c:	408b      	lsls	r3, r1
 800714e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007152:	07d5      	lsls	r5, r2, #31
 8007154:	f04f 0500 	mov.w	r5, #0
 8007158:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800715c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007160:	bf42      	ittt	mi
 8007162:	0064      	lslmi	r4, r4, #1
 8007164:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8007168:	005b      	lslmi	r3, r3, #1
 800716a:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 800716e:	1050      	asrs	r0, r2, #1
 8007170:	4421      	add	r1, r4
 8007172:	2216      	movs	r2, #22
 8007174:	462c      	mov	r4, r5
 8007176:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	19a7      	adds	r7, r4, r6
 800717e:	428f      	cmp	r7, r1
 8007180:	bfde      	ittt	le
 8007182:	1bc9      	suble	r1, r1, r7
 8007184:	19bc      	addle	r4, r7, r6
 8007186:	19ad      	addle	r5, r5, r6
 8007188:	0049      	lsls	r1, r1, #1
 800718a:	3a01      	subs	r2, #1
 800718c:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007190:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007194:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007198:	d1f0      	bne.n	800717c <__ieee754_sqrt+0xa8>
 800719a:	f04f 0e20 	mov.w	lr, #32
 800719e:	4694      	mov	ip, r2
 80071a0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80071a4:	42a1      	cmp	r1, r4
 80071a6:	eb06 070c 	add.w	r7, r6, ip
 80071aa:	dc02      	bgt.n	80071b2 <__ieee754_sqrt+0xde>
 80071ac:	d112      	bne.n	80071d4 <__ieee754_sqrt+0x100>
 80071ae:	429f      	cmp	r7, r3
 80071b0:	d810      	bhi.n	80071d4 <__ieee754_sqrt+0x100>
 80071b2:	2f00      	cmp	r7, #0
 80071b4:	eb07 0c06 	add.w	ip, r7, r6
 80071b8:	da34      	bge.n	8007224 <__ieee754_sqrt+0x150>
 80071ba:	f1bc 0f00 	cmp.w	ip, #0
 80071be:	db31      	blt.n	8007224 <__ieee754_sqrt+0x150>
 80071c0:	f104 0801 	add.w	r8, r4, #1
 80071c4:	1b09      	subs	r1, r1, r4
 80071c6:	4644      	mov	r4, r8
 80071c8:	429f      	cmp	r7, r3
 80071ca:	bf88      	it	hi
 80071cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80071d0:	1bdb      	subs	r3, r3, r7
 80071d2:	4432      	add	r2, r6
 80071d4:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 80071d8:	f1be 0e01 	subs.w	lr, lr, #1
 80071dc:	4439      	add	r1, r7
 80071de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80071e6:	d1dd      	bne.n	80071a4 <__ieee754_sqrt+0xd0>
 80071e8:	430b      	orrs	r3, r1
 80071ea:	d006      	beq.n	80071fa <__ieee754_sqrt+0x126>
 80071ec:	1c54      	adds	r4, r2, #1
 80071ee:	bf0b      	itete	eq
 80071f0:	4672      	moveq	r2, lr
 80071f2:	3201      	addne	r2, #1
 80071f4:	3501      	addeq	r5, #1
 80071f6:	f022 0201 	bicne.w	r2, r2, #1
 80071fa:	106b      	asrs	r3, r5, #1
 80071fc:	0852      	lsrs	r2, r2, #1
 80071fe:	07e9      	lsls	r1, r5, #31
 8007200:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007204:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007208:	bf48      	it	mi
 800720a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800720e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8007212:	4616      	mov	r6, r2
 8007214:	e777      	b.n	8007106 <__ieee754_sqrt+0x32>
 8007216:	0adc      	lsrs	r4, r3, #11
 8007218:	3a15      	subs	r2, #21
 800721a:	055b      	lsls	r3, r3, #21
 800721c:	e78a      	b.n	8007134 <__ieee754_sqrt+0x60>
 800721e:	0064      	lsls	r4, r4, #1
 8007220:	3101      	adds	r1, #1
 8007222:	e78a      	b.n	800713a <__ieee754_sqrt+0x66>
 8007224:	46a0      	mov	r8, r4
 8007226:	e7cd      	b.n	80071c4 <__ieee754_sqrt+0xf0>
 8007228:	7ff00000 	.word	0x7ff00000

0800722c <matherr>:
 800722c:	2000      	movs	r0, #0
 800722e:	4770      	bx	lr

08007230 <__errno>:
 8007230:	4b01      	ldr	r3, [pc, #4]	; (8007238 <__errno+0x8>)
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	20000020 	.word	0x20000020

0800723c <_init>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	bf00      	nop
 8007240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007242:	bc08      	pop	{r3}
 8007244:	469e      	mov	lr, r3
 8007246:	4770      	bx	lr

08007248 <_fini>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr
