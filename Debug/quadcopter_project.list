
quadcopter_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cec  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001ebc  08001ebc  00011ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f2c  08001f2c  00011f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f30  08001f30  00011f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000044  20000014  08001f48  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000058  08001f48  00020058  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000649f  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000012a8  00000000  00000000  000264dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000918  00000000  00000000  00027788  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000840  00000000  00000000  000280a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003209  00000000  00000000  000288e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000282f  00000000  00000000  0002bae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002e318  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000265c  00000000  00000000  0002e394  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001ea4 	.word	0x08001ea4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08001ea4 	.word	0x08001ea4

08000210 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b087      	sub	sp, #28
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
 8000220:	230f      	movs	r3, #15
 8000222:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	78db      	ldrb	r3, [r3, #3]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d03a      	beq.n	80002a2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800022c:	4b27      	ldr	r3, [pc, #156]	; (80002cc <NVIC_Init+0xbc>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	43db      	mvns	r3, r3
 8000232:	0a1b      	lsrs	r3, r3, #8
 8000234:	f003 0307 	and.w	r3, r3, #7
 8000238:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	f1c3 0304 	rsb	r3, r3, #4
 8000240:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	fa22 f303 	lsr.w	r3, r2, r3
 800024a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	785b      	ldrb	r3, [r3, #1]
 8000250:	461a      	mov	r2, r3
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	fa02 f303 	lsl.w	r3, r2, r3
 8000258:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	789b      	ldrb	r3, [r3, #2]
 800025e:	461a      	mov	r2, r3
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4013      	ands	r3, r2
 8000264:	697a      	ldr	r2, [r7, #20]
 8000266:	4313      	orrs	r3, r2
 8000268:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	011b      	lsls	r3, r3, #4
 800026e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <NVIC_Init+0xc0>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	6979      	ldr	r1, [r7, #20]
 8000278:	b2c9      	uxtb	r1, r1
 800027a:	4413      	add	r3, r2
 800027c:	460a      	mov	r2, r1
 800027e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <NVIC_Init+0xc0>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	095b      	lsrs	r3, r3, #5
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	f003 031f 	and.w	r3, r3, #31
 8000296:	2101      	movs	r1, #1
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800029c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80002a0:	e00f      	b.n	80002c2 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002a2:	490b      	ldr	r1, [pc, #44]	; (80002d0 <NVIC_Init+0xc0>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	095b      	lsrs	r3, r3, #5
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	f003 031f 	and.w	r3, r3, #31
 80002b6:	2201      	movs	r2, #1
 80002b8:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002ba:	f100 0320 	add.w	r3, r0, #32
 80002be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002c2:	bf00      	nop
 80002c4:	371c      	adds	r7, #28
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	e000ed00 	.word	0xe000ed00
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b089      	sub	sp, #36	; 0x24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	2300      	movs	r3, #0
 80002e8:	61bb      	str	r3, [r7, #24]
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	78db      	ldrb	r3, [r3, #3]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	78db      	ldrb	r3, [r3, #3]
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	2b00      	cmp	r3, #0
 800030a:	d005      	beq.n	8000318 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	789b      	ldrb	r3, [r3, #2]
 8000310:	461a      	mov	r2, r3
 8000312:	69fb      	ldr	r3, [r7, #28]
 8000314:	4313      	orrs	r3, r2
 8000316:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	2b00      	cmp	r3, #0
 8000320:	d044      	beq.n	80003ac <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000328:	2300      	movs	r3, #0
 800032a:	61bb      	str	r3, [r7, #24]
 800032c:	e038      	b.n	80003a0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800032e:	2201      	movs	r2, #1
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	461a      	mov	r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	4013      	ands	r3, r2
 8000342:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000344:	693a      	ldr	r2, [r7, #16]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	429a      	cmp	r2, r3
 800034a:	d126      	bne.n	800039a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000352:	220f      	movs	r2, #15
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	43db      	mvns	r3, r3
 8000360:	697a      	ldr	r2, [r7, #20]
 8000362:	4013      	ands	r3, r2
 8000364:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000366:	69fa      	ldr	r2, [r7, #28]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	697a      	ldr	r2, [r7, #20]
 8000370:	4313      	orrs	r3, r2
 8000372:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	78db      	ldrb	r3, [r3, #3]
 8000378:	2b28      	cmp	r3, #40	; 0x28
 800037a:	d105      	bne.n	8000388 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800037c:	2201      	movs	r2, #1
 800037e:	69bb      	ldr	r3, [r7, #24]
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	615a      	str	r2, [r3, #20]
 8000386:	e008      	b.n	800039a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	78db      	ldrb	r3, [r3, #3]
 800038c:	2b48      	cmp	r3, #72	; 0x48
 800038e:	d104      	bne.n	800039a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000390:	2201      	movs	r2, #1
 8000392:	69bb      	ldr	r3, [r7, #24]
 8000394:	409a      	lsls	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800039a:	69bb      	ldr	r3, [r7, #24]
 800039c:	3301      	adds	r3, #1
 800039e:	61bb      	str	r3, [r7, #24]
 80003a0:	69bb      	ldr	r3, [r7, #24]
 80003a2:	2b07      	cmp	r3, #7
 80003a4:	d9c3      	bls.n	800032e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	2bff      	cmp	r3, #255	; 0xff
 80003b2:	d946      	bls.n	8000442 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
 80003be:	e03a      	b.n	8000436 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80003c0:	69bb      	ldr	r3, [r7, #24]
 80003c2:	3308      	adds	r3, #8
 80003c4:	2201      	movs	r2, #1
 80003c6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ca:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	4013      	ands	r3, r2
 80003d6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003d8:	693a      	ldr	r2, [r7, #16]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d127      	bne.n	8000430 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80003e0:	69bb      	ldr	r3, [r7, #24]
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003e6:	220f      	movs	r2, #15
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	fa02 f303 	lsl.w	r3, r2, r3
 80003ee:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	43db      	mvns	r3, r3
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	4013      	ands	r3, r2
 80003f8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003fa:	69fa      	ldr	r2, [r7, #28]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	4313      	orrs	r3, r2
 8000406:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	78db      	ldrb	r3, [r3, #3]
 800040c:	2b28      	cmp	r3, #40	; 0x28
 800040e:	d105      	bne.n	800041c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	3308      	adds	r3, #8
 8000414:	2201      	movs	r2, #1
 8000416:	409a      	lsls	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	78db      	ldrb	r3, [r3, #3]
 8000420:	2b48      	cmp	r3, #72	; 0x48
 8000422:	d105      	bne.n	8000430 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	3308      	adds	r3, #8
 8000428:	2201      	movs	r2, #1
 800042a:	409a      	lsls	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	3301      	adds	r3, #1
 8000434:	61bb      	str	r3, [r7, #24]
 8000436:	69bb      	ldr	r3, [r7, #24]
 8000438:	2b07      	cmp	r3, #7
 800043a:	d9c1      	bls.n	80003c0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	697a      	ldr	r2, [r7, #20]
 8000440:	605a      	str	r2, [r3, #4]
  }
}
 8000442:	bf00      	nop
 8000444:	3724      	adds	r7, #36	; 0x24
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b08a      	sub	sp, #40	; 0x28
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	84fb      	strh	r3, [r7, #38]	; 0x26
 800045a:	2300      	movs	r3, #0
 800045c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800045e:	2304      	movs	r3, #4
 8000460:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000462:	4b57      	ldr	r3, [pc, #348]	; (80005c0 <I2C_Init+0x174>)
 8000464:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	889b      	ldrh	r3, [r3, #4]
 800046a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 800046c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800046e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000472:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000474:	f107 0308 	add.w	r3, r7, #8
 8000478:	4618      	mov	r0, r3
 800047a:	f000 f98d 	bl	8000798 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	4a4f      	ldr	r2, [pc, #316]	; (80005c4 <I2C_Init+0x178>)
 8000486:	fba2 2303 	umull	r2, r3, r2, r3
 800048a:	0c9b      	lsrs	r3, r3, #18
 800048c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800048e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000490:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000492:	4313      	orrs	r3, r2
 8000494:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800049a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	f023 0301 	bic.w	r3, r3, #1
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a44      	ldr	r2, [pc, #272]	; (80005c8 <I2C_Init+0x17c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d815      	bhi.n	80004e6 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	69fa      	ldr	r2, [r7, #28]
 80004c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c6:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80004c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	d801      	bhi.n	80004d2 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80004ce:	2304      	movs	r3, #4
 80004d0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80004d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80004d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004d6:	4313      	orrs	r3, r2
 80004d8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80004da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80004dc:	3301      	adds	r3, #1
 80004de:	b29a      	uxth	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	841a      	strh	r2, [r3, #32]
 80004e4:	e040      	b.n	8000568 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	88db      	ldrh	r3, [r3, #6]
 80004ea:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d109      	bne.n	8000506 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	69fa      	ldr	r2, [r7, #28]
 80004fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000502:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000504:	e00e      	b.n	8000524 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4613      	mov	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	4413      	add	r3, r2
 8000510:	009a      	lsls	r2, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	69fa      	ldr	r2, [r7, #28]
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800051c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800051e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000522:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8000524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800052a:	2b00      	cmp	r3, #0
 800052c:	d103      	bne.n	8000536 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800052e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8000536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800053a:	4313      	orrs	r3, r2
 800053c:	b29b      	uxth	r3, r3
 800053e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000546:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000548:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800054a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	4a1e      	ldr	r2, [pc, #120]	; (80005cc <I2C_Init+0x180>)
 8000554:	fb82 1203 	smull	r1, r2, r2, r3
 8000558:	1192      	asrs	r2, r2, #6
 800055a:	17db      	asrs	r3, r3, #31
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	b29b      	uxth	r3, r3
 8000560:	3301      	adds	r3, #1
 8000562:	b29a      	uxth	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800056c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	b29b      	uxth	r3, r3
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	b29a      	uxth	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000586:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800058a:	f023 0302 	bic.w	r3, r3, #2
 800058e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	889a      	ldrh	r2, [r3, #4]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	895b      	ldrh	r3, [r3, #10]
 8000598:	4313      	orrs	r3, r2
 800059a:	b29a      	uxth	r2, r3
 800059c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800059e:	4313      	orrs	r3, r2
 80005a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005a6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	899a      	ldrh	r2, [r3, #12]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	891b      	ldrh	r3, [r3, #8]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	811a      	strh	r2, [r3, #8]
}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	007a1200 	.word	0x007a1200
 80005c4:	431bde83 	.word	0x431bde83
 80005c8:	000186a0 	.word	0x000186a0
 80005cc:	10624dd3 	.word	0x10624dd3

080005d0 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d008      	beq.n	80005f4 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 80005f2:	e007      	b.n	8000604 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	f023 0301 	bic.w	r3, r3, #1
 80005fe:	b29a      	uxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	801a      	strh	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800061a:	78fb      	ldrb	r3, [r7, #3]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d008      	beq.n	8000632 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	b29b      	uxth	r3, r3
 8000626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062a:	b29a      	uxth	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8000630:	e007      	b.n	8000642 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800063c:	b29a      	uxth	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	801a      	strh	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d008      	beq.n	8000670 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000668:	b29a      	uxth	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 800066e:	e007      	b.n	8000680 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800067a:	b29a      	uxth	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	460b      	mov	r3, r1
 8000694:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d008      	beq.n	80006ae <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 80006ac:	e007      	b.n	80006be <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	801a      	strh	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	821a      	strh	r2, [r3, #16]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	8a1b      	ldrh	r3, [r3, #16]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
 800070c:	4613      	mov	r3, r2
 800070e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000710:	78bb      	ldrb	r3, [r7, #2]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d004      	beq.n	8000720 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	70fb      	strb	r3, [r7, #3]
 800071e:	e003      	b.n	8000728 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	f023 0301 	bic.w	r3, r3, #1
 8000726:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	b29a      	uxth	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	821a      	strh	r2, [r3, #16]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800073a:	b480      	push	{r7}
 800073c:	b087      	sub	sp, #28
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000750:	2300      	movs	r3, #0
 8000752:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	8a9b      	ldrh	r3, [r3, #20]
 8000758:	b29b      	uxth	r3, r3
 800075a:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	8b1b      	ldrh	r3, [r3, #24]
 8000760:	b29b      	uxth	r3, r3
 8000762:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	041b      	lsls	r3, r3, #16
 8000768:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
 8000770:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000774:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	401a      	ands	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	d102      	bne.n	8000788 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000782:	2301      	movs	r3, #1
 8000784:	75fb      	strb	r3, [r7, #23]
 8000786:	e001      	b.n	800078c <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000788:	2300      	movs	r3, #0
 800078a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800078c:	7dfb      	ldrb	r3, [r7, #23]
}
 800078e:	4618      	mov	r0, r3
 8000790:	371c      	adds	r7, #28
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000798:	b480      	push	{r7}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80007b4:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <RCC_GetClocksFreq+0x148>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 030c 	and.w	r3, r3, #12
 80007bc:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d007      	beq.n	80007d4 <RCC_GetClocksFreq+0x3c>
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d009      	beq.n	80007dc <RCC_GetClocksFreq+0x44>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d12f      	bne.n	800082c <RCC_GetClocksFreq+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a45      	ldr	r2, [pc, #276]	; (80008e4 <RCC_GetClocksFreq+0x14c>)
 80007d0:	601a      	str	r2, [r3, #0]
      break;
 80007d2:	e02f      	b.n	8000834 <RCC_GetClocksFreq+0x9c>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a43      	ldr	r2, [pc, #268]	; (80008e4 <RCC_GetClocksFreq+0x14c>)
 80007d8:	601a      	str	r2, [r3, #0]
      break;
 80007da:	e02b      	b.n	8000834 <RCC_GetClocksFreq+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80007dc:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <RCC_GetClocksFreq+0x148>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80007e4:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80007e6:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <RCC_GetClocksFreq+0x148>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007ee:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	0c9b      	lsrs	r3, r3, #18
 80007f4:	3302      	adds	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d106      	bne.n	800080c <RCC_GetClocksFreq+0x74>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <RCC_GetClocksFreq+0x150>)
 8000802:	fb02 f203 	mul.w	r2, r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800080a:	e013      	b.n	8000834 <RCC_GetClocksFreq+0x9c>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 800080c:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <RCC_GetClocksFreq+0x148>)
 800080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000810:	f003 030f 	and.w	r3, r3, #15
 8000814:	3301      	adds	r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000818:	4a32      	ldr	r2, [pc, #200]	; (80008e4 <RCC_GetClocksFreq+0x14c>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	fb02 f203 	mul.w	r2, r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	601a      	str	r2, [r3, #0]
      break;
 800082a:	e003      	b.n	8000834 <RCC_GetClocksFreq+0x9c>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a2d      	ldr	r2, [pc, #180]	; (80008e4 <RCC_GetClocksFreq+0x14c>)
 8000830:	601a      	str	r2, [r3, #0]
      break;
 8000832:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000834:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <RCC_GetClocksFreq+0x148>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800083c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	091b      	lsrs	r3, r3, #4
 8000842:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000844:	4a29      	ldr	r2, [pc, #164]	; (80008ec <RCC_GetClocksFreq+0x154>)
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	40da      	lsrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <RCC_GetClocksFreq+0x148>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000864:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800086c:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <RCC_GetClocksFreq+0x154>)
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685a      	ldr	r2, [r3, #4]
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	40da      	lsrs	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <RCC_GetClocksFreq+0x148>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800088c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	0adb      	lsrs	r3, r3, #11
 8000892:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <RCC_GetClocksFreq+0x154>)
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	40da      	lsrs	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <RCC_GetClocksFreq+0x148>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	0b9b      	lsrs	r3, r3, #14
 80008ba:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 80008bc:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <RCC_GetClocksFreq+0x158>)
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68da      	ldr	r2, [r3, #12]
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	611a      	str	r2, [r3, #16]
}
 80008d6:	bf00      	nop
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40021000 	.word	0x40021000
 80008e4:	007a1200 	.word	0x007a1200
 80008e8:	003d0900 	.word	0x003d0900
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000010 	.word	0x20000010

080008f4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d006      	beq.n	8000914 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000906:	4909      	ldr	r1, [pc, #36]	; (800092c <RCC_APB2PeriphClockCmd+0x38>)
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <RCC_APB2PeriphClockCmd+0x38>)
 800090a:	699a      	ldr	r2, [r3, #24]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4313      	orrs	r3, r2
 8000910:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000912:	e006      	b.n	8000922 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000914:	4905      	ldr	r1, [pc, #20]	; (800092c <RCC_APB2PeriphClockCmd+0x38>)
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <RCC_APB2PeriphClockCmd+0x38>)
 8000918:	699a      	ldr	r2, [r3, #24]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	43db      	mvns	r3, r3
 800091e:	4013      	ands	r3, r2
 8000920:	618b      	str	r3, [r1, #24]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000

08000930 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000942:	4909      	ldr	r1, [pc, #36]	; (8000968 <RCC_APB1PeriphClockCmd+0x38>)
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <RCC_APB1PeriphClockCmd+0x38>)
 8000946:	69da      	ldr	r2, [r3, #28]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4313      	orrs	r3, r2
 800094c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800094e:	e006      	b.n	800095e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000950:	4905      	ldr	r1, [pc, #20]	; (8000968 <RCC_APB1PeriphClockCmd+0x38>)
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <RCC_APB1PeriphClockCmd+0x38>)
 8000954:	69da      	ldr	r2, [r3, #28]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	43db      	mvns	r3, r3
 800095a:	4013      	ands	r3, r2
 800095c:	61cb      	str	r3, [r1, #28]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000

0800096c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a2e      	ldr	r2, [pc, #184]	; (8000a3c <TIM_TimeBaseInit+0xd0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d013      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <TIM_TimeBaseInit+0xd4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d00f      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000996:	d00b      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <TIM_TimeBaseInit+0xd8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d007      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <TIM_TimeBaseInit+0xdc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d003      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <TIM_TimeBaseInit+0xe0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d108      	bne.n	80009c2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009b6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	885a      	ldrh	r2, [r3, #2]
 80009bc:	89fb      	ldrh	r3, [r7, #14]
 80009be:	4313      	orrs	r3, r2
 80009c0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <TIM_TimeBaseInit+0xe4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d00c      	beq.n	80009e4 <TIM_TimeBaseInit+0x78>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <TIM_TimeBaseInit+0xe8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d008      	beq.n	80009e4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80009d2:	89fb      	ldrh	r3, [r7, #14]
 80009d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009d8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	88da      	ldrh	r2, [r3, #6]
 80009de:	89fb      	ldrh	r3, [r7, #14]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	89fa      	ldrh	r2, [r7, #14]
 80009e8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	889a      	ldrh	r2, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	881a      	ldrh	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <TIM_TimeBaseInit+0xd0>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d00f      	beq.n	8000a22 <TIM_TimeBaseInit+0xb6>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <TIM_TimeBaseInit+0xd4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00b      	beq.n	8000a22 <TIM_TimeBaseInit+0xb6>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <TIM_TimeBaseInit+0xec>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <TIM_TimeBaseInit+0xb6>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <TIM_TimeBaseInit+0xf0>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d003      	beq.n	8000a22 <TIM_TimeBaseInit+0xb6>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <TIM_TimeBaseInit+0xf4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d104      	bne.n	8000a2c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	7a1b      	ldrb	r3, [r3, #8]
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	829a      	strh	r2, [r3, #20]
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	40013400 	.word	0x40013400
 8000a44:	40000400 	.word	0x40000400
 8000a48:	40000800 	.word	0x40000800
 8000a4c:	40000c00 	.word	0x40000c00
 8000a50:	40001000 	.word	0x40001000
 8000a54:	40001400 	.word	0x40001400
 8000a58:	40014000 	.word	0x40014000
 8000a5c:	40014400 	.word	0x40014400
 8000a60:	40014800 	.word	0x40014800

08000a64 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	817b      	strh	r3, [r7, #10]
 8000a72:	2300      	movs	r3, #0
 8000a74:	81fb      	strh	r3, [r7, #14]
 8000a76:	2300      	movs	r3, #0
 8000a78:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	8c1b      	ldrh	r3, [r3, #32]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f023 0301 	bic.w	r3, r3, #1
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	8c1b      	ldrh	r3, [r3, #32]
 8000a8e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	889b      	ldrh	r3, [r3, #4]
 8000a94:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	8b1b      	ldrh	r3, [r3, #24]
 8000a9a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aa2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000aa4:	897b      	ldrh	r3, [r7, #10]
 8000aa6:	f023 0303 	bic.w	r3, r3, #3
 8000aaa:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	881a      	ldrh	r2, [r3, #0]
 8000ab0:	897b      	ldrh	r3, [r7, #10]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	f023 0302 	bic.w	r3, r3, #2
 8000abc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	891a      	ldrh	r2, [r3, #8]
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	885a      	ldrh	r2, [r3, #2]
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <TIM_OC1Init+0x104>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d00f      	beq.n	8000afa <TIM_OC1Init+0x96>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <TIM_OC1Init+0x108>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d00b      	beq.n	8000afa <TIM_OC1Init+0x96>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <TIM_OC1Init+0x10c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d007      	beq.n	8000afa <TIM_OC1Init+0x96>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <TIM_OC1Init+0x110>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d003      	beq.n	8000afa <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <TIM_OC1Init+0x114>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d123      	bne.n	8000b42 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8000afa:	89fb      	ldrh	r3, [r7, #14]
 8000afc:	f023 0308 	bic.w	r3, r3, #8
 8000b00:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	895a      	ldrh	r2, [r3, #10]
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	f023 0304 	bic.w	r3, r3, #4
 8000b12:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	889a      	ldrh	r2, [r3, #4]
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8000b1e:	89bb      	ldrh	r3, [r7, #12]
 8000b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b24:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8000b26:	89bb      	ldrh	r3, [r7, #12]
 8000b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b2c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	899a      	ldrh	r2, [r3, #12]
 8000b32:	89bb      	ldrh	r3, [r7, #12]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	89da      	ldrh	r2, [r3, #14]
 8000b3c:	89bb      	ldrh	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	89ba      	ldrh	r2, [r7, #12]
 8000b46:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	897a      	ldrh	r2, [r7, #10]
 8000b4c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	88da      	ldrh	r2, [r3, #6]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	89fa      	ldrh	r2, [r7, #14]
 8000b5a:	841a      	strh	r2, [r3, #32]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40012c00 	.word	0x40012c00
 8000b6c:	40013400 	.word	0x40013400
 8000b70:	40014000 	.word	0x40014000
 8000b74:	40014400 	.word	0x40014400
 8000b78:	40014800 	.word	0x40014800

08000b7c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	817b      	strh	r3, [r7, #10]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	81fb      	strh	r3, [r7, #14]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	8c1b      	ldrh	r3, [r3, #32]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	f023 0310 	bic.w	r3, r3, #16
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	8c1b      	ldrh	r3, [r3, #32]
 8000ba6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	889b      	ldrh	r3, [r3, #4]
 8000bac:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	8b1b      	ldrh	r3, [r3, #24]
 8000bb2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8000bb4:	897b      	ldrh	r3, [r7, #10]
 8000bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000bba:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8000bbc:	897b      	ldrh	r3, [r7, #10]
 8000bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bc2:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	897b      	ldrh	r3, [r7, #10]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8000bd2:	89fb      	ldrh	r3, [r7, #14]
 8000bd4:	f023 0320 	bic.w	r3, r3, #32
 8000bd8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	891b      	ldrh	r3, [r3, #8]
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	89fb      	ldrh	r3, [r7, #14]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	885b      	ldrh	r3, [r3, #2]
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <TIM_OC2Init+0x108>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d003      	beq.n	8000c06 <TIM_OC2Init+0x8a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <TIM_OC2Init+0x10c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8000c06:	89fb      	ldrh	r3, [r7, #14]
 8000c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c0c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	895b      	ldrh	r3, [r3, #10]
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8000c1c:	89fb      	ldrh	r3, [r7, #14]
 8000c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c22:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8000c32:	89bb      	ldrh	r3, [r7, #12]
 8000c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c38:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8000c3a:	89bb      	ldrh	r3, [r7, #12]
 8000c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c40:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	899b      	ldrh	r3, [r3, #12]
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	89bb      	ldrh	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	89db      	ldrh	r3, [r3, #14]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	89bb      	ldrh	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	89ba      	ldrh	r2, [r7, #12]
 8000c62:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	897a      	ldrh	r2, [r7, #10]
 8000c68:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	88da      	ldrh	r2, [r3, #6]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	89fa      	ldrh	r2, [r7, #14]
 8000c76:	841a      	strh	r2, [r3, #32]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40012c00 	.word	0x40012c00
 8000c88:	40013400 	.word	0x40013400

08000c8c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	817b      	strh	r3, [r7, #10]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	81fb      	strh	r3, [r7, #14]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	8c1b      	ldrh	r3, [r3, #32]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	8c1b      	ldrh	r3, [r3, #32]
 8000cb6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	889b      	ldrh	r3, [r3, #4]
 8000cbc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	8b9b      	ldrh	r3, [r3, #28]
 8000cc2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8000cc4:	897b      	ldrh	r3, [r7, #10]
 8000cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cca:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8000ccc:	897b      	ldrh	r3, [r7, #10]
 8000cce:	f023 0303 	bic.w	r3, r3, #3
 8000cd2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	881a      	ldrh	r2, [r3, #0]
 8000cd8:	897b      	ldrh	r3, [r7, #10]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ce4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	891b      	ldrh	r3, [r3, #8]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	885b      	ldrh	r3, [r3, #2]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	89fb      	ldrh	r3, [r7, #14]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <TIM_OC3Init+0x104>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d003      	beq.n	8000d12 <TIM_OC3Init+0x86>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <TIM_OC3Init+0x108>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12b      	bne.n	8000d6a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d18:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	895b      	ldrh	r3, [r3, #10]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d2e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	889b      	ldrh	r3, [r3, #4]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	89fb      	ldrh	r3, [r7, #14]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8000d3e:	89bb      	ldrh	r3, [r7, #12]
 8000d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d44:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8000d46:	89bb      	ldrh	r3, [r7, #12]
 8000d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d4c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	899b      	ldrh	r3, [r3, #12]
 8000d52:	011b      	lsls	r3, r3, #4
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	89bb      	ldrh	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	89db      	ldrh	r3, [r3, #14]
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	89bb      	ldrh	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	89ba      	ldrh	r2, [r7, #12]
 8000d6e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	897a      	ldrh	r2, [r7, #10]
 8000d74:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	88da      	ldrh	r2, [r3, #6]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	89fa      	ldrh	r2, [r7, #14]
 8000d82:	841a      	strh	r2, [r3, #32]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40012c00 	.word	0x40012c00
 8000d94:	40013400 	.word	0x40013400

08000d98 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	81bb      	strh	r3, [r7, #12]
 8000da6:	2300      	movs	r3, #0
 8000da8:	817b      	strh	r3, [r7, #10]
 8000daa:	2300      	movs	r3, #0
 8000dac:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	8c1b      	ldrh	r3, [r3, #32]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	8c1b      	ldrh	r3, [r3, #32]
 8000dc2:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	889b      	ldrh	r3, [r3, #4]
 8000dc8:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	8b9b      	ldrh	r3, [r3, #28]
 8000dce:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8000dd0:	89bb      	ldrh	r3, [r7, #12]
 8000dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000dd6:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8000dd8:	89bb      	ldrh	r3, [r7, #12]
 8000dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dde:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	89bb      	ldrh	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8000dee:	897b      	ldrh	r3, [r7, #10]
 8000df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000df4:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	891b      	ldrh	r3, [r3, #8]
 8000dfa:	031b      	lsls	r3, r3, #12
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	897b      	ldrh	r3, [r7, #10]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	885b      	ldrh	r3, [r3, #2]
 8000e08:	031b      	lsls	r3, r3, #12
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	897b      	ldrh	r3, [r7, #10]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <TIM_OC4Init+0xc8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d003      	beq.n	8000e22 <TIM_OC4Init+0x8a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <TIM_OC4Init+0xcc>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10a      	bne.n	8000e38 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8000e22:	89fb      	ldrh	r3, [r7, #14]
 8000e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e28:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	899b      	ldrh	r3, [r3, #12]
 8000e2e:	019b      	lsls	r3, r3, #6
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	89fa      	ldrh	r2, [r7, #14]
 8000e3c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	89ba      	ldrh	r2, [r7, #12]
 8000e42:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	88da      	ldrh	r2, [r3, #6]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	897a      	ldrh	r2, [r7, #10]
 8000e52:	841a      	strh	r2, [r3, #32]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40012c00 	.word	0x40012c00
 8000e64:	40013400 	.word	0x40013400

08000e68 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d008      	beq.n	8000e8c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000e8a:	e007      	b.n	8000e9c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	801a      	strh	r2, [r3, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	807b      	strh	r3, [r7, #2]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000eb6:	787b      	ldrb	r3, [r7, #1]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d008      	beq.n	8000ece <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	899b      	ldrh	r3, [r3, #12]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000ecc:	e009      	b.n	8000ee2 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	899b      	ldrh	r3, [r3, #12]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4013      	ands	r3, r2
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	819a      	strh	r2, [r3, #12]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d008      	beq.n	8000f10 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8000f0e:	e007      	b.n	8000f20 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	801a      	strh	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b085      	sub	sp, #20
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	460b      	mov	r3, r1
 8000f34:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	8b1b      	ldrh	r3, [r3, #24]
 8000f3e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	f023 0308 	bic.w	r3, r3, #8
 8000f46:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000f48:	89fa      	ldrh	r2, [r7, #14]
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	89fa      	ldrh	r2, [r7, #14]
 8000f54:	831a      	strh	r2, [r3, #24]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	8b1b      	ldrh	r3, [r3, #24]
 8000f74:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8000f76:	89fb      	ldrh	r3, [r7, #14]
 8000f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f7c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	89fa      	ldrh	r2, [r7, #14]
 8000f8e:	831a      	strh	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	8b9b      	ldrh	r3, [r3, #28]
 8000fae:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000fb0:	89fb      	ldrh	r3, [r7, #14]
 8000fb2:	f023 0308 	bic.w	r3, r3, #8
 8000fb6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000fb8:	89fa      	ldrh	r2, [r7, #14]
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	89fa      	ldrh	r2, [r7, #14]
 8000fc4:	839a      	strh	r2, [r3, #28]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	8b9b      	ldrh	r3, [r3, #28]
 8000fe4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fec:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	89fa      	ldrh	r2, [r7, #14]
 8000ffe:	839a      	strh	r2, [r3, #28]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800100a:	b480      	push	{r7}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800101a:	2300      	movs	r3, #0
 800101c:	81bb      	strh	r3, [r7, #12]
 800101e:	2300      	movs	r3, #0
 8001020:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	8a1b      	ldrh	r3, [r3, #16]
 8001026:	b29a      	uxth	r2, r3
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	4013      	ands	r3, r2
 800102c:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	899b      	ldrh	r3, [r3, #12]
 8001032:	b29a      	uxth	r2, r3
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	4013      	ands	r3, r2
 8001038:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800103a:	89bb      	ldrh	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <TIM_GetITStatus+0x42>
 8001040:	897b      	ldrh	r3, [r7, #10]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e001      	b.n	8001050 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	43db      	mvns	r3, r3
 800106c:	b29a      	uxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	821a      	strh	r2, [r3, #16]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	8a1b      	ldrh	r3, [r3, #16]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80010a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010a8:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80010ac:	4013      	ands	r3, r2
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	88db      	ldrh	r3, [r3, #6]
 80010b4:	461a      	mov	r2, r3
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b8:	4313      	orrs	r3, r2
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80010bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010be:	b29a      	uxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	899b      	ldrh	r3, [r3, #12]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80010cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ce:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80010d2:	4013      	ands	r3, r2
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	889a      	ldrh	r2, [r3, #4]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	891b      	ldrh	r3, [r3, #8]
 80010de:	4313      	orrs	r3, r2
 80010e0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ee:	4313      	orrs	r3, r2
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80010f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	8a9b      	ldrh	r3, [r3, #20]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001104:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001108:	4013      	ands	r3, r2
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	899b      	ldrh	r3, [r3, #12]
 8001110:	461a      	mov	r2, r3
 8001112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001114:	4313      	orrs	r3, r2
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fb37 	bl	8000798 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	4a2e      	ldr	r2, [pc, #184]	; (80011e8 <USART_Init+0x16c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d102      	bne.n	8001138 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
 8001136:	e001      	b.n	800113c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	899b      	ldrh	r3, [r3, #12]
 8001140:	b29b      	uxth	r3, r3
 8001142:	b21b      	sxth	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	da0c      	bge.n	8001162 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	009a      	lsls	r2, r3, #2
 8001152:	441a      	add	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
 8001160:	e00b      	b.n	800117a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	009a      	lsls	r2, r3, #2
 800116c:	441a      	add	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fbb2 f3f3 	udiv	r3, r2, r3
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <USART_Init+0x170>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	2264      	movs	r2, #100	; 0x64
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	899b      	ldrh	r3, [r3, #12]
 800119c:	b29b      	uxth	r3, r3
 800119e:	b21b      	sxth	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da0c      	bge.n	80011be <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	3332      	adds	r3, #50	; 0x32
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <USART_Init+0x170>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	095b      	lsrs	r3, r3, #5
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b8:	4313      	orrs	r3, r2
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011bc:	e00b      	b.n	80011d6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	3332      	adds	r3, #50	; 0x32
 80011c4:	4a09      	ldr	r2, [pc, #36]	; (80011ec <USART_Init+0x170>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011d2:	4313      	orrs	r3, r2
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80011d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d8:	b29a      	uxth	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	811a      	strh	r2, [r3, #8]
}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40013800 	.word	0x40013800
 80011ec:	51eb851f 	.word	0x51eb851f

080011f0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	899b      	ldrh	r3, [r3, #12]
 8001206:	b29b      	uxth	r3, r3
 8001208:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001212:	e007      	b.n	8001224 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	899b      	ldrh	r3, [r3, #12]
 8001218:	b29b      	uxth	r3, r3
 800121a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800121e:	b29a      	uxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	819a      	strh	r2, [r3, #12]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	809a      	strh	r2, [r3, #4]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	b29a      	uxth	r2, r3
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	4013      	ands	r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e001      	b.n	800127a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
	...

08001288 <mpu6050_init>:
 * 0x10: 1000 degrees/second, error: 26
 * 0x18: 2000 degrees/second, error: 13
 *
 */
int8_t mpu6050_init(uint8_t gyroFullScaleRange, uint8_t accelFullScaleRange)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]
	int8_t returnCode=0;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]

	uart_printf("f1\n");
 800129c:	481c      	ldr	r0, [pc, #112]	; (8001310 <mpu6050_init+0x88>)
 800129e:	f000 fb1d 	bl	80018dc <uart_printf>

	/* turn off sleep mode */
	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x6B, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	216b      	movs	r1, #107	; 0x6b
 80012a6:	2068      	movs	r0, #104	; 0x68
 80012a8:	f000 f96e 	bl	8001588 <i2c_slave_mem_write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d102      	bne.n	80012c0 <mpu6050_init+0x38>
		return -1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	e023      	b.n	8001308 <mpu6050_init+0x80>

	uart_printf("f2\n");
 80012c0:	4814      	ldr	r0, [pc, #80]	; (8001314 <mpu6050_init+0x8c>)
 80012c2:	f000 fb0b 	bl	80018dc <uart_printf>

	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1B, gyroFullScaleRange);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	461a      	mov	r2, r3
 80012ca:	211b      	movs	r1, #27
 80012cc:	2068      	movs	r0, #104	; 0x68
 80012ce:	f000 f95b 	bl	8001588 <i2c_slave_mem_write>
 80012d2:	4603      	mov	r3, r0
 80012d4:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012de:	d102      	bne.n	80012e6 <mpu6050_init+0x5e>
		return -1;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	e010      	b.n	8001308 <mpu6050_init+0x80>



	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1C, accelFullScaleRange);
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	461a      	mov	r2, r3
 80012ea:	211c      	movs	r1, #28
 80012ec:	2068      	movs	r0, #104	; 0x68
 80012ee:	f000 f94b 	bl	8001588 <i2c_slave_mem_write>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fe:	d102      	bne.n	8001306 <mpu6050_init+0x7e>
		return -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	e000      	b.n	8001308 <mpu6050_init+0x80>



	return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	08001ebc 	.word	0x08001ebc
 8001314:	08001ec0 	.word	0x08001ec0

08001318 <accel_measurement_read>:
 * Reads the raw X, Y and Z values from accelerometer.
 * @param accelBuffer: buffer for the read data to be stored.
 * @retval 0 on success, -1 on timeout.
 */
int8_t accel_measurement_read(int16_t* accelBuffer)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	uint8_t accelReadValues[6];
	int8_t errorValue;

	errorValue = i2c_slave_mem_read(MPU6050_ID, 0x3B, accelReadValues, 6);
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	2306      	movs	r3, #6
 8001326:	213b      	movs	r1, #59	; 0x3b
 8001328:	2068      	movs	r0, #104	; 0x68
 800132a:	f000 f869 	bl	8001400 <i2c_slave_mem_read>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]

	if(errorValue == 0)
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11e      	bne.n	8001378 <accel_measurement_read+0x60>
	{
		accelBuffer[0] = (accelReadValues[0]<<8)|accelReadValues[1];//x_out
 800133a:	7a3b      	ldrb	r3, [r7, #8]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	7a7b      	ldrb	r3, [r7, #9]
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b21a      	sxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	801a      	strh	r2, [r3, #0]
		accelBuffer[1] = (accelReadValues[2]<<8)|accelReadValues[3];//y_out
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3302      	adds	r3, #2
 8001350:	7aba      	ldrb	r2, [r7, #10]
 8001352:	0212      	lsls	r2, r2, #8
 8001354:	b211      	sxth	r1, r2
 8001356:	7afa      	ldrb	r2, [r7, #11]
 8001358:	b212      	sxth	r2, r2
 800135a:	430a      	orrs	r2, r1
 800135c:	b212      	sxth	r2, r2
 800135e:	801a      	strh	r2, [r3, #0]
		accelBuffer[2] = (accelReadValues[4]<<8)|accelReadValues[5];//z_out
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3304      	adds	r3, #4
 8001364:	7b3a      	ldrb	r2, [r7, #12]
 8001366:	0212      	lsls	r2, r2, #8
 8001368:	b211      	sxth	r1, r2
 800136a:	7b7a      	ldrb	r2, [r7, #13]
 800136c:	b212      	sxth	r2, r2
 800136e:	430a      	orrs	r2, r1
 8001370:	b212      	sxth	r2, r2
 8001372:	801a      	strh	r2, [r3, #0]
		return 0;
 8001374:	2300      	movs	r3, #0
 8001376:	e001      	b.n	800137c <accel_measurement_read+0x64>
	}
	else
		return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <I2C_LowLevel_Init>:
 * @param ClockSpeed Bus communication frequency in Hz
 * @param OwnAddress MCU I2C address
 * @return none.
 */
void I2C_LowLevel_Init(uint32_t ClockSpeed, uint8_t OwnAddress)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
	I2C_InitTypeDef  I2C_InitStructure;
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001390:	2101      	movs	r1, #1
 8001392:	2008      	movs	r0, #8
 8001394:	f7ff faae 	bl	80008f4 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001398:	2101      	movs	r1, #1
 800139a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800139e:	f7ff fac7 	bl	8000930 <RCC_APB1PeriphClockCmd>


	/* Configure I2C_EE pins: SCL and SDA */
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
 80013a2:	23c0      	movs	r3, #192	; 0xc0
 80013a4:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80013a6:	2303      	movs	r3, #3
 80013a8:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 80013aa:	231c      	movs	r3, #28
 80013ac:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4810      	ldr	r0, [pc, #64]	; (80013f8 <I2C_LowLevel_Init+0x74>)
 80013b6:	f7fe ff8d 	bl	80002d4 <GPIO_Init>

	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80013ba:	2300      	movs	r3, #0
 80013bc:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80013be:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80013c2:	82fb      	strh	r3, [r7, #22]
	I2C_InitStructure.I2C_OwnAddress1 = OwnAddress;
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	833b      	strh	r3, [r7, #24]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	837b      	strh	r3, [r7, #26]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80013d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d4:	83bb      	strh	r3, [r7, #28]
	I2C_InitStructure.I2C_ClockSpeed = ClockSpeed;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	613b      	str	r3, [r7, #16]

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 80013da:	2101      	movs	r1, #1
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <I2C_LowLevel_Init+0x78>)
 80013de:	f7ff f8f7 	bl	80005d0 <I2C_Cmd>
	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <I2C_LowLevel_Init+0x78>)
 80013ea:	f7ff f82f 	bl	800044c <I2C_Init>
}
 80013ee:	bf00      	nop
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40005400 	.word	0x40005400

08001400 <i2c_slave_mem_read>:
 * @param bytesNum number of bytes to read from slave.
 * @return 0 on success, -1 on timeout.
 *
 */
int8_t i2c_slave_mem_read(uint8_t slaveAddr, uint8_t registerAddr, uint8_t* writeBuffer, uint8_t bytesNum)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	603a      	str	r2, [r7, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	460b      	mov	r3, r1
 8001410:	71bb      	strb	r3, [r7, #6]
 8001412:	4613      	mov	r3, r2
 8001414:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	i = bytesNum;
 8001416:	797b      	ldrb	r3, [r7, #5]
 8001418:	73fb      	strb	r3, [r7, #15]
	timeout_alarm_set(5*bytesNum);
 800141a:	797a      	ldrb	r2, [r7, #5]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fce0 	bl	8001de8 <timeout_alarm_set>

	I2C_AcknowledgeConfig(I2C1,ENABLE);
 8001428:	2101      	movs	r1, #1
 800142a:	4851      	ldr	r0, [pc, #324]	; (8001570 <i2c_slave_mem_read+0x170>)
 800142c:	f7ff f92d 	bl	800068a <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2C1,ENABLE);
 8001430:	2101      	movs	r1, #1
 8001432:	484f      	ldr	r0, [pc, #316]	; (8001570 <i2c_slave_mem_read+0x170>)
 8001434:	f7ff f8eb 	bl	800060e <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 8001438:	e007      	b.n	800144a <i2c_slave_mem_read+0x4a>
	{
		if(timeout_alarm_status_check() == 1)
 800143a:	f000 fcf3 	bl	8001e24 <timeout_alarm_status_check>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d102      	bne.n	800144a <i2c_slave_mem_read+0x4a>
			return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	e08e      	b.n	8001568 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800144a:	494a      	ldr	r1, [pc, #296]	; (8001574 <i2c_slave_mem_read+0x174>)
 800144c:	4848      	ldr	r0, [pc, #288]	; (8001570 <i2c_slave_mem_read+0x170>)
 800144e:	f7ff f974 	bl	800073a <I2C_CheckEvent>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <i2c_slave_mem_read+0x3a>
	}
	//uart_printf("aa\n");

	I2C_Send7bitAddress(I2C1, (slaveAddr<<1), I2C_Direction_Transmitter);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	4843      	ldr	r0, [pc, #268]	; (8001570 <i2c_slave_mem_read+0x170>)
 8001464:	f7ff f94c 	bl	8000700 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001468:	e007      	b.n	800147a <i2c_slave_mem_read+0x7a>
	{
		if(timeout_alarm_status_check() == 1)
 800146a:	f000 fcdb 	bl	8001e24 <timeout_alarm_status_check>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d102      	bne.n	800147a <i2c_slave_mem_read+0x7a>
			return -1;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	e076      	b.n	8001568 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800147a:	493f      	ldr	r1, [pc, #252]	; (8001578 <i2c_slave_mem_read+0x178>)
 800147c:	483c      	ldr	r0, [pc, #240]	; (8001570 <i2c_slave_mem_read+0x170>)
 800147e:	f7ff f95c 	bl	800073a <I2C_CheckEvent>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <i2c_slave_mem_read+0x6a>
	}
	//uart_printf("bb\n");


	I2C_SendData(I2C1, registerAddr);
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	4619      	mov	r1, r3
 800148c:	4838      	ldr	r0, [pc, #224]	; (8001570 <i2c_slave_mem_read+0x170>)
 800148e:	f7ff f91b 	bl	80006c8 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001492:	e007      	b.n	80014a4 <i2c_slave_mem_read+0xa4>
	{
		if(timeout_alarm_status_check() == 1)
 8001494:	f000 fcc6 	bl	8001e24 <timeout_alarm_status_check>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <i2c_slave_mem_read+0xa4>
			return -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e061      	b.n	8001568 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80014a4:	4935      	ldr	r1, [pc, #212]	; (800157c <i2c_slave_mem_read+0x17c>)
 80014a6:	4832      	ldr	r0, [pc, #200]	; (8001570 <i2c_slave_mem_read+0x170>)
 80014a8:	f7ff f947 	bl	800073a <I2C_CheckEvent>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <i2c_slave_mem_read+0x94>
	}
	//uart_printf("cc\n");

	I2C_GenerateSTART(I2C1,ENABLE);
 80014b2:	2101      	movs	r1, #1
 80014b4:	482e      	ldr	r0, [pc, #184]	; (8001570 <i2c_slave_mem_read+0x170>)
 80014b6:	f7ff f8aa 	bl	800060e <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80014ba:	e007      	b.n	80014cc <i2c_slave_mem_read+0xcc>
	{
		if(timeout_alarm_status_check() == 1)
 80014bc:	f000 fcb2 	bl	8001e24 <timeout_alarm_status_check>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d102      	bne.n	80014cc <i2c_slave_mem_read+0xcc>
			return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e04d      	b.n	8001568 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80014cc:	4929      	ldr	r1, [pc, #164]	; (8001574 <i2c_slave_mem_read+0x174>)
 80014ce:	4828      	ldr	r0, [pc, #160]	; (8001570 <i2c_slave_mem_read+0x170>)
 80014d0:	f7ff f933 	bl	800073a <I2C_CheckEvent>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <i2c_slave_mem_read+0xbc>
	}
	//uart_printf("dd\n");

	I2C_Send7bitAddress(I2C1, slaveAddr<<1, I2C_Direction_Receiver);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2201      	movs	r2, #1
 80014e2:	4619      	mov	r1, r3
 80014e4:	4822      	ldr	r0, [pc, #136]	; (8001570 <i2c_slave_mem_read+0x170>)
 80014e6:	f7ff f90b 	bl	8000700 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 80014ea:	e007      	b.n	80014fc <i2c_slave_mem_read+0xfc>
	{
		if(timeout_alarm_status_check() == 1)
 80014ec:	f000 fc9a 	bl	8001e24 <timeout_alarm_status_check>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d102      	bne.n	80014fc <i2c_slave_mem_read+0xfc>
			return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e035      	b.n	8001568 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 80014fc:	4920      	ldr	r1, [pc, #128]	; (8001580 <i2c_slave_mem_read+0x180>)
 80014fe:	481c      	ldr	r0, [pc, #112]	; (8001570 <i2c_slave_mem_read+0x170>)
 8001500:	f7ff f91b 	bl	800073a <I2C_CheckEvent>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <i2c_slave_mem_read+0xec>
	}
	//uart_printf("ee\n");

	while(i>0)
 800150a:	e023      	b.n	8001554 <i2c_slave_mem_read+0x154>
	{
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
		{
			if(timeout_alarm_status_check() == 1)
 800150c:	f000 fc8a 	bl	8001e24 <timeout_alarm_status_check>
 8001510:	4603      	mov	r3, r0
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <i2c_slave_mem_read+0x11c>
				return -1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e025      	b.n	8001568 <i2c_slave_mem_read+0x168>
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
 800151c:	4919      	ldr	r1, [pc, #100]	; (8001584 <i2c_slave_mem_read+0x184>)
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <i2c_slave_mem_read+0x170>)
 8001520:	f7ff f90b 	bl	800073a <I2C_CheckEvent>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <i2c_slave_mem_read+0x10c>
		}
		if(i==1)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d103      	bne.n	8001538 <i2c_slave_mem_read+0x138>
			I2C_AcknowledgeConfig(I2C1,DISABLE);
 8001530:	2100      	movs	r1, #0
 8001532:	480f      	ldr	r0, [pc, #60]	; (8001570 <i2c_slave_mem_read+0x170>)
 8001534:	f7ff f8a9 	bl	800068a <I2C_AcknowledgeConfig>
		writeBuffer[bytesNum-i] = I2C_ReceiveData(I2C1);
 8001538:	797a      	ldrb	r2, [r7, #5]
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	461a      	mov	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	189c      	adds	r4, r3, r2
 8001544:	480a      	ldr	r0, [pc, #40]	; (8001570 <i2c_slave_mem_read+0x170>)
 8001546:	f7ff f8ce 	bl	80006e6 <I2C_ReceiveData>
 800154a:	4603      	mov	r3, r0
 800154c:	7023      	strb	r3, [r4, #0]
		i--;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	3b01      	subs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
	while(i>0)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1e0      	bne.n	800151c <i2c_slave_mem_read+0x11c>
		//uart_printf("ff\n");
	}
	I2C_GenerateSTOP(I2C1,ENABLE);
 800155a:	2101      	movs	r1, #1
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <i2c_slave_mem_read+0x170>)
 800155e:	f7ff f875 	bl	800064c <I2C_GenerateSTOP>
	//uart_printf("gg\n");
	timeout_alarm_off();
 8001562:	f000 fc6b 	bl	8001e3c <timeout_alarm_off>
	return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	40005400 	.word	0x40005400
 8001574:	00030001 	.word	0x00030001
 8001578:	00070082 	.word	0x00070082
 800157c:	00070084 	.word	0x00070084
 8001580:	00030002 	.word	0x00030002
 8001584:	00030040 	.word	0x00030040

08001588 <i2c_slave_mem_write>:
 * @param writedata data to be written to the slave register.
 * @return 0 on success, -1 on timeout.
 *
 */
int8_t i2c_slave_mem_write(uint8_t slaveAddr, uint8_t registerAddr, uint8_t writeData)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	460b      	mov	r3, r1
 8001594:	71bb      	strb	r3, [r7, #6]
 8001596:	4613      	mov	r3, r2
 8001598:	717b      	strb	r3, [r7, #5]
	timeout_alarm_set(20);
 800159a:	2014      	movs	r0, #20
 800159c:	f000 fc24 	bl	8001de8 <timeout_alarm_set>

	I2C_GenerateSTART(I2C1,ENABLE);
 80015a0:	2101      	movs	r1, #1
 80015a2:	482f      	ldr	r0, [pc, #188]	; (8001660 <i2c_slave_mem_write+0xd8>)
 80015a4:	f7ff f833 	bl	800060e <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80015a8:	e007      	b.n	80015ba <i2c_slave_mem_write+0x32>
	{
			if(timeout_alarm_status_check() == 1)
 80015aa:	f000 fc3b 	bl	8001e24 <timeout_alarm_status_check>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d102      	bne.n	80015ba <i2c_slave_mem_write+0x32>
				return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	e04d      	b.n	8001656 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80015ba:	492a      	ldr	r1, [pc, #168]	; (8001664 <i2c_slave_mem_write+0xdc>)
 80015bc:	4828      	ldr	r0, [pc, #160]	; (8001660 <i2c_slave_mem_write+0xd8>)
 80015be:	f7ff f8bc 	bl	800073a <I2C_CheckEvent>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <i2c_slave_mem_write+0x22>
	}

	I2C_Send7bitAddress(I2C1, (slaveAddr<<1), I2C_Direction_Transmitter);
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4823      	ldr	r0, [pc, #140]	; (8001660 <i2c_slave_mem_write+0xd8>)
 80015d4:	f7ff f894 	bl	8000700 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80015d8:	e007      	b.n	80015ea <i2c_slave_mem_write+0x62>
	{
			if(timeout_alarm_status_check() == 1)
 80015da:	f000 fc23 	bl	8001e24 <timeout_alarm_status_check>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d102      	bne.n	80015ea <i2c_slave_mem_write+0x62>
				return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	e035      	b.n	8001656 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80015ea:	491f      	ldr	r1, [pc, #124]	; (8001668 <i2c_slave_mem_write+0xe0>)
 80015ec:	481c      	ldr	r0, [pc, #112]	; (8001660 <i2c_slave_mem_write+0xd8>)
 80015ee:	f7ff f8a4 	bl	800073a <I2C_CheckEvent>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <i2c_slave_mem_write+0x52>
	}

	I2C_SendData(I2C1,registerAddr);
 80015f8:	79bb      	ldrb	r3, [r7, #6]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4818      	ldr	r0, [pc, #96]	; (8001660 <i2c_slave_mem_write+0xd8>)
 80015fe:	f7ff f863 	bl	80006c8 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001602:	e007      	b.n	8001614 <i2c_slave_mem_write+0x8c>
	{
			if(timeout_alarm_status_check() == 1)
 8001604:	f000 fc0e 	bl	8001e24 <timeout_alarm_status_check>
 8001608:	4603      	mov	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	d102      	bne.n	8001614 <i2c_slave_mem_write+0x8c>
				return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e020      	b.n	8001656 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001614:	4915      	ldr	r1, [pc, #84]	; (800166c <i2c_slave_mem_write+0xe4>)
 8001616:	4812      	ldr	r0, [pc, #72]	; (8001660 <i2c_slave_mem_write+0xd8>)
 8001618:	f7ff f88f 	bl	800073a <I2C_CheckEvent>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <i2c_slave_mem_write+0x7c>
	}

	I2C_SendData(I2C1,writeData);
 8001622:	797b      	ldrb	r3, [r7, #5]
 8001624:	4619      	mov	r1, r3
 8001626:	480e      	ldr	r0, [pc, #56]	; (8001660 <i2c_slave_mem_write+0xd8>)
 8001628:	f7ff f84e 	bl	80006c8 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 800162c:	e007      	b.n	800163e <i2c_slave_mem_write+0xb6>
	{
			if(timeout_alarm_status_check() == 1)
 800162e:	f000 fbf9 	bl	8001e24 <timeout_alarm_status_check>
 8001632:	4603      	mov	r3, r0
 8001634:	2b01      	cmp	r3, #1
 8001636:	d102      	bne.n	800163e <i2c_slave_mem_write+0xb6>
				return -1;
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	e00b      	b.n	8001656 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 800163e:	490b      	ldr	r1, [pc, #44]	; (800166c <i2c_slave_mem_write+0xe4>)
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <i2c_slave_mem_write+0xd8>)
 8001642:	f7ff f87a 	bl	800073a <I2C_CheckEvent>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <i2c_slave_mem_write+0xa6>
	}

	I2C_GenerateSTOP(I2C1,ENABLE);
 800164c:	2101      	movs	r1, #1
 800164e:	4804      	ldr	r0, [pc, #16]	; (8001660 <i2c_slave_mem_write+0xd8>)
 8001650:	f7fe fffc 	bl	800064c <I2C_GenerateSTOP>

	return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	00030001 	.word	0x00030001
 8001668:	00070082 	.word	0x00070082
 800166c:	00070084 	.word	0x00070084

08001670 <uart_console_init>:
uint32_t previousTime=0;
uint32_t currentTime=0;
uint32_t elapsed_time_in_seconds=0;

void uart_console_init(uint32_t baudRate)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;

	/* Enable peripheral clocks for USART1 on GPIOA */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA |
 8001678:	2101      	movs	r1, #1
 800167a:	f244 0005 	movw	r0, #16389	; 0x4005
 800167e:	f7ff f939 	bl	80008f4 <RCC_APB2PeriphClockCmd>
						   RCC_APB2Periph_AFIO, ENABLE);

	/* Configure PA9 and PA10 as USART1 TX/RX */

	/* PA9 = alternate function push/pull output */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8001682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001686:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001688:	2303      	movs	r3, #3
 800168a:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800168c:	2318      	movs	r3, #24
 800168e:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <uart_console_init+0x78>)
 8001698:	f7fe fe1c 	bl	80002d4 <GPIO_Init>

	/* PA10 = floating input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 800169c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a0:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80016a2:	2304      	movs	r3, #4
 80016a4:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	480e      	ldr	r0, [pc, #56]	; (80016e8 <uart_console_init+0x78>)
 80016ae:	f7fe fe11 	bl	80002d4 <GPIO_Init>

	/* Configure and initialize usart... */
	USART_InitStructure.USART_BaudRate = baudRate;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80016b6:	2300      	movs	r3, #0
 80016b8:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80016be:	2300      	movs	r3, #0
 80016c0:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80016c2:	2300      	movs	r3, #0
 80016c4:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80016c6:	230c      	movs	r3, #12
 80016c8:	82fb      	strh	r3, [r7, #22]

	USART_Init(USART1, &USART_InitStructure);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	4806      	ldr	r0, [pc, #24]	; (80016ec <uart_console_init+0x7c>)
 80016d2:	f7ff fcd3 	bl	800107c <USART_Init>

	/* Enable USART1 */
	USART_Cmd(USART1, ENABLE);
 80016d6:	2101      	movs	r1, #1
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <uart_console_init+0x7c>)
 80016da:	f7ff fd89 	bl	80011f0 <USART_Cmd>
}
 80016de:	bf00      	nop
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40013800 	.word	0x40013800

080016f0 <debug_led_init>:

void debug_led_init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable GPIO clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80016f6:	2101      	movs	r1, #1
 80016f8:	2001      	movs	r0, #1
 80016fa:	f7ff f8fb 	bl	80008f4 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80016fe:	2101      	movs	r1, #1
 8001700:	2010      	movs	r0, #16
 8001702:	f7ff f8f7 	bl	80008f4 <RCC_APB2PeriphClockCmd>

	// Configure pin as output push-pull (LED)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8001706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800170c:	2310      	movs	r3, #16
 800170e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001710:	2303      	movs	r3, #3
 8001712:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <debug_led_init+0x38>)
 800171a:	f7fe fddb 	bl	80002d4 <GPIO_Init>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40011000 	.word	0x40011000

0800172c <main>:


int main(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
	uint8_t data=0;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
	uint8_t gpio_val;
	uint32_t k=0;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]

	int32_t calc1=0;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
	int32_t calc2=0;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]


	timer3_init();
 8001742:	f000 fa87 	bl	8001c54 <timer3_init>
	motors_pwm_init();
 8001746:	f000 fab9 	bl	8001cbc <motors_pwm_init>
	I2C_LowLevel_Init(400000, 0x38);
 800174a:	2138      	movs	r1, #56	; 0x38
 800174c:	4817      	ldr	r0, [pc, #92]	; (80017ac <main+0x80>)
 800174e:	f7ff fe19 	bl	8001384 <I2C_LowLevel_Init>
	debug_led_init();
 8001752:	f7ff ffcd 	bl	80016f0 <debug_led_init>
	uart_console_init(9600);
 8001756:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800175a:	f7ff ff89 	bl	8001670 <uart_console_init>
	delay_ms(2000);
 800175e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001762:	f000 fb2b 	bl	8001dbc <delay_ms>
	uart_printf("start...\n");
 8001766:	4812      	ldr	r0, [pc, #72]	; (80017b0 <main+0x84>)
 8001768:	f000 f8b8 	bl	80018dc <uart_printf>
	if(mpu6050_init(FS_SEL2, FS_SEL1)<0)
 800176c:	2108      	movs	r1, #8
 800176e:	2010      	movs	r0, #16
 8001770:	f7ff fd8a 	bl	8001288 <mpu6050_init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	da03      	bge.n	8001782 <main+0x56>
	{
		uart_printf("fail1\n");
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <main+0x88>)
 800177c:	f000 f8ae 	bl	80018dc <uart_printf>
		while(1);
 8001780:	e7fe      	b.n	8001780 <main+0x54>
//    	{
//    		uart_printf("x_angle: %d\n",(int32_t)(gyroSum/100000));
//    		k=0;
//    	}

    	if(accel_measurement_read(accelData)<0)
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <main+0x8c>)
 8001784:	f7ff fdc8 	bl	8001318 <accel_measurement_read>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	da02      	bge.n	8001794 <main+0x68>
    		uart_printf("fail2...\n");
 800178e:	480b      	ldr	r0, [pc, #44]	; (80017bc <main+0x90>)
 8001790:	f000 f8a4 	bl	80018dc <uart_printf>
    	uart_printf("accel data %d\n", accelData[2]);
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <main+0x8c>)
 8001796:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800179a:	4619      	mov	r1, r3
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <main+0x94>)
 800179e:	f000 f89d 	bl	80018dc <uart_printf>
    	delay_ms(250);
 80017a2:	20fa      	movs	r0, #250	; 0xfa
 80017a4:	f000 fb0a 	bl	8001dbc <delay_ms>
    	if(accel_measurement_read(accelData)<0)
 80017a8:	e7eb      	b.n	8001782 <main+0x56>
 80017aa:	bf00      	nop
 80017ac:	00061a80 	.word	0x00061a80
 80017b0:	08001ec4 	.word	0x08001ec4
 80017b4:	08001ed0 	.word	0x08001ed0
 80017b8:	20000050 	.word	0x20000050
 80017bc:	08001ed8 	.word	0x08001ed8
 80017c0:	08001ee4 	.word	0x08001ee4

080017c4 <uart_putc>:
#include "stdarg.h"
#include "stm32f10x_usart.h"
#include "small_printf.h"

void uart_putc(char dataByte)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	USART_SendData(PRINTF_USART, dataByte);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4619      	mov	r1, r3
 80017d4:	4807      	ldr	r0, [pc, #28]	; (80017f4 <uart_putc+0x30>)
 80017d6:	f7ff fd2a 	bl	800122e <USART_SendData>
	while(USART_GetFlagStatus(PRINTF_USART, USART_FLAG_TC) == 0);
 80017da:	bf00      	nop
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <uart_putc+0x30>)
 80017e0:	f7ff fd36 	bl	8001250 <USART_GetFlagStatus>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f8      	beq.n	80017dc <uart_putc+0x18>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40013800 	.word	0x40013800

080017f8 <uart_puts>:

void uart_puts(char *dataString)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	uint8_t i;

	while(dataString[i] != '\0')
 8001800:	e016      	b.n	8001830 <uart_puts+0x38>
	{
		USART_SendData(PRINTF_USART, dataString[i]);
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4619      	mov	r1, r3
 800180e:	480e      	ldr	r0, [pc, #56]	; (8001848 <uart_puts+0x50>)
 8001810:	f7ff fd0d 	bl	800122e <USART_SendData>
		//wait for transmission to complete
		while(USART_GetFlagStatus(PRINTF_USART, USART_FLAG_TC) == 0);
 8001814:	bf00      	nop
 8001816:	2140      	movs	r1, #64	; 0x40
 8001818:	480b      	ldr	r0, [pc, #44]	; (8001848 <uart_puts+0x50>)
 800181a:	f7ff fd19 	bl	8001250 <USART_GetFlagStatus>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f8      	beq.n	8001816 <uart_puts+0x1e>
		i++;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	3301      	adds	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
		if(i>=100)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b63      	cmp	r3, #99	; 0x63
 800182e:	d806      	bhi.n	800183e <uart_puts+0x46>
	while(dataString[i] != '\0')
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e2      	bne.n	8001802 <uart_puts+0xa>
			break;
	}
}
 800183c:	e000      	b.n	8001840 <uart_puts+0x48>
			break;
 800183e:	bf00      	nop
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013800 	.word	0x40013800

0800184c <xtoa>:
			10,     // +8
			 1,     // +9
};

void xtoa(unsigned long x, const unsigned long *dp)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
	char c;
	unsigned long d;
	if(x) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d025      	beq.n	80018a8 <xtoa+0x5c>
		while(x < *dp) ++dp;
 800185c:	e002      	b.n	8001864 <xtoa+0x18>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	3304      	adds	r3, #4
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	d8f7      	bhi.n	800185e <xtoa+0x12>
		do {
			d = *dp++;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	1d1a      	adds	r2, r3, #4
 8001872:	603a      	str	r2, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60bb      	str	r3, [r7, #8]
			c = '0';
 8001878:	2330      	movs	r3, #48	; 0x30
 800187a:	73fb      	strb	r3, [r7, #15]
			while(x >= d) ++c, x -= d;
 800187c:	e006      	b.n	800188c <xtoa+0x40>
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3301      	adds	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d2f4      	bcs.n	800187e <xtoa+0x32>
			uart_putc(c);
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff94 	bl	80017c4 <uart_putc>
		} while(!(d & 1));
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0e3      	beq.n	800186e <xtoa+0x22>
	} else
		uart_putc('0');
}
 80018a6:	e002      	b.n	80018ae <xtoa+0x62>
		uart_putc('0');
 80018a8:	2030      	movs	r0, #48	; 0x30
 80018aa:	f7ff ff8b 	bl	80017c4 <uart_putc>
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <puth>:

void puth(unsigned n)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
	uart_putc(hex[n & 15]);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <puth+0x20>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff7a 	bl	80017c4 <uart_putc>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	08001f1c 	.word	0x08001f1c

080018dc <uart_printf>:

void uart_printf(char *format, ...)
{
 80018dc:	b40f      	push	{r0, r1, r2, r3}
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
	char c;
	int i;
	long n;

	va_list a;
	va_start(a, format);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	603b      	str	r3, [r7, #0]
	while(c = (*(format++)))
 80018ea:	e070      	b.n	80019ce <uart_printf+0xf2>
	{
		if(c == '%') {
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b25      	cmp	r3, #37	; 0x25
 80018f0:	d169      	bne.n	80019c6 <uart_printf+0xea>
			switch(c = *format++) {
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	61ba      	str	r2, [r7, #24]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b69      	cmp	r3, #105	; 0x69
 8001900:	d018      	beq.n	8001934 <uart_printf+0x58>
 8001902:	2b69      	cmp	r3, #105	; 0x69
 8001904:	dc06      	bgt.n	8001914 <uart_printf+0x38>
 8001906:	2b63      	cmp	r3, #99	; 0x63
 8001908:	d013      	beq.n	8001932 <uart_printf+0x56>
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d02a      	beq.n	8001964 <uart_printf+0x88>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d066      	beq.n	80019e0 <uart_printf+0x104>
					puth(i >> 8);
					puth(i >> 4);
					puth(i);
					break;
				case 0: return;
				default: goto bad_fmt;
 8001912:	e058      	b.n	80019c6 <uart_printf+0xea>
			switch(c = *format++) {
 8001914:	2b75      	cmp	r3, #117	; 0x75
 8001916:	d00d      	beq.n	8001934 <uart_printf+0x58>
 8001918:	2b78      	cmp	r3, #120	; 0x78
 800191a:	d03a      	beq.n	8001992 <uart_printf+0xb6>
 800191c:	2b73      	cmp	r3, #115	; 0x73
 800191e:	d000      	beq.n	8001922 <uart_printf+0x46>
				default: goto bad_fmt;
 8001920:	e051      	b.n	80019c6 <uart_printf+0xea>
					uart_puts(va_arg(a, char*));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	1d1a      	adds	r2, r3, #4
 8001926:	603a      	str	r2, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff64 	bl	80017f8 <uart_puts>
					break;
 8001930:	e04d      	b.n	80019ce <uart_printf+0xf2>
 8001932:	deff      	udf	#255	; 0xff
					i = va_arg(a, int);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	1d1a      	adds	r2, r3, #4
 8001938:	603a      	str	r2, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60bb      	str	r3, [r7, #8]
					if(c == 'i' && i < 0) i = -i, uart_putc('-');
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b69      	cmp	r3, #105	; 0x69
 8001942:	d108      	bne.n	8001956 <uart_printf+0x7a>
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	da05      	bge.n	8001956 <uart_printf+0x7a>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	425b      	negs	r3, r3
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	202d      	movs	r0, #45	; 0x2d
 8001952:	f7ff ff37 	bl	80017c4 <uart_putc>
					xtoa((unsigned)i, dv + 5);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	4a25      	ldr	r2, [pc, #148]	; (80019f0 <uart_printf+0x114>)
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff75 	bl	800184c <xtoa>
					break;
 8001962:	e034      	b.n	80019ce <uart_printf+0xf2>
					n = va_arg(a, long);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	1d1a      	adds	r2, r3, #4
 8001968:	603a      	str	r2, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	607b      	str	r3, [r7, #4]
					if(c == 'd' &&  n < 0) n = -n, uart_putc('-');
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b64      	cmp	r3, #100	; 0x64
 8001972:	d108      	bne.n	8001986 <uart_printf+0xaa>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	da05      	bge.n	8001986 <uart_printf+0xaa>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	425b      	negs	r3, r3
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	202d      	movs	r0, #45	; 0x2d
 8001982:	f7ff ff1f 	bl	80017c4 <uart_putc>
					xtoa((unsigned long)n, dv);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	491a      	ldr	r1, [pc, #104]	; (80019f4 <uart_printf+0x118>)
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff5e 	bl	800184c <xtoa>
					break;
 8001990:	e01d      	b.n	80019ce <uart_printf+0xf2>
					i = va_arg(a, int);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	1d1a      	adds	r2, r3, #4
 8001996:	603a      	str	r2, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60bb      	str	r3, [r7, #8]
					puth(i >> 12);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	131b      	asrs	r3, r3, #12
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff89 	bl	80018b8 <puth>
					puth(i >> 8);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	121b      	asrs	r3, r3, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff84 	bl	80018b8 <puth>
					puth(i >> 4);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	111b      	asrs	r3, r3, #4
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff7f 	bl	80018b8 <puth>
					puth(i);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff7b 	bl	80018b8 <puth>
					break;
 80019c2:	bf00      	nop
 80019c4:	e003      	b.n	80019ce <uart_printf+0xf2>
			}
		} else
bad_fmt:    uart_putc(c);
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fefb 	bl	80017c4 <uart_putc>
	while(c = (*(format++)))
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	61ba      	str	r2, [r7, #24]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d186      	bne.n	80018ec <uart_printf+0x10>
 80019de:	e000      	b.n	80019e2 <uart_printf+0x106>
				case 0: return;
 80019e0:	bf00      	nop
	}
	va_end(a);
}
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019ea:	b004      	add	sp, #16
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	08001f08 	.word	0x08001f08
 80019f4:	08001ef4 	.word	0x08001ef4

080019f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019fe:	e003      	b.n	8001a08 <LoopCopyDataInit>

08001a00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001a02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a06:	3104      	adds	r1, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001a0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a10:	d3f6      	bcc.n	8001a00 <CopyDataInit>
	ldr	r2, =_sbss
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001a14:	e002      	b.n	8001a1c <LoopFillZerobss>

08001a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a18:	f842 3b04 	str.w	r3, [r2], #4

08001a1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001a1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a20:	d3f9      	bcc.n	8001a16 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8001a22:	f000 f83d 	bl	8001aa0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 8001a26:	f000 fa19 	bl	8001e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2a:	f7ff fe7f 	bl	800172c <main>
	bx	lr
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a30:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 8001a34:	08001f34 	.word	0x08001f34
	ldr	r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a3c:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001a40:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001a44:	20000058 	.word	0x20000058

08001a48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_IRQHandler>

08001a4a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <SystemInit+0x64>)
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <SystemInit+0x64>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001ab0:	4914      	ldr	r1, [pc, #80]	; (8001b04 <SystemInit+0x64>)
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <SystemInit+0x64>)
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <SystemInit+0x68>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001abc:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <SystemInit+0x64>)
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <SystemInit+0x64>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <SystemInit+0x64>)
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <SystemInit+0x64>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SystemInit+0x64>)
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <SystemInit+0x64>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ae2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <SystemInit+0x64>)
 8001ae6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001aea:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SystemInit+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001af2:	f000 f80d 	bl	8001b10 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SystemInit+0x6c>)
 8001af8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001afc:	609a      	str	r2, [r3, #8]
#endif 
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	f8ff0000 	.word	0xf8ff0000
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8001b14:	f000 f802 	bl	8001b1c <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001b2a:	4a30      	ldr	r2, [pc, #192]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3301      	adds	r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d103      	bne.n	8001b54 <SetSysClockTo24+0x38>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b52:	d1f0      	bne.n	8001b36 <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001b54:	4b25      	ldr	r3, [pc, #148]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001b60:	2301      	movs	r3, #1
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	e001      	b.n	8001b6a <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d137      	bne.n	8001be0 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001b70:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001b78:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001b80:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001b88:	4a18      	ldr	r2, [pc, #96]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001b92:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8001b94:	4a15      	ldr	r2, [pc, #84]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <SetSysClockTo24+0xd0>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 8001b9e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <SetSysClockTo24+0xd0>)
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <SetSysClockTo24+0xd0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001bac:	bf00      	nop
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <SetSysClockTo24+0xd0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f9      	beq.n	8001bae <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <SetSysClockTo24+0xd0>)
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <SetSysClockTo24+0xd0>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f023 0303 	bic.w	r3, r3, #3
 8001bc4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <SetSysClockTo24+0xd0>)
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <SetSysClockTo24+0xd0>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001bd2:	bf00      	nop
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SetSysClockTo24+0xd0>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d1f9      	bne.n	8001bd4 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000

08001bf0 <TIM3_IRQHandler>:
volatile uint8_t timeOutTimerAlarmStatus=0;



void TIM3_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
    if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4811      	ldr	r0, [pc, #68]	; (8001c3c <TIM3_IRQHandler+0x4c>)
 8001bf8:	f7ff fa07 	bl	800100a <TIM_GetITStatus>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d015      	beq.n	8001c2e <TIM3_IRQHandler+0x3e>
    {
    	elapsed_ms++;
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <TIM3_IRQHandler+0x50>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <TIM3_IRQHandler+0x50>)
 8001c0a:	6013      	str	r3, [r2, #0]
    	if(timeOutTimerStatus == 1)
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <TIM3_IRQHandler+0x54>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d10b      	bne.n	8001c2e <TIM3_IRQHandler+0x3e>
    	{
    		if((elapsed_ms - timeOutTimerStartTime) > timeOutTimerAlarmTime)
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <TIM3_IRQHandler+0x50>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <TIM3_IRQHandler+0x58>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1ad2      	subs	r2, r2, r3
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <TIM3_IRQHandler+0x5c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d902      	bls.n	8001c2e <TIM3_IRQHandler+0x3e>
    			timeOutTimerAlarmStatus = 1;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <TIM3_IRQHandler+0x60>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
    	}
   }

    TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <TIM3_IRQHandler+0x4c>)
 8001c32:	f7ff fa13 	bl	800105c <TIM_ClearITPendingBit>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	20000030 	.word	0x20000030
 8001c44:	20000034 	.word	0x20000034
 8001c48:	2000003c 	.word	0x2000003c
 8001c4c:	20000038 	.word	0x20000038
 8001c50:	20000040 	.word	0x20000040

08001c54 <timer3_init>:

void timer3_init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f7fe fe67 	bl	8000930 <RCC_APB1PeriphClockCmd>

	//configure timer 3 interrupt
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8001c62:	231d      	movs	r3, #29
 8001c64:	733b      	strb	r3, [r7, #12]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	737b      	strb	r3, [r7, #13]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73bb      	strb	r3, [r7, #14]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&nvicStructure);
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe faca 	bl	8000210 <NVIC_Init>
	 * interrupt.
	 *
	 * TIM_Period is actually auto reload register(ARR).
	 */
	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 2400-1;
 8001c7c:	f640 135f 	movw	r3, #2399	; 0x95f
 8001c80:	803b      	strh	r3, [r7, #0]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001c82:	2300      	movs	r3, #0
 8001c84:	807b      	strh	r3, [r7, #2]
	timerInitStructure.TIM_Period = 10-1;
 8001c86:	2309      	movs	r3, #9
 8001c88:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_RepetitionCounter = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	723b      	strb	r3, [r7, #8]
	TIM_TimeBaseInit(TIM3, &timerInitStructure);
 8001c92:	463b      	mov	r3, r7
 8001c94:	4619      	mov	r1, r3
 8001c96:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <timer3_init+0x64>)
 8001c98:	f7fe fe68 	bl	800096c <TIM_TimeBaseInit>

	TIM_ITConfig(TIM3, TIM_IT_Update , ENABLE);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <timer3_init+0x64>)
 8001ca2:	f7ff f900 	bl	8000ea6 <TIM_ITConfig>
	TIM_Cmd(TIM3, ENABLE);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <timer3_init+0x64>)
 8001caa:	f7ff f8dd 	bl	8000e68 <TIM_Cmd>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40000400 	.word	0x40000400

08001cbc <motors_pwm_init>:

void motors_pwm_init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7fe fe33 	bl	8000930 <RCC_APB1PeriphClockCmd>
	/* GPIOA and GPIOB clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8001cca:	2101      	movs	r1, #1
 8001ccc:	2005      	movs	r0, #5
 8001cce:	f7fe fe11 	bl	80008f4 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001cd6:	2318      	movs	r3, #24
 8001cd8:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001cde:	463b      	mov	r3, r7
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4830      	ldr	r0, [pc, #192]	; (8001da4 <motors_pwm_init+0xe8>)
 8001ce4:	f7fe faf6 	bl	80002d4 <GPIO_Init>

	TIM_TimeBaseStructure.TIM_Period = MOTOR_TIM_ARR_REG_VAL;
 8001ce8:	23c7      	movs	r3, #199	; 0xc7
 8001cea:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = MOTOR_TIM_PRESCALER_VAL;
 8001cec:	f640 135f 	movw	r3, #2399	; 0x95f
 8001cf0:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d04:	f7fe fe32 	bl	800096c <TIM_TimeBaseInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001d08:	2360      	movs	r3, #96	; 0x60
 8001d0a:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001d14:	2300      	movs	r3, #0
 8001d16:	81bb      	strh	r3, [r7, #12]
	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d20:	f7fe fea0 	bl	8000a64 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001d24:	2108      	movs	r1, #8
 8001d26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d2a:	f7ff f8fe 	bl	8000f2a <TIM_OC1PreloadConfig>

	/* PWM1 Mode configuration: Channel2 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	817b      	strh	r3, [r7, #10]
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d3e:	f7fe ff1d 	bl	8000b7c <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001d42:	2108      	movs	r1, #8
 8001d44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d48:	f7ff f90a 	bl	8000f60 <TIM_OC2PreloadConfig>

	/* PWM1 Mode configuration: Channel3 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	817b      	strh	r3, [r7, #10]
	TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d5c:	f7fe ff96 	bl	8000c8c <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001d60:	2108      	movs	r1, #8
 8001d62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d66:	f7ff f918 	bl	8000f9a <TIM_OC3PreloadConfig>

	/* PWM1 Mode configuration: Channel4 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	817b      	strh	r3, [r7, #10]
	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d7a:	f7ff f80d 	bl	8000d98 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001d7e:	2108      	movs	r1, #8
 8001d80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d84:	f7ff f924 	bl	8000fd0 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 8001d88:	2101      	movs	r1, #1
 8001d8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d8e:	f7ff f8ad 	bl	8000eec <TIM_ARRPreloadConfig>
	/* TIM3 enable counter */
	TIM_Cmd(TIM2, ENABLE);
 8001d92:	2101      	movs	r1, #1
 8001d94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d98:	f7ff f866 	bl	8000e68 <TIM_Cmd>
}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40010800 	.word	0x40010800

08001da8 <millis>:
	if(channelID == PWM_CHANNEL4)
		TIM_SetCompare4(TIM2, pwm_value);
}

uint32_t millis(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
	return elapsed_ms;
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <millis+0x10>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	20000030 	.word	0x20000030

08001dbc <delay_ms>:

void delay_ms(uint32_t delay_ms)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	uint32_t currentTime_ms;
	uint32_t startTime_ms;

	startTime_ms = millis();
 8001dc4:	f7ff fff0 	bl	8001da8 <millis>
 8001dc8:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		currentTime_ms = millis();
 8001dca:	f7ff ffed 	bl	8001da8 <millis>
 8001dce:	60b8      	str	r0, [r7, #8]
		if((currentTime_ms-startTime_ms)>delay_ms)
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad2      	subs	r2, r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d800      	bhi.n	8001dde <delay_ms+0x22>
		currentTime_ms = millis();
 8001ddc:	e7f5      	b.n	8001dca <delay_ms+0xe>
			return ;
 8001dde:	bf00      	nop
	}
}
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <timeout_alarm_set>:

void timeout_alarm_set(uint32_t alarmTime_ms)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	timeOutTimerStartTime = millis();
 8001df0:	f7ff ffda 	bl	8001da8 <millis>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <timeout_alarm_set+0x2c>)
 8001df8:	601a      	str	r2, [r3, #0]
	timeOutTimerStatus = 1;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <timeout_alarm_set+0x30>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
	timeOutTimerAlarmTime = alarmTime_ms;
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <timeout_alarm_set+0x34>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
	timeOutTimerAlarmStatus = 0;
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <timeout_alarm_set+0x38>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000003c 	.word	0x2000003c
 8001e18:	20000034 	.word	0x20000034
 8001e1c:	20000038 	.word	0x20000038
 8001e20:	20000040 	.word	0x20000040

08001e24 <timeout_alarm_status_check>:

uint8_t timeout_alarm_status_check(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
	return timeOutTimerAlarmStatus;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <timeout_alarm_status_check+0x14>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000040 	.word	0x20000040

08001e3c <timeout_alarm_off>:

void timeout_alarm_off(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
	timeOutTimerStatus = 0;
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <timeout_alarm_off+0x18>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
	timeOutTimerAlarmStatus = 0;
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <timeout_alarm_off+0x1c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20000034 	.word	0x20000034
 8001e58:	20000040 	.word	0x20000040

08001e5c <__libc_init_array>:
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	2500      	movs	r5, #0
 8001e60:	4e0c      	ldr	r6, [pc, #48]	; (8001e94 <__libc_init_array+0x38>)
 8001e62:	4c0d      	ldr	r4, [pc, #52]	; (8001e98 <__libc_init_array+0x3c>)
 8001e64:	1ba4      	subs	r4, r4, r6
 8001e66:	10a4      	asrs	r4, r4, #2
 8001e68:	42a5      	cmp	r5, r4
 8001e6a:	d109      	bne.n	8001e80 <__libc_init_array+0x24>
 8001e6c:	f000 f81a 	bl	8001ea4 <_init>
 8001e70:	2500      	movs	r5, #0
 8001e72:	4e0a      	ldr	r6, [pc, #40]	; (8001e9c <__libc_init_array+0x40>)
 8001e74:	4c0a      	ldr	r4, [pc, #40]	; (8001ea0 <__libc_init_array+0x44>)
 8001e76:	1ba4      	subs	r4, r4, r6
 8001e78:	10a4      	asrs	r4, r4, #2
 8001e7a:	42a5      	cmp	r5, r4
 8001e7c:	d105      	bne.n	8001e8a <__libc_init_array+0x2e>
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}
 8001e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e84:	4798      	blx	r3
 8001e86:	3501      	adds	r5, #1
 8001e88:	e7ee      	b.n	8001e68 <__libc_init_array+0xc>
 8001e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e8e:	4798      	blx	r3
 8001e90:	3501      	adds	r5, #1
 8001e92:	e7f2      	b.n	8001e7a <__libc_init_array+0x1e>
 8001e94:	08001f2c 	.word	0x08001f2c
 8001e98:	08001f2c 	.word	0x08001f2c
 8001e9c:	08001f2c 	.word	0x08001f2c
 8001ea0:	08001f30 	.word	0x08001f30

08001ea4 <_init>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	bf00      	nop
 8001ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eaa:	bc08      	pop	{r3}
 8001eac:	469e      	mov	lr, r3
 8001eae:	4770      	bx	lr

08001eb0 <_fini>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr
