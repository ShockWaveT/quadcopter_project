
quadcopter_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006b20  08006b20  00016b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006cc8  08006cc8  00016cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  08006cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d8c  2000001c  08006cf4  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20001da8  08006cf4  00021da8  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f00a  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026a1  00000000  00000000  0002f04f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000eb8  00000000  00000000  000316f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d50  00000000  00000000  000325a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006ba3  00000000  00000000  000332f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000049a1  00000000  00000000  00039e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003e83c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000407c  00000000  00000000  0003e8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b08 	.word	0x08006b08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08006b08 	.word	0x08006b08

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f092 0f00 	teq	r2, #0
 80004fa:	bf14      	ite	ne
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e720      	b.n	8000354 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aedc 	beq.w	8000302 <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6c1      	b.n	8000302 <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_frsub>:
 8000b44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b48:	e002      	b.n	8000b50 <__addsf3>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fsub>:
 8000b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b50 <__addsf3>:
 8000b50:	0042      	lsls	r2, r0, #1
 8000b52:	bf1f      	itttt	ne
 8000b54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b58:	ea92 0f03 	teqne	r2, r3
 8000b5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b64:	d06a      	beq.n	8000c3c <__addsf3+0xec>
 8000b66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6e:	bfc1      	itttt	gt
 8000b70:	18d2      	addgt	r2, r2, r3
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	4048      	eorgt	r0, r1
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	bfb8      	it	lt
 8000b7a:	425b      	neglt	r3, r3
 8000b7c:	2b19      	cmp	r3, #25
 8000b7e:	bf88      	it	hi
 8000b80:	4770      	bxhi	lr
 8000b82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9e:	bf18      	it	ne
 8000ba0:	4249      	negne	r1, r1
 8000ba2:	ea92 0f03 	teq	r2, r3
 8000ba6:	d03f      	beq.n	8000c28 <__addsf3+0xd8>
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb0:	eb10 000c 	adds.w	r0, r0, ip
 8000bb4:	f1c3 0320 	rsb	r3, r3, #32
 8000bb8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__addsf3+0x78>
 8000bc2:	4249      	negs	r1, r1
 8000bc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bcc:	d313      	bcc.n	8000bf6 <__addsf3+0xa6>
 8000bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd2:	d306      	bcc.n	8000be2 <__addsf3+0x92>
 8000bd4:	0840      	lsrs	r0, r0, #1
 8000bd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bda:	f102 0201 	add.w	r2, r2, #1
 8000bde:	2afe      	cmp	r2, #254	; 0xfe
 8000be0:	d251      	bcs.n	8000c86 <__addsf3+0x136>
 8000be2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bea:	bf08      	it	eq
 8000bec:	f020 0001 	biceq.w	r0, r0, #1
 8000bf0:	ea40 0003 	orr.w	r0, r0, r3
 8000bf4:	4770      	bx	lr
 8000bf6:	0049      	lsls	r1, r1, #1
 8000bf8:	eb40 0000 	adc.w	r0, r0, r0
 8000bfc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c00:	f1a2 0201 	sub.w	r2, r2, #1
 8000c04:	d1ed      	bne.n	8000be2 <__addsf3+0x92>
 8000c06:	fab0 fc80 	clz	ip, r0
 8000c0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c16:	bfaa      	itet	ge
 8000c18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c1c:	4252      	neglt	r2, r2
 8000c1e:	4318      	orrge	r0, r3
 8000c20:	bfbc      	itt	lt
 8000c22:	40d0      	lsrlt	r0, r2
 8000c24:	4318      	orrlt	r0, r3
 8000c26:	4770      	bx	lr
 8000c28:	f092 0f00 	teq	r2, #0
 8000c2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c30:	bf06      	itte	eq
 8000c32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c36:	3201      	addeq	r2, #1
 8000c38:	3b01      	subne	r3, #1
 8000c3a:	e7b5      	b.n	8000ba8 <__addsf3+0x58>
 8000c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c44:	bf18      	it	ne
 8000c46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4a:	d021      	beq.n	8000c90 <__addsf3+0x140>
 8000c4c:	ea92 0f03 	teq	r2, r3
 8000c50:	d004      	beq.n	8000c5c <__addsf3+0x10c>
 8000c52:	f092 0f00 	teq	r2, #0
 8000c56:	bf08      	it	eq
 8000c58:	4608      	moveq	r0, r1
 8000c5a:	4770      	bx	lr
 8000c5c:	ea90 0f01 	teq	r0, r1
 8000c60:	bf1c      	itt	ne
 8000c62:	2000      	movne	r0, #0
 8000c64:	4770      	bxne	lr
 8000c66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6a:	d104      	bne.n	8000c76 <__addsf3+0x126>
 8000c6c:	0040      	lsls	r0, r0, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7a:	bf3c      	itt	cc
 8000c7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c80:	4770      	bxcc	lr
 8000c82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c94:	bf16      	itet	ne
 8000c96:	4608      	movne	r0, r1
 8000c98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c9c:	4601      	movne	r1, r0
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	bf06      	itte	eq
 8000ca2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca6:	ea90 0f01 	teqeq	r0, r1
 8000caa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_ui2f>:
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e004      	b.n	8000cc0 <__aeabi_i2f+0x8>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_i2f>:
 8000cb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	bf48      	it	mi
 8000cbe:	4240      	negmi	r0, r0
 8000cc0:	ea5f 0c00 	movs.w	ip, r0
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ccc:	4601      	mov	r1, r0
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	e01c      	b.n	8000d0e <__aeabi_l2f+0x2a>

08000cd4 <__aeabi_ul2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e00a      	b.n	8000cf8 <__aeabi_l2f+0x14>
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_l2f>:
 8000ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf0:	d502      	bpl.n	8000cf8 <__aeabi_l2f+0x14>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	ea5f 0c01 	movs.w	ip, r1
 8000cfc:	bf02      	ittt	eq
 8000cfe:	4684      	moveq	ip, r0
 8000d00:	4601      	moveq	r1, r0
 8000d02:	2000      	moveq	r0, #0
 8000d04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d08:	bf08      	it	eq
 8000d0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d12:	fabc f28c 	clz	r2, ip
 8000d16:	3a08      	subs	r2, #8
 8000d18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d1c:	db10      	blt.n	8000d40 <__aeabi_l2f+0x5c>
 8000d1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d22:	4463      	add	r3, ip
 8000d24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d30:	fa20 f202 	lsr.w	r2, r0, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f102 0220 	add.w	r2, r2, #32
 8000d44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d50:	fa21 f202 	lsr.w	r2, r1, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fmul>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d06f      	beq.n	8000e58 <__aeabi_fmul+0xf8>
 8000d78:	441a      	add	r2, r3
 8000d7a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d7e:	0240      	lsls	r0, r0, #9
 8000d80:	bf18      	it	ne
 8000d82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d86:	d01e      	beq.n	8000dc6 <__aeabi_fmul+0x66>
 8000d88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d94:	fba0 3101 	umull	r3, r1, r0, r1
 8000d98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d9c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000da0:	bf3e      	ittt	cc
 8000da2:	0049      	lslcc	r1, r1, #1
 8000da4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da8:	005b      	lslcc	r3, r3, #1
 8000daa:	ea40 0001 	orr.w	r0, r0, r1
 8000dae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000db2:	2afd      	cmp	r2, #253	; 0xfd
 8000db4:	d81d      	bhi.n	8000df2 <__aeabi_fmul+0x92>
 8000db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dbe:	bf08      	it	eq
 8000dc0:	f020 0001 	biceq.w	r0, r0, #1
 8000dc4:	4770      	bx	lr
 8000dc6:	f090 0f00 	teq	r0, #0
 8000dca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dce:	bf08      	it	eq
 8000dd0:	0249      	lsleq	r1, r1, #9
 8000dd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dda:	3a7f      	subs	r2, #127	; 0x7f
 8000ddc:	bfc2      	ittt	gt
 8000dde:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000de2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de6:	4770      	bxgt	lr
 8000de8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	3a01      	subs	r2, #1
 8000df2:	dc5d      	bgt.n	8000eb0 <__aeabi_fmul+0x150>
 8000df4:	f112 0f19 	cmn.w	r2, #25
 8000df8:	bfdc      	itt	le
 8000dfa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dfe:	4770      	bxle	lr
 8000e00:	f1c2 0200 	rsb	r2, r2, #0
 8000e04:	0041      	lsls	r1, r0, #1
 8000e06:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0a:	f1c2 0220 	rsb	r2, r2, #32
 8000e0e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e12:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e16:	f140 0000 	adc.w	r0, r0, #0
 8000e1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e1e:	bf08      	it	eq
 8000e20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e24:	4770      	bx	lr
 8000e26:	f092 0f00 	teq	r2, #0
 8000e2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0040      	lsleq	r0, r0, #1
 8000e32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e36:	3a01      	subeq	r2, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xce>
 8000e3a:	ea40 000c 	orr.w	r0, r0, ip
 8000e3e:	f093 0f00 	teq	r3, #0
 8000e42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	bf02      	ittt	eq
 8000e48:	0049      	lsleq	r1, r1, #1
 8000e4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e4e:	3b01      	subeq	r3, #1
 8000e50:	d0f9      	beq.n	8000e46 <__aeabi_fmul+0xe6>
 8000e52:	ea41 010c 	orr.w	r1, r1, ip
 8000e56:	e78f      	b.n	8000d78 <__aeabi_fmul+0x18>
 8000e58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e5c:	ea92 0f0c 	teq	r2, ip
 8000e60:	bf18      	it	ne
 8000e62:	ea93 0f0c 	teqne	r3, ip
 8000e66:	d00a      	beq.n	8000e7e <__aeabi_fmul+0x11e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1d8      	bne.n	8000e26 <__aeabi_fmul+0xc6>
 8000e74:	ea80 0001 	eor.w	r0, r0, r1
 8000e78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e7c:	4770      	bx	lr
 8000e7e:	f090 0f00 	teq	r0, #0
 8000e82:	bf17      	itett	ne
 8000e84:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e88:	4608      	moveq	r0, r1
 8000e8a:	f091 0f00 	teqne	r1, #0
 8000e8e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e92:	d014      	beq.n	8000ebe <__aeabi_fmul+0x15e>
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	d101      	bne.n	8000e9e <__aeabi_fmul+0x13e>
 8000e9a:	0242      	lsls	r2, r0, #9
 8000e9c:	d10f      	bne.n	8000ebe <__aeabi_fmul+0x15e>
 8000e9e:	ea93 0f0c 	teq	r3, ip
 8000ea2:	d103      	bne.n	8000eac <__aeabi_fmul+0x14c>
 8000ea4:	024b      	lsls	r3, r1, #9
 8000ea6:	bf18      	it	ne
 8000ea8:	4608      	movne	r0, r1
 8000eaa:	d108      	bne.n	8000ebe <__aeabi_fmul+0x15e>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebc:	4770      	bx	lr
 8000ebe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ec6:	4770      	bx	lr

08000ec8 <__aeabi_fdiv>:
 8000ec8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ecc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed0:	bf1e      	ittt	ne
 8000ed2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ed6:	ea92 0f0c 	teqne	r2, ip
 8000eda:	ea93 0f0c 	teqne	r3, ip
 8000ede:	d069      	beq.n	8000fb4 <__aeabi_fdiv+0xec>
 8000ee0:	eba2 0203 	sub.w	r2, r2, r3
 8000ee4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee8:	0249      	lsls	r1, r1, #9
 8000eea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eee:	d037      	beq.n	8000f60 <__aeabi_fdiv+0x98>
 8000ef0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ef4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000efc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f00:	428b      	cmp	r3, r1
 8000f02:	bf38      	it	cc
 8000f04:	005b      	lslcc	r3, r3, #1
 8000f06:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f0a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	bf24      	itt	cs
 8000f12:	1a5b      	subcs	r3, r3, r1
 8000f14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2a:	bf24      	itt	cs
 8000f2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	bf18      	it	ne
 8000f46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4a:	d1e0      	bne.n	8000f0e <__aeabi_fdiv+0x46>
 8000f4c:	2afd      	cmp	r2, #253	; 0xfd
 8000f4e:	f63f af50 	bhi.w	8000df2 <__aeabi_fmul+0x92>
 8000f52:	428b      	cmp	r3, r1
 8000f54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f58:	bf08      	it	eq
 8000f5a:	f020 0001 	biceq.w	r0, r0, #1
 8000f5e:	4770      	bx	lr
 8000f60:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f68:	327f      	adds	r2, #127	; 0x7f
 8000f6a:	bfc2      	ittt	gt
 8000f6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f74:	4770      	bxgt	lr
 8000f76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	3a01      	subs	r2, #1
 8000f80:	e737      	b.n	8000df2 <__aeabi_fmul+0x92>
 8000f82:	f092 0f00 	teq	r2, #0
 8000f86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0040      	lsleq	r0, r0, #1
 8000f8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f92:	3a01      	subeq	r2, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xc2>
 8000f96:	ea40 000c 	orr.w	r0, r0, ip
 8000f9a:	f093 0f00 	teq	r3, #0
 8000f9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	bf02      	ittt	eq
 8000fa4:	0049      	lsleq	r1, r1, #1
 8000fa6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000faa:	3b01      	subeq	r3, #1
 8000fac:	d0f9      	beq.n	8000fa2 <__aeabi_fdiv+0xda>
 8000fae:	ea41 010c 	orr.w	r1, r1, ip
 8000fb2:	e795      	b.n	8000ee0 <__aeabi_fdiv+0x18>
 8000fb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb8:	ea92 0f0c 	teq	r2, ip
 8000fbc:	d108      	bne.n	8000fd0 <__aeabi_fdiv+0x108>
 8000fbe:	0242      	lsls	r2, r0, #9
 8000fc0:	f47f af7d 	bne.w	8000ebe <__aeabi_fmul+0x15e>
 8000fc4:	ea93 0f0c 	teq	r3, ip
 8000fc8:	f47f af70 	bne.w	8000eac <__aeabi_fmul+0x14c>
 8000fcc:	4608      	mov	r0, r1
 8000fce:	e776      	b.n	8000ebe <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	d104      	bne.n	8000fe0 <__aeabi_fdiv+0x118>
 8000fd6:	024b      	lsls	r3, r1, #9
 8000fd8:	f43f af4c 	beq.w	8000e74 <__aeabi_fmul+0x114>
 8000fdc:	4608      	mov	r0, r1
 8000fde:	e76e      	b.n	8000ebe <__aeabi_fmul+0x15e>
 8000fe0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fe4:	bf18      	it	ne
 8000fe6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fea:	d1ca      	bne.n	8000f82 <__aeabi_fdiv+0xba>
 8000fec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ff0:	f47f af5c 	bne.w	8000eac <__aeabi_fmul+0x14c>
 8000ff4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff8:	f47f af3c 	bne.w	8000e74 <__aeabi_fmul+0x114>
 8000ffc:	e75f      	b.n	8000ebe <__aeabi_fmul+0x15e>
 8000ffe:	bf00      	nop

08001000 <__aeabi_f2uiz>:
 8001000:	0042      	lsls	r2, r0, #1
 8001002:	d20e      	bcs.n	8001022 <__aeabi_f2uiz+0x22>
 8001004:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001008:	d30b      	bcc.n	8001022 <__aeabi_f2uiz+0x22>
 800100a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800100e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001012:	d409      	bmi.n	8001028 <__aeabi_f2uiz+0x28>
 8001014:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800101c:	fa23 f002 	lsr.w	r0, r3, r2
 8001020:	4770      	bx	lr
 8001022:	f04f 0000 	mov.w	r0, #0
 8001026:	4770      	bx	lr
 8001028:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800102c:	d101      	bne.n	8001032 <__aeabi_f2uiz+0x32>
 800102e:	0242      	lsls	r2, r0, #9
 8001030:	d102      	bne.n	8001038 <__aeabi_f2uiz+0x38>
 8001032:	f04f 30ff 	mov.w	r0, #4294967295
 8001036:	4770      	bx	lr
 8001038:	f04f 0000 	mov.w	r0, #0
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_uldivmod>:
 8001040:	b953      	cbnz	r3, 8001058 <__aeabi_uldivmod+0x18>
 8001042:	b94a      	cbnz	r2, 8001058 <__aeabi_uldivmod+0x18>
 8001044:	2900      	cmp	r1, #0
 8001046:	bf08      	it	eq
 8001048:	2800      	cmpeq	r0, #0
 800104a:	bf1c      	itt	ne
 800104c:	f04f 31ff 	movne.w	r1, #4294967295
 8001050:	f04f 30ff 	movne.w	r0, #4294967295
 8001054:	f000 b97a 	b.w	800134c <__aeabi_idiv0>
 8001058:	f1ad 0c08 	sub.w	ip, sp, #8
 800105c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001060:	f000 f806 	bl	8001070 <__udivmoddi4>
 8001064:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800106c:	b004      	add	sp, #16
 800106e:	4770      	bx	lr

08001070 <__udivmoddi4>:
 8001070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001074:	468c      	mov	ip, r1
 8001076:	460e      	mov	r6, r1
 8001078:	4604      	mov	r4, r0
 800107a:	9d08      	ldr	r5, [sp, #32]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d150      	bne.n	8001122 <__udivmoddi4+0xb2>
 8001080:	428a      	cmp	r2, r1
 8001082:	4617      	mov	r7, r2
 8001084:	d96c      	bls.n	8001160 <__udivmoddi4+0xf0>
 8001086:	fab2 fe82 	clz	lr, r2
 800108a:	f1be 0f00 	cmp.w	lr, #0
 800108e:	d00b      	beq.n	80010a8 <__udivmoddi4+0x38>
 8001090:	f1ce 0c20 	rsb	ip, lr, #32
 8001094:	fa01 f60e 	lsl.w	r6, r1, lr
 8001098:	fa20 fc0c 	lsr.w	ip, r0, ip
 800109c:	fa02 f70e 	lsl.w	r7, r2, lr
 80010a0:	ea4c 0c06 	orr.w	ip, ip, r6
 80010a4:	fa00 f40e 	lsl.w	r4, r0, lr
 80010a8:	0c3a      	lsrs	r2, r7, #16
 80010aa:	fbbc f9f2 	udiv	r9, ip, r2
 80010ae:	b2bb      	uxth	r3, r7
 80010b0:	fb02 cc19 	mls	ip, r2, r9, ip
 80010b4:	fb09 fa03 	mul.w	sl, r9, r3
 80010b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80010bc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80010c0:	45b2      	cmp	sl, r6
 80010c2:	d90a      	bls.n	80010da <__udivmoddi4+0x6a>
 80010c4:	19f6      	adds	r6, r6, r7
 80010c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80010ca:	f080 8125 	bcs.w	8001318 <__udivmoddi4+0x2a8>
 80010ce:	45b2      	cmp	sl, r6
 80010d0:	f240 8122 	bls.w	8001318 <__udivmoddi4+0x2a8>
 80010d4:	f1a9 0902 	sub.w	r9, r9, #2
 80010d8:	443e      	add	r6, r7
 80010da:	eba6 060a 	sub.w	r6, r6, sl
 80010de:	fbb6 f0f2 	udiv	r0, r6, r2
 80010e2:	fb02 6610 	mls	r6, r2, r0, r6
 80010e6:	fb00 f303 	mul.w	r3, r0, r3
 80010ea:	b2a4      	uxth	r4, r4
 80010ec:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80010f0:	42a3      	cmp	r3, r4
 80010f2:	d909      	bls.n	8001108 <__udivmoddi4+0x98>
 80010f4:	19e4      	adds	r4, r4, r7
 80010f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80010fa:	f080 810b 	bcs.w	8001314 <__udivmoddi4+0x2a4>
 80010fe:	42a3      	cmp	r3, r4
 8001100:	f240 8108 	bls.w	8001314 <__udivmoddi4+0x2a4>
 8001104:	3802      	subs	r0, #2
 8001106:	443c      	add	r4, r7
 8001108:	2100      	movs	r1, #0
 800110a:	1ae4      	subs	r4, r4, r3
 800110c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001110:	2d00      	cmp	r5, #0
 8001112:	d062      	beq.n	80011da <__udivmoddi4+0x16a>
 8001114:	2300      	movs	r3, #0
 8001116:	fa24 f40e 	lsr.w	r4, r4, lr
 800111a:	602c      	str	r4, [r5, #0]
 800111c:	606b      	str	r3, [r5, #4]
 800111e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001122:	428b      	cmp	r3, r1
 8001124:	d907      	bls.n	8001136 <__udivmoddi4+0xc6>
 8001126:	2d00      	cmp	r5, #0
 8001128:	d055      	beq.n	80011d6 <__udivmoddi4+0x166>
 800112a:	2100      	movs	r1, #0
 800112c:	e885 0041 	stmia.w	r5, {r0, r6}
 8001130:	4608      	mov	r0, r1
 8001132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001136:	fab3 f183 	clz	r1, r3
 800113a:	2900      	cmp	r1, #0
 800113c:	f040 808f 	bne.w	800125e <__udivmoddi4+0x1ee>
 8001140:	42b3      	cmp	r3, r6
 8001142:	d302      	bcc.n	800114a <__udivmoddi4+0xda>
 8001144:	4282      	cmp	r2, r0
 8001146:	f200 80fc 	bhi.w	8001342 <__udivmoddi4+0x2d2>
 800114a:	1a84      	subs	r4, r0, r2
 800114c:	eb66 0603 	sbc.w	r6, r6, r3
 8001150:	2001      	movs	r0, #1
 8001152:	46b4      	mov	ip, r6
 8001154:	2d00      	cmp	r5, #0
 8001156:	d040      	beq.n	80011da <__udivmoddi4+0x16a>
 8001158:	e885 1010 	stmia.w	r5, {r4, ip}
 800115c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001160:	b912      	cbnz	r2, 8001168 <__udivmoddi4+0xf8>
 8001162:	2701      	movs	r7, #1
 8001164:	fbb7 f7f2 	udiv	r7, r7, r2
 8001168:	fab7 fe87 	clz	lr, r7
 800116c:	f1be 0f00 	cmp.w	lr, #0
 8001170:	d135      	bne.n	80011de <__udivmoddi4+0x16e>
 8001172:	2101      	movs	r1, #1
 8001174:	1bf6      	subs	r6, r6, r7
 8001176:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800117a:	fa1f f887 	uxth.w	r8, r7
 800117e:	fbb6 f2fc 	udiv	r2, r6, ip
 8001182:	fb0c 6612 	mls	r6, ip, r2, r6
 8001186:	fb08 f002 	mul.w	r0, r8, r2
 800118a:	0c23      	lsrs	r3, r4, #16
 800118c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001190:	42b0      	cmp	r0, r6
 8001192:	d907      	bls.n	80011a4 <__udivmoddi4+0x134>
 8001194:	19f6      	adds	r6, r6, r7
 8001196:	f102 33ff 	add.w	r3, r2, #4294967295
 800119a:	d202      	bcs.n	80011a2 <__udivmoddi4+0x132>
 800119c:	42b0      	cmp	r0, r6
 800119e:	f200 80d2 	bhi.w	8001346 <__udivmoddi4+0x2d6>
 80011a2:	461a      	mov	r2, r3
 80011a4:	1a36      	subs	r6, r6, r0
 80011a6:	fbb6 f0fc 	udiv	r0, r6, ip
 80011aa:	fb0c 6610 	mls	r6, ip, r0, r6
 80011ae:	fb08 f800 	mul.w	r8, r8, r0
 80011b2:	b2a3      	uxth	r3, r4
 80011b4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80011b8:	45a0      	cmp	r8, r4
 80011ba:	d907      	bls.n	80011cc <__udivmoddi4+0x15c>
 80011bc:	19e4      	adds	r4, r4, r7
 80011be:	f100 33ff 	add.w	r3, r0, #4294967295
 80011c2:	d202      	bcs.n	80011ca <__udivmoddi4+0x15a>
 80011c4:	45a0      	cmp	r8, r4
 80011c6:	f200 80b9 	bhi.w	800133c <__udivmoddi4+0x2cc>
 80011ca:	4618      	mov	r0, r3
 80011cc:	eba4 0408 	sub.w	r4, r4, r8
 80011d0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80011d4:	e79c      	b.n	8001110 <__udivmoddi4+0xa0>
 80011d6:	4629      	mov	r1, r5
 80011d8:	4628      	mov	r0, r5
 80011da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011de:	fa07 f70e 	lsl.w	r7, r7, lr
 80011e2:	f1ce 0320 	rsb	r3, lr, #32
 80011e6:	fa26 f203 	lsr.w	r2, r6, r3
 80011ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80011ee:	fbb2 f1fc 	udiv	r1, r2, ip
 80011f2:	fa1f f887 	uxth.w	r8, r7
 80011f6:	fb0c 2211 	mls	r2, ip, r1, r2
 80011fa:	fa06 f60e 	lsl.w	r6, r6, lr
 80011fe:	fa20 f303 	lsr.w	r3, r0, r3
 8001202:	fb01 f908 	mul.w	r9, r1, r8
 8001206:	4333      	orrs	r3, r6
 8001208:	0c1e      	lsrs	r6, r3, #16
 800120a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800120e:	45b1      	cmp	r9, r6
 8001210:	fa00 f40e 	lsl.w	r4, r0, lr
 8001214:	d909      	bls.n	800122a <__udivmoddi4+0x1ba>
 8001216:	19f6      	adds	r6, r6, r7
 8001218:	f101 32ff 	add.w	r2, r1, #4294967295
 800121c:	f080 808c 	bcs.w	8001338 <__udivmoddi4+0x2c8>
 8001220:	45b1      	cmp	r9, r6
 8001222:	f240 8089 	bls.w	8001338 <__udivmoddi4+0x2c8>
 8001226:	3902      	subs	r1, #2
 8001228:	443e      	add	r6, r7
 800122a:	eba6 0609 	sub.w	r6, r6, r9
 800122e:	fbb6 f0fc 	udiv	r0, r6, ip
 8001232:	fb0c 6210 	mls	r2, ip, r0, r6
 8001236:	fb00 f908 	mul.w	r9, r0, r8
 800123a:	b29e      	uxth	r6, r3
 800123c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001240:	45b1      	cmp	r9, r6
 8001242:	d907      	bls.n	8001254 <__udivmoddi4+0x1e4>
 8001244:	19f6      	adds	r6, r6, r7
 8001246:	f100 33ff 	add.w	r3, r0, #4294967295
 800124a:	d271      	bcs.n	8001330 <__udivmoddi4+0x2c0>
 800124c:	45b1      	cmp	r9, r6
 800124e:	d96f      	bls.n	8001330 <__udivmoddi4+0x2c0>
 8001250:	3802      	subs	r0, #2
 8001252:	443e      	add	r6, r7
 8001254:	eba6 0609 	sub.w	r6, r6, r9
 8001258:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800125c:	e78f      	b.n	800117e <__udivmoddi4+0x10e>
 800125e:	f1c1 0720 	rsb	r7, r1, #32
 8001262:	fa22 f807 	lsr.w	r8, r2, r7
 8001266:	408b      	lsls	r3, r1
 8001268:	ea48 0303 	orr.w	r3, r8, r3
 800126c:	fa26 f407 	lsr.w	r4, r6, r7
 8001270:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001274:	fbb4 f9fe 	udiv	r9, r4, lr
 8001278:	fa1f fc83 	uxth.w	ip, r3
 800127c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001280:	408e      	lsls	r6, r1
 8001282:	fa20 f807 	lsr.w	r8, r0, r7
 8001286:	fb09 fa0c 	mul.w	sl, r9, ip
 800128a:	ea48 0806 	orr.w	r8, r8, r6
 800128e:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8001292:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8001296:	45a2      	cmp	sl, r4
 8001298:	fa02 f201 	lsl.w	r2, r2, r1
 800129c:	fa00 f601 	lsl.w	r6, r0, r1
 80012a0:	d908      	bls.n	80012b4 <__udivmoddi4+0x244>
 80012a2:	18e4      	adds	r4, r4, r3
 80012a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80012a8:	d244      	bcs.n	8001334 <__udivmoddi4+0x2c4>
 80012aa:	45a2      	cmp	sl, r4
 80012ac:	d942      	bls.n	8001334 <__udivmoddi4+0x2c4>
 80012ae:	f1a9 0902 	sub.w	r9, r9, #2
 80012b2:	441c      	add	r4, r3
 80012b4:	eba4 040a 	sub.w	r4, r4, sl
 80012b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80012bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80012c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80012c4:	fa1f f888 	uxth.w	r8, r8
 80012c8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80012cc:	45a4      	cmp	ip, r4
 80012ce:	d907      	bls.n	80012e0 <__udivmoddi4+0x270>
 80012d0:	18e4      	adds	r4, r4, r3
 80012d2:	f100 3eff 	add.w	lr, r0, #4294967295
 80012d6:	d229      	bcs.n	800132c <__udivmoddi4+0x2bc>
 80012d8:	45a4      	cmp	ip, r4
 80012da:	d927      	bls.n	800132c <__udivmoddi4+0x2bc>
 80012dc:	3802      	subs	r0, #2
 80012de:	441c      	add	r4, r3
 80012e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012e4:	fba0 8902 	umull	r8, r9, r0, r2
 80012e8:	eba4 0c0c 	sub.w	ip, r4, ip
 80012ec:	45cc      	cmp	ip, r9
 80012ee:	46c2      	mov	sl, r8
 80012f0:	46ce      	mov	lr, r9
 80012f2:	d315      	bcc.n	8001320 <__udivmoddi4+0x2b0>
 80012f4:	d012      	beq.n	800131c <__udivmoddi4+0x2ac>
 80012f6:	b155      	cbz	r5, 800130e <__udivmoddi4+0x29e>
 80012f8:	ebb6 030a 	subs.w	r3, r6, sl
 80012fc:	eb6c 060e 	sbc.w	r6, ip, lr
 8001300:	fa06 f707 	lsl.w	r7, r6, r7
 8001304:	40cb      	lsrs	r3, r1
 8001306:	431f      	orrs	r7, r3
 8001308:	40ce      	lsrs	r6, r1
 800130a:	602f      	str	r7, [r5, #0]
 800130c:	606e      	str	r6, [r5, #4]
 800130e:	2100      	movs	r1, #0
 8001310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001314:	4610      	mov	r0, r2
 8001316:	e6f7      	b.n	8001108 <__udivmoddi4+0x98>
 8001318:	4689      	mov	r9, r1
 800131a:	e6de      	b.n	80010da <__udivmoddi4+0x6a>
 800131c:	4546      	cmp	r6, r8
 800131e:	d2ea      	bcs.n	80012f6 <__udivmoddi4+0x286>
 8001320:	ebb8 0a02 	subs.w	sl, r8, r2
 8001324:	eb69 0e03 	sbc.w	lr, r9, r3
 8001328:	3801      	subs	r0, #1
 800132a:	e7e4      	b.n	80012f6 <__udivmoddi4+0x286>
 800132c:	4670      	mov	r0, lr
 800132e:	e7d7      	b.n	80012e0 <__udivmoddi4+0x270>
 8001330:	4618      	mov	r0, r3
 8001332:	e78f      	b.n	8001254 <__udivmoddi4+0x1e4>
 8001334:	4681      	mov	r9, r0
 8001336:	e7bd      	b.n	80012b4 <__udivmoddi4+0x244>
 8001338:	4611      	mov	r1, r2
 800133a:	e776      	b.n	800122a <__udivmoddi4+0x1ba>
 800133c:	3802      	subs	r0, #2
 800133e:	443c      	add	r4, r7
 8001340:	e744      	b.n	80011cc <__udivmoddi4+0x15c>
 8001342:	4608      	mov	r0, r1
 8001344:	e706      	b.n	8001154 <__udivmoddi4+0xe4>
 8001346:	3a02      	subs	r2, #2
 8001348:	443e      	add	r6, r7
 800134a:	e72b      	b.n	80011a4 <__udivmoddi4+0x134>

0800134c <__aeabi_idiv0>:
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop

08001350 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f103 0208 	add.w	r2, r3, #8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f103 0208 	add.w	r2, r3, #8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f103 0208 	add.w	r2, r3, #8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001402:	d103      	bne.n	800140c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	e00c      	b.n	8001426 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3308      	adds	r3, #8
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	e002      	b.n	800141a <vListInsert+0x2e>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d9f6      	bls.n	8001414 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6892      	ldr	r2, [r2, #8]
 8001472:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6852      	ldr	r2, [r2, #4]
 800147c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	d103      	bne.n	8001490 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
	...

080014b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3b04      	subs	r3, #4
 80014c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3b04      	subs	r3, #4
 80014ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f023 0201 	bic.w	r2, r3, #1
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3b04      	subs	r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80014e0:	4a08      	ldr	r2, [pc, #32]	; (8001504 <pxPortInitialiseStack+0x54>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b14      	subs	r3, #20
 80014ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3b20      	subs	r3, #32
 80014f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80014f8:	68fb      	ldr	r3, [r7, #12]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	08001509 	.word	0x08001509

08001508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <prvTaskExitError+0x4c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151a:	d009      	beq.n	8001530 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800151c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001520:	f383 8811 	msr	BASEPRI, r3
 8001524:	f3bf 8f6f 	isb	sy
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e7fe      	b.n	800152e <prvTaskExitError+0x26>
 8001530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001534:	f383 8811 	msr	BASEPRI, r3
 8001538:	f3bf 8f6f 	isb	sy
 800153c:	f3bf 8f4f 	dsb	sy
 8001540:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001542:	bf00      	nop
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0fc      	beq.n	8001544 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	20000000 	.word	0x20000000
	...

08001560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <pxCurrentTCBConst2>)
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	6808      	ldr	r0, [r1, #0]
 8001566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800156a:	f380 8809 	msr	PSP, r0
 800156e:	f3bf 8f6f 	isb	sy
 8001572:	f04f 0000 	mov.w	r0, #0
 8001576:	f380 8811 	msr	BASEPRI, r0
 800157a:	f04e 0e0d 	orr.w	lr, lr, #13
 800157e:	4770      	bx	lr

08001580 <pxCurrentTCBConst2>:
 8001580:	20001c54 	.word	0x20001c54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop

08001588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <prvPortStartFirstTask+0x1c>)
 800158a:	6800      	ldr	r0, [r0, #0]
 800158c:	6800      	ldr	r0, [r0, #0]
 800158e:	f380 8808 	msr	MSP, r0
 8001592:	b662      	cpsie	i
 8001594:	b661      	cpsie	f
 8001596:	f3bf 8f4f 	dsb	sy
 800159a:	f3bf 8f6f 	isb	sy
 800159e:	df00      	svc	0
 80015a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80015a2:	bf00      	nop
 80015a4:	e000ed08 	.word	0xe000ed08

080015a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <xPortStartScheduler+0xcc>)
 80015b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	22ff      	movs	r2, #255	; 0xff
 80015be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <xPortStartScheduler+0xd0>)
 80015d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <xPortStartScheduler+0xd4>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015dc:	e009      	b.n	80015f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <xPortStartScheduler+0xd4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	4a25      	ldr	r2, [pc, #148]	; (800167c <xPortStartScheduler+0xd4>)
 80015e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	2b80      	cmp	r3, #128	; 0x80
 80015fc:	d0ef      	beq.n	80015de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <xPortStartScheduler+0xd4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	d009      	beq.n	800161e <xPortStartScheduler+0x76>
 800160a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800160e:	f383 8811 	msr	BASEPRI, r3
 8001612:	f3bf 8f6f 	isb	sy
 8001616:	f3bf 8f4f 	dsb	sy
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	e7fe      	b.n	800161c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <xPortStartScheduler+0xd4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	4a15      	ldr	r2, [pc, #84]	; (800167c <xPortStartScheduler+0xd4>)
 8001626:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <xPortStartScheduler+0xd4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <xPortStartScheduler+0xd4>)
 8001632:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800163c:	4a10      	ldr	r2, [pc, #64]	; (8001680 <xPortStartScheduler+0xd8>)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <xPortStartScheduler+0xd8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001646:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <xPortStartScheduler+0xd8>)
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <xPortStartScheduler+0xd8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001652:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001654:	f000 f8b0 	bl	80017b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <xPortStartScheduler+0xdc>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800165e:	f7ff ff93 	bl	8001588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001662:	f001 fa23 	bl	8002aac <vTaskSwitchContext>
	prvTaskExitError();
 8001666:	f7ff ff4f 	bl	8001508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	e000e400 	.word	0xe000e400
 8001678:	20000038 	.word	0x20000038
 800167c:	2000003c 	.word	0x2000003c
 8001680:	e000ed20 	.word	0xe000ed20
 8001684:	20000000 	.word	0x20000000

08001688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	f383 8811 	msr	BASEPRI, r3
 8001696:	f3bf 8f6f 	isb	sy
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <vPortEnterCritical+0x54>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <vPortEnterCritical+0x54>)
 80016a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <vPortEnterCritical+0x54>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d10e      	bne.n	80016d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <vPortEnterCritical+0x58>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d009      	beq.n	80016d0 <vPortEnterCritical+0x48>
 80016bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c0:	f383 8811 	msr	BASEPRI, r3
 80016c4:	f3bf 8f6f 	isb	sy
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	e7fe      	b.n	80016ce <vPortEnterCritical+0x46>
	}
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000000 	.word	0x20000000
 80016e0:	e000ed04 	.word	0xe000ed04

080016e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <vPortExitCritical+0x48>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <vPortExitCritical+0x22>
 80016f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f6:	f383 8811 	msr	BASEPRI, r3
 80016fa:	f3bf 8f6f 	isb	sy
 80016fe:	f3bf 8f4f 	dsb	sy
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	e7fe      	b.n	8001704 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <vPortExitCritical+0x48>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <vPortExitCritical+0x48>)
 800170e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <vPortExitCritical+0x48>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d104      	bne.n	8001722 <vPortExitCritical+0x3e>
 8001718:	2300      	movs	r3, #0
 800171a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	20000000 	.word	0x20000000

08001730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001730:	f3ef 8009 	mrs	r0, PSP
 8001734:	f3bf 8f6f 	isb	sy
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <pxCurrentTCBConst>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001740:	6010      	str	r0, [r2, #0]
 8001742:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001746:	f04f 0050 	mov.w	r0, #80	; 0x50
 800174a:	f380 8811 	msr	BASEPRI, r0
 800174e:	f001 f9ad 	bl	8002aac <vTaskSwitchContext>
 8001752:	f04f 0000 	mov.w	r0, #0
 8001756:	f380 8811 	msr	BASEPRI, r0
 800175a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800175e:	6819      	ldr	r1, [r3, #0]
 8001760:	6808      	ldr	r0, [r1, #0]
 8001762:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001766:	f380 8809 	msr	PSP, r0
 800176a:	f3bf 8f6f 	isb	sy
 800176e:	4770      	bx	lr

08001770 <pxCurrentTCBConst>:
 8001770:	20001c54 	.word	0x20001c54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop

08001778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
	__asm volatile
 800177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001782:	f383 8811 	msr	BASEPRI, r3
 8001786:	f3bf 8f6f 	isb	sy
 800178a:	f3bf 8f4f 	dsb	sy
 800178e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001790:	f001 f8d4 	bl	800293c <xTaskIncrementTick>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <SysTick_Handler+0x3c>)
 800179c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	e000ed04 	.word	0xe000ed04

080017b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <vPortSetupTimerInterrupt+0x28>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <vPortSetupTimerInterrupt+0x2c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <vPortSetupTimerInterrupt+0x30>)
 80017ca:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80017ce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <vPortSetupTimerInterrupt+0x28>)
 80017d2:	2207      	movs	r2, #7
 80017d4:	601a      	str	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010
 80017e4:	e000e018 	.word	0xe000e018
 80017e8:	e000e014 	.word	0xe000e014

080017ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80017f2:	f3ef 8305 	mrs	r3, IPSR
 80017f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d913      	bls.n	8001826 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80017fe:	4a15      	ldr	r2, [pc, #84]	; (8001854 <vPortValidateInterruptPriority+0x68>)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <vPortValidateInterruptPriority+0x6c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	7afa      	ldrb	r2, [r7, #11]
 800180e:	429a      	cmp	r2, r3
 8001810:	d209      	bcs.n	8001826 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001816:	f383 8811 	msr	BASEPRI, r3
 800181a:	f3bf 8f6f 	isb	sy
 800181e:	f3bf 8f4f 	dsb	sy
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	e7fe      	b.n	8001824 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <vPortValidateInterruptPriority+0x70>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <vPortValidateInterruptPriority+0x74>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d909      	bls.n	800184a <vPortValidateInterruptPriority+0x5e>
 8001836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183a:	f383 8811 	msr	BASEPRI, r3
 800183e:	f3bf 8f6f 	isb	sy
 8001842:	f3bf 8f4f 	dsb	sy
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	e7fe      	b.n	8001848 <vPortValidateInterruptPriority+0x5c>
	}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	e000e3f0 	.word	0xe000e3f0
 8001858:	20000038 	.word	0x20000038
 800185c:	e000ed0c 	.word	0xe000ed0c
 8001860:	2000003c 	.word	0x2000003c

08001864 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8001870:	f000 ffac 	bl	80027cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8001874:	4b40      	ldr	r3, [pc, #256]	; (8001978 <pvPortMalloc+0x114>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d104      	bne.n	8001886 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 800187c:	f000 f8c8 	bl	8001a10 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8001880:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <pvPortMalloc+0x114>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00e      	beq.n	80018aa <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 800188c:	2308      	movs	r3, #8
 800188e:	461a      	mov	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f023 0307 	bic.w	r3, r3, #7
 80018a6:	3308      	adds	r3, #8
 80018a8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d057      	beq.n	8001960 <pvPortMalloc+0xfc>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d852      	bhi.n	8001960 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <pvPortMalloc+0x118>)
 80018bc:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <pvPortMalloc+0x118>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018c4:	e004      	b.n	80018d0 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d203      	bcs.n	80018e2 <pvPortMalloc+0x7e>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f1      	bne.n	80018c6 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4a26      	ldr	r2, [pc, #152]	; (8001980 <pvPortMalloc+0x11c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d03a      	beq.n	8001960 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2208      	movs	r2, #8
 80018f0:	4413      	add	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2208      	movs	r2, #8
 8001906:	0052      	lsls	r2, r2, #1
 8001908:	4293      	cmp	r3, r2
 800190a:	d922      	bls.n	8001952 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	1ad2      	subs	r2, r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <pvPortMalloc+0x118>)
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	e002      	b.n	8001938 <pvPortMalloc+0xd4>
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	429a      	cmp	r2, r3
 8001942:	d3f6      	bcc.n	8001932 <pvPortMalloc+0xce>
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <pvPortMalloc+0x120>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4a09      	ldr	r2, [pc, #36]	; (8001984 <pvPortMalloc+0x120>)
 800195e:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001960:	f000 ff42 	bl	80027e8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800196a:	f003 f997 	bl	8004c9c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800196e:	697b      	ldr	r3, [r7, #20]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20001c50 	.word	0x20001c50
 800197c:	20001c40 	.word	0x20001c40
 8001980:	20001c48 	.word	0x20001c48
 8001984:	20000004 	.word	0x20000004

08001988 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d027      	beq.n	80019ea <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800199a:	2308      	movs	r3, #8
 800199c:	425b      	negs	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4413      	add	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 80019a8:	f000 ff10 	bl	80027cc <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <vPortFree+0x6c>)
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e002      	b.n	80019be <vPortFree+0x36>
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3f6      	bcc.n	80019b8 <vPortFree+0x30>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <vPortFree+0x70>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <vPortFree+0x70>)
 80019e4:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80019e6:	f000 feff 	bl	80027e8 <xTaskResumeAll>
	}
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20001c40 	.word	0x20001c40
 80019f8:	20000004 	.word	0x20000004

080019fc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8001a00:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <xPortGetFreeHeapSize+0x10>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	20000004 	.word	0x20000004

08001a10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <prvHeapInit+0x44>)
 8001a18:	f023 0307 	bic.w	r3, r3, #7
 8001a1c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <prvHeapInit+0x48>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <prvHeapInit+0x48>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <prvHeapInit+0x4c>)
 8001a2c:	f641 32f8 	movw	r2, #7160	; 0x1bf8
 8001a30:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <prvHeapInit+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f641 32f8 	movw	r2, #7160	; 0x1bf8
 8001a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <prvHeapInit+0x4c>)
 8001a48:	601a      	str	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	20000048 	.word	0x20000048
 8001a58:	20001c40 	.word	0x20001c40
 8001a5c:	20001c48 	.word	0x20001c48

08001a60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <xQueueGenericReset+0x28>
 8001a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a78:	f383 8811 	msr	BASEPRI, r3
 8001a7c:	f3bf 8f6f 	isb	sy
 8001a80:	f3bf 8f4f 	dsb	sy
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	e7fe      	b.n	8001a86 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001a88:	f7ff fdfe 	bl	8001688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	441a      	add	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	68f9      	ldr	r1, [r7, #12]
 8001abc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	441a      	add	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	22ff      	movs	r2, #255	; 0xff
 8001acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	22ff      	movs	r2, #255	; 0xff
 8001ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d114      	bne.n	8001b08 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01a      	beq.n	8001b1c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3310      	adds	r3, #16
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 f8ac 	bl	8002c48 <xTaskRemoveFromEventList>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <xQueueGenericReset+0xcc>)
 8001af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f3bf 8f4f 	dsb	sy
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	e009      	b.n	8001b1c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3310      	adds	r3, #16
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fc1f 	bl	8001350 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3324      	adds	r3, #36	; 0x24
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fc1a 	bl	8001350 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001b1c:	f7ff fde2 	bl	80016e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000ed04 	.word	0xe000ed04

08001b30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <xQueueGenericCreate+0x28>
 8001b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b48:	f383 8811 	msr	BASEPRI, r3
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	e7fe      	b.n	8001b56 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3348      	adds	r3, #72	; 0x48
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fe7c 	bl	8001864 <pvPortMalloc>
 8001b6c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3348      	adds	r3, #72	; 0x48
 8001b7c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f805 	bl	8001b9a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001b90:	69bb      	ldr	r3, [r7, #24]
	}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e002      	b.n	8001bbc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001bc8:	2101      	movs	r1, #1
 8001bca:	69b8      	ldr	r0, [r7, #24]
 8001bcc:	f7ff ff48 	bl	8001a60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <xQueueGenericSend+0x30>
 8001bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf8:	f383 8811 	msr	BASEPRI, r3
 8001bfc:	f3bf 8f6f 	isb	sy
 8001c00:	f3bf 8f4f 	dsb	sy
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c06:	e7fe      	b.n	8001c06 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <xQueueGenericSend+0x3e>
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <xQueueGenericSend+0x42>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <xQueueGenericSend+0x44>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <xQueueGenericSend+0x5c>
 8001c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c24:	f383 8811 	msr	BASEPRI, r3
 8001c28:	f3bf 8f6f 	isb	sy
 8001c2c:	f3bf 8f4f 	dsb	sy
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
 8001c32:	e7fe      	b.n	8001c32 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d103      	bne.n	8001c42 <xQueueGenericSend+0x6a>
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <xQueueGenericSend+0x6e>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <xQueueGenericSend+0x70>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d109      	bne.n	8001c60 <xQueueGenericSend+0x88>
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	e7fe      	b.n	8001c5e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c60:	f001 f98c 	bl	8002f7c <xTaskGetSchedulerState>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <xQueueGenericSend+0x98>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <xQueueGenericSend+0x9c>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <xQueueGenericSend+0x9e>
 8001c74:	2300      	movs	r3, #0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <xQueueGenericSend+0xb6>
 8001c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7e:	f383 8811 	msr	BASEPRI, r3
 8001c82:	f3bf 8f6f 	isb	sy
 8001c86:	f3bf 8f4f 	dsb	sy
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	e7fe      	b.n	8001c8c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c8e:	f7ff fcfb 	bl	8001688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d302      	bcc.n	8001ca4 <xQueueGenericSend+0xcc>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d129      	bne.n	8001cf8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001caa:	f000 fa03 	bl	80020b4 <prvCopyDataToQueue>
 8001cae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	3324      	adds	r3, #36	; 0x24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 ffc3 	bl	8002c48 <xTaskRemoveFromEventList>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <xQueueGenericSend+0x1f0>)
 8001cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	f3bf 8f6f 	isb	sy
 8001cd8:	e00a      	b.n	8001cf0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <xQueueGenericSend+0x1f0>)
 8001ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f3bf 8f4f 	dsb	sy
 8001cec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001cf0:	f7ff fcf8 	bl	80016e4 <vPortExitCritical>
				return pdPASS;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e063      	b.n	8001dc0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cfe:	f7ff fcf1 	bl	80016e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e05c      	b.n	8001dc0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d106      	bne.n	8001d1a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fffb 	bl	8002d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d1a:	f7ff fce3 	bl	80016e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d1e:	f000 fd55 	bl	80027cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d22:	f7ff fcb1 	bl	8001688 <vPortEnterCritical>
 8001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d32:	d103      	bne.n	8001d3c <xQueueGenericSend+0x164>
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d103      	bne.n	8001d52 <xQueueGenericSend+0x17a>
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d52:	f7ff fcc7 	bl	80016e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d56:	1d3a      	adds	r2, r7, #4
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 ffea 	bl	8002d38 <xTaskCheckForTimeOut>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d124      	bne.n	8001db4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d6c:	f000 fa9a 	bl	80022a4 <prvIsQueueFull>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d018      	beq.n	8001da8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	3310      	adds	r3, #16
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 ff14 	bl	8002bac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d86:	f000 fa25 	bl	80021d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d8a:	f000 fd2d 	bl	80027e8 <xTaskResumeAll>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f af7c 	bne.w	8001c8e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <xQueueGenericSend+0x1f0>)
 8001d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	f3bf 8f6f 	isb	sy
 8001da6:	e772      	b.n	8001c8e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001daa:	f000 fa13 	bl	80021d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001dae:	f000 fd1b 	bl	80027e8 <xTaskResumeAll>
 8001db2:	e76c      	b.n	8001c8e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001db6:	f000 fa0d 	bl	80021d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001dba:	f000 fd15 	bl	80027e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001dbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3738      	adds	r7, #56	; 0x38
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	e000ed04 	.word	0xe000ed04

08001dcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b090      	sub	sp, #64	; 0x40
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <xQueueGenericSendFromISR+0x2c>
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df6:	e7fe      	b.n	8001df6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <xQueueGenericSendFromISR+0x3a>
 8001dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <xQueueGenericSendFromISR+0x3e>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <xQueueGenericSendFromISR+0x40>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <xQueueGenericSendFromISR+0x58>
 8001e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e14:	f383 8811 	msr	BASEPRI, r3
 8001e18:	f3bf 8f6f 	isb	sy
 8001e1c:	f3bf 8f4f 	dsb	sy
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	e7fe      	b.n	8001e22 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d103      	bne.n	8001e32 <xQueueGenericSendFromISR+0x66>
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <xQueueGenericSendFromISR+0x6a>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <xQueueGenericSendFromISR+0x6c>
 8001e36:	2300      	movs	r3, #0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <xQueueGenericSendFromISR+0x84>
 8001e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e40:	f383 8811 	msr	BASEPRI, r3
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	623b      	str	r3, [r7, #32]
 8001e4e:	e7fe      	b.n	8001e4e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e50:	f7ff fccc 	bl	80017ec <vPortValidateInterruptPriority>
	__asm volatile
 8001e54:	f3ef 8211 	mrs	r2, BASEPRI
 8001e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	61fa      	str	r2, [r7, #28]
 8001e6a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d302      	bcc.n	8001e82 <xQueueGenericSendFromISR+0xb6>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d12f      	bne.n	8001ee2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e98:	f000 f90c 	bl	80020b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001e9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d112      	bne.n	8001ecc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb0:	3324      	adds	r3, #36	; 0x24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fec8 	bl	8002c48 <xTaskRemoveFromEventList>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00e      	beq.n	8001edc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e007      	b.n	8001edc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	b25a      	sxtb	r2, r3
 8001ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001edc:	2301      	movs	r3, #1
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001ee0:	e001      	b.n	8001ee6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee8:	617b      	str	r3, [r7, #20]
	__asm volatile
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3740      	adds	r7, #64	; 0x40
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <xQueueReceive+0x2e>
	__asm volatile
 8001f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	623b      	str	r3, [r7, #32]
 8001f28:	e7fe      	b.n	8001f28 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d103      	bne.n	8001f38 <xQueueReceive+0x3c>
 8001f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <xQueueReceive+0x40>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <xQueueReceive+0x42>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <xQueueReceive+0x5a>
 8001f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	e7fe      	b.n	8001f54 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f56:	f001 f811 	bl	8002f7c <xTaskGetSchedulerState>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <xQueueReceive+0x6a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <xQueueReceive+0x6e>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <xQueueReceive+0x70>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d109      	bne.n	8001f84 <xQueueReceive+0x88>
 8001f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	e7fe      	b.n	8001f82 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f84:	f7ff fb80 	bl	8001688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01f      	beq.n	8001fd4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f98:	f000 f8f6 	bl	8002188 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	1e5a      	subs	r2, r3, #1
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00f      	beq.n	8001fcc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	3310      	adds	r3, #16
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fe49 	bl	8002c48 <xTaskRemoveFromEventList>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001fbc:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <xQueueReceive+0x1b4>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001fcc:	f7ff fb8a 	bl	80016e4 <vPortExitCritical>
				return pdPASS;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e069      	b.n	80020a8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fda:	f7ff fb83 	bl	80016e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e062      	b.n	80020a8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fe8d 	bl	8002d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ff6:	f7ff fb75 	bl	80016e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ffa:	f000 fbe7 	bl	80027cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ffe:	f7ff fb43 	bl	8001688 <vPortEnterCritical>
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002008:	b25b      	sxtb	r3, r3
 800200a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200e:	d103      	bne.n	8002018 <xQueueReceive+0x11c>
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800201e:	b25b      	sxtb	r3, r3
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d103      	bne.n	800202e <xQueueReceive+0x132>
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800202e:	f7ff fb59 	bl	80016e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002032:	1d3a      	adds	r2, r7, #4
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fe7c 	bl	8002d38 <xTaskCheckForTimeOut>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d123      	bne.n	800208e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002048:	f000 f916 	bl	8002278 <prvIsQueueEmpty>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d017      	beq.n	8002082 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	3324      	adds	r3, #36	; 0x24
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fda6 	bl	8002bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002062:	f000 f8b7 	bl	80021d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002066:	f000 fbbf 	bl	80027e8 <xTaskResumeAll>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d189      	bne.n	8001f84 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <xQueueReceive+0x1b4>)
 8002072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	e780      	b.n	8001f84 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002084:	f000 f8a6 	bl	80021d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002088:	f000 fbae 	bl	80027e8 <xTaskResumeAll>
 800208c:	e77a      	b.n	8001f84 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800208e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002090:	f000 f8a0 	bl	80021d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002094:	f000 fba8 	bl	80027e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800209a:	f000 f8ed 	bl	8002278 <prvIsQueueEmpty>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f43f af6f 	beq.w	8001f84 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80020a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3730      	adds	r7, #48	; 0x30
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	e000ed04 	.word	0xe000ed04

080020b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10d      	bne.n	80020ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d14d      	bne.n	8002176 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 ff6a 	bl	8002fb8 <xTaskPriorityDisinherit>
 80020e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	e043      	b.n	8002176 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d119      	bne.n	8002128 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6858      	ldr	r0, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	461a      	mov	r2, r3
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	f004 fcee 	bl	8006ae0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	441a      	add	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	429a      	cmp	r2, r3
 800211c:	d32b      	bcc.n	8002176 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	e026      	b.n	8002176 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68d8      	ldr	r0, [r3, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	461a      	mov	r2, r3
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	f004 fcd4 	bl	8006ae0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	425b      	negs	r3, r3
 8002142:	441a      	add	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d207      	bcs.n	8002164 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	425b      	negs	r3, r3
 800215e:	441a      	add	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d105      	bne.n	8002176 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	3b01      	subs	r3, #1
 8002174:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800217e:	697b      	ldr	r3, [r7, #20]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d018      	beq.n	80021cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	441a      	add	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d303      	bcc.n	80021bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68d9      	ldr	r1, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	461a      	mov	r2, r3
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	f004 fc8a 	bl	8006ae0 <memcpy>
	}
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80021dc:	f7ff fa54 	bl	8001688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021e8:	e011      	b.n	800220e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d012      	beq.n	8002218 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3324      	adds	r3, #36	; 0x24
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fd26 	bl	8002c48 <xTaskRemoveFromEventList>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002202:	f000 fdf9 	bl	8002df8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3b01      	subs	r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	2b00      	cmp	r3, #0
 8002214:	dce9      	bgt.n	80021ea <prvUnlockQueue+0x16>
 8002216:	e000      	b.n	800221a <prvUnlockQueue+0x46>
					break;
 8002218:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	22ff      	movs	r2, #255	; 0xff
 800221e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002222:	f7ff fa5f 	bl	80016e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002226:	f7ff fa2f 	bl	8001688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002230:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002232:	e011      	b.n	8002258 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d012      	beq.n	8002262 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3310      	adds	r3, #16
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fd01 	bl	8002c48 <xTaskRemoveFromEventList>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800224c:	f000 fdd4 	bl	8002df8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	3b01      	subs	r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800225c:	2b00      	cmp	r3, #0
 800225e:	dce9      	bgt.n	8002234 <prvUnlockQueue+0x60>
 8002260:	e000      	b.n	8002264 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002262:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	22ff      	movs	r2, #255	; 0xff
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800226c:	f7ff fa3a 	bl	80016e4 <vPortExitCritical>
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002280:	f7ff fa02 	bl	8001688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800228c:	2301      	movs	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e001      	b.n	8002296 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002296:	f7ff fa25 	bl	80016e4 <vPortExitCritical>

	return xReturn;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80022ac:	f7ff f9ec 	bl	8001688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d102      	bne.n	80022c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80022bc:	2301      	movs	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	e001      	b.n	80022c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022c6:	f7ff fa0d 	bl	80016e4 <vPortExitCritical>

	return xReturn;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80022e4:	f7ff f9d0 	bl	8001688 <vPortEnterCritical>
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022ee:	b25b      	sxtb	r3, r3
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d103      	bne.n	80022fe <vQueueWaitForMessageRestricted+0x2a>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002304:	b25b      	sxtb	r3, r3
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d103      	bne.n	8002314 <vQueueWaitForMessageRestricted+0x40>
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002314:	f7ff f9e6 	bl	80016e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3324      	adds	r3, #36	; 0x24
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fc63 	bl	8002bf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff50 	bl	80021d4 <prvUnlockQueue>
	}
 8002334:	bf00      	nop
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	; 0x30
 8002340:	af04      	add	r7, sp, #16
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fa87 	bl	8001864 <pvPortMalloc>
 8002356:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00e      	beq.n	800237c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800235e:	2050      	movs	r0, #80	; 0x50
 8002360:	f7ff fa80 	bl	8001864 <pvPortMalloc>
 8002364:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
 8002372:	e005      	b.n	8002380 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002374:	6978      	ldr	r0, [r7, #20]
 8002376:	f7ff fb07 	bl	8001988 <vPortFree>
 800237a:	e001      	b.n	8002380 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d013      	beq.n	80023ae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	2300      	movs	r3, #0
 800238a:	9303      	str	r3, [sp, #12]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f80e 	bl	80023be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023a2:	69f8      	ldr	r0, [r7, #28]
 80023a4:	f000 f89a 	bl	80024dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80023a8:	2301      	movs	r3, #1
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	e002      	b.n	80023b4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023b4:	69bb      	ldr	r3, [r7, #24]
	}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b088      	sub	sp, #32
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	461a      	mov	r2, r3
 80023d6:	21a5      	movs	r1, #165	; 0xa5
 80023d8:	f004 fb8d 	bl	8006af6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023e6:	3b01      	subs	r3, #1
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	f023 0307 	bic.w	r3, r3, #7
 80023f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d009      	beq.n	8002414 <prvInitialiseNewTask+0x56>
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e7fe      	b.n	8002412 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01f      	beq.n	800245a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e012      	b.n	8002446 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	7819      	ldrb	r1, [r3, #0]
 8002428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	3334      	adds	r3, #52	; 0x34
 8002430:	460a      	mov	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3301      	adds	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	2b09      	cmp	r3, #9
 800244a:	d9e9      	bls.n	8002420 <prvInitialiseNewTask+0x62>
 800244c:	e000      	b.n	8002450 <prvInitialiseNewTask+0x92>
			{
				break;
 800244e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002458:	e003      	b.n	8002462 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	2b04      	cmp	r3, #4
 8002466:	d901      	bls.n	800246c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002468:	2304      	movs	r3, #4
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe ff83 	bl	800138e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	3318      	adds	r3, #24
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe ff7e 	bl	800138e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002496:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	f1c3 0205 	rsb	r2, r3, #5
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	2200      	movs	r2, #0
 80024ac:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	69b8      	ldr	r0, [r7, #24]
 80024bc:	f7fe fff8 	bl	80014b0 <pxPortInitialiseStack>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024d2:	bf00      	nop
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024e4:	f7ff f8d0 	bl	8001688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024e8:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <prvAddNewTaskToReadyList+0xb8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	4a29      	ldr	r2, [pc, #164]	; (8002594 <prvAddNewTaskToReadyList+0xb8>)
 80024f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024fa:	4a27      	ldr	r2, [pc, #156]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <prvAddNewTaskToReadyList+0xb8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d110      	bne.n	800252a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002508:	f000 fc9c 	bl	8002e44 <prvInitialiseTaskLists>
 800250c:	e00d      	b.n	800252a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800250e:	4b23      	ldr	r3, [pc, #140]	; (800259c <prvAddNewTaskToReadyList+0xc0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	429a      	cmp	r2, r3
 8002522:	d802      	bhi.n	800252a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002524:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <prvAddNewTaskToReadyList+0xc4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <prvAddNewTaskToReadyList+0xc4>)
 8002532:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	2201      	movs	r2, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <prvAddNewTaskToReadyList+0xc8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <prvAddNewTaskToReadyList+0xc8>)
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <prvAddNewTaskToReadyList+0xcc>)
 8002554:	441a      	add	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	4619      	mov	r1, r3
 800255c:	4610      	mov	r0, r2
 800255e:	f7fe ff22 	bl	80013a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002562:	f7ff f8bf 	bl	80016e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <prvAddNewTaskToReadyList+0xc0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <prvAddNewTaskToReadyList+0xd0>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20001d2c 	.word	0x20001d2c
 8002598:	20001c54 	.word	0x20001c54
 800259c:	20001d38 	.word	0x20001d38
 80025a0:	20001d48 	.word	0x20001d48
 80025a4:	20001d34 	.word	0x20001d34
 80025a8:	20001c58 	.word	0x20001c58
 80025ac:	e000ed04 	.word	0xe000ed04

080025b0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80025b8:	f7ff f866 	bl	8001688 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <vTaskDelete+0x18>
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <vTaskDelete+0xf4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	e000      	b.n	80025ca <vTaskDelete+0x1a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3304      	adds	r3, #4
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe ff43 	bl	800145c <uxListRemove>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d115      	bne.n	8002608 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	4931      	ldr	r1, [pc, #196]	; (80026a8 <vTaskDelete+0xf8>)
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <vTaskDelete+0x58>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	2201      	movs	r2, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43da      	mvns	r2, r3
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <vTaskDelete+0xfc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4013      	ands	r3, r2
 8002604:	4a29      	ldr	r2, [pc, #164]	; (80026ac <vTaskDelete+0xfc>)
 8002606:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3318      	adds	r3, #24
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe ff21 	bl	800145c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800261a:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <vTaskDelete+0x100>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <vTaskDelete+0x100>)
 8002622:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <vTaskDelete+0xf4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	429a      	cmp	r2, r3
 800262c:	d10b      	bne.n	8002646 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3304      	adds	r3, #4
 8002632:	4619      	mov	r1, r3
 8002634:	481f      	ldr	r0, [pc, #124]	; (80026b4 <vTaskDelete+0x104>)
 8002636:	f7fe feb6 	bl	80013a6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800263a:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <vTaskDelete+0x108>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <vTaskDelete+0x108>)
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e009      	b.n	800265a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <vTaskDelete+0x10c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3b01      	subs	r3, #1
 800264c:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <vTaskDelete+0x10c>)
 800264e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fc63 	bl	8002f1c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002656:	f000 fc71 	bl	8002f3c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800265a:	f7ff f843 	bl	80016e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <vTaskDelete+0x110>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01a      	beq.n	800269c <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <vTaskDelete+0xf4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d115      	bne.n	800269c <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <vTaskDelete+0x114>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <vTaskDelete+0xdc>
 8002678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	e7fe      	b.n	800268a <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <vTaskDelete+0x118>)
 800268e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20001c54 	.word	0x20001c54
 80026a8:	20001c58 	.word	0x20001c58
 80026ac:	20001d34 	.word	0x20001d34
 80026b0:	20001d48 	.word	0x20001d48
 80026b4:	20001d00 	.word	0x20001d00
 80026b8:	20001d14 	.word	0x20001d14
 80026bc:	20001d2c 	.word	0x20001d2c
 80026c0:	20001d38 	.word	0x20001d38
 80026c4:	20001d54 	.word	0x20001d54
 80026c8:	e000ed04 	.word	0xe000ed04

080026cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d016      	beq.n	800270c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <vTaskDelay+0x60>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <vTaskDelay+0x2e>
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	e7fe      	b.n	80026f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80026fa:	f000 f867 	bl	80027cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026fe:	2100      	movs	r1, #0
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fcdd 	bl	80030c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002706:	f000 f86f 	bl	80027e8 <xTaskResumeAll>
 800270a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <vTaskDelay+0x64>)
 8002714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20001d54 	.word	0x20001d54
 8002730:	e000ed04 	.word	0xe000ed04

08002734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <vTaskStartScheduler+0x80>)
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	2300      	movs	r3, #0
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2300      	movs	r3, #0
 8002744:	2246      	movs	r2, #70	; 0x46
 8002746:	491c      	ldr	r1, [pc, #112]	; (80027b8 <vTaskStartScheduler+0x84>)
 8002748:	481c      	ldr	r0, [pc, #112]	; (80027bc <vTaskStartScheduler+0x88>)
 800274a:	f7ff fdf7 	bl	800233c <xTaskCreate>
 800274e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002756:	f000 fd19 	bl	800318c <xTimerCreateTimerTask>
 800275a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d115      	bne.n	800278e <vTaskStartScheduler+0x5a>
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <vTaskStartScheduler+0x8c>)
 8002776:	f04f 32ff 	mov.w	r2, #4294967295
 800277a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <vTaskStartScheduler+0x90>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <vTaskStartScheduler+0x94>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002788:	f7fe ff0e 	bl	80015a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800278c:	e00d      	b.n	80027aa <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d109      	bne.n	80027aa <vTaskStartScheduler+0x76>
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	e7fe      	b.n	80027a8 <vTaskStartScheduler+0x74>
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20001d50 	.word	0x20001d50
 80027b8:	08006b20 	.word	0x08006b20
 80027bc:	08002e11 	.word	0x08002e11
 80027c0:	20001d4c 	.word	0x20001d4c
 80027c4:	20001d38 	.word	0x20001d38
 80027c8:	20001d30 	.word	0x20001d30

080027cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <vTaskSuspendAll+0x18>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <vTaskSuspendAll+0x18>)
 80027d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20001d54 	.word	0x20001d54

080027e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <xTaskResumeAll+0x114>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <xTaskResumeAll+0x2a>
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	e7fe      	b.n	8002810 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002812:	f7fe ff39 	bl	8001688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <xTaskResumeAll+0x114>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3b01      	subs	r3, #1
 800281c:	4a37      	ldr	r2, [pc, #220]	; (80028fc <xTaskResumeAll+0x114>)
 800281e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <xTaskResumeAll+0x114>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d161      	bne.n	80028ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002828:	4b35      	ldr	r3, [pc, #212]	; (8002900 <xTaskResumeAll+0x118>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05d      	beq.n	80028ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002830:	e02e      	b.n	8002890 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002832:	4b34      	ldr	r3, [pc, #208]	; (8002904 <xTaskResumeAll+0x11c>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3318      	adds	r3, #24
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fe0c 	bl	800145c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3304      	adds	r3, #4
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fe07 	bl	800145c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	2201      	movs	r2, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <xTaskResumeAll+0x120>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <xTaskResumeAll+0x120>)
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4a27      	ldr	r2, [pc, #156]	; (800290c <xTaskResumeAll+0x124>)
 800286e:	441a      	add	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3304      	adds	r3, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f7fe fd95 	bl	80013a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <xTaskResumeAll+0x128>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800288a:	4b22      	ldr	r3, [pc, #136]	; (8002914 <xTaskResumeAll+0x12c>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <xTaskResumeAll+0x11c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1cc      	bne.n	8002832 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800289e:	f000 fb4d 	bl	8002f3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <xTaskResumeAll+0x130>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80028ae:	f000 f845 	bl	800293c <xTaskIncrementTick>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <xTaskResumeAll+0x12c>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f1      	bne.n	80028ae <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <xTaskResumeAll+0x130>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <xTaskResumeAll+0x12c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80028d8:	2301      	movs	r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <xTaskResumeAll+0x134>)
 80028de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028ec:	f7fe fefa 	bl	80016e4 <vPortExitCritical>

	return xAlreadyYielded;
 80028f0:	68bb      	ldr	r3, [r7, #8]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20001d54 	.word	0x20001d54
 8002900:	20001d2c 	.word	0x20001d2c
 8002904:	20001cec 	.word	0x20001cec
 8002908:	20001d34 	.word	0x20001d34
 800290c:	20001c58 	.word	0x20001c58
 8002910:	20001c54 	.word	0x20001c54
 8002914:	20001d40 	.word	0x20001d40
 8002918:	20001d3c 	.word	0x20001d3c
 800291c:	e000ed04 	.word	0xe000ed04

08002920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <xTaskGetTickCount+0x18>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800292c:	687b      	ldr	r3, [r7, #4]
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	20001d30 	.word	0x20001d30

0800293c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002946:	4b4e      	ldr	r3, [pc, #312]	; (8002a80 <xTaskIncrementTick+0x144>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 808d 	bne.w	8002a6a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002950:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <xTaskIncrementTick+0x148>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002958:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <xTaskIncrementTick+0x148>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d11f      	bne.n	80029a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002964:	4b48      	ldr	r3, [pc, #288]	; (8002a88 <xTaskIncrementTick+0x14c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <xTaskIncrementTick+0x46>
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	e7fe      	b.n	8002980 <xTaskIncrementTick+0x44>
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <xTaskIncrementTick+0x14c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <xTaskIncrementTick+0x150>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3e      	ldr	r2, [pc, #248]	; (8002a88 <xTaskIncrementTick+0x14c>)
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4a3e      	ldr	r2, [pc, #248]	; (8002a8c <xTaskIncrementTick+0x150>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <xTaskIncrementTick+0x154>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	4a3c      	ldr	r2, [pc, #240]	; (8002a90 <xTaskIncrementTick+0x154>)
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	f000 facc 	bl	8002f3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029a4:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <xTaskIncrementTick+0x158>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d348      	bcc.n	8002a40 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029ae:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <xTaskIncrementTick+0x14c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d104      	bne.n	80029c2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029b8:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <xTaskIncrementTick+0x158>)
 80029ba:	f04f 32ff 	mov.w	r2, #4294967295
 80029be:	601a      	str	r2, [r3, #0]
					break;
 80029c0:	e03e      	b.n	8002a40 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <xTaskIncrementTick+0x14c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d203      	bcs.n	80029e2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80029da:	4a2e      	ldr	r2, [pc, #184]	; (8002a94 <xTaskIncrementTick+0x158>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80029e0:	e02e      	b.n	8002a40 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fd38 	bl	800145c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	3318      	adds	r3, #24
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe fd2f 	bl	800145c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	2201      	movs	r2, #1
 8002a04:	409a      	lsls	r2, r3
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <xTaskIncrementTick+0x15c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <xTaskIncrementTick+0x15c>)
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <xTaskIncrementTick+0x160>)
 8002a1e:	441a      	add	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f7fe fcbd 	bl	80013a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <xTaskIncrementTick+0x164>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3b9      	bcc.n	80029ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a3e:	e7b6      	b.n	80029ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <xTaskIncrementTick+0x164>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a46:	4915      	ldr	r1, [pc, #84]	; (8002a9c <xTaskIncrementTick+0x160>)
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d901      	bls.n	8002a5c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <xTaskIncrementTick+0x168>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e004      	b.n	8002a74 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <xTaskIncrementTick+0x16c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <xTaskIncrementTick+0x16c>)
 8002a72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002a74:	697b      	ldr	r3, [r7, #20]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20001d54 	.word	0x20001d54
 8002a84:	20001d30 	.word	0x20001d30
 8002a88:	20001ce4 	.word	0x20001ce4
 8002a8c:	20001ce8 	.word	0x20001ce8
 8002a90:	20001d44 	.word	0x20001d44
 8002a94:	20001d4c 	.word	0x20001d4c
 8002a98:	20001d34 	.word	0x20001d34
 8002a9c:	20001c58 	.word	0x20001c58
 8002aa0:	20001c54 	.word	0x20001c54
 8002aa4:	20001d40 	.word	0x20001d40
 8002aa8:	20001d3c 	.word	0x20001d3c

08002aac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <vTaskSwitchContext+0xec>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002aba:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <vTaskSwitchContext+0xf0>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ac0:	e065      	b.n	8002b8e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8002ac2:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <vTaskSwitchContext+0xf0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <vTaskSwitchContext+0xf4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d111      	bne.n	8002b04 <vTaskSwitchContext+0x58>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10b      	bne.n	8002b04 <vTaskSwitchContext+0x58>
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	3308      	adds	r3, #8
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d105      	bne.n	8002b04 <vTaskSwitchContext+0x58>
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	330c      	adds	r3, #12
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d008      	beq.n	8002b16 <vTaskSwitchContext+0x6a>
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <vTaskSwitchContext+0xf4>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <vTaskSwitchContext+0xf4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3334      	adds	r3, #52	; 0x34
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f002 f8c6 	bl	8004ca2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <vTaskSwitchContext+0xf8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	f1c3 031f 	rsb	r3, r3, #31
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	491e      	ldr	r1, [pc, #120]	; (8002ba8 <vTaskSwitchContext+0xfc>)
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <vTaskSwitchContext+0xa8>
	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	e7fe      	b.n	8002b52 <vTaskSwitchContext+0xa6>
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <vTaskSwitchContext+0xfc>)
 8002b60:	4413      	add	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	3308      	adds	r3, #8
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d104      	bne.n	8002b84 <vTaskSwitchContext+0xd8>
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <vTaskSwitchContext+0xf4>)
 8002b8c:	6013      	str	r3, [r2, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20001d54 	.word	0x20001d54
 8002b9c:	20001d40 	.word	0x20001d40
 8002ba0:	20001c54 	.word	0x20001c54
 8002ba4:	20001d34 	.word	0x20001d34
 8002ba8:	20001c58 	.word	0x20001c58

08002bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <vTaskPlaceOnEventList+0x24>
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e7fe      	b.n	8002bce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <vTaskPlaceOnEventList+0x44>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7fe fc07 	bl	80013ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002bde:	2101      	movs	r1, #1
 8002be0:	6838      	ldr	r0, [r7, #0]
 8002be2:	f000 fa6d 	bl	80030c0 <prvAddCurrentTaskToDelayedList>
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20001c54 	.word	0x20001c54

08002bf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <vTaskPlaceOnEventListRestricted+0x26>
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e7fe      	b.n	8002c18 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <vTaskPlaceOnEventListRestricted+0x50>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3318      	adds	r3, #24
 8002c20:	4619      	mov	r1, r3
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7fe fbbf 	bl	80013a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	68b8      	ldr	r0, [r7, #8]
 8002c38:	f000 fa42 	bl	80030c0 <prvAddCurrentTaskToDelayedList>
	}
 8002c3c:	bf00      	nop
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20001c54 	.word	0x20001c54

08002c48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <xTaskRemoveFromEventList+0x2a>
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e7fe      	b.n	8002c70 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	3318      	adds	r3, #24
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe fbf0 	bl	800145c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <xTaskRemoveFromEventList+0xac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d11c      	bne.n	8002cbe <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fbe7 	bl	800145c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	2201      	movs	r2, #1
 8002c94:	409a      	lsls	r2, r3
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <xTaskRemoveFromEventList+0xb0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <xTaskRemoveFromEventList+0xb0>)
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <xTaskRemoveFromEventList+0xb4>)
 8002cae:	441a      	add	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f7fe fb75 	bl	80013a6 <vListInsertEnd>
 8002cbc:	e005      	b.n	8002cca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480e      	ldr	r0, [pc, #56]	; (8002d00 <xTaskRemoveFromEventList+0xb8>)
 8002cc6:	f7fe fb6e 	bl	80013a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <xTaskRemoveFromEventList+0xbc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d905      	bls.n	8002ce4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <xTaskRemoveFromEventList+0xc0>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e001      	b.n	8002ce8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002ce8:	697b      	ldr	r3, [r7, #20]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20001d54 	.word	0x20001d54
 8002cf8:	20001d34 	.word	0x20001d34
 8002cfc:	20001c58 	.word	0x20001c58
 8002d00:	20001cec 	.word	0x20001cec
 8002d04:	20001c54 	.word	0x20001c54
 8002d08:	20001d40 	.word	0x20001d40

08002d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <vTaskInternalSetTimeOutState+0x24>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <vTaskInternalSetTimeOutState+0x28>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	605a      	str	r2, [r3, #4]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20001d44 	.word	0x20001d44
 8002d34:	20001d30 	.word	0x20001d30

08002d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <xTaskCheckForTimeOut+0x24>
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e7fe      	b.n	8002d5a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <xTaskCheckForTimeOut+0x3e>
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e7fe      	b.n	8002d74 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002d76:	f7fe fc87 	bl	8001688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <xTaskCheckForTimeOut+0xb8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d102      	bne.n	8002d9a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	e023      	b.n	8002de2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <xTaskCheckForTimeOut+0xbc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d007      	beq.n	8002db6 <xTaskCheckForTimeOut+0x7e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d802      	bhi.n	8002db6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002db0:	2301      	movs	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	e015      	b.n	8002de2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d90b      	bls.n	8002dd8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	1ad2      	subs	r2, r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff9d 	bl	8002d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e004      	b.n	8002de2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002de2:	f7fe fc7f 	bl	80016e4 <vPortExitCritical>

	return xReturn;
 8002de6:	69fb      	ldr	r3, [r7, #28]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20001d30 	.word	0x20001d30
 8002df4:	20001d44 	.word	0x20001d44

08002df8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <vTaskMissedYield+0x14>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20001d40 	.word	0x20001d40

08002e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002e18:	f000 f854 	bl	8002ec4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <prvIdleTask+0x2c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d907      	bls.n	8002e34 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <prvIdleTask+0x30>)
 8002e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002e34:	f001 ff3b 	bl	8004cae <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002e38:	e7ee      	b.n	8002e18 <prvIdleTask+0x8>
 8002e3a:	bf00      	nop
 8002e3c:	20001c58 	.word	0x20001c58
 8002e40:	e000ed04 	.word	0xe000ed04

08002e44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	e00c      	b.n	8002e6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4a12      	ldr	r2, [pc, #72]	; (8002ea4 <prvInitialiseTaskLists+0x60>)
 8002e5c:	4413      	add	r3, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fa76 	bl	8001350 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3301      	adds	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d9ef      	bls.n	8002e50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <prvInitialiseTaskLists+0x64>)
 8002e72:	f7fe fa6d 	bl	8001350 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e76:	480d      	ldr	r0, [pc, #52]	; (8002eac <prvInitialiseTaskLists+0x68>)
 8002e78:	f7fe fa6a 	bl	8001350 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e7c:	480c      	ldr	r0, [pc, #48]	; (8002eb0 <prvInitialiseTaskLists+0x6c>)
 8002e7e:	f7fe fa67 	bl	8001350 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002e82:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <prvInitialiseTaskLists+0x70>)
 8002e84:	f7fe fa64 	bl	8001350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e88:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <prvInitialiseTaskLists+0x74>)
 8002e8a:	f7fe fa61 	bl	8001350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <prvInitialiseTaskLists+0x78>)
 8002e90:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <prvInitialiseTaskLists+0x64>)
 8002e92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <prvInitialiseTaskLists+0x7c>)
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <prvInitialiseTaskLists+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20001c58 	.word	0x20001c58
 8002ea8:	20001cbc 	.word	0x20001cbc
 8002eac:	20001cd0 	.word	0x20001cd0
 8002eb0:	20001cec 	.word	0x20001cec
 8002eb4:	20001d00 	.word	0x20001d00
 8002eb8:	20001d18 	.word	0x20001d18
 8002ebc:	20001ce4 	.word	0x20001ce4
 8002ec0:	20001ce8 	.word	0x20001ce8

08002ec4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eca:	e019      	b.n	8002f00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ecc:	f7fe fbdc 	bl	8001688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <prvCheckTasksWaitingTermination+0x4c>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fabd 	bl	800145c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <prvCheckTasksWaitingTermination+0x50>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <prvCheckTasksWaitingTermination+0x50>)
 8002eea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <prvCheckTasksWaitingTermination+0x54>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <prvCheckTasksWaitingTermination+0x54>)
 8002ef4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002ef6:	f7fe fbf5 	bl	80016e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f80e 	bl	8002f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <prvCheckTasksWaitingTermination+0x54>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e1      	bne.n	8002ecc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20001d00 	.word	0x20001d00
 8002f14:	20001d2c 	.word	0x20001d2c
 8002f18:	20001d14 	.word	0x20001d14

08002f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fd2d 	bl	8001988 <vPortFree>
			vPortFree( pxTCB );
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe fd2a 	bl	8001988 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <prvResetNextTaskUnblockTime+0x38>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <prvResetNextTaskUnblockTime+0x3c>)
 8002f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f54:	e008      	b.n	8002f68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <prvResetNextTaskUnblockTime+0x38>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <prvResetNextTaskUnblockTime+0x3c>)
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20001ce4 	.word	0x20001ce4
 8002f78:	20001d4c 	.word	0x20001d4c

08002f7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <xTaskGetSchedulerState+0x34>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	e008      	b.n	8002fa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <xTaskGetSchedulerState+0x38>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	e001      	b.n	8002fa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002fa2:	687b      	ldr	r3, [r7, #4]
	}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20001d38 	.word	0x20001d38
 8002fb4:	20001d54 	.word	0x20001d54

08002fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d06c      	beq.n	80030a8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002fce:	4b39      	ldr	r3, [pc, #228]	; (80030b4 <xTaskPriorityDisinherit+0xfc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d009      	beq.n	8002fec <xTaskPriorityDisinherit+0x34>
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	e7fe      	b.n	8002fea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <xTaskPriorityDisinherit+0x50>
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	e7fe      	b.n	8003006 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	1e5a      	subs	r2, r3, #1
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	429a      	cmp	r2, r3
 800301c:	d044      	beq.n	80030a8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	2b00      	cmp	r3, #0
 8003024:	d140      	bne.n	80030a8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3304      	adds	r3, #4
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fa16 	bl	800145c <uxListRemove>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d115      	bne.n	8003062 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	491f      	ldr	r1, [pc, #124]	; (80030b8 <xTaskPriorityDisinherit+0x100>)
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xTaskPriorityDisinherit+0xaa>
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2201      	movs	r2, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	4b18      	ldr	r3, [pc, #96]	; (80030bc <xTaskPriorityDisinherit+0x104>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4013      	ands	r3, r2
 800305e:	4a17      	ldr	r2, [pc, #92]	; (80030bc <xTaskPriorityDisinherit+0x104>)
 8003060:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	f1c3 0205 	rsb	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	2201      	movs	r2, #1
 800307c:	409a      	lsls	r2, r3
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <xTaskPriorityDisinherit+0x104>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	4a0d      	ldr	r2, [pc, #52]	; (80030bc <xTaskPriorityDisinherit+0x104>)
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <xTaskPriorityDisinherit+0x100>)
 8003096:	441a      	add	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	3304      	adds	r3, #4
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fe f981 	bl	80013a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80030a4:	2301      	movs	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80030a8:	697b      	ldr	r3, [r7, #20]
	}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20001c54 	.word	0x20001c54
 80030b8:	20001c58 	.word	0x20001c58
 80030bc:	20001d34 	.word	0x20001d34

080030c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <prvAddCurrentTaskToDelayedList+0xb0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe f9c0 	bl	800145c <uxListRemove>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80030e2:	4b24      	ldr	r3, [pc, #144]	; (8003174 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	2201      	movs	r2, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <prvAddCurrentTaskToDelayedList+0xb8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4013      	ands	r3, r2
 80030f6:	4a20      	ldr	r2, [pc, #128]	; (8003178 <prvAddCurrentTaskToDelayedList+0xb8>)
 80030f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d10a      	bne.n	8003118 <prvAddCurrentTaskToDelayedList+0x58>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3304      	adds	r3, #4
 800310e:	4619      	mov	r1, r3
 8003110:	481a      	ldr	r0, [pc, #104]	; (800317c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003112:	f7fe f948 	bl	80013a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003116:	e026      	b.n	8003166 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	429a      	cmp	r2, r3
 800312e:	d209      	bcs.n	8003144 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3304      	adds	r3, #4
 800313a:	4619      	mov	r1, r3
 800313c:	4610      	mov	r0, r2
 800313e:	f7fe f955 	bl	80013ec <vListInsert>
}
 8003142:	e010      	b.n	8003166 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7fe f94b 	bl	80013ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	429a      	cmp	r2, r3
 800315e:	d202      	bcs.n	8003166 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003160:	4a09      	ldr	r2, [pc, #36]	; (8003188 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6013      	str	r3, [r2, #0]
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20001d30 	.word	0x20001d30
 8003174:	20001c54 	.word	0x20001c54
 8003178:	20001d34 	.word	0x20001d34
 800317c:	20001d18 	.word	0x20001d18
 8003180:	20001ce8 	.word	0x20001ce8
 8003184:	20001ce4 	.word	0x20001ce4
 8003188:	20001d4c 	.word	0x20001d4c

0800318c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003196:	f000 facd 	bl	8003734 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <xTimerCreateTimerTask+0x50>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <xTimerCreateTimerTask+0x54>)
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	2303      	movs	r3, #3
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2300      	movs	r3, #0
 80031ac:	2246      	movs	r2, #70	; 0x46
 80031ae:	490d      	ldr	r1, [pc, #52]	; (80031e4 <xTimerCreateTimerTask+0x58>)
 80031b0:	480d      	ldr	r0, [pc, #52]	; (80031e8 <xTimerCreateTimerTask+0x5c>)
 80031b2:	f7ff f8c3 	bl	800233c <xTaskCreate>
 80031b6:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <xTimerCreateTimerTask+0x46>
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	e7fe      	b.n	80031d0 <xTimerCreateTimerTask+0x44>
	return xReturn;
 80031d2:	687b      	ldr	r3, [r7, #4]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20001d88 	.word	0x20001d88
 80031e0:	20001d8c 	.word	0x20001d8c
 80031e4:	08006b28 	.word	0x08006b28
 80031e8:	0800331d 	.word	0x0800331d

080031ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <xTimerGenericCommand+0x2c>
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	623b      	str	r3, [r7, #32]
 8003216:	e7fe      	b.n	8003216 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <xTimerGenericCommand+0x94>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02a      	beq.n	8003276 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b05      	cmp	r3, #5
 8003230:	dc18      	bgt.n	8003264 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003232:	f7ff fea3 	bl	8002f7c <xTaskGetSchedulerState>
 8003236:	4603      	mov	r3, r0
 8003238:	2b02      	cmp	r3, #2
 800323a:	d109      	bne.n	8003250 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <xTimerGenericCommand+0x94>)
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	f107 0114 	add.w	r1, r7, #20
 8003244:	2300      	movs	r3, #0
 8003246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003248:	f7fe fcc6 	bl	8001bd8 <xQueueGenericSend>
 800324c:	6278      	str	r0, [r7, #36]	; 0x24
 800324e:	e012      	b.n	8003276 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <xTimerGenericCommand+0x94>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	f107 0114 	add.w	r1, r7, #20
 8003258:	2300      	movs	r3, #0
 800325a:	2200      	movs	r2, #0
 800325c:	f7fe fcbc 	bl	8001bd8 <xQueueGenericSend>
 8003260:	6278      	str	r0, [r7, #36]	; 0x24
 8003262:	e008      	b.n	8003276 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <xTimerGenericCommand+0x94>)
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	f107 0114 	add.w	r1, r7, #20
 800326c:	2300      	movs	r3, #0
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	f7fe fdac 	bl	8001dcc <xQueueGenericSendFromISR>
 8003274:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003278:	4618      	mov	r0, r3
 800327a:	3728      	adds	r7, #40	; 0x28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20001d88 	.word	0x20001d88

08003284 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800328e:	4b22      	ldr	r3, [pc, #136]	; (8003318 <prvProcessExpiredTimer+0x94>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3304      	adds	r3, #4
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe f8dd 	bl	800145c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d021      	beq.n	80032f4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	18d1      	adds	r1, r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	6978      	ldr	r0, [r7, #20]
 80032be:	f000 f8cf 	bl	8003460 <prvInsertTimerInActiveList>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01e      	beq.n	8003306 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80032c8:	2300      	movs	r3, #0
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2300      	movs	r3, #0
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	2100      	movs	r1, #0
 80032d2:	6978      	ldr	r0, [r7, #20]
 80032d4:	f7ff ff8a 	bl	80031ec <xTimerGenericCommand>
 80032d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d112      	bne.n	8003306 <prvProcessExpiredTimer+0x82>
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e7fe      	b.n	80032f2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	6978      	ldr	r0, [r7, #20]
 800330c:	4798      	blx	r3
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20001d80 	.word	0x20001d80

0800331c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003324:	f107 0308 	add.w	r3, r7, #8
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f857 	bl	80033dc <prvGetNextExpireTime>
 800332e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4619      	mov	r1, r3
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f803 	bl	8003340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800333a:	f000 f8d3 	bl	80034e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800333e:	e7f1      	b.n	8003324 <prvTimerTask+0x8>

08003340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800334a:	f7ff fa3f 	bl	80027cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800334e:	f107 0308 	add.w	r3, r7, #8
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f864 	bl	8003420 <prvSampleTimeNow>
 8003358:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d130      	bne.n	80033c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <prvProcessTimerOrBlockTask+0x3c>
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	429a      	cmp	r2, r3
 800336c:	d806      	bhi.n	800337c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800336e:	f7ff fa3b 	bl	80027e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff85 	bl	8003284 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800337a:	e024      	b.n	80033c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <prvProcessTimerOrBlockTask+0x90>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <prvProcessTimerOrBlockTask+0x50>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <prvProcessTimerOrBlockTask+0x52>
 8003390:	2300      	movs	r3, #0
 8003392:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <prvProcessTimerOrBlockTask+0x94>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	4619      	mov	r1, r3
 80033a2:	f7fe ff97 	bl	80022d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80033a6:	f7ff fa1f 	bl	80027e8 <xTaskResumeAll>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <prvProcessTimerOrBlockTask+0x98>)
 80033b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	f3bf 8f6f 	isb	sy
}
 80033c0:	e001      	b.n	80033c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80033c2:	f7ff fa11 	bl	80027e8 <xTaskResumeAll>
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20001d84 	.word	0x20001d84
 80033d4:	20001d88 	.word	0x20001d88
 80033d8:	e000ed04 	.word	0xe000ed04

080033dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <prvGetNextExpireTime+0x40>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <prvGetNextExpireTime+0x16>
 80033ee:	2201      	movs	r2, #1
 80033f0:	e000      	b.n	80033f4 <prvGetNextExpireTime+0x18>
 80033f2:	2200      	movs	r2, #0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <prvGetNextExpireTime+0x40>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e001      	b.n	8003410 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003410:	68fb      	ldr	r3, [r7, #12]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	20001d80 	.word	0x20001d80

08003420 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003428:	f7ff fa7a 	bl	8002920 <xTaskGetTickCount>
 800342c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <prvSampleTimeNow+0x3c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	429a      	cmp	r2, r3
 8003436:	d205      	bcs.n	8003444 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003438:	f000 f918 	bl	800366c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e002      	b.n	800344a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800344a:	4a04      	ldr	r2, [pc, #16]	; (800345c <prvSampleTimeNow+0x3c>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003450:	68fb      	ldr	r3, [r7, #12]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20001d90 	.word	0x20001d90

08003460 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d812      	bhi.n	80034ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	1ad2      	subs	r2, r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	429a      	cmp	r2, r3
 8003492:	d302      	bcc.n	800349a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003494:	2301      	movs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e01b      	b.n	80034d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <prvInsertTimerInActiveList+0x7c>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7fd ffa1 	bl	80013ec <vListInsert>
 80034aa:	e012      	b.n	80034d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d206      	bcs.n	80034c2 <prvInsertTimerInActiveList+0x62>
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80034bc:	2301      	movs	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e007      	b.n	80034d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <prvInsertTimerInActiveList+0x80>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f7fd ff8d 	bl	80013ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 80034d2:	697b      	ldr	r3, [r7, #20]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20001d84 	.word	0x20001d84
 80034e0:	20001d80 	.word	0x20001d80

080034e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	; 0x30
 80034e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034ea:	e0ac      	b.n	8003646 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f2c0 80a9 	blt.w	8003646 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd ffa9 	bl	800145c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff87 	bl	8003420 <prvSampleTimeNow>
 8003512:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b09      	cmp	r3, #9
 8003518:	f200 8094 	bhi.w	8003644 <prvProcessReceivedCommands+0x160>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <prvProcessReceivedCommands+0x40>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	0800354d 	.word	0x0800354d
 8003528:	0800354d 	.word	0x0800354d
 800352c:	0800354d 	.word	0x0800354d
 8003530:	080035bf 	.word	0x080035bf
 8003534:	080035d3 	.word	0x080035d3
 8003538:	0800361b 	.word	0x0800361b
 800353c:	0800354d 	.word	0x0800354d
 8003540:	0800354d 	.word	0x0800354d
 8003544:	080035bf 	.word	0x080035bf
 8003548:	080035d3 	.word	0x080035d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	b2da      	uxtb	r2, r3
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	18d1      	adds	r1, r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800356c:	f7ff ff78 	bl	8003460 <prvInsertTimerInActiveList>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d067      	beq.n	8003646 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800357c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d05c      	beq.n	8003646 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	441a      	add	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2300      	movs	r3, #0
 800359a:	2100      	movs	r1, #0
 800359c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800359e:	f7ff fe25 	bl	80031ec <xTimerGenericCommand>
 80035a2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d14d      	bne.n	8003646 <prvProcessReceivedCommands+0x162>
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e7fe      	b.n	80035bc <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80035d0:	e039      	b.n	8003646 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <prvProcessReceivedCommands+0x122>
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e7fe      	b.n	8003604 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	18d1      	adds	r1, r2, r3
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003614:	f7ff ff24 	bl	8003460 <prvInsertTimerInActiveList>
					break;
 8003618:	e015      	b.n	8003646 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d103      	bne.n	8003630 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8003628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800362a:	f7fe f9ad 	bl	8001988 <vPortFree>
 800362e:	e00a      	b.n	8003646 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003642:	e000      	b.n	8003646 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8003644:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <prvProcessReceivedCommands+0x184>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f107 0108 	add.w	r1, r7, #8
 800364e:	2200      	movs	r2, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fc53 	bl	8001efc <xQueueReceive>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f af47 	bne.w	80034ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800365e:	bf00      	nop
 8003660:	3728      	adds	r7, #40	; 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20001d88 	.word	0x20001d88

0800366c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003672:	e047      	b.n	8003704 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <prvSwitchTimerLists+0xc0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800367e:	4b2b      	ldr	r3, [pc, #172]	; (800372c <prvSwitchTimerLists+0xc0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	3304      	adds	r3, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fee5 	bl	800145c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	6938      	ldr	r0, [r7, #16]
 8003698:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d02d      	beq.n	8003704 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d90e      	bls.n	80036d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <prvSwitchTimerLists+0xc0>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7fd fe8b 	bl	80013ec <vListInsert>
 80036d6:	e015      	b.n	8003704 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036d8:	2300      	movs	r3, #0
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	2300      	movs	r3, #0
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	2100      	movs	r1, #0
 80036e2:	6938      	ldr	r0, [r7, #16]
 80036e4:	f7ff fd82 	bl	80031ec <xTimerGenericCommand>
 80036e8:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <prvSwitchTimerLists+0x98>
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	e7fe      	b.n	8003702 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <prvSwitchTimerLists+0xc0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1b2      	bne.n	8003674 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <prvSwitchTimerLists+0xc0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <prvSwitchTimerLists+0xc4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a04      	ldr	r2, [pc, #16]	; (800372c <prvSwitchTimerLists+0xc0>)
 800371a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <prvSwitchTimerLists+0xc4>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6013      	str	r3, [r2, #0]
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20001d80 	.word	0x20001d80
 8003730:	20001d84 	.word	0x20001d84

08003734 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003738:	f7fd ffa6 	bl	8001688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <prvCheckForValidListAndQueue+0x40>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d113      	bne.n	800376c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8003744:	480c      	ldr	r0, [pc, #48]	; (8003778 <prvCheckForValidListAndQueue+0x44>)
 8003746:	f7fd fe03 	bl	8001350 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800374a:	480c      	ldr	r0, [pc, #48]	; (800377c <prvCheckForValidListAndQueue+0x48>)
 800374c:	f7fd fe00 	bl	8001350 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <prvCheckForValidListAndQueue+0x4c>)
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <prvCheckForValidListAndQueue+0x44>)
 8003754:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <prvCheckForValidListAndQueue+0x50>)
 8003758:	4a08      	ldr	r2, [pc, #32]	; (800377c <prvCheckForValidListAndQueue+0x48>)
 800375a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800375c:	2200      	movs	r2, #0
 800375e:	210c      	movs	r1, #12
 8003760:	2005      	movs	r0, #5
 8003762:	f7fe f9e5 	bl	8001b30 <xQueueGenericCreate>
 8003766:	4602      	mov	r2, r0
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <prvCheckForValidListAndQueue+0x40>)
 800376a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800376c:	f7fd ffba 	bl	80016e4 <vPortExitCritical>
}
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20001d88 	.word	0x20001d88
 8003778:	20001d58 	.word	0x20001d58
 800377c:	20001d6c 	.word	0x20001d6c
 8003780:	20001d80 	.word	0x20001d80
 8003784:	20001d84 	.word	0x20001d84

08003788 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	230f      	movs	r3, #15
 800379a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	78db      	ldrb	r3, [r3, #3]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d03a      	beq.n	800381a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <NVIC_Init+0xbc>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	0a1b      	lsrs	r3, r3, #8
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f1c3 0304 	rsb	r3, r3, #4
 80037b8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	785b      	ldrb	r3, [r3, #1]
 80037c8:	461a      	mov	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	789b      	ldrb	r3, [r3, #2]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4013      	ands	r3, r2
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <NVIC_Init+0xc0>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	6979      	ldr	r1, [r7, #20]
 80037f0:	b2c9      	uxtb	r1, r1
 80037f2:	4413      	add	r3, r2
 80037f4:	460a      	mov	r2, r1
 80037f6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80037fa:	4a13      	ldr	r2, [pc, #76]	; (8003848 <NVIC_Init+0xc0>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2101      	movs	r1, #1
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003814:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003818:	e00f      	b.n	800383a <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800381a:	490b      	ldr	r1, [pc, #44]	; (8003848 <NVIC_Init+0xc0>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	b2db      	uxtb	r3, r3
 8003824:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2201      	movs	r2, #1
 8003830:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003832:	f100 0320 	add.w	r3, r0, #32
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00
 8003848:	e000e100 	.word	0xe000e100

0800384c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	78db      	ldrb	r3, [r3, #3]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	78db      	ldrb	r3, [r3, #3]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	789b      	ldrb	r3, [r3, #2]
 8003888:	461a      	mov	r2, r3
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4313      	orrs	r3, r2
 800388e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d044      	beq.n	8003924 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e038      	b.n	8003918 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80038a6:	2201      	movs	r2, #1
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d126      	bne.n	8003912 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80038ca:	220f      	movs	r2, #15
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4013      	ands	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	78db      	ldrb	r3, [r3, #3]
 80038f0:	2b28      	cmp	r3, #40	; 0x28
 80038f2:	d105      	bne.n	8003900 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80038f4:	2201      	movs	r2, #1
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	409a      	lsls	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	615a      	str	r2, [r3, #20]
 80038fe:	e008      	b.n	8003912 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	78db      	ldrb	r3, [r3, #3]
 8003904:	2b48      	cmp	r3, #72	; 0x48
 8003906:	d104      	bne.n	8003912 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8003908:	2201      	movs	r2, #1
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	409a      	lsls	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	3301      	adds	r3, #1
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b07      	cmp	r3, #7
 800391c:	d9c3      	bls.n	80038a6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	2bff      	cmp	r3, #255	; 0xff
 800392a:	d946      	bls.n	80039ba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003932:	2300      	movs	r3, #0
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e03a      	b.n	80039ae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	3308      	adds	r3, #8
 800393c:	2201      	movs	r2, #1
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	429a      	cmp	r2, r3
 8003956:	d127      	bne.n	80039a8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800395e:	220f      	movs	r2, #15
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	43db      	mvns	r3, r3
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4013      	ands	r3, r2
 8003970:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	78db      	ldrb	r3, [r3, #3]
 8003984:	2b28      	cmp	r3, #40	; 0x28
 8003986:	d105      	bne.n	8003994 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	3308      	adds	r3, #8
 800398c:	2201      	movs	r2, #1
 800398e:	409a      	lsls	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	78db      	ldrb	r3, [r3, #3]
 8003998:	2b48      	cmp	r3, #72	; 0x48
 800399a:	d105      	bne.n	80039a8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	3308      	adds	r3, #8
 80039a0:	2201      	movs	r2, #1
 80039a2:	409a      	lsls	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	3301      	adds	r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b07      	cmp	r3, #7
 80039b2:	d9c1      	bls.n	8003938 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	605a      	str	r2, [r3, #4]
  }
}
 80039ba:	bf00      	nop
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	; 0x28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80039d2:	2300      	movs	r3, #0
 80039d4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80039d6:	2304      	movs	r3, #4
 80039d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80039da:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <I2C_Init+0x174>)
 80039dc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	889b      	ldrh	r3, [r3, #4]
 80039e2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 80039e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80039ec:	f107 0308 	add.w	r3, r7, #8
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f961 	bl	8003cb8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4a4f      	ldr	r2, [pc, #316]	; (8003b3c <I2C_Init+0x178>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0c9b      	lsrs	r3, r3, #18
 8003a04:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8003a06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a12:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a44      	ldr	r2, [pc, #272]	; (8003b40 <I2C_Init+0x17c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d815      	bhi.n	8003a5e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8003a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d801      	bhi.n	8003a4a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8003a46:	2304      	movs	r3, #4
 8003a48:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8003a4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a54:	3301      	adds	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	841a      	strh	r2, [r3, #32]
 8003a5c:	e040      	b.n	8003ae0 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	88db      	ldrh	r3, [r3, #6]
 8003a62:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d109      	bne.n	8003a7e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003a7c:	e00e      	b.n	8003a9c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009a      	lsls	r2, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8003a94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a9a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8003a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8003aa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8003aae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003abe:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003ac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ac2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <I2C_Init+0x180>)
 8003acc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ad0:	1192      	asrs	r2, r2, #6
 8003ad2:	17db      	asrs	r3, r3, #31
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ae4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8003afc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003afe:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8003b02:	f023 0302 	bic.w	r3, r3, #2
 8003b06:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	889a      	ldrh	r2, [r3, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	895b      	ldrh	r3, [r3, #10]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b16:	4313      	orrs	r3, r2
 8003b18:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b1e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	899a      	ldrh	r2, [r3, #12]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	891b      	ldrh	r3, [r3, #8]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	811a      	strh	r2, [r3, #8]
}
 8003b30:	bf00      	nop
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	007a1200 	.word	0x007a1200
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	000186a0 	.word	0x000186a0
 8003b44:	10624dd3 	.word	0x10624dd3

08003b48 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8003b6a:	e007      	b.n	8003b7c <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	801a      	strh	r2, [r3, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8003ba8:	e007      	b.n	8003bba <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	801a      	strh	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8003be6:	e007      	b.n	8003bf8 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	801a      	strh	r2, [r3, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	821a      	strh	r2, [r3, #16]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8003c30:	78bb      	ldrb	r3, [r7, #2]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	70fb      	strb	r3, [r7, #3]
 8003c3e:	e003      	b.n	8003c48 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	821a      	strh	r2, [r3, #16]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b087      	sub	sp, #28
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8003c70:	2300      	movs	r3, #0
 8003c72:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8a9b      	ldrh	r3, [r3, #20]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8b1b      	ldrh	r3, [r3, #24]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c94:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d102      	bne.n	8003ca8 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
 8003ca6:	e001      	b.n	8003cac <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8003cd4:	4b4a      	ldr	r3, [pc, #296]	; (8003e00 <RCC_GetClocksFreq+0x148>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d007      	beq.n	8003cf4 <RCC_GetClocksFreq+0x3c>
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d009      	beq.n	8003cfc <RCC_GetClocksFreq+0x44>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d12f      	bne.n	8003d4c <RCC_GetClocksFreq+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a45      	ldr	r2, [pc, #276]	; (8003e04 <RCC_GetClocksFreq+0x14c>)
 8003cf0:	601a      	str	r2, [r3, #0]
      break;
 8003cf2:	e02f      	b.n	8003d54 <RCC_GetClocksFreq+0x9c>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a43      	ldr	r2, [pc, #268]	; (8003e04 <RCC_GetClocksFreq+0x14c>)
 8003cf8:	601a      	str	r2, [r3, #0]
      break;
 8003cfa:	e02b      	b.n	8003d54 <RCC_GetClocksFreq+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8003cfc:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <RCC_GetClocksFreq+0x148>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d04:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8003d06:	4b3e      	ldr	r3, [pc, #248]	; (8003e00 <RCC_GetClocksFreq+0x148>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0e:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	0c9b      	lsrs	r3, r3, #18
 8003d14:	3302      	adds	r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <RCC_GetClocksFreq+0x74>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <RCC_GetClocksFreq+0x150>)
 8003d22:	fb02 f203 	mul.w	r2, r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8003d2a:	e013      	b.n	8003d54 <RCC_GetClocksFreq+0x9c>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8003d2c:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <RCC_GetClocksFreq+0x148>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	3301      	adds	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8003d38:	4a32      	ldr	r2, [pc, #200]	; (8003e04 <RCC_GetClocksFreq+0x14c>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	fb02 f203 	mul.w	r2, r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
      break;
 8003d4a:	e003      	b.n	8003d54 <RCC_GetClocksFreq+0x9c>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a2d      	ldr	r2, [pc, #180]	; (8003e04 <RCC_GetClocksFreq+0x14c>)
 8003d50:	601a      	str	r2, [r3, #0]
      break;
 8003d52:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8003d54:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <RCC_GetClocksFreq+0x148>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d5c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003d64:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <RCC_GetClocksFreq+0x154>)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	40da      	lsrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8003d7c:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <RCC_GetClocksFreq+0x148>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d84:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <RCC_GetClocksFreq+0x154>)
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	40da      	lsrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <RCC_GetClocksFreq+0x148>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003dac:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	0adb      	lsrs	r3, r3, #11
 8003db2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003db4:	4a15      	ldr	r2, [pc, #84]	; (8003e0c <RCC_GetClocksFreq+0x154>)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	40da      	lsrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <RCC_GetClocksFreq+0x148>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dd4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	0b9b      	lsrs	r3, r3, #14
 8003dda:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <RCC_GetClocksFreq+0x158>)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4413      	add	r3, r2
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	fbb2 f2f3 	udiv	r2, r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	611a      	str	r2, [r3, #16]
}
 8003df6:	bf00      	nop
 8003df8:	3724      	adds	r7, #36	; 0x24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40021000 	.word	0x40021000
 8003e04:	007a1200 	.word	0x007a1200
 8003e08:	003d0900 	.word	0x003d0900
 8003e0c:	20000008 	.word	0x20000008
 8003e10:	20000018 	.word	0x20000018

08003e14 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003e26:	4909      	ldr	r1, [pc, #36]	; (8003e4c <RCC_APB2PeriphClockCmd+0x38>)
 8003e28:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <RCC_APB2PeriphClockCmd+0x38>)
 8003e2a:	699a      	ldr	r2, [r3, #24]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8003e32:	e006      	b.n	8003e42 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003e34:	4905      	ldr	r1, [pc, #20]	; (8003e4c <RCC_APB2PeriphClockCmd+0x38>)
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <RCC_APB2PeriphClockCmd+0x38>)
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	4013      	ands	r3, r2
 8003e40:	618b      	str	r3, [r1, #24]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40021000 	.word	0x40021000

08003e50 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003e62:	4909      	ldr	r1, [pc, #36]	; (8003e88 <RCC_APB1PeriphClockCmd+0x38>)
 8003e64:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <RCC_APB1PeriphClockCmd+0x38>)
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8003e6e:	e006      	b.n	8003e7e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003e70:	4905      	ldr	r1, [pc, #20]	; (8003e88 <RCC_APB1PeriphClockCmd+0x38>)
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <RCC_APB1PeriphClockCmd+0x38>)
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61cb      	str	r3, [r1, #28]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	40021000 	.word	0x40021000

08003e8c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a2e      	ldr	r2, [pc, #184]	; (8003f5c <TIM_TimeBaseInit+0xd0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <TIM_TimeBaseInit+0x44>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a2d      	ldr	r2, [pc, #180]	; (8003f60 <TIM_TimeBaseInit+0xd4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00f      	beq.n	8003ed0 <TIM_TimeBaseInit+0x44>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d00b      	beq.n	8003ed0 <TIM_TimeBaseInit+0x44>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <TIM_TimeBaseInit+0xd8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_TimeBaseInit+0x44>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <TIM_TimeBaseInit+0xdc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <TIM_TimeBaseInit+0xe0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d108      	bne.n	8003ee2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8003ed0:	89fb      	ldrh	r3, [r7, #14]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	885a      	ldrh	r2, [r3, #2]
 8003edc:	89fb      	ldrh	r3, [r7, #14]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <TIM_TimeBaseInit+0xe4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00c      	beq.n	8003f04 <TIM_TimeBaseInit+0x78>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <TIM_TimeBaseInit+0xe8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d008      	beq.n	8003f04 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8003ef2:	89fb      	ldrh	r3, [r7, #14]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	88da      	ldrh	r2, [r3, #6]
 8003efe:	89fb      	ldrh	r3, [r7, #14]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	89fa      	ldrh	r2, [r7, #14]
 8003f08:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	889a      	ldrh	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	881a      	ldrh	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a0f      	ldr	r2, [pc, #60]	; (8003f5c <TIM_TimeBaseInit+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_TimeBaseInit+0xb6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <TIM_TimeBaseInit+0xd4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_TimeBaseInit+0xb6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <TIM_TimeBaseInit+0xec>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_TimeBaseInit+0xb6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a11      	ldr	r2, [pc, #68]	; (8003f7c <TIM_TimeBaseInit+0xf0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_TimeBaseInit+0xb6>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <TIM_TimeBaseInit+0xf4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d104      	bne.n	8003f4c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	7a1b      	ldrb	r3, [r3, #8]
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	829a      	strh	r2, [r3, #20]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40013400 	.word	0x40013400
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40001000 	.word	0x40001000
 8003f74:	40001400 	.word	0x40001400
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800

08003f84 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	817b      	strh	r3, [r7, #10]
 8003f92:	2300      	movs	r3, #0
 8003f94:	81fb      	strh	r3, [r7, #14]
 8003f96:	2300      	movs	r3, #0
 8003f98:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8c1b      	ldrh	r3, [r3, #32]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8c1b      	ldrh	r3, [r3, #32]
 8003fae:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	889b      	ldrh	r3, [r3, #4]
 8003fb4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8b1b      	ldrh	r3, [r3, #24]
 8003fba:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8003fbc:	897b      	ldrh	r3, [r7, #10]
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8003fc4:	897b      	ldrh	r3, [r7, #10]
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	881a      	ldrh	r2, [r3, #0]
 8003fd0:	897b      	ldrh	r3, [r7, #10]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8003fd6:	89fb      	ldrh	r3, [r7, #14]
 8003fd8:	f023 0302 	bic.w	r3, r3, #2
 8003fdc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	891a      	ldrh	r2, [r3, #8]
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	885a      	ldrh	r2, [r3, #2]
 8003fec:	89fb      	ldrh	r3, [r7, #14]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a24      	ldr	r2, [pc, #144]	; (8004088 <TIM_OC1Init+0x104>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00f      	beq.n	800401a <TIM_OC1Init+0x96>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a23      	ldr	r2, [pc, #140]	; (800408c <TIM_OC1Init+0x108>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00b      	beq.n	800401a <TIM_OC1Init+0x96>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <TIM_OC1Init+0x10c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <TIM_OC1Init+0x96>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a21      	ldr	r2, [pc, #132]	; (8004094 <TIM_OC1Init+0x110>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a20      	ldr	r2, [pc, #128]	; (8004098 <TIM_OC1Init+0x114>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d123      	bne.n	8004062 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800401a:	89fb      	ldrh	r3, [r7, #14]
 800401c:	f023 0308 	bic.w	r3, r3, #8
 8004020:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	895a      	ldrh	r2, [r3, #10]
 8004026:	89fb      	ldrh	r3, [r7, #14]
 8004028:	4313      	orrs	r3, r2
 800402a:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 800402c:	89fb      	ldrh	r3, [r7, #14]
 800402e:	f023 0304 	bic.w	r3, r3, #4
 8004032:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	889a      	ldrh	r2, [r3, #4]
 8004038:	89fb      	ldrh	r3, [r7, #14]
 800403a:	4313      	orrs	r3, r2
 800403c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 800403e:	89bb      	ldrh	r3, [r7, #12]
 8004040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004044:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8004046:	89bb      	ldrh	r3, [r7, #12]
 8004048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800404c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	899a      	ldrh	r2, [r3, #12]
 8004052:	89bb      	ldrh	r3, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	89da      	ldrh	r2, [r3, #14]
 800405c:	89bb      	ldrh	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	89ba      	ldrh	r2, [r7, #12]
 8004066:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	897a      	ldrh	r2, [r7, #10]
 800406c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	88da      	ldrh	r2, [r3, #6]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	89fa      	ldrh	r2, [r7, #14]
 800407a:	841a      	strh	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800

0800409c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	2300      	movs	r3, #0
 80040ac:	81fb      	strh	r3, [r7, #14]
 80040ae:	2300      	movs	r3, #0
 80040b0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8c1b      	ldrh	r3, [r3, #32]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f023 0310 	bic.w	r3, r3, #16
 80040bc:	b29a      	uxth	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8c1b      	ldrh	r3, [r3, #32]
 80040c6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	889b      	ldrh	r3, [r3, #4]
 80040cc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8b1b      	ldrh	r3, [r3, #24]
 80040d2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 80040d4:	897b      	ldrh	r3, [r7, #10]
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040da:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80040dc:	897b      	ldrh	r3, [r7, #10]
 80040de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e2:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	897b      	ldrh	r3, [r7, #10]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80040f2:	89fb      	ldrh	r3, [r7, #14]
 80040f4:	f023 0320 	bic.w	r3, r3, #32
 80040f8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	891b      	ldrh	r3, [r3, #8]
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	b29a      	uxth	r2, r3
 8004102:	89fb      	ldrh	r3, [r7, #14]
 8004104:	4313      	orrs	r3, r2
 8004106:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	885b      	ldrh	r3, [r3, #2]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	b29a      	uxth	r2, r3
 8004110:	89fb      	ldrh	r3, [r7, #14]
 8004112:	4313      	orrs	r3, r2
 8004114:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a22      	ldr	r2, [pc, #136]	; (80041a4 <TIM_OC2Init+0x108>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d003      	beq.n	8004126 <TIM_OC2Init+0x8a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a21      	ldr	r2, [pc, #132]	; (80041a8 <TIM_OC2Init+0x10c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d12b      	bne.n	800417e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8004126:	89fb      	ldrh	r3, [r7, #14]
 8004128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	895b      	ldrh	r3, [r3, #10]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	b29a      	uxth	r2, r3
 8004136:	89fb      	ldrh	r3, [r7, #14]
 8004138:	4313      	orrs	r3, r2
 800413a:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 800413c:	89fb      	ldrh	r3, [r7, #14]
 800413e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004142:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	889b      	ldrh	r3, [r3, #4]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	b29a      	uxth	r2, r3
 800414c:	89fb      	ldrh	r3, [r7, #14]
 800414e:	4313      	orrs	r3, r2
 8004150:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8004152:	89bb      	ldrh	r3, [r7, #12]
 8004154:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004158:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 800415a:	89bb      	ldrh	r3, [r7, #12]
 800415c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004160:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	899b      	ldrh	r3, [r3, #12]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	b29a      	uxth	r2, r3
 800416a:	89bb      	ldrh	r3, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	89db      	ldrh	r3, [r3, #14]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	b29a      	uxth	r2, r3
 8004178:	89bb      	ldrh	r3, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	89ba      	ldrh	r2, [r7, #12]
 8004182:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	897a      	ldrh	r2, [r7, #10]
 8004188:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	88da      	ldrh	r2, [r3, #6]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	89fa      	ldrh	r2, [r7, #14]
 8004196:	841a      	strh	r2, [r3, #32]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40013400 	.word	0x40013400

080041ac <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	817b      	strh	r3, [r7, #10]
 80041ba:	2300      	movs	r3, #0
 80041bc:	81fb      	strh	r3, [r7, #14]
 80041be:	2300      	movs	r3, #0
 80041c0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8c1b      	ldrh	r3, [r3, #32]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8c1b      	ldrh	r3, [r3, #32]
 80041d6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	889b      	ldrh	r3, [r3, #4]
 80041dc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8b9b      	ldrh	r3, [r3, #28]
 80041e2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80041e4:	897b      	ldrh	r3, [r7, #10]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 80041ec:	897b      	ldrh	r3, [r7, #10]
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	897b      	ldrh	r3, [r7, #10]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80041fe:	89fb      	ldrh	r3, [r7, #14]
 8004200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004204:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	891b      	ldrh	r3, [r3, #8]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	b29a      	uxth	r2, r3
 800420e:	89fb      	ldrh	r3, [r7, #14]
 8004210:	4313      	orrs	r3, r2
 8004212:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	885b      	ldrh	r3, [r3, #2]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	b29a      	uxth	r2, r3
 800421c:	89fb      	ldrh	r3, [r7, #14]
 800421e:	4313      	orrs	r3, r2
 8004220:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <TIM_OC3Init+0x104>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_OC3Init+0x86>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <TIM_OC3Init+0x108>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d12b      	bne.n	800428a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8004232:	89fb      	ldrh	r3, [r7, #14]
 8004234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004238:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	895b      	ldrh	r3, [r3, #10]
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	b29a      	uxth	r2, r3
 8004242:	89fb      	ldrh	r3, [r7, #14]
 8004244:	4313      	orrs	r3, r2
 8004246:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8004248:	89fb      	ldrh	r3, [r7, #14]
 800424a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800424e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	889b      	ldrh	r3, [r3, #4]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	b29a      	uxth	r2, r3
 8004258:	89fb      	ldrh	r3, [r7, #14]
 800425a:	4313      	orrs	r3, r2
 800425c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 800425e:	89bb      	ldrh	r3, [r7, #12]
 8004260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004264:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8004266:	89bb      	ldrh	r3, [r7, #12]
 8004268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800426c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	899b      	ldrh	r3, [r3, #12]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	b29a      	uxth	r2, r3
 8004276:	89bb      	ldrh	r3, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	89db      	ldrh	r3, [r3, #14]
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	b29a      	uxth	r2, r3
 8004284:	89bb      	ldrh	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	89ba      	ldrh	r2, [r7, #12]
 800428e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	897a      	ldrh	r2, [r7, #10]
 8004294:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	88da      	ldrh	r2, [r3, #6]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	89fa      	ldrh	r2, [r7, #14]
 80042a2:	841a      	strh	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40013400 	.word	0x40013400

080042b8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	81bb      	strh	r3, [r7, #12]
 80042c6:	2300      	movs	r3, #0
 80042c8:	817b      	strh	r3, [r7, #10]
 80042ca:	2300      	movs	r3, #0
 80042cc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8c1b      	ldrh	r3, [r3, #32]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8c1b      	ldrh	r3, [r3, #32]
 80042e2:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	889b      	ldrh	r3, [r3, #4]
 80042e8:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8b9b      	ldrh	r3, [r3, #28]
 80042ee:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 80042f0:	89bb      	ldrh	r3, [r7, #12]
 80042f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f6:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80042f8:	89bb      	ldrh	r3, [r7, #12]
 80042fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fe:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	b29a      	uxth	r2, r3
 8004308:	89bb      	ldrh	r3, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800430e:	897b      	ldrh	r3, [r7, #10]
 8004310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004314:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	891b      	ldrh	r3, [r3, #8]
 800431a:	031b      	lsls	r3, r3, #12
 800431c:	b29a      	uxth	r2, r3
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	4313      	orrs	r3, r2
 8004322:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	885b      	ldrh	r3, [r3, #2]
 8004328:	031b      	lsls	r3, r3, #12
 800432a:	b29a      	uxth	r2, r3
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	4313      	orrs	r3, r2
 8004330:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a12      	ldr	r2, [pc, #72]	; (8004380 <TIM_OC4Init+0xc8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_OC4Init+0x8a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a11      	ldr	r2, [pc, #68]	; (8004384 <TIM_OC4Init+0xcc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10a      	bne.n	8004358 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8004342:	89fb      	ldrh	r3, [r7, #14]
 8004344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004348:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	899b      	ldrh	r3, [r3, #12]
 800434e:	019b      	lsls	r3, r3, #6
 8004350:	b29a      	uxth	r2, r3
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	4313      	orrs	r3, r2
 8004356:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	89fa      	ldrh	r2, [r7, #14]
 800435c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	89ba      	ldrh	r2, [r7, #12]
 8004362:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	88da      	ldrh	r2, [r3, #6]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	897a      	ldrh	r2, [r7, #10]
 8004372:	841a      	strh	r2, [r3, #32]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40013400 	.word	0x40013400

08004388 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80043aa:	e007      	b.n	80043bc <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	801a      	strh	r2, [r3, #0]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	807b      	strh	r3, [r7, #2]
 80043d2:	4613      	mov	r3, r2
 80043d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80043d6:	787b      	ldrb	r3, [r7, #1]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	899b      	ldrh	r3, [r3, #12]
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	887b      	ldrh	r3, [r7, #2]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80043ec:	e009      	b.n	8004402 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	899b      	ldrh	r3, [r3, #12]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	887b      	ldrh	r3, [r7, #2]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4013      	ands	r3, r2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	819a      	strh	r2, [r3, #12]
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004428:	b29a      	uxth	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 800442e:	e007      	b.n	8004440 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	801a      	strh	r2, [r3, #0]
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	460b      	mov	r3, r1
 8004454:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8b1b      	ldrh	r3, [r3, #24]
 800445e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8004460:	89fb      	ldrh	r3, [r7, #14]
 8004462:	f023 0308 	bic.w	r3, r3, #8
 8004466:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8004468:	89fa      	ldrh	r2, [r7, #14]
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	4313      	orrs	r3, r2
 800446e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	89fa      	ldrh	r2, [r7, #14]
 8004474:	831a      	strh	r2, [r3, #24]
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8b1b      	ldrh	r3, [r3, #24]
 8004494:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8004496:	89fb      	ldrh	r3, [r7, #14]
 8004498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800449c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800449e:	887b      	ldrh	r3, [r7, #2]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	89fb      	ldrh	r3, [r7, #14]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	89fa      	ldrh	r2, [r7, #14]
 80044ae:	831a      	strh	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b085      	sub	sp, #20
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	460b      	mov	r3, r1
 80044c4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8b9b      	ldrh	r3, [r3, #28]
 80044ce:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 80044d0:	89fb      	ldrh	r3, [r7, #14]
 80044d2:	f023 0308 	bic.w	r3, r3, #8
 80044d6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80044d8:	89fa      	ldrh	r2, [r7, #14]
 80044da:	887b      	ldrh	r3, [r7, #2]
 80044dc:	4313      	orrs	r3, r2
 80044de:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	89fa      	ldrh	r2, [r7, #14]
 80044e4:	839a      	strh	r2, [r3, #28]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8b9b      	ldrh	r3, [r3, #28]
 8004504:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8004506:	89fb      	ldrh	r3, [r7, #14]
 8004508:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800450c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800450e:	887b      	ldrh	r3, [r7, #2]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	b29a      	uxth	r2, r3
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	4313      	orrs	r3, r2
 8004518:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	89fa      	ldrh	r2, [r7, #14]
 800451e:	839a      	strh	r2, [r3, #28]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	887a      	ldrh	r2, [r7, #2]
 800453a:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	887a      	ldrh	r2, [r7, #2]
 8004556:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr

08004562 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	887a      	ldrh	r2, [r7, #2]
 8004572:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	460b      	mov	r3, r1
 8004588:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80045a8:	2300      	movs	r3, #0
 80045aa:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	81bb      	strh	r3, [r7, #12]
 80045b0:	2300      	movs	r3, #0
 80045b2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8a1b      	ldrh	r3, [r3, #16]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	887b      	ldrh	r3, [r7, #2]
 80045bc:	4013      	ands	r3, r2
 80045be:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	899b      	ldrh	r3, [r3, #12]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	887b      	ldrh	r3, [r7, #2]
 80045c8:	4013      	ands	r3, r2
 80045ca:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80045cc:	89bb      	ldrh	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <TIM_GetITStatus+0x42>
 80045d2:	897b      	ldrh	r3, [r7, #10]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	e001      	b.n	80045e2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	821a      	strh	r2, [r3, #16]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
	...

08004610 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08c      	sub	sp, #48	; 0x30
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800461a:	2300      	movs	r3, #0
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461e:	2300      	movs	r3, #0
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8004622:	2300      	movs	r3, #0
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8004626:	2300      	movs	r3, #0
 8004628:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8a1b      	ldrh	r3, [r3, #16]
 8004636:	b29b      	uxth	r3, r3
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800463a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8004640:	4013      	ands	r3, r2
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	88db      	ldrh	r3, [r3, #6]
 8004648:	461a      	mov	r2, r3
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	4313      	orrs	r3, r2
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	899b      	ldrh	r3, [r3, #12]
 800465c:	b29b      	uxth	r3, r3
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8004660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004662:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8004666:	4013      	ands	r3, r2
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	889a      	ldrh	r2, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	891b      	ldrh	r3, [r3, #8]
 8004672:	4313      	orrs	r3, r2
 8004674:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800467a:	4313      	orrs	r3, r2
 800467c:	b29b      	uxth	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	4313      	orrs	r3, r2
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	b29a      	uxth	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8a9b      	ldrh	r3, [r3, #20]
 8004692:	b29b      	uxth	r3, r3
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8004696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004698:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800469c:	4013      	ands	r3, r2
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	899b      	ldrh	r3, [r3, #12]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	4313      	orrs	r3, r2
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80046b4:	f107 0308 	add.w	r3, r7, #8
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fafd 	bl	8003cb8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4a2e      	ldr	r2, [pc, #184]	; (800477c <USART_Init+0x16c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d102      	bne.n	80046cc <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ca:	e001      	b.n	80046d0 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	899b      	ldrh	r3, [r3, #12]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	b21b      	sxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	da0c      	bge.n	80046f6 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80046dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009a      	lsls	r2, r3, #2
 80046e6:	441a      	add	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	e00b      	b.n	800470e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80046f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009a      	lsls	r2, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <USART_Init+0x170>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	2264      	movs	r2, #100	; 0x64
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	899b      	ldrh	r3, [r3, #12]
 8004730:	b29b      	uxth	r3, r3
 8004732:	b21b      	sxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	da0c      	bge.n	8004752 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	3332      	adds	r3, #50	; 0x32
 800473e:	4a10      	ldr	r2, [pc, #64]	; (8004780 <USART_Init+0x170>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800474c:	4313      	orrs	r3, r2
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004750:	e00b      	b.n	800476a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	3332      	adds	r3, #50	; 0x32
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <USART_Init+0x170>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004766:	4313      	orrs	r3, r2
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	811a      	strh	r2, [r3, #8]
}
 8004772:	bf00      	nop
 8004774:	3730      	adds	r7, #48	; 0x30
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40013800 	.word	0x40013800
 8004780:	51eb851f 	.word	0x51eb851f

08004784 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	899b      	ldrh	r3, [r3, #12]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80047a6:	e007      	b.n	80047b8 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	899b      	ldrh	r3, [r3, #12]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	819a      	strh	r2, [r3, #12]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80047ce:	887b      	ldrh	r3, [r7, #2]
 80047d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	809a      	strh	r2, [r3, #4]
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	4013      	ands	r3, r2
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
 8004808:	e001      	b.n	800480e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
	...

0800481c <debug_led_init>:
 * initilizes the debug led gpio.
 *
 * @return none.
 **************************************************************************/
void debug_led_init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable GPIO clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8004822:	2101      	movs	r1, #1
 8004824:	2001      	movs	r0, #1
 8004826:	f7ff faf5 	bl	8003e14 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800482a:	2101      	movs	r1, #1
 800482c:	2010      	movs	r0, #16
 800482e:	f7ff faf1 	bl	8003e14 <RCC_APB2PeriphClockCmd>

	// Configure pin as output push-pull (LED)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8004832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004836:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004838:	2310      	movs	r3, #16
 800483a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800483c:	2303      	movs	r3, #3
 800483e:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004840:	1d3b      	adds	r3, r7, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4803      	ldr	r0, [pc, #12]	; (8004854 <debug_led_init+0x38>)
 8004846:	f7ff f801 	bl	800384c <GPIO_Init>
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40011000 	.word	0x40011000

08004858 <mpu6050_init>:
 * 0x10: 1000 degrees/second, error: 26
 * 0x18: 2000 degrees/second, error: 13
 *
 **************************************************************************/
int8_t mpu6050_init(uint8_t gyroFullScaleRange, uint8_t accelFullScaleRange)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	460a      	mov	r2, r1
 8004862:	71fb      	strb	r3, [r7, #7]
 8004864:	4613      	mov	r3, r2
 8004866:	71bb      	strb	r3, [r7, #6]
	int8_t returnCode=0;
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]

	/* turn off sleep mode */
	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x6B, 0);
 800486c:	2200      	movs	r2, #0
 800486e:	216b      	movs	r1, #107	; 0x6b
 8004870:	2068      	movs	r0, #104	; 0x68
 8004872:	f000 f917 	bl	8004aa4 <i2c_slave_mem_write>
 8004876:	4603      	mov	r3, r0
 8004878:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 800487a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d102      	bne.n	800488a <mpu6050_init+0x32>
		return -1;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295
 8004888:	e020      	b.n	80048cc <mpu6050_init+0x74>

	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1B, gyroFullScaleRange);
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	461a      	mov	r2, r3
 800488e:	211b      	movs	r1, #27
 8004890:	2068      	movs	r0, #104	; 0x68
 8004892:	f000 f907 	bl	8004aa4 <i2c_slave_mem_write>
 8004896:	4603      	mov	r3, r0
 8004898:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 800489a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d102      	bne.n	80048aa <mpu6050_init+0x52>
		return -1;
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	e010      	b.n	80048cc <mpu6050_init+0x74>

	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1C, accelFullScaleRange);
 80048aa:	79bb      	ldrb	r3, [r7, #6]
 80048ac:	461a      	mov	r2, r3
 80048ae:	211c      	movs	r1, #28
 80048b0:	2068      	movs	r0, #104	; 0x68
 80048b2:	f000 f8f7 	bl	8004aa4 <i2c_slave_mem_write>
 80048b6:	4603      	mov	r3, r0
 80048b8:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 80048ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d102      	bne.n	80048ca <mpu6050_init+0x72>
		return -1;
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	e000      	b.n	80048cc <mpu6050_init+0x74>

	return 0;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <mpu6050_aux_i2c_bus_host_access>:
 * MPU6050_HOST_AUX_BUS_CONNECT or MPU6050_HOST_AUX_BUS_DISCONNECT
 * @retval 0 on success, -1 on timeout.
 *
 **************************************************************************/
int8_t mpu6050_aux_i2c_bus_host_access(uint8_t aux_i2c_bus_status)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	71fb      	strb	r3, [r7, #7]
	int8_t returnCode=0;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]

	if(aux_i2c_bus_status == 1)
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d11d      	bne.n	8004924 <mpu6050_aux_i2c_bus_host_access+0x50>
	{
		/*disable mpu6050 master*/
		returnCode = i2c_slave_mem_write(MPU6050_ID, 0x6A, 0x00);
 80048e8:	2200      	movs	r2, #0
 80048ea:	216a      	movs	r1, #106	; 0x6a
 80048ec:	2068      	movs	r0, #104	; 0x68
 80048ee:	f000 f8d9 	bl	8004aa4 <i2c_slave_mem_write>
 80048f2:	4603      	mov	r3, r0
 80048f4:	73fb      	strb	r3, [r7, #15]
		if(returnCode == -1)
 80048f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d102      	bne.n	8004906 <mpu6050_aux_i2c_bus_host_access+0x32>
			return -1;
 8004900:	f04f 33ff 	mov.w	r3, #4294967295
 8004904:	e030      	b.n	8004968 <mpu6050_aux_i2c_bus_host_access+0x94>

		/*enable auxiliary i2c bus access*/
		returnCode = i2c_slave_mem_write(MPU6050_ID, 0x37, 0x02);
 8004906:	2202      	movs	r2, #2
 8004908:	2137      	movs	r1, #55	; 0x37
 800490a:	2068      	movs	r0, #104	; 0x68
 800490c:	f000 f8ca 	bl	8004aa4 <i2c_slave_mem_write>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]
		if(returnCode == -1)
 8004914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d123      	bne.n	8004966 <mpu6050_aux_i2c_bus_host_access+0x92>
			return -1;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	e021      	b.n	8004968 <mpu6050_aux_i2c_bus_host_access+0x94>
	}

	else if(aux_i2c_bus_status == 0)
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d11d      	bne.n	8004966 <mpu6050_aux_i2c_bus_host_access+0x92>
	{
		/*disable mpu6050 master*/
		returnCode = i2c_slave_mem_write(MPU6050_ID, 0x6A, 0x20);
 800492a:	2220      	movs	r2, #32
 800492c:	216a      	movs	r1, #106	; 0x6a
 800492e:	2068      	movs	r0, #104	; 0x68
 8004930:	f000 f8b8 	bl	8004aa4 <i2c_slave_mem_write>
 8004934:	4603      	mov	r3, r0
 8004936:	73fb      	strb	r3, [r7, #15]
		if(returnCode == -1)
 8004938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d102      	bne.n	8004948 <mpu6050_aux_i2c_bus_host_access+0x74>
			return -1;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295
 8004946:	e00f      	b.n	8004968 <mpu6050_aux_i2c_bus_host_access+0x94>

		/*enable auxiliary i2c bus access*/
		returnCode = i2c_slave_mem_write(MPU6050_ID, 0x37, 0x00);
 8004948:	2200      	movs	r2, #0
 800494a:	2137      	movs	r1, #55	; 0x37
 800494c:	2068      	movs	r0, #104	; 0x68
 800494e:	f000 f8a9 	bl	8004aa4 <i2c_slave_mem_write>
 8004952:	4603      	mov	r3, r0
 8004954:	73fb      	strb	r3, [r7, #15]
		if(returnCode == -1)
 8004956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d102      	bne.n	8004966 <mpu6050_aux_i2c_bus_host_access+0x92>
			return -1;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	e000      	b.n	8004968 <mpu6050_aux_i2c_bus_host_access+0x94>
	}
	return 0;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <hmc5883l_init>:
/************************************************************************//*
 * initializes the HMC5883L magnetometer sensor
 * @retval 0 on success, -1 on timeout.
 **************************************************************************/
int8_t hmc5883l_init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
	int8_t returnCode=0;
 8004976:	2300      	movs	r3, #0
 8004978:	71fb      	strb	r3, [r7, #7]

	returnCode = i2c_slave_mem_write(HMC5883L_ID, 0x00, 0x78);
 800497a:	2278      	movs	r2, #120	; 0x78
 800497c:	2100      	movs	r1, #0
 800497e:	201e      	movs	r0, #30
 8004980:	f000 f890 	bl	8004aa4 <i2c_slave_mem_write>
 8004984:	4603      	mov	r3, r0
 8004986:	71fb      	strb	r3, [r7, #7]
	if(returnCode == -1)
 8004988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d102      	bne.n	8004998 <hmc5883l_init+0x28>
		return -1;
 8004992:	f04f 33ff 	mov.w	r3, #4294967295
 8004996:	e01e      	b.n	80049d6 <hmc5883l_init+0x66>

	returnCode = i2c_slave_mem_write(HMC5883L_ID, 0x01, 0xA0);
 8004998:	22a0      	movs	r2, #160	; 0xa0
 800499a:	2101      	movs	r1, #1
 800499c:	201e      	movs	r0, #30
 800499e:	f000 f881 	bl	8004aa4 <i2c_slave_mem_write>
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
	if(returnCode == -1)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d102      	bne.n	80049b6 <hmc5883l_init+0x46>
		return -1;
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295
 80049b4:	e00f      	b.n	80049d6 <hmc5883l_init+0x66>

	returnCode = i2c_slave_mem_write(HMC5883L_ID, 0x02, 0x00);
 80049b6:	2200      	movs	r2, #0
 80049b8:	2102      	movs	r1, #2
 80049ba:	201e      	movs	r0, #30
 80049bc:	f000 f872 	bl	8004aa4 <i2c_slave_mem_write>
 80049c0:	4603      	mov	r3, r0
 80049c2:	71fb      	strb	r3, [r7, #7]
	if(returnCode == -1)
 80049c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d102      	bne.n	80049d4 <hmc5883l_init+0x64>
		return -1;
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295
 80049d2:	e000      	b.n	80049d6 <hmc5883l_init+0x66>

	return 0;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <servo_set_position>:
#include "small_printf.h"
#include "timer_config.h"


void servo_set_position(pwm_channels_t channelID, float degreeVal)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	71fb      	strb	r3, [r7, #7]
	degreeVal = ((degreeVal*10)/180)+4;
 80049ec:	490c      	ldr	r1, [pc, #48]	; (8004a20 <servo_set_position+0x40>)
 80049ee:	6838      	ldr	r0, [r7, #0]
 80049f0:	f7fc f9b6 	bl	8000d60 <__aeabi_fmul>
 80049f4:	4603      	mov	r3, r0
 80049f6:	490b      	ldr	r1, [pc, #44]	; (8004a24 <servo_set_position+0x44>)
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fc fa65 	bl	8000ec8 <__aeabi_fdiv>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fc f8a3 	bl	8000b50 <__addsf3>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	603b      	str	r3, [r7, #0]
	motor_pwm_speed_set(channelID, degreeVal);
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 ff70 	bl	80068f8 <motor_pwm_speed_set>
}
 8004a18:	bf00      	nop
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	41200000 	.word	0x41200000
 8004a24:	43340000 	.word	0x43340000

08004a28 <I2C_LowLevel_Init>:
 * @param ClockSpeed Bus communication frequency in Hz
 * @param OwnAddress MCU I2C address
 * @return none.
 **************************************************************************/
void I2C_LowLevel_Init(uint32_t ClockSpeed, uint8_t OwnAddress)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
	I2C_InitTypeDef  I2C_InitStructure;
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8004a34:	2101      	movs	r1, #1
 8004a36:	2008      	movs	r0, #8
 8004a38:	f7ff f9ec 	bl	8003e14 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004a42:	f7ff fa05 	bl	8003e50 <RCC_APB1PeriphClockCmd>


	/* Configure I2C_EE pins: SCL and SDA */
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
 8004a46:	23c0      	movs	r3, #192	; 0xc0
 8004a48:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8004a4e:	231c      	movs	r3, #28
 8004a50:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004a52:	f107 030c 	add.w	r3, r7, #12
 8004a56:	4619      	mov	r1, r3
 8004a58:	4810      	ldr	r0, [pc, #64]	; (8004a9c <I2C_LowLevel_Init+0x74>)
 8004a5a:	f7fe fef7 	bl	800384c <GPIO_Init>

	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8004a62:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8004a66:	82fb      	strh	r3, [r7, #22]
	I2C_InitStructure.I2C_OwnAddress1 = OwnAddress;
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	833b      	strh	r3, [r7, #24]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8004a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a72:	837b      	strh	r3, [r7, #26]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004a74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a78:	83bb      	strh	r3, [r7, #28]
	I2C_InitStructure.I2C_ClockSpeed = ClockSpeed;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	613b      	str	r3, [r7, #16]

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 8004a7e:	2101      	movs	r1, #1
 8004a80:	4807      	ldr	r0, [pc, #28]	; (8004aa0 <I2C_LowLevel_Init+0x78>)
 8004a82:	f7ff f861 	bl	8003b48 <I2C_Cmd>
	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8004a86:	f107 0310 	add.w	r3, r7, #16
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4804      	ldr	r0, [pc, #16]	; (8004aa0 <I2C_LowLevel_Init+0x78>)
 8004a8e:	f7fe ff99 	bl	80039c4 <I2C_Init>
}
 8004a92:	bf00      	nop
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40010c00 	.word	0x40010c00
 8004aa0:	40005400 	.word	0x40005400

08004aa4 <i2c_slave_mem_write>:
 * @param registerAddr starting memory location of slave to start writing to.
 * @param writedata data to be written to the slave register.
 * @return 0 on success, -1 on timeout.
 **************************************************************************/
int8_t i2c_slave_mem_write(uint8_t slaveAddr, uint8_t registerAddr, uint8_t writeData)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	71bb      	strb	r3, [r7, #6]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	717b      	strb	r3, [r7, #5]
	timeout_alarm_set(20);
 8004ab6:	2014      	movs	r0, #20
 8004ab8:	f001 ff84 	bl	80069c4 <timeout_alarm_set>

	I2C_GenerateSTART(I2C1,ENABLE);
 8004abc:	2101      	movs	r1, #1
 8004abe:	482f      	ldr	r0, [pc, #188]	; (8004b7c <i2c_slave_mem_write+0xd8>)
 8004ac0:	f7ff f861 	bl	8003b86 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 8004ac4:	e007      	b.n	8004ad6 <i2c_slave_mem_write+0x32>
	{
			if(timeout_alarm_status_check() == 1)
 8004ac6:	f001 ff9b 	bl	8006a00 <timeout_alarm_status_check>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d102      	bne.n	8004ad6 <i2c_slave_mem_write+0x32>
				return -1;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	e04d      	b.n	8004b72 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 8004ad6:	492a      	ldr	r1, [pc, #168]	; (8004b80 <i2c_slave_mem_write+0xdc>)
 8004ad8:	4828      	ldr	r0, [pc, #160]	; (8004b7c <i2c_slave_mem_write+0xd8>)
 8004ada:	f7ff f8be 	bl	8003c5a <I2C_CheckEvent>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <i2c_slave_mem_write+0x22>
	}

	I2C_Send7bitAddress(I2C1, (slaveAddr<<1), I2C_Direction_Transmitter);
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2200      	movs	r2, #0
 8004aec:	4619      	mov	r1, r3
 8004aee:	4823      	ldr	r0, [pc, #140]	; (8004b7c <i2c_slave_mem_write+0xd8>)
 8004af0:	f7ff f896 	bl	8003c20 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8004af4:	e007      	b.n	8004b06 <i2c_slave_mem_write+0x62>
	{
			if(timeout_alarm_status_check() == 1)
 8004af6:	f001 ff83 	bl	8006a00 <timeout_alarm_status_check>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d102      	bne.n	8004b06 <i2c_slave_mem_write+0x62>
				return -1;
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295
 8004b04:	e035      	b.n	8004b72 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8004b06:	491f      	ldr	r1, [pc, #124]	; (8004b84 <i2c_slave_mem_write+0xe0>)
 8004b08:	481c      	ldr	r0, [pc, #112]	; (8004b7c <i2c_slave_mem_write+0xd8>)
 8004b0a:	f7ff f8a6 	bl	8003c5a <I2C_CheckEvent>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <i2c_slave_mem_write+0x52>
	}

	I2C_SendData(I2C1,registerAddr);
 8004b14:	79bb      	ldrb	r3, [r7, #6]
 8004b16:	4619      	mov	r1, r3
 8004b18:	4818      	ldr	r0, [pc, #96]	; (8004b7c <i2c_slave_mem_write+0xd8>)
 8004b1a:	f7ff f872 	bl	8003c02 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004b1e:	e007      	b.n	8004b30 <i2c_slave_mem_write+0x8c>
	{
			if(timeout_alarm_status_check() == 1)
 8004b20:	f001 ff6e 	bl	8006a00 <timeout_alarm_status_check>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d102      	bne.n	8004b30 <i2c_slave_mem_write+0x8c>
				return -1;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2e:	e020      	b.n	8004b72 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004b30:	4915      	ldr	r1, [pc, #84]	; (8004b88 <i2c_slave_mem_write+0xe4>)
 8004b32:	4812      	ldr	r0, [pc, #72]	; (8004b7c <i2c_slave_mem_write+0xd8>)
 8004b34:	f7ff f891 	bl	8003c5a <I2C_CheckEvent>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <i2c_slave_mem_write+0x7c>
	}

	I2C_SendData(I2C1,writeData);
 8004b3e:	797b      	ldrb	r3, [r7, #5]
 8004b40:	4619      	mov	r1, r3
 8004b42:	480e      	ldr	r0, [pc, #56]	; (8004b7c <i2c_slave_mem_write+0xd8>)
 8004b44:	f7ff f85d 	bl	8003c02 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004b48:	e007      	b.n	8004b5a <i2c_slave_mem_write+0xb6>
	{
			if(timeout_alarm_status_check() == 1)
 8004b4a:	f001 ff59 	bl	8006a00 <timeout_alarm_status_check>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d102      	bne.n	8004b5a <i2c_slave_mem_write+0xb6>
				return -1;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	e00b      	b.n	8004b72 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8004b5a:	490b      	ldr	r1, [pc, #44]	; (8004b88 <i2c_slave_mem_write+0xe4>)
 8004b5c:	4807      	ldr	r0, [pc, #28]	; (8004b7c <i2c_slave_mem_write+0xd8>)
 8004b5e:	f7ff f87c 	bl	8003c5a <I2C_CheckEvent>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <i2c_slave_mem_write+0xa6>
	}

	I2C_GenerateSTOP(I2C1,ENABLE);
 8004b68:	2101      	movs	r1, #1
 8004b6a:	4804      	ldr	r0, [pc, #16]	; (8004b7c <i2c_slave_mem_write+0xd8>)
 8004b6c:	f7ff f82a 	bl	8003bc4 <I2C_GenerateSTOP>

	return 0;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40005400 	.word	0x40005400
 8004b80:	00030001 	.word	0x00030001
 8004b84:	00070082 	.word	0x00070082
 8004b88:	00070084 	.word	0x00070084

08004b8c <test_task>:
int16_t gyroRawData[3];
int16_t accelRawData[3];
int16_t magRawData[3];

void test_task(void *pvParameters)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
//		motor_pwm_speed_set(PWM_CHANNEL4, 4);
//		delay_ms(1000);
//		motor_pwm_speed_set(PWM_CHANNEL4, 14);
//		delay_ms(1000);

		servo_set_position(PWM_CHANNEL4, 0);
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	2004      	movs	r0, #4
 8004b9a:	f7ff ff21 	bl	80049e0 <servo_set_position>
		delay_ms(1000);
 8004b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ba2:	f001 fef9 	bl	8006998 <delay_ms>
		servo_set_position(PWM_CHANNEL4, 180);
 8004ba6:	4904      	ldr	r1, [pc, #16]	; (8004bb8 <test_task+0x2c>)
 8004ba8:	2004      	movs	r0, #4
 8004baa:	f7ff ff19 	bl	80049e0 <servo_set_position>
		delay_ms(1000);
 8004bae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bb2:	f001 fef1 	bl	8006998 <delay_ms>
		servo_set_position(PWM_CHANNEL4, 0);
 8004bb6:	e7ed      	b.n	8004b94 <test_task+0x8>
 8004bb8:	43340000 	.word	0x43340000

08004bbc <drone_init_task>:
	}
}


void drone_init_task(void *pvParameters)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	6078      	str	r0, [r7, #4]
	timer3_init();
 8004bc4:	f001 fdec 	bl	80067a0 <timer3_init>
	motors_pwm_init();
 8004bc8:	f001 fe1e 	bl	8006808 <motors_pwm_init>
	I2C_LowLevel_Init(400000, 0x38);
 8004bcc:	2138      	movs	r1, #56	; 0x38
 8004bce:	4822      	ldr	r0, [pc, #136]	; (8004c58 <drone_init_task+0x9c>)
 8004bd0:	f7ff ff2a 	bl	8004a28 <I2C_LowLevel_Init>
	debug_led_init();
 8004bd4:	f7ff fe22 	bl	800481c <debug_led_init>
	uart_console_init(9600);
 8004bd8:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8004bdc:	f001 ff1c 	bl	8006a18 <uart_console_init>
	/*safety delay for mpu6050 to powerup*/
	vTaskDelay(500/portTICK_PERIOD_MS);
 8004be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004be4:	f7fd fd72 	bl	80026cc <vTaskDelay>
	if(mpu6050_init(FS_SEL3, FS_SEL1)<0)
 8004be8:	2108      	movs	r1, #8
 8004bea:	2018      	movs	r0, #24
 8004bec:	f7ff fe34 	bl	8004858 <mpu6050_init>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da03      	bge.n	8004bfe <drone_init_task+0x42>
	{
		uart_printf("mpu6050 init failed.\n");
 8004bf6:	4819      	ldr	r0, [pc, #100]	; (8004c5c <drone_init_task+0xa0>)
 8004bf8:	f001 fc9a 	bl	8006530 <printf_>
		while(1);
 8004bfc:	e7fe      	b.n	8004bfc <drone_init_task+0x40>
	}

	if(mpu6050_aux_i2c_bus_host_access(MPU6050_HOST_AUX_BUS_CONNECT)<0)
 8004bfe:	2001      	movs	r0, #1
 8004c00:	f7ff fe68 	bl	80048d4 <mpu6050_aux_i2c_bus_host_access>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	da03      	bge.n	8004c12 <drone_init_task+0x56>
	{
		uart_printf("aux bus connect failed.\n");
 8004c0a:	4815      	ldr	r0, [pc, #84]	; (8004c60 <drone_init_task+0xa4>)
 8004c0c:	f001 fc90 	bl	8006530 <printf_>
		while(1);
 8004c10:	e7fe      	b.n	8004c10 <drone_init_task+0x54>
	}

	if(hmc5883l_init()<0)
 8004c12:	f7ff fead 	bl	8004970 <hmc5883l_init>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	da03      	bge.n	8004c24 <drone_init_task+0x68>
	{
		uart_printf("magnetometer init failed.\n");
 8004c1c:	4811      	ldr	r0, [pc, #68]	; (8004c64 <drone_init_task+0xa8>)
 8004c1e:	f001 fc87 	bl	8006530 <printf_>
		while(1);
 8004c22:	e7fe      	b.n	8004c22 <drone_init_task+0x66>
	}

	else
	{
		uart_printf("drone init complete.\n");
 8004c24:	4810      	ldr	r0, [pc, #64]	; (8004c68 <drone_init_task+0xac>)
 8004c26:	f001 fc83 	bl	8006530 <printf_>
		vTaskDelay(2000/portTICK_PERIOD_MS);
 8004c2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c2e:	f7fd fd4d 	bl	80026cc <vTaskDelay>
//		xTaskCreate(motion_control_task, "motion_control_task", 1000, NULL, 1, NULL );
		xTaskCreate(test_task, "test_task", 500, NULL, 1, NULL );
 8004c32:	2300      	movs	r3, #0
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	2301      	movs	r3, #1
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c40:	490a      	ldr	r1, [pc, #40]	; (8004c6c <drone_init_task+0xb0>)
 8004c42:	480b      	ldr	r0, [pc, #44]	; (8004c70 <drone_init_task+0xb4>)
 8004c44:	f7fd fb7a 	bl	800233c <xTaskCreate>
		vTaskDelete(NULL);
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f7fd fcb1 	bl	80025b0 <vTaskDelete>
	}
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	00061a80 	.word	0x00061a80
 8004c5c:	08006bd8 	.word	0x08006bd8
 8004c60:	08006bf0 	.word	0x08006bf0
 8004c64:	08006c0c 	.word	0x08006c0c
 8004c68:	08006c28 	.word	0x08006c28
 8004c6c:	08006c40 	.word	0x08006c40
 8004c70:	08004b8d 	.word	0x08004b8d

08004c74 <main>:

int main(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af02      	add	r7, sp, #8
  	xTaskCreate(drone_init_task, "drone_init_task", 200, NULL, 0, NULL );
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	2300      	movs	r3, #0
 8004c84:	22c8      	movs	r2, #200	; 0xc8
 8004c86:	4903      	ldr	r1, [pc, #12]	; (8004c94 <main+0x20>)
 8004c88:	4803      	ldr	r0, [pc, #12]	; (8004c98 <main+0x24>)
 8004c8a:	f7fd fb57 	bl	800233c <xTaskCreate>
	vTaskStartScheduler();
 8004c8e:	f7fd fd51 	bl	8002734 <vTaskStartScheduler>
	while(1);
 8004c92:	e7fe      	b.n	8004c92 <main+0x1e>
 8004c94:	08006c4c 	.word	0x08006c4c
 8004c98:	08004bbd 	.word	0x08004bbd

08004c9c <vApplicationMallocFailedHook>:

    }
}

void vApplicationMallocFailedHook( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8004ca0:	e7fe      	b.n	8004ca0 <vApplicationMallocFailedHook+0x4>

08004ca2 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8004cac:	e7fe      	b.n	8004cac <vApplicationStackOverflowHook+0xa>

08004cae <vApplicationIdleHook>:
}

void vApplicationIdleHook( void )
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
	volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8004cb4:	f7fc fea2 	bl	80019fc <xPortGetFreeHeapSize>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8004cbc:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <_putchar>:
  void* arg;
} out_fct_wrap_type;

// custom function
void _putchar(char character)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
	USART_SendData(PRINTF_USART, character);
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4807      	ldr	r0, [pc, #28]	; (8004cf8 <_putchar+0x30>)
 8004cda:	f7ff fd72 	bl	80047c2 <USART_SendData>
	while(USART_GetFlagStatus(PRINTF_USART, USART_FLAG_TC) == 0);
 8004cde:	bf00      	nop
 8004ce0:	2140      	movs	r1, #64	; 0x40
 8004ce2:	4805      	ldr	r0, [pc, #20]	; (8004cf8 <_putchar+0x30>)
 8004ce4:	f7ff fd7e 	bl	80047e4 <USART_GetFlagStatus>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f8      	beq.n	8004ce0 <_putchar+0x18>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40013800 	.word	0x40013800

08004cfc <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr

08004d16 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	4603      	mov	r3, r0
 8004d24:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <_out_char+0x1e>
    _putchar(character);
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff ffca 	bl	8004cc8 <_putchar>
  }
}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e002      	b.n	8004d52 <_strnlen_s+0x16>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <_strnlen_s+0x28>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	1e5a      	subs	r2, r3, #1
 8004d5e:	603a      	str	r2, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f3      	bne.n	8004d4c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	1ad3      	subs	r3, r2, r3
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	2b2f      	cmp	r3, #47	; 0x2f
 8004d82:	d904      	bls.n	8004d8e <_is_digit+0x1a>
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	2b39      	cmp	r3, #57	; 0x39
 8004d88:	d801      	bhi.n	8004d8e <_is_digit+0x1a>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <_is_digit+0x1c>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	b2db      	uxtb	r3, r3
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004dac:	e00e      	b.n	8004dcc <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	4618      	mov	r0, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6011      	str	r1, [r2, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	4403      	add	r3, r0
 8004dc8:	3b30      	subs	r3, #48	; 0x30
 8004dca:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ffce 	bl	8004d74 <_is_digit>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e7      	bne.n	8004dae <_atoi+0xe>
  }
  return i;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d125      	bne.n	8004e50 <_out_rev+0x68>
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d120      	bne.n	8004e50 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e00a      	b.n	8004e2a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	1c53      	adds	r3, r2, #1
 8004e18:	607b      	str	r3, [r7, #4]
 8004e1a:	68fc      	ldr	r4, [r7, #12]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	2020      	movs	r0, #32
 8004e22:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	3301      	adds	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d3f0      	bcc.n	8004e14 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8004e32:	e00d      	b.n	8004e50 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	3b01      	subs	r3, #1
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	4413      	add	r3, r2
 8004e40:	7818      	ldrb	r0, [r3, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	1c53      	adds	r3, r2, #1
 8004e46:	607b      	str	r3, [r7, #4]
 8004e48:	68fc      	ldr	r4, [r7, #12]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	47a0      	blx	r4
  while (len) {
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1ee      	bne.n	8004e34 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00e      	beq.n	8004e7e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8004e60:	e007      	b.n	8004e72 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	1c53      	adds	r3, r2, #1
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	68fc      	ldr	r4, [r7, #12]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	2020      	movs	r0, #32
 8004e70:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d3f1      	bcc.n	8004e62 <_out_rev+0x7a>
    }
  }

  return idx;
 8004e7e:	687b      	ldr	r3, [r7, #4]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd90      	pop	{r4, r7, pc}

08004e88 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af04      	add	r7, sp, #16
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d136      	bne.n	8004f0e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d018      	beq.n	8004ed8 <_ntoa_format+0x50>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d013      	beq.n	8004ed8 <_ntoa_format+0x50>
 8004eb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d104      	bne.n	8004ec2 <_ntoa_format+0x3a>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <_ntoa_format+0x50>
      width--;
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ec8:	e006      	b.n	8004ed8 <_ntoa_format+0x50>
      buf[len++] = '0';
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	61fa      	str	r2, [r7, #28]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	2230      	movs	r2, #48	; 0x30
 8004ed6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d20a      	bcs.n	8004ef6 <_ntoa_format+0x6e>
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b1f      	cmp	r3, #31
 8004ee4:	d9f1      	bls.n	8004eca <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ee6:	e006      	b.n	8004ef6 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	61fa      	str	r2, [r7, #28]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	2230      	movs	r2, #48	; 0x30
 8004ef4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <_ntoa_format+0x86>
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d202      	bcs.n	8004f0e <_ntoa_format+0x86>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b1f      	cmp	r3, #31
 8004f0c:	d9ec      	bls.n	8004ee8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d058      	beq.n	8004fca <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d116      	bne.n	8004f50 <_ntoa_format+0xc8>
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d013      	beq.n	8004f50 <_ntoa_format+0xc8>
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d003      	beq.n	8004f38 <_ntoa_format+0xb0>
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d10b      	bne.n	8004f50 <_ntoa_format+0xc8>
      len--;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <_ntoa_format+0xc8>
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d102      	bne.n	8004f50 <_ntoa_format+0xc8>
        len--;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d10f      	bne.n	8004f76 <_ntoa_format+0xee>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <_ntoa_format+0xee>
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b1f      	cmp	r3, #31
 8004f64:	d807      	bhi.n	8004f76 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	61fa      	str	r2, [r7, #28]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4413      	add	r3, r2
 8004f70:	2278      	movs	r2, #120	; 0x78
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e01f      	b.n	8004fb6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d10f      	bne.n	8004f9c <_ntoa_format+0x114>
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <_ntoa_format+0x114>
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b1f      	cmp	r3, #31
 8004f8a:	d807      	bhi.n	8004f9c <_ntoa_format+0x114>
      buf[len++] = 'X';
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	61fa      	str	r2, [r7, #28]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4413      	add	r3, r2
 8004f96:	2258      	movs	r2, #88	; 0x58
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e00c      	b.n	8004fb6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d109      	bne.n	8004fb6 <_ntoa_format+0x12e>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b1f      	cmp	r3, #31
 8004fa6:	d806      	bhi.n	8004fb6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	2262      	movs	r2, #98	; 0x62
 8004fb4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b1f      	cmp	r3, #31
 8004fba:	d806      	bhi.n	8004fca <_ntoa_format+0x142>
      buf[len++] = '0';
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	61fa      	str	r2, [r7, #28]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	2230      	movs	r2, #48	; 0x30
 8004fc8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	2b1f      	cmp	r3, #31
 8004fce:	d824      	bhi.n	800501a <_ntoa_format+0x192>
    if (negative) {
 8004fd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <_ntoa_format+0x160>
      buf[len++] = '-';
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	61fa      	str	r2, [r7, #28]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	222d      	movs	r2, #45	; 0x2d
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e018      	b.n	800501a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d007      	beq.n	8005002 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	61fa      	str	r2, [r7, #28]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	222b      	movs	r2, #43	; 0x2b
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e00b      	b.n	800501a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d006      	beq.n	800501a <_ntoa_format+0x192>
      buf[len++] = ' ';
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	61fa      	str	r2, [r7, #28]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4413      	add	r3, r2
 8005016:	2220      	movs	r2, #32
 8005018:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	9303      	str	r3, [sp, #12]
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fed9 	bl	8004de8 <_out_rev>
 8005036:	4603      	mov	r3, r0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b096      	sub	sp, #88	; 0x58
 8005044:	af08      	add	r7, sp, #32
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8005052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d103      	bne.n	8005060 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8005058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8005060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <_ntoa_long+0x30>
 800506a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d033      	beq.n	80050d8 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8005070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005074:	fbb3 f2f2 	udiv	r2, r3, r2
 8005078:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800507a:	fb01 f202 	mul.w	r2, r1, r2
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	637a      	str	r2, [r7, #52]	; 0x34
 800508a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800508e:	2a09      	cmp	r2, #9
 8005090:	d804      	bhi.n	800509c <_ntoa_long+0x5c>
 8005092:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005096:	3230      	adds	r2, #48	; 0x30
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	e00d      	b.n	80050b8 <_ntoa_long+0x78>
 800509c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800509e:	f002 0220 	and.w	r2, r2, #32
 80050a2:	2a00      	cmp	r2, #0
 80050a4:	d001      	beq.n	80050aa <_ntoa_long+0x6a>
 80050a6:	2141      	movs	r1, #65	; 0x41
 80050a8:	e000      	b.n	80050ac <_ntoa_long+0x6c>
 80050aa:	2161      	movs	r1, #97	; 0x61
 80050ac:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80050b0:	440a      	add	r2, r1
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	3a0a      	subs	r2, #10
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80050bc:	440b      	add	r3, r1
 80050be:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80050c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80050cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <_ntoa_long+0x98>
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	2b1f      	cmp	r3, #31
 80050d6:	d9cb      	bls.n	8005070 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80050d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050da:	9306      	str	r3, [sp, #24]
 80050dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050de:	9305      	str	r3, [sp, #20]
 80050e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e6:	9303      	str	r3, [sp, #12]
 80050e8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80050ec:	9302      	str	r3, [sp, #8]
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	f107 0310 	add.w	r3, r7, #16
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff fec2 	bl	8004e88 <_ntoa_format>
 8005104:	4603      	mov	r3, r0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3738      	adds	r7, #56	; 0x38
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800510e:	b590      	push	{r4, r7, lr}
 8005110:	b097      	sub	sp, #92	; 0x5c
 8005112:	af08      	add	r7, sp, #32
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8005120:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005124:	4323      	orrs	r3, r4
 8005126:	d103      	bne.n	8005130 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8005128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800512a:	f023 0310 	bic.w	r3, r3, #16
 800512e:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8005130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <_ntoa_long_long+0x34>
 800513a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800513e:	4323      	orrs	r3, r4
 8005140:	d039      	beq.n	80051b6 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8005142:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800514a:	f7fb ff79 	bl	8001040 <__aeabi_uldivmod>
 800514e:	461c      	mov	r4, r3
 8005150:	4613      	mov	r3, r2
 8005152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	637a      	str	r2, [r7, #52]	; 0x34
 800515c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005160:	2a09      	cmp	r2, #9
 8005162:	d804      	bhi.n	800516e <_ntoa_long_long+0x60>
 8005164:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005168:	3230      	adds	r2, #48	; 0x30
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	e00d      	b.n	800518a <_ntoa_long_long+0x7c>
 800516e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005170:	f002 0220 	and.w	r2, r2, #32
 8005174:	2a00      	cmp	r2, #0
 8005176:	d001      	beq.n	800517c <_ntoa_long_long+0x6e>
 8005178:	2141      	movs	r1, #65	; 0x41
 800517a:	e000      	b.n	800517e <_ntoa_long_long+0x70>
 800517c:	2161      	movs	r1, #97	; 0x61
 800517e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005182:	440a      	add	r2, r1
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	3a0a      	subs	r2, #10
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800518e:	440b      	add	r3, r1
 8005190:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8005194:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005198:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800519c:	f7fb ff50 	bl	8001040 <__aeabi_uldivmod>
 80051a0:	4603      	mov	r3, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80051a8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80051ac:	4323      	orrs	r3, r4
 80051ae:	d002      	beq.n	80051b6 <_ntoa_long_long+0xa8>
 80051b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b2:	2b1f      	cmp	r3, #31
 80051b4:	d9c5      	bls.n	8005142 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80051b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051ba:	9206      	str	r2, [sp, #24]
 80051bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051be:	9205      	str	r2, [sp, #20]
 80051c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051c2:	9204      	str	r2, [sp, #16]
 80051c4:	9303      	str	r3, [sp, #12]
 80051c6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80051ca:	9302      	str	r3, [sp, #8]
 80051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	f107 0310 	add.w	r3, r7, #16
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fe53 	bl	8004e88 <_ntoa_format>
 80051e2:	4603      	mov	r3, r0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	373c      	adds	r7, #60	; 0x3c
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd90      	pop	{r4, r7, pc}
 80051ec:	0000      	movs	r0, r0
	...

080051f0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b09d      	sub	sp, #116	; 0x74
 80051f4:	af06      	add	r7, sp, #24
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	f04f 0400 	mov.w	r4, #0
 800520a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800520e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005212:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005216:	f7fb fc1b 	bl	8000a50 <__aeabi_dcmpeq>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10f      	bne.n	8005240 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8005220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005222:	9303      	str	r3, [sp, #12]
 8005224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005226:	9302      	str	r3, [sp, #8]
 8005228:	2303      	movs	r3, #3
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	4bac      	ldr	r3, [pc, #688]	; (80054e0 <_ftoa+0x2f0>)
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7ff fdd6 	bl	8004de8 <_out_rev>
 800523c:	4603      	mov	r3, r0
 800523e:	e234      	b.n	80056aa <_ftoa+0x4ba>
  if (value < -DBL_MAX)
 8005240:	f04f 32ff 	mov.w	r2, #4294967295
 8005244:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005248:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800524c:	f7fb fc0a 	bl	8000a64 <__aeabi_dcmplt>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00f      	beq.n	8005276 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8005256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005258:	9303      	str	r3, [sp, #12]
 800525a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525c:	9302      	str	r3, [sp, #8]
 800525e:	2304      	movs	r3, #4
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	4ba0      	ldr	r3, [pc, #640]	; (80054e4 <_ftoa+0x2f4>)
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff fdbb 	bl	8004de8 <_out_rev>
 8005272:	4603      	mov	r3, r0
 8005274:	e219      	b.n	80056aa <_ftoa+0x4ba>
  if (value > DBL_MAX)
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	4b9b      	ldr	r3, [pc, #620]	; (80054e8 <_ftoa+0x2f8>)
 800527c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005280:	f7fb fc0e 	bl	8000aa0 <__aeabi_dcmpgt>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01d      	beq.n	80052c6 <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800528a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <_ftoa+0xa8>
 8005294:	4b95      	ldr	r3, [pc, #596]	; (80054ec <_ftoa+0x2fc>)
 8005296:	e000      	b.n	800529a <_ftoa+0xaa>
 8005298:	4b95      	ldr	r3, [pc, #596]	; (80054f0 <_ftoa+0x300>)
 800529a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800529c:	f002 0204 	and.w	r2, r2, #4
 80052a0:	2a00      	cmp	r2, #0
 80052a2:	d001      	beq.n	80052a8 <_ftoa+0xb8>
 80052a4:	2204      	movs	r2, #4
 80052a6:	e000      	b.n	80052aa <_ftoa+0xba>
 80052a8:	2203      	movs	r2, #3
 80052aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80052ac:	9103      	str	r1, [sp, #12]
 80052ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80052b0:	9102      	str	r1, [sp, #8]
 80052b2:	9201      	str	r2, [sp, #4]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff fd93 	bl	8004de8 <_out_rev>
 80052c2:	4603      	mov	r3, r0
 80052c4:	e1f1      	b.n	80056aa <_ftoa+0x4ba>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80052c6:	a382      	add	r3, pc, #520	; (adr r3, 80054d0 <_ftoa+0x2e0>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052d0:	f7fb fbe6 	bl	8000aa0 <__aeabi_dcmpgt>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <_ftoa+0xfe>
 80052da:	a37f      	add	r3, pc, #508	; (adr r3, 80054d8 <_ftoa+0x2e8>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052e4:	f7fb fbbe 	bl	8000a64 <__aeabi_dcmplt>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d011      	beq.n	8005312 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80052ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052f8:	9302      	str	r3, [sp, #8]
 80052fa:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80052fe:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f9d9 	bl	80056c0 <_etoa>
 800530e:	4603      	mov	r3, r0
 8005310:	e1cb      	b.n	80056aa <_ftoa+0x4ba>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8005312:	2300      	movs	r3, #0
 8005314:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005324:	f7fb fb9e 	bl	8000a64 <__aeabi_dcmplt>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00e      	beq.n	800534c <_ftoa+0x15c>
    negative = true;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8005334:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005338:	f04f 0000 	mov.w	r0, #0
 800533c:	f04f 0100 	mov.w	r1, #0
 8005340:	f7fa ff6a 	bl	8000218 <__aeabi_dsub>
 8005344:	4603      	mov	r3, r0
 8005346:	460c      	mov	r4, r1
 8005348:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800534c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800534e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10e      	bne.n	8005374 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005356:	2306      	movs	r3, #6
 8005358:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800535a:	e00b      	b.n	8005374 <_ftoa+0x184>
    buf[len++] = '0';
 800535c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	657a      	str	r2, [r7, #84]	; 0x54
 8005362:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005366:	4413      	add	r3, r2
 8005368:	2230      	movs	r2, #48	; 0x30
 800536a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800536e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005370:	3b01      	subs	r3, #1
 8005372:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8005374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005376:	2b1f      	cmp	r3, #31
 8005378:	d802      	bhi.n	8005380 <_ftoa+0x190>
 800537a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800537c:	2b09      	cmp	r3, #9
 800537e:	d8ed      	bhi.n	800535c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8005380:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005384:	f7fb fb96 	bl	8000ab4 <__aeabi_d2iz>
 8005388:	4603      	mov	r3, r0
 800538a:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 800538c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800538e:	f7fb f891 	bl	80004b4 <__aeabi_i2d>
 8005392:	4603      	mov	r3, r0
 8005394:	460c      	mov	r4, r1
 8005396:	461a      	mov	r2, r3
 8005398:	4623      	mov	r3, r4
 800539a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800539e:	f7fa ff3b 	bl	8000218 <__aeabi_dsub>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	4618      	mov	r0, r3
 80053a8:	4621      	mov	r1, r4
 80053aa:	4a52      	ldr	r2, [pc, #328]	; (80054f4 <_ftoa+0x304>)
 80053ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	cb18      	ldmia	r3, {r3, r4}
 80053b4:	461a      	mov	r2, r3
 80053b6:	4623      	mov	r3, r4
 80053b8:	f7fb f8e2 	bl	8000580 <__aeabi_dmul>
 80053bc:	4603      	mov	r3, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 80053c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053c8:	f7fb fb9c 	bl	8000b04 <__aeabi_d2uiz>
 80053cc:	4603      	mov	r3, r0
 80053ce:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 80053d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80053d2:	f7fb f85f 	bl	8000494 <__aeabi_ui2d>
 80053d6:	4603      	mov	r3, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	461a      	mov	r2, r3
 80053dc:	4623      	mov	r3, r4
 80053de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053e2:	f7fa ff19 	bl	8000218 <__aeabi_dsub>
 80053e6:	4603      	mov	r3, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  if (diff > 0.5) {
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <_ftoa+0x308>)
 80053f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80053f8:	f7fb fb52 	bl	8000aa0 <__aeabi_dcmpgt>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d017      	beq.n	8005432 <_ftoa+0x242>
    ++frac;
 8005402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005404:	3301      	adds	r3, #1
 8005406:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8005408:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800540a:	f7fb f843 	bl	8000494 <__aeabi_ui2d>
 800540e:	4a39      	ldr	r2, [pc, #228]	; (80054f4 <_ftoa+0x304>)
 8005410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	cb18      	ldmia	r3, {r3, r4}
 8005418:	461a      	mov	r2, r3
 800541a:	4623      	mov	r3, r4
 800541c:	f7fb fb36 	bl	8000a8c <__aeabi_dcmpge>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01a      	beq.n	800545c <_ftoa+0x26c>
      frac = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 800542a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542c:	3301      	adds	r3, #1
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005430:	e014      	b.n	800545c <_ftoa+0x26c>
    }
  }
  else if (diff < 0.5) {
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	4b30      	ldr	r3, [pc, #192]	; (80054f8 <_ftoa+0x308>)
 8005438:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800543c:	f7fb fb12 	bl	8000a64 <__aeabi_dcmplt>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <_ftoa+0x26c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8005446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005448:	2b00      	cmp	r3, #0
 800544a:	d004      	beq.n	8005456 <_ftoa+0x266>
 800544c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <_ftoa+0x26c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8005456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005458:	3301      	adds	r3, #1
 800545a:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 800545c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800545e:	2b00      	cmp	r3, #0
 8005460:	d14c      	bne.n	80054fc <_ftoa+0x30c>
    diff = value - (double)whole;
 8005462:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005464:	f7fb f826 	bl	80004b4 <__aeabi_i2d>
 8005468:	4603      	mov	r3, r0
 800546a:	460c      	mov	r4, r1
 800546c:	461a      	mov	r2, r3
 800546e:	4623      	mov	r3, r4
 8005470:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005474:	f7fa fed0 	bl	8000218 <__aeabi_dsub>
 8005478:	4603      	mov	r3, r0
 800547a:	460c      	mov	r4, r1
 800547c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8005480:	2301      	movs	r3, #1
 8005482:	461c      	mov	r4, r3
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <_ftoa+0x308>)
 800548a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800548e:	f7fb fae9 	bl	8000a64 <__aeabi_dcmplt>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <_ftoa+0x2ac>
 8005498:	2300      	movs	r3, #0
 800549a:	461c      	mov	r4, r3
 800549c:	b2e3      	uxtb	r3, r4
 800549e:	f083 0301 	eor.w	r3, r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <_ftoa+0x2cc>
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <_ftoa+0x308>)
 80054ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80054b2:	f7fb faf5 	bl	8000aa0 <__aeabi_dcmpgt>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d066      	beq.n	800558a <_ftoa+0x39a>
 80054bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8084 	beq.w	80055d0 <_ftoa+0x3e0>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80054c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ca:	3301      	adds	r3, #1
 80054cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ce:	e07f      	b.n	80055d0 <_ftoa+0x3e0>
 80054d0:	00000000 	.word	0x00000000
 80054d4:	41cdcd65 	.word	0x41cdcd65
 80054d8:	00000000 	.word	0x00000000
 80054dc:	c1cdcd65 	.word	0xc1cdcd65
 80054e0:	08006c5c 	.word	0x08006c5c
 80054e4:	08006c60 	.word	0x08006c60
 80054e8:	7fefffff 	.word	0x7fefffff
 80054ec:	08006c68 	.word	0x08006c68
 80054f0:	08006c70 	.word	0x08006c70
 80054f4:	08006c78 	.word	0x08006c78
 80054f8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80054fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054fe:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005500:	e020      	b.n	8005544 <_ftoa+0x354>
      --count;
 8005502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005504:	3b01      	subs	r3, #1
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8005508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800550a:	1c4b      	adds	r3, r1, #1
 800550c:	657b      	str	r3, [r7, #84]	; 0x54
 800550e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005510:	4b68      	ldr	r3, [pc, #416]	; (80056b4 <_ftoa+0x4c4>)
 8005512:	fba3 2300 	umull	r2, r3, r3, r0
 8005516:	08da      	lsrs	r2, r3, #3
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	1ac2      	subs	r2, r0, r3
 8005522:	b2d3      	uxtb	r3, r2
 8005524:	3330      	adds	r3, #48	; 0x30
 8005526:	b2da      	uxtb	r2, r3
 8005528:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800552c:	440b      	add	r3, r1
 800552e:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8005532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005534:	4a5f      	ldr	r2, [pc, #380]	; (80056b4 <_ftoa+0x4c4>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	08db      	lsrs	r3, r3, #3
 800553c:	64bb      	str	r3, [r7, #72]	; 0x48
 800553e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <_ftoa+0x35c>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005546:	2b1f      	cmp	r3, #31
 8005548:	d9db      	bls.n	8005502 <_ftoa+0x312>
 800554a:	e00a      	b.n	8005562 <_ftoa+0x372>
        break;
 800554c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800554e:	e008      	b.n	8005562 <_ftoa+0x372>
      buf[len++] = '0';
 8005550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	657a      	str	r2, [r7, #84]	; 0x54
 8005556:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800555a:	4413      	add	r3, r2
 800555c:	2230      	movs	r2, #48	; 0x30
 800555e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8005562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005564:	2b1f      	cmp	r3, #31
 8005566:	d804      	bhi.n	8005572 <_ftoa+0x382>
 8005568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556a:	1e5a      	subs	r2, r3, #1
 800556c:	647a      	str	r2, [r7, #68]	; 0x44
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ee      	bne.n	8005550 <_ftoa+0x360>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005574:	2b1f      	cmp	r3, #31
 8005576:	d82b      	bhi.n	80055d0 <_ftoa+0x3e0>
      // add decimal
      buf[len++] = '.';
 8005578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	657a      	str	r2, [r7, #84]	; 0x54
 800557e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005582:	4413      	add	r3, r2
 8005584:	222e      	movs	r2, #46	; 0x2e
 8005586:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800558a:	e021      	b.n	80055d0 <_ftoa+0x3e0>
    buf[len++] = (char)(48 + (whole % 10));
 800558c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	657b      	str	r3, [r7, #84]	; 0x54
 8005592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005594:	4b48      	ldr	r3, [pc, #288]	; (80056b8 <_ftoa+0x4c8>)
 8005596:	fb83 1302 	smull	r1, r3, r3, r2
 800559a:	1099      	asrs	r1, r3, #2
 800559c:	17d3      	asrs	r3, r2, #31
 800559e:	1ac9      	subs	r1, r1, r3
 80055a0:	460b      	mov	r3, r1
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	1ad1      	subs	r1, r2, r3
 80055aa:	b2cb      	uxtb	r3, r1
 80055ac:	3330      	adds	r3, #48	; 0x30
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055b4:	4403      	add	r3, r0
 80055b6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80055ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055bc:	4a3e      	ldr	r2, [pc, #248]	; (80056b8 <_ftoa+0x4c8>)
 80055be:	fb82 1203 	smull	r1, r2, r2, r3
 80055c2:	1092      	asrs	r2, r2, #2
 80055c4:	17db      	asrs	r3, r3, #31
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <_ftoa+0x3e8>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80055d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d2:	2b1f      	cmp	r3, #31
 80055d4:	d9da      	bls.n	800558c <_ftoa+0x39c>
 80055d6:	e000      	b.n	80055da <_ftoa+0x3ea>
      break;
 80055d8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80055da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d124      	bne.n	800562e <_ftoa+0x43e>
 80055e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01f      	beq.n	800562e <_ftoa+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80055ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d015      	beq.n	8005620 <_ftoa+0x430>
 80055f4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <_ftoa+0x416>
 80055fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <_ftoa+0x430>
      width--;
 8005606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005608:	3b01      	subs	r3, #1
 800560a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800560c:	e008      	b.n	8005620 <_ftoa+0x430>
      buf[len++] = '0';
 800560e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	657a      	str	r2, [r7, #84]	; 0x54
 8005614:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005618:	4413      	add	r3, r2
 800561a:	2230      	movs	r2, #48	; 0x30
 800561c:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005624:	429a      	cmp	r2, r3
 8005626:	d202      	bcs.n	800562e <_ftoa+0x43e>
 8005628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800562a:	2b1f      	cmp	r3, #31
 800562c:	d9ef      	bls.n	800560e <_ftoa+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800562e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005630:	2b1f      	cmp	r3, #31
 8005632:	d82a      	bhi.n	800568a <_ftoa+0x49a>
    if (negative) {
 8005634:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <_ftoa+0x460>
      buf[len++] = '-';
 800563c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	657a      	str	r2, [r7, #84]	; 0x54
 8005642:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005646:	4413      	add	r3, r2
 8005648:	222d      	movs	r2, #45	; 0x2d
 800564a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800564e:	e01c      	b.n	800568a <_ftoa+0x49a>
    }
    else if (flags & FLAGS_PLUS) {
 8005650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <_ftoa+0x47e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800565a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	657a      	str	r2, [r7, #84]	; 0x54
 8005660:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005664:	4413      	add	r3, r2
 8005666:	222b      	movs	r2, #43	; 0x2b
 8005668:	f803 2c48 	strb.w	r2, [r3, #-72]
 800566c:	e00d      	b.n	800568a <_ftoa+0x49a>
    }
    else if (flags & FLAGS_SPACE) {
 800566e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <_ftoa+0x49a>
      buf[len++] = ' ';
 8005678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	657a      	str	r2, [r7, #84]	; 0x54
 800567e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005682:	4413      	add	r3, r2
 8005684:	2220      	movs	r2, #32
 8005686:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800568a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800568c:	9303      	str	r3, [sp, #12]
 800568e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005690:	9302      	str	r3, [sp, #8]
 8005692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	f107 0310 	add.w	r3, r7, #16
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff fba0 	bl	8004de8 <_out_rev>
 80056a8:	4603      	mov	r3, r0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	375c      	adds	r7, #92	; 0x5c
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd90      	pop	{r4, r7, pc}
 80056b2:	bf00      	nop
 80056b4:	cccccccd 	.word	0xcccccccd
 80056b8:	66666667 	.word	0x66666667
 80056bc:	00000000 	.word	0x00000000

080056c0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	b09b      	sub	sp, #108	; 0x6c
 80056c6:	af06      	add	r7, sp, #24
 80056c8:	6178      	str	r0, [r7, #20]
 80056ca:	6139      	str	r1, [r7, #16]
 80056cc:	60fa      	str	r2, [r7, #12]
 80056ce:	60bb      	str	r3, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80056d0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80056d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80056d8:	f7fb f9ba 	bl	8000a50 <__aeabi_dcmpeq>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d014      	beq.n	800570c <_etoa+0x4c>
 80056e2:	f04f 32ff 	mov.w	r2, #4294967295
 80056e6:	4bc0      	ldr	r3, [pc, #768]	; (80059e8 <_etoa+0x328>)
 80056e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80056ec:	f7fb f9d8 	bl	8000aa0 <__aeabi_dcmpgt>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <_etoa+0x4c>
 80056f6:	f04f 32ff 	mov.w	r2, #4294967295
 80056fa:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80056fe:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005702:	f7fb f9af 	bl	8000a64 <__aeabi_dcmplt>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d014      	beq.n	8005736 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800570c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005716:	9303      	str	r3, [sp, #12]
 8005718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800571c:	9302      	str	r3, [sp, #8]
 800571e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005722:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	6939      	ldr	r1, [r7, #16]
 800572c:	6978      	ldr	r0, [r7, #20]
 800572e:	f7ff fd5f 	bl	80051f0 <_ftoa>
 8005732:	4603      	mov	r3, r0
 8005734:	e241      	b.n	8005bba <_etoa+0x4fa>
  }

  // determine the sign
  const bool negative = value < 0;
 8005736:	2301      	movs	r3, #1
 8005738:	461e      	mov	r6, r3
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005746:	f7fb f98d 	bl	8000a64 <__aeabi_dcmplt>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <_etoa+0x94>
 8005750:	2300      	movs	r3, #0
 8005752:	461e      	mov	r6, r3
 8005754:	f887 6043 	strb.w	r6, [r7, #67]	; 0x43
  if (negative) {
 8005758:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <_etoa+0xac>
    value = -value;
 8005760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005762:	67bb      	str	r3, [r7, #120]	; 0x78
 8005764:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005766:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800576a:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800576c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005778:	2306      	movs	r3, #6
 800577a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800577e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005782:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8005786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800578a:	ea4f 5813 	mov.w	r8, r3, lsr #20
 800578e:	f04f 0900 	mov.w	r9, #0
 8005792:	4643      	mov	r3, r8
 8005794:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005798:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800579e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295
 80057a6:	4991      	ldr	r1, [pc, #580]	; (80059ec <_etoa+0x32c>)
 80057a8:	ea02 0200 	and.w	r2, r2, r0
 80057ac:	ea03 0301 	and.w	r3, r3, r1
 80057b0:	f04f 0000 	mov.w	r0, #0
 80057b4:	498e      	ldr	r1, [pc, #568]	; (80059f0 <_etoa+0x330>)
 80057b6:	ea42 0200 	orr.w	r2, r2, r0
 80057ba:	ea43 0301 	orr.w	r3, r3, r1
 80057be:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80057c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80057c4:	f7fa fe76 	bl	80004b4 <__aeabi_i2d>
 80057c8:	a37b      	add	r3, pc, #492	; (adr r3, 80059b8 <_etoa+0x2f8>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa fed7 	bl	8000580 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	a379      	add	r3, pc, #484	; (adr r3, 80059c0 <_etoa+0x300>)
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fa fd1c 	bl	800021c <__adddf3>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4690      	mov	r8, r2
 80057ea:	4699      	mov	r9, r3
 80057ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	4b7f      	ldr	r3, [pc, #508]	; (80059f4 <_etoa+0x334>)
 80057f6:	f7fa fd0f 	bl	8000218 <__aeabi_dsub>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	a371      	add	r3, pc, #452	; (adr r3, 80059c8 <_etoa+0x308>)
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f7fa feba 	bl	8000580 <__aeabi_dmul>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4640      	mov	r0, r8
 8005812:	4649      	mov	r1, r9
 8005814:	f7fa fd02 	bl	800021c <__adddf3>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4610      	mov	r0, r2
 800581e:	4619      	mov	r1, r3
 8005820:	f7fb f948 	bl	8000ab4 <__aeabi_d2iz>
 8005824:	4603      	mov	r3, r0
 8005826:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005828:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800582a:	f7fa fe43 	bl	80004b4 <__aeabi_i2d>
 800582e:	a368      	add	r3, pc, #416	; (adr r3, 80059d0 <_etoa+0x310>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fa fea4 	bl	8000580 <__aeabi_dmul>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4610      	mov	r0, r2
 800583e:	4619      	mov	r1, r3
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	4b6c      	ldr	r3, [pc, #432]	; (80059f8 <_etoa+0x338>)
 8005846:	f7fa fce9 	bl	800021c <__adddf3>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4610      	mov	r0, r2
 8005850:	4619      	mov	r1, r3
 8005852:	f7fb f92f 	bl	8000ab4 <__aeabi_d2iz>
 8005856:	4603      	mov	r3, r0
 8005858:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800585a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800585c:	f7fa fe2a 	bl	80004b4 <__aeabi_i2d>
 8005860:	a35d      	add	r3, pc, #372	; (adr r3, 80059d8 <_etoa+0x318>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f7fa fe8b 	bl	8000580 <__aeabi_dmul>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4690      	mov	r8, r2
 8005870:	4699      	mov	r9, r3
 8005872:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005874:	f7fa fe1e 	bl	80004b4 <__aeabi_i2d>
 8005878:	a359      	add	r3, pc, #356	; (adr r3, 80059e0 <_etoa+0x320>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f7fa fe7f 	bl	8000580 <__aeabi_dmul>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4640      	mov	r0, r8
 8005888:	4649      	mov	r1, r9
 800588a:	f7fa fcc5 	bl	8000218 <__aeabi_dsub>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  const double z2 = z * z;
 8005896:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800589a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800589e:	f7fa fe6f 	bl	8000580 <__aeabi_dmul>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80058aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ac:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80058b0:	461a      	mov	r2, r3
 80058b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80058b6:	0515      	lsls	r5, r2, #20
 80058b8:	2400      	movs	r4, #0
 80058ba:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80058be:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80058c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	f7fa fca7 	bl	800021c <__adddf3>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4690      	mov	r8, r2
 80058d4:	4699      	mov	r9, r3
 80058d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058da:	f04f 0000 	mov.w	r0, #0
 80058de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80058e2:	f7fa fc99 	bl	8000218 <__aeabi_dsub>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4692      	mov	sl, r2
 80058ec:	469b      	mov	fp, r3
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	4b42      	ldr	r3, [pc, #264]	; (80059fc <_etoa+0x33c>)
 80058f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058f8:	f7fa ff6c 	bl	80007d4 <__aeabi_ddiv>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	4b3d      	ldr	r3, [pc, #244]	; (8005a00 <_etoa+0x340>)
 800590a:	f7fa fc87 	bl	800021c <__adddf3>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005916:	f7fa ff5d 	bl	80007d4 <__aeabi_ddiv>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4610      	mov	r0, r2
 8005920:	4619      	mov	r1, r3
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	4b37      	ldr	r3, [pc, #220]	; (8005a04 <_etoa+0x344>)
 8005928:	f7fa fc78 	bl	800021c <__adddf3>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005934:	f7fa ff4e 	bl	80007d4 <__aeabi_ddiv>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4650      	mov	r0, sl
 800593e:	4659      	mov	r1, fp
 8005940:	f7fa fc6c 	bl	800021c <__adddf3>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4640      	mov	r0, r8
 800594a:	4649      	mov	r1, r9
 800594c:	f7fa ff42 	bl	80007d4 <__aeabi_ddiv>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4610      	mov	r0, r2
 8005956:	4619      	mov	r1, r3
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	4b24      	ldr	r3, [pc, #144]	; (80059f0 <_etoa+0x330>)
 800595e:	f7fa fc5d 	bl	800021c <__adddf3>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4620      	mov	r0, r4
 8005968:	4629      	mov	r1, r5
 800596a:	f7fa fe09 	bl	8000580 <__aeabi_dmul>
 800596e:	4603      	mov	r3, r0
 8005970:	460c      	mov	r4, r1
 8005972:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8005976:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800597a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800597e:	f7fb f88f 	bl	8000aa0 <__aeabi_dcmpgt>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00d      	beq.n	80059a4 <_etoa+0x2e4>
    expval--;
 8005988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598a:	3b01      	subs	r3, #1
 800598c:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800598e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <_etoa+0x340>)
 8005998:	f7fa ff1c 	bl	80007d4 <__aeabi_ddiv>
 800599c:	4603      	mov	r3, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80059a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a6:	2b63      	cmp	r3, #99	; 0x63
 80059a8:	dc2e      	bgt.n	8005a08 <_etoa+0x348>
 80059aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ac:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80059b0:	db2a      	blt.n	8005a08 <_etoa+0x348>
 80059b2:	2304      	movs	r3, #4
 80059b4:	e029      	b.n	8005a0a <_etoa+0x34a>
 80059b6:	bf00      	nop
 80059b8:	509f79fb 	.word	0x509f79fb
 80059bc:	3fd34413 	.word	0x3fd34413
 80059c0:	8b60c8b3 	.word	0x8b60c8b3
 80059c4:	3fc68a28 	.word	0x3fc68a28
 80059c8:	636f4361 	.word	0x636f4361
 80059cc:	3fd287a7 	.word	0x3fd287a7
 80059d0:	0979a371 	.word	0x0979a371
 80059d4:	400a934f 	.word	0x400a934f
 80059d8:	bbb55516 	.word	0xbbb55516
 80059dc:	40026bb1 	.word	0x40026bb1
 80059e0:	fefa39ef 	.word	0xfefa39ef
 80059e4:	3fe62e42 	.word	0x3fe62e42
 80059e8:	7fefffff 	.word	0x7fefffff
 80059ec:	000fffff 	.word	0x000fffff
 80059f0:	3ff00000 	.word	0x3ff00000
 80059f4:	3ff80000 	.word	0x3ff80000
 80059f8:	3fe00000 	.word	0x3fe00000
 80059fc:	402c0000 	.word	0x402c0000
 8005a00:	40240000 	.word	0x40240000
 8005a04:	40180000 	.word	0x40180000
 8005a08:	2305      	movs	r3, #5
 8005a0a:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d03d      	beq.n	8005a94 <_etoa+0x3d4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8005a18:	a36b      	add	r3, pc, #428	; (adr r3, 8005bc8 <_etoa+0x508>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005a22:	f7fb f833 	bl	8000a8c <__aeabi_dcmpge>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d024      	beq.n	8005a76 <_etoa+0x3b6>
 8005a2c:	a368      	add	r3, pc, #416	; (adr r3, 8005bd0 <_etoa+0x510>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005a36:	f7fb f815 	bl	8000a64 <__aeabi_dcmplt>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01a      	beq.n	8005a76 <_etoa+0x3b6>
      if ((int)prec > expval) {
 8005a40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	dd07      	ble.n	8005a5a <_etoa+0x39a>
        prec = (unsigned)((int)prec - expval - 1);
 8005a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a58:	e002      	b.n	8005a60 <_etoa+0x3a0>
      }
      else {
        prec = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a74:	e00e      	b.n	8005a94 <_etoa+0x3d4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8005a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <_etoa+0x3d4>
 8005a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <_etoa+0x3d4>
        --prec;
 8005a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a98:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 8005a9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d904      	bls.n	8005aae <_etoa+0x3ee>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005aa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8005aac:	e001      	b.n	8005ab2 <_etoa+0x3f2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <_etoa+0x408>
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <_etoa+0x408>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 8005ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <_etoa+0x426>
    value /= conv.F;
 8005ace:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4623      	mov	r3, r4
 8005ad6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005ada:	f7fa fe7b 	bl	80007d4 <__aeabi_ddiv>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
  }

  // output the floating part
  const size_t start_idx = idx;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005aea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d006      	beq.n	8005b00 <_etoa+0x440>
 8005af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005af8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	e003      	b.n	8005b08 <_etoa+0x448>
 8005b00:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005b04:	e887 0018 	stmia.w	r7, {r3, r4}
 8005b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b10:	9304      	str	r3, [sp, #16]
 8005b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b14:	9303      	str	r3, [sp, #12]
 8005b16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b1a:	9302      	str	r3, [sp, #8]
 8005b1c:	e897 0018 	ldmia.w	r7, {r3, r4}
 8005b20:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	6939      	ldr	r1, [r7, #16]
 8005b2a:	6978      	ldr	r0, [r7, #20]
 8005b2c:	f7ff fb60 	bl	80051f0 <_ftoa>
 8005b30:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 8005b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d03f      	beq.n	8005bb8 <_etoa+0x4f8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <_etoa+0x488>
 8005b44:	2045      	movs	r0, #69	; 0x45
 8005b46:	e000      	b.n	8005b4a <_etoa+0x48a>
 8005b48:	2065      	movs	r0, #101	; 0x65
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	1c53      	adds	r3, r2, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	697c      	ldr	r4, [r7, #20]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6939      	ldr	r1, [r7, #16]
 8005b56:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bfb8      	it	lt
 8005b5e:	425b      	neglt	r3, r3
 8005b60:	4618      	mov	r0, r3
 8005b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b64:	0fdb      	lsrs	r3, r3, #31
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6a:	3a01      	subs	r2, #1
 8005b6c:	2105      	movs	r1, #5
 8005b6e:	9105      	str	r1, [sp, #20]
 8005b70:	9204      	str	r2, [sp, #16]
 8005b72:	2200      	movs	r2, #0
 8005b74:	9203      	str	r2, [sp, #12]
 8005b76:	220a      	movs	r2, #10
 8005b78:	9202      	str	r2, [sp, #8]
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	9000      	str	r0, [sp, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	6939      	ldr	r1, [r7, #16]
 8005b84:	6978      	ldr	r0, [r7, #20]
 8005b86:	f7ff fa5b 	bl	8005040 <_ntoa_long>
 8005b8a:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00f      	beq.n	8005bb8 <_etoa+0x4f8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005b98:	e007      	b.n	8005baa <_etoa+0x4ea>
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	1c53      	adds	r3, r2, #1
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	697c      	ldr	r4, [r7, #20]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6939      	ldr	r1, [r7, #16]
 8005ba6:	2020      	movs	r0, #32
 8005ba8:	47a0      	blx	r4
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d3f0      	bcc.n	8005b9a <_etoa+0x4da>
    }
  }
  return idx;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3754      	adds	r7, #84	; 0x54
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	eb1c432d 	.word	0xeb1c432d
 8005bcc:	3f1a36e2 	.word	0x3f1a36e2
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	412e8480 	.word	0x412e8480

08005bd8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005bd8:	b5b0      	push	{r4, r5, r7, lr}
 8005bda:	b0a0      	sub	sp, #128	; 0x80
 8005bdc:	af0a      	add	r7, sp, #40	; 0x28
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f040 8488 	bne.w	8006502 <_vsnprintf+0x92a>
    // use null output function
    out = _out_null;
 8005bf2:	4ba0      	ldr	r3, [pc, #640]	; (8005e74 <_vsnprintf+0x29c>)
 8005bf4:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8005bf6:	f000 bc84 	b.w	8006502 <_vsnprintf+0x92a>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b25      	cmp	r3, #37	; 0x25
 8005c00:	d00d      	beq.n	8005c1e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	7818      	ldrb	r0, [r3, #0]
 8005c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c08:	1c53      	adds	r3, r2, #1
 8005c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c0c:	68fc      	ldr	r4, [r7, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	47a0      	blx	r4
      format++;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	3301      	adds	r3, #1
 8005c18:	603b      	str	r3, [r7, #0]
      continue;
 8005c1a:	f000 bc72 	b.w	8006502 <_vsnprintf+0x92a>
    }
    else {
      // yes, evaluate it
      format++;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	3b20      	subs	r3, #32
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d856      	bhi.n	8005ce0 <_vsnprintf+0x108>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <_vsnprintf+0x60>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005cb9 	.word	0x08005cb9
 8005c3c:	08005ce1 	.word	0x08005ce1
 8005c40:	08005ce1 	.word	0x08005ce1
 8005c44:	08005ccd 	.word	0x08005ccd
 8005c48:	08005ce1 	.word	0x08005ce1
 8005c4c:	08005ce1 	.word	0x08005ce1
 8005c50:	08005ce1 	.word	0x08005ce1
 8005c54:	08005ce1 	.word	0x08005ce1
 8005c58:	08005ce1 	.word	0x08005ce1
 8005c5c:	08005ce1 	.word	0x08005ce1
 8005c60:	08005ce1 	.word	0x08005ce1
 8005c64:	08005ca5 	.word	0x08005ca5
 8005c68:	08005ce1 	.word	0x08005ce1
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005ce1 	.word	0x08005ce1
 8005c74:	08005ce1 	.word	0x08005ce1
 8005c78:	08005c7d 	.word	0x08005c7d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	657b      	str	r3, [r7, #84]	; 0x54
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c8e:	e02a      	b.n	8005ce6 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c92:	f043 0302 	orr.w	r3, r3, #2
 8005c96:	657b      	str	r3, [r7, #84]	; 0x54
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca2:	e020      	b.n	8005ce6 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca6:	f043 0304 	orr.w	r3, r3, #4
 8005caa:	657b      	str	r3, [r7, #84]	; 0x54
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb6:	e016      	b.n	8005ce6 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cba:	f043 0308 	orr.w	r3, r3, #8
 8005cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	603b      	str	r3, [r7, #0]
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cca:	e00c      	b.n	8005ce6 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cce:	f043 0310 	orr.w	r3, r3, #16
 8005cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	2301      	movs	r3, #1
 8005cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cde:	e002      	b.n	8005ce6 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce4:	bf00      	nop
      }
    } while (n);
 8005ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d19d      	bne.n	8005c28 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff f83d 	bl	8004d74 <_is_digit>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <_vsnprintf+0x134>
      width = _atoi(&format);
 8005d00:	463b      	mov	r3, r7
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff f84c 	bl	8004da0 <_atoi>
 8005d08:	6538      	str	r0, [r7, #80]	; 0x50
 8005d0a:	e018      	b.n	8005d3e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b2a      	cmp	r3, #42	; 0x2a
 8005d12:	d114      	bne.n	8005d3e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8005d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	66ba      	str	r2, [r7, #104]	; 0x68
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	da07      	bge.n	8005d34 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8005d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d26:	f043 0302 	orr.w	r3, r3, #2
 8005d2a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	425b      	negs	r3, r3
 8005d30:	653b      	str	r3, [r7, #80]	; 0x50
 8005d32:	e001      	b.n	8005d38 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b2e      	cmp	r3, #46	; 0x2e
 8005d48:	d124      	bne.n	8005d94 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8005d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d50:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff f809 	bl	8004d74 <_is_digit>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8005d68:	463b      	mov	r3, r7
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff f818 	bl	8004da0 <_atoi>
 8005d70:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005d72:	e00f      	b.n	8005d94 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b2a      	cmp	r3, #42	; 0x2a
 8005d7a:	d10b      	bne.n	8005d94 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8005d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d7e:	1d1a      	adds	r2, r3, #4
 8005d80:	66ba      	str	r2, [r7, #104]	; 0x68
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	3301      	adds	r3, #1
 8005d92:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	3b68      	subs	r3, #104	; 0x68
 8005d9a:	2b12      	cmp	r3, #18
 8005d9c:	d866      	bhi.n	8005e6c <_vsnprintf+0x294>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <_vsnprintf+0x1cc>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005e17 	.word	0x08005e17
 8005da8:	08005e6d 	.word	0x08005e6d
 8005dac:	08005e4d 	.word	0x08005e4d
 8005db0:	08005e6d 	.word	0x08005e6d
 8005db4:	08005df1 	.word	0x08005df1
 8005db8:	08005e6d 	.word	0x08005e6d
 8005dbc:	08005e6d 	.word	0x08005e6d
 8005dc0:	08005e6d 	.word	0x08005e6d
 8005dc4:	08005e6d 	.word	0x08005e6d
 8005dc8:	08005e6d 	.word	0x08005e6d
 8005dcc:	08005e6d 	.word	0x08005e6d
 8005dd0:	08005e6d 	.word	0x08005e6d
 8005dd4:	08005e3d 	.word	0x08005e3d
 8005dd8:	08005e6d 	.word	0x08005e6d
 8005ddc:	08005e6d 	.word	0x08005e6d
 8005de0:	08005e6d 	.word	0x08005e6d
 8005de4:	08005e6d 	.word	0x08005e6d
 8005de8:	08005e6d 	.word	0x08005e6d
 8005dec:	08005e5d 	.word	0x08005e5d
      case 'l' :
        flags |= FLAGS_LONG;
 8005df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b6c      	cmp	r3, #108	; 0x6c
 8005e04:	d134      	bne.n	8005e70 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8005e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e0c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	3301      	adds	r3, #1
 8005e12:	603b      	str	r3, [r7, #0]
        }
        break;
 8005e14:	e02c      	b.n	8005e70 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8005e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b68      	cmp	r3, #104	; 0x68
 8005e2a:	d125      	bne.n	8005e78 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8005e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e32:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	3301      	adds	r3, #1
 8005e38:	603b      	str	r3, [r7, #0]
        }
        break;
 8005e3a:	e01d      	b.n	8005e78 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e42:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	603b      	str	r3, [r7, #0]
        break;
 8005e4a:	e016      	b.n	8005e7a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e52:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	603b      	str	r3, [r7, #0]
        break;
 8005e5a:	e00e      	b.n	8005e7a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	603b      	str	r3, [r7, #0]
        break;
 8005e6a:	e006      	b.n	8005e7a <_vsnprintf+0x2a2>
      default :
        break;
 8005e6c:	bf00      	nop
 8005e6e:	e004      	b.n	8005e7a <_vsnprintf+0x2a2>
        break;
 8005e70:	bf00      	nop
 8005e72:	e002      	b.n	8005e7a <_vsnprintf+0x2a2>
 8005e74:	08004cfd 	.word	0x08004cfd
        break;
 8005e78:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	3b25      	subs	r3, #37	; 0x25
 8005e80:	2b53      	cmp	r3, #83	; 0x53
 8005e82:	f200 8331 	bhi.w	80064e8 <_vsnprintf+0x910>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <_vsnprintf+0x2b4>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	080064d1 	.word	0x080064d1
 8005e90:	080064e9 	.word	0x080064e9
 8005e94:	080064e9 	.word	0x080064e9
 8005e98:	080064e9 	.word	0x080064e9
 8005e9c:	080064e9 	.word	0x080064e9
 8005ea0:	080064e9 	.word	0x080064e9
 8005ea4:	080064e9 	.word	0x080064e9
 8005ea8:	080064e9 	.word	0x080064e9
 8005eac:	080064e9 	.word	0x080064e9
 8005eb0:	080064e9 	.word	0x080064e9
 8005eb4:	080064e9 	.word	0x080064e9
 8005eb8:	080064e9 	.word	0x080064e9
 8005ebc:	080064e9 	.word	0x080064e9
 8005ec0:	080064e9 	.word	0x080064e9
 8005ec4:	080064e9 	.word	0x080064e9
 8005ec8:	080064e9 	.word	0x080064e9
 8005ecc:	080064e9 	.word	0x080064e9
 8005ed0:	080064e9 	.word	0x080064e9
 8005ed4:	080064e9 	.word	0x080064e9
 8005ed8:	080064e9 	.word	0x080064e9
 8005edc:	080064e9 	.word	0x080064e9
 8005ee0:	080064e9 	.word	0x080064e9
 8005ee4:	080064e9 	.word	0x080064e9
 8005ee8:	080064e9 	.word	0x080064e9
 8005eec:	080064e9 	.word	0x080064e9
 8005ef0:	080064e9 	.word	0x080064e9
 8005ef4:	080064e9 	.word	0x080064e9
 8005ef8:	080064e9 	.word	0x080064e9
 8005efc:	080064e9 	.word	0x080064e9
 8005f00:	080064e9 	.word	0x080064e9
 8005f04:	080064e9 	.word	0x080064e9
 8005f08:	080064e9 	.word	0x080064e9
 8005f0c:	080062ab 	.word	0x080062ab
 8005f10:	08006265 	.word	0x08006265
 8005f14:	080062ab 	.word	0x080062ab
 8005f18:	080064e9 	.word	0x080064e9
 8005f1c:	080064e9 	.word	0x080064e9
 8005f20:	080064e9 	.word	0x080064e9
 8005f24:	080064e9 	.word	0x080064e9
 8005f28:	080064e9 	.word	0x080064e9
 8005f2c:	080064e9 	.word	0x080064e9
 8005f30:	080064e9 	.word	0x080064e9
 8005f34:	080064e9 	.word	0x080064e9
 8005f38:	080064e9 	.word	0x080064e9
 8005f3c:	080064e9 	.word	0x080064e9
 8005f40:	080064e9 	.word	0x080064e9
 8005f44:	080064e9 	.word	0x080064e9
 8005f48:	080064e9 	.word	0x080064e9
 8005f4c:	080064e9 	.word	0x080064e9
 8005f50:	080064e9 	.word	0x080064e9
 8005f54:	080064e9 	.word	0x080064e9
 8005f58:	08005fdd 	.word	0x08005fdd
 8005f5c:	080064e9 	.word	0x080064e9
 8005f60:	080064e9 	.word	0x080064e9
 8005f64:	080064e9 	.word	0x080064e9
 8005f68:	080064e9 	.word	0x080064e9
 8005f6c:	080064e9 	.word	0x080064e9
 8005f70:	080064e9 	.word	0x080064e9
 8005f74:	080064e9 	.word	0x080064e9
 8005f78:	080064e9 	.word	0x080064e9
 8005f7c:	080064e9 	.word	0x080064e9
 8005f80:	08005fdd 	.word	0x08005fdd
 8005f84:	08006311 	.word	0x08006311
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	080062ab 	.word	0x080062ab
 8005f90:	08006265 	.word	0x08006265
 8005f94:	080062ab 	.word	0x080062ab
 8005f98:	080064e9 	.word	0x080064e9
 8005f9c:	08005fdd 	.word	0x08005fdd
 8005fa0:	080064e9 	.word	0x080064e9
 8005fa4:	080064e9 	.word	0x080064e9
 8005fa8:	080064e9 	.word	0x080064e9
 8005fac:	080064e9 	.word	0x080064e9
 8005fb0:	080064e9 	.word	0x080064e9
 8005fb4:	08005fdd 	.word	0x08005fdd
 8005fb8:	08006449 	.word	0x08006449
 8005fbc:	080064e9 	.word	0x080064e9
 8005fc0:	080064e9 	.word	0x080064e9
 8005fc4:	08006385 	.word	0x08006385
 8005fc8:	080064e9 	.word	0x080064e9
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	080064e9 	.word	0x080064e9
 8005fd4:	080064e9 	.word	0x080064e9
 8005fd8:	08005fdd 	.word	0x08005fdd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b78      	cmp	r3, #120	; 0x78
 8005fe2:	d003      	beq.n	8005fec <_vsnprintf+0x414>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b58      	cmp	r3, #88	; 0x58
 8005fea:	d102      	bne.n	8005ff2 <_vsnprintf+0x41a>
          base = 16U;
 8005fec:	2310      	movs	r3, #16
 8005fee:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff0:	e013      	b.n	800601a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b6f      	cmp	r3, #111	; 0x6f
 8005ff8:	d102      	bne.n	8006000 <_vsnprintf+0x428>
          base =  8U;
 8005ffa:	2308      	movs	r3, #8
 8005ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ffe:	e00c      	b.n	800601a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b62      	cmp	r3, #98	; 0x62
 8006006:	d102      	bne.n	800600e <_vsnprintf+0x436>
          base =  2U;
 8006008:	2302      	movs	r3, #2
 800600a:	643b      	str	r3, [r7, #64]	; 0x40
 800600c:	e005      	b.n	800601a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800600e:	230a      	movs	r3, #10
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8006012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006014:	f023 0310 	bic.w	r3, r3, #16
 8006018:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b58      	cmp	r3, #88	; 0x58
 8006020:	d103      	bne.n	800602a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8006022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006024:	f043 0320 	orr.w	r3, r3, #32
 8006028:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b69      	cmp	r3, #105	; 0x69
 8006030:	d007      	beq.n	8006042 <_vsnprintf+0x46a>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d003      	beq.n	8006042 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800603a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603c:	f023 030c 	bic.w	r3, r3, #12
 8006040:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8006042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800604c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b69      	cmp	r3, #105	; 0x69
 800605a:	d004      	beq.n	8006066 <_vsnprintf+0x48e>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b64      	cmp	r3, #100	; 0x64
 8006062:	f040 808c 	bne.w	800617e <_vsnprintf+0x5a6>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8006066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800606c:	2b00      	cmp	r3, #0
 800606e:	d02d      	beq.n	80060cc <_vsnprintf+0x4f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8006070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006072:	3307      	adds	r3, #7
 8006074:	f023 0307 	bic.w	r3, r3, #7
 8006078:	f103 0208 	add.w	r2, r3, #8
 800607c:	66ba      	str	r2, [r7, #104]	; 0x68
 800607e:	cb18      	ldmia	r3, {r3, r4}
 8006080:	e9c7 3408 	strd	r3, r4, [r7, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006084:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f174 0200 	sbcs.w	r2, r4, #0
 800608e:	da02      	bge.n	8006096 <_vsnprintf+0x4be>
 8006090:	425b      	negs	r3, r3
 8006092:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8006096:	4619      	mov	r1, r3
 8006098:	4622      	mov	r2, r4
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	0fdb      	lsrs	r3, r3, #31
 800609e:	b2d8      	uxtb	r0, r3
 80060a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a2:	f04f 0400 	mov.w	r4, #0
 80060a6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80060a8:	9508      	str	r5, [sp, #32]
 80060aa:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80060ac:	9507      	str	r5, [sp, #28]
 80060ae:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80060b0:	9506      	str	r5, [sp, #24]
 80060b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060b6:	9002      	str	r0, [sp, #8]
 80060b8:	e88d 0006 	stmia.w	sp, {r1, r2}
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff f823 	bl	800510e <_ntoa_long_long>
 80060c8:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80060ca:	e0c7      	b.n	800625c <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80060cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01e      	beq.n	8006114 <_vsnprintf+0x53c>
            const long value = va_arg(va, long);
 80060d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060d8:	1d1a      	adds	r2, r3, #4
 80060da:	66ba      	str	r2, [r7, #104]	; 0x68
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bfb8      	it	lt
 80060e6:	425b      	neglt	r3, r3
 80060e8:	4619      	mov	r1, r3
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	0fdb      	lsrs	r3, r3, #31
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060f2:	9205      	str	r2, [sp, #20]
 80060f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060f6:	9204      	str	r2, [sp, #16]
 80060f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060fa:	9203      	str	r2, [sp, #12]
 80060fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060fe:	9202      	str	r2, [sp, #8]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	9100      	str	r1, [sp, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7fe ff98 	bl	8005040 <_ntoa_long>
 8006110:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8006112:	e0a3      	b.n	800625c <_vsnprintf+0x684>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8006114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <_vsnprintf+0x552>
 800611e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006120:	1d1a      	adds	r2, r3, #4
 8006122:	66ba      	str	r2, [r7, #104]	; 0x68
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e00e      	b.n	8006148 <_vsnprintf+0x570>
 800612a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800612c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <_vsnprintf+0x568>
 8006134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006136:	1d1a      	adds	r2, r3, #4
 8006138:	66ba      	str	r2, [r7, #104]	; 0x68
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	b21b      	sxth	r3, r3
 800613e:	e003      	b.n	8006148 <_vsnprintf+0x570>
 8006140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	66ba      	str	r2, [r7, #104]	; 0x68
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfb8      	it	lt
 8006150:	425b      	neglt	r3, r3
 8006152:	4619      	mov	r1, r3
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	0fdb      	lsrs	r3, r3, #31
 8006158:	b2db      	uxtb	r3, r3
 800615a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800615c:	9205      	str	r2, [sp, #20]
 800615e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006160:	9204      	str	r2, [sp, #16]
 8006162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006164:	9203      	str	r2, [sp, #12]
 8006166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006168:	9202      	str	r2, [sp, #8]
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	9100      	str	r1, [sp, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7fe ff63 	bl	8005040 <_ntoa_long>
 800617a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800617c:	e06e      	b.n	800625c <_vsnprintf+0x684>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800617e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01f      	beq.n	80061c8 <_vsnprintf+0x5f0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8006188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800618a:	3307      	adds	r3, #7
 800618c:	f023 0307 	bic.w	r3, r3, #7
 8006190:	f103 0208 	add.w	r2, r3, #8
 8006194:	66ba      	str	r2, [r7, #104]	; 0x68
 8006196:	cb18      	ldmia	r3, {r3, r4}
 8006198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800619a:	4611      	mov	r1, r2
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80061a2:	9008      	str	r0, [sp, #32]
 80061a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80061a6:	9007      	str	r0, [sp, #28]
 80061a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80061aa:	9006      	str	r0, [sp, #24]
 80061ac:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80061b0:	2200      	movs	r2, #0
 80061b2:	9202      	str	r2, [sp, #8]
 80061b4:	e88d 0018 	stmia.w	sp, {r3, r4}
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7fe ffa5 	bl	800510e <_ntoa_long_long>
 80061c4:	6478      	str	r0, [r7, #68]	; 0x44
 80061c6:	e049      	b.n	800625c <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80061c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d016      	beq.n	8006200 <_vsnprintf+0x628>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80061d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	66ba      	str	r2, [r7, #104]	; 0x68
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061dc:	9205      	str	r2, [sp, #20]
 80061de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061e0:	9204      	str	r2, [sp, #16]
 80061e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061e4:	9203      	str	r2, [sp, #12]
 80061e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061e8:	9202      	str	r2, [sp, #8]
 80061ea:	2200      	movs	r2, #0
 80061ec:	9201      	str	r2, [sp, #4]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7fe ff22 	bl	8005040 <_ntoa_long>
 80061fc:	6478      	str	r0, [r7, #68]	; 0x44
 80061fe:	e02d      	b.n	800625c <_vsnprintf+0x684>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8006200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <_vsnprintf+0x63e>
 800620a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800620c:	1d1a      	adds	r2, r3, #4
 800620e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	e00e      	b.n	8006234 <_vsnprintf+0x65c>
 8006216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <_vsnprintf+0x654>
 8006220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006222:	1d1a      	adds	r2, r3, #4
 8006224:	66ba      	str	r2, [r7, #104]	; 0x68
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	e003      	b.n	8006234 <_vsnprintf+0x65c>
 800622c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800622e:	1d1a      	adds	r2, r3, #4
 8006230:	66ba      	str	r2, [r7, #104]	; 0x68
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8006236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006238:	9305      	str	r3, [sp, #20]
 800623a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006240:	9303      	str	r3, [sp, #12]
 8006242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006244:	9302      	str	r3, [sp, #8]
 8006246:	2300      	movs	r3, #0
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7fe fef3 	bl	8005040 <_ntoa_long>
 800625a:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	3301      	adds	r3, #1
 8006260:	603b      	str	r3, [r7, #0]
        break;
 8006262:	e14e      	b.n	8006502 <_vsnprintf+0x92a>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b46      	cmp	r3, #70	; 0x46
 800626a:	d103      	bne.n	8006274 <_vsnprintf+0x69c>
 800626c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800626e:	f043 0320 	orr.w	r3, r3, #32
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006276:	3307      	adds	r3, #7
 8006278:	f023 0307 	bic.w	r3, r3, #7
 800627c:	f103 0208 	add.w	r2, r3, #8
 8006280:	66ba      	str	r2, [r7, #104]	; 0x68
 8006282:	cb18      	ldmia	r3, {r3, r4}
 8006284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006286:	9204      	str	r2, [sp, #16]
 8006288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800628a:	9203      	str	r2, [sp, #12]
 800628c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800628e:	9202      	str	r2, [sp, #8]
 8006290:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7fe ffa8 	bl	80051f0 <_ftoa>
 80062a0:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	603b      	str	r3, [r7, #0]
        break;
 80062a8:	e12b      	b.n	8006502 <_vsnprintf+0x92a>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b67      	cmp	r3, #103	; 0x67
 80062b0:	d003      	beq.n	80062ba <_vsnprintf+0x6e2>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b47      	cmp	r3, #71	; 0x47
 80062b8:	d103      	bne.n	80062c2 <_vsnprintf+0x6ea>
 80062ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062c0:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b45      	cmp	r3, #69	; 0x45
 80062c8:	d003      	beq.n	80062d2 <_vsnprintf+0x6fa>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b47      	cmp	r3, #71	; 0x47
 80062d0:	d103      	bne.n	80062da <_vsnprintf+0x702>
 80062d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d4:	f043 0320 	orr.w	r3, r3, #32
 80062d8:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80062da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062dc:	3307      	adds	r3, #7
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	f103 0208 	add.w	r2, r3, #8
 80062e6:	66ba      	str	r2, [r7, #104]	; 0x68
 80062e8:	cb18      	ldmia	r3, {r3, r4}
 80062ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062ec:	9204      	str	r2, [sp, #16]
 80062ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062f0:	9203      	str	r2, [sp, #12]
 80062f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062f4:	9202      	str	r2, [sp, #8]
 80062f6:	e88d 0018 	stmia.w	sp, {r3, r4}
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff f9dd 	bl	80056c0 <_etoa>
 8006306:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	603b      	str	r3, [r7, #0]
        break;
 800630e:	e0f8      	b.n	8006502 <_vsnprintf+0x92a>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8006310:	2301      	movs	r3, #1
 8006312:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8006314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10e      	bne.n	800633c <_vsnprintf+0x764>
          while (l++ < width) {
 800631e:	e007      	b.n	8006330 <_vsnprintf+0x758>
            out(' ', buffer, idx++, maxlen);
 8006320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006322:	1c53      	adds	r3, r2, #1
 8006324:	647b      	str	r3, [r7, #68]	; 0x44
 8006326:	68fc      	ldr	r4, [r7, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	2020      	movs	r0, #32
 800632e:	47a0      	blx	r4
          while (l++ < width) {
 8006330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006336:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006338:	4293      	cmp	r3, r2
 800633a:	d3f1      	bcc.n	8006320 <_vsnprintf+0x748>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800633c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	66ba      	str	r2, [r7, #104]	; 0x68
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	b2d8      	uxtb	r0, r3
 8006346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006348:	1c53      	adds	r3, r2, #1
 800634a:	647b      	str	r3, [r7, #68]	; 0x44
 800634c:	68fc      	ldr	r4, [r7, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8006354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00e      	beq.n	800637c <_vsnprintf+0x7a4>
          while (l++ < width) {
 800635e:	e007      	b.n	8006370 <_vsnprintf+0x798>
            out(' ', buffer, idx++, maxlen);
 8006360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006362:	1c53      	adds	r3, r2, #1
 8006364:	647b      	str	r3, [r7, #68]	; 0x44
 8006366:	68fc      	ldr	r4, [r7, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	2020      	movs	r0, #32
 800636e:	47a0      	blx	r4
          while (l++ < width) {
 8006370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006376:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006378:	4293      	cmp	r3, r2
 800637a:	d3f1      	bcc.n	8006360 <_vsnprintf+0x788>
          }
        }
        format++;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	3301      	adds	r3, #1
 8006380:	603b      	str	r3, [r7, #0]
        break;
 8006382:	e0be      	b.n	8006502 <_vsnprintf+0x92a>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8006384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006386:	1d1a      	adds	r2, r3, #4
 8006388:	66ba      	str	r2, [r7, #104]	; 0x68
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800638e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <_vsnprintf+0x7c0>
 8006394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006396:	e001      	b.n	800639c <_vsnprintf+0x7c4>
 8006398:	f04f 33ff 	mov.w	r3, #4294967295
 800639c:	4619      	mov	r1, r3
 800639e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063a0:	f7fe fccc 	bl	8004d3c <_strnlen_s>
 80063a4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80063a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <_vsnprintf+0x7e4>
          l = (l < precision ? l : precision);
 80063b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bf28      	it	cs
 80063b8:	4613      	movcs	r3, r2
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80063bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d11a      	bne.n	80063fc <_vsnprintf+0x824>
          while (l++ < width) {
 80063c6:	e007      	b.n	80063d8 <_vsnprintf+0x800>
            out(' ', buffer, idx++, maxlen);
 80063c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ca:	1c53      	adds	r3, r2, #1
 80063cc:	647b      	str	r3, [r7, #68]	; 0x44
 80063ce:	68fc      	ldr	r4, [r7, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	2020      	movs	r0, #32
 80063d6:	47a0      	blx	r4
          while (l++ < width) {
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	637a      	str	r2, [r7, #52]	; 0x34
 80063de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d3f1      	bcc.n	80063c8 <_vsnprintf+0x7f0>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80063e4:	e00a      	b.n	80063fc <_vsnprintf+0x824>
          out(*(p++), buffer, idx++, maxlen);
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80063ec:	7818      	ldrb	r0, [r3, #0]
 80063ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063f0:	1c53      	adds	r3, r2, #1
 80063f2:	647b      	str	r3, [r7, #68]	; 0x44
 80063f4:	68fc      	ldr	r4, [r7, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d009      	beq.n	8006418 <_vsnprintf+0x840>
 8006404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0eb      	beq.n	80063e6 <_vsnprintf+0x80e>
 800640e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006410:	1e5a      	subs	r2, r3, #1
 8006412:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e6      	bne.n	80063e6 <_vsnprintf+0x80e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8006418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <_vsnprintf+0x868>
          while (l++ < width) {
 8006422:	e007      	b.n	8006434 <_vsnprintf+0x85c>
            out(' ', buffer, idx++, maxlen);
 8006424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006426:	1c53      	adds	r3, r2, #1
 8006428:	647b      	str	r3, [r7, #68]	; 0x44
 800642a:	68fc      	ldr	r4, [r7, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	2020      	movs	r0, #32
 8006432:	47a0      	blx	r4
          while (l++ < width) {
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	637a      	str	r2, [r7, #52]	; 0x34
 800643a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800643c:	4293      	cmp	r3, r2
 800643e:	d3f1      	bcc.n	8006424 <_vsnprintf+0x84c>
          }
        }
        format++;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	603b      	str	r3, [r7, #0]
        break;
 8006446:	e05c      	b.n	8006502 <_vsnprintf+0x92a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8006448:	2308      	movs	r3, #8
 800644a:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800644c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800644e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8006452:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8006454:	2300      	movs	r3, #0
 8006456:	75fb      	strb	r3, [r7, #23]
        if (is_ll) {
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01d      	beq.n	800649a <_vsnprintf+0x8c2>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800645e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006460:	1d1a      	adds	r2, r3, #4
 8006462:	66ba      	str	r2, [r7, #104]	; 0x68
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f04f 0400 	mov.w	r4, #0
 800646a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800646c:	9208      	str	r2, [sp, #32]
 800646e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006470:	9207      	str	r2, [sp, #28]
 8006472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006474:	9206      	str	r2, [sp, #24]
 8006476:	f04f 0110 	mov.w	r1, #16
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8006482:	2200      	movs	r2, #0
 8006484:	9202      	str	r2, [sp, #8]
 8006486:	e88d 0018 	stmia.w	sp, {r3, r4}
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7fe fe3c 	bl	800510e <_ntoa_long_long>
 8006496:	6478      	str	r0, [r7, #68]	; 0x44
 8006498:	e016      	b.n	80064c8 <_vsnprintf+0x8f0>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800649a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800649c:	1d1a      	adds	r2, r3, #4
 800649e:	66ba      	str	r2, [r7, #104]	; 0x68
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a6:	9305      	str	r3, [sp, #20]
 80064a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064aa:	9304      	str	r3, [sp, #16]
 80064ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ae:	9303      	str	r3, [sp, #12]
 80064b0:	2310      	movs	r3, #16
 80064b2:	9302      	str	r3, [sp, #8]
 80064b4:	2300      	movs	r3, #0
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	9200      	str	r2, [sp, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7fe fdbd 	bl	8005040 <_ntoa_long>
 80064c6:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	603b      	str	r3, [r7, #0]
        break;
 80064ce:	e018      	b.n	8006502 <_vsnprintf+0x92a>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80064d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064d2:	1c53      	adds	r3, r2, #1
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
 80064d6:	68fc      	ldr	r4, [r7, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	2025      	movs	r0, #37	; 0x25
 80064de:	47a0      	blx	r4
        format++;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	603b      	str	r3, [r7, #0]
        break;
 80064e6:	e00c      	b.n	8006502 <_vsnprintf+0x92a>

      default :
        out(*format, buffer, idx++, maxlen);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	7818      	ldrb	r0, [r3, #0]
 80064ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ee:	1c53      	adds	r3, r2, #1
 80064f0:	647b      	str	r3, [r7, #68]	; 0x44
 80064f2:	68fc      	ldr	r4, [r7, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	47a0      	blx	r4
        format++;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	603b      	str	r3, [r7, #0]
        break;
 8006500:	bf00      	nop
  while (*format)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f47f ab77 	bne.w	8005bfa <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800650c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <_vsnprintf+0x942>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	1e5a      	subs	r2, r3, #1
 8006518:	e000      	b.n	800651c <_vsnprintf+0x944>
 800651a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800651c:	68fc      	ldr	r4, [r7, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	2000      	movs	r0, #0
 8006524:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8006526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006528:	4618      	mov	r0, r3
 800652a:	3758      	adds	r7, #88	; 0x58
 800652c:	46bd      	mov	sp, r7
 800652e:	bdb0      	pop	{r4, r5, r7, pc}

08006530 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8006530:	b40f      	push	{r0, r1, r2, r3}
 8006532:	b580      	push	{r7, lr}
 8006534:	b086      	sub	sp, #24
 8006536:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8006538:	f107 031c 	add.w	r3, r7, #28
 800653c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800653e:	1d39      	adds	r1, r7, #4
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f04f 32ff 	mov.w	r2, #4294967295
 800654a:	4806      	ldr	r0, [pc, #24]	; (8006564 <printf_+0x34>)
 800654c:	f7ff fb44 	bl	8005bd8 <_vsnprintf>
 8006550:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8006552:	68fb      	ldr	r3, [r7, #12]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800655e:	b004      	add	sp, #16
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	08004d17 	.word	0x08004d17

08006568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800656c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800656e:	e003      	b.n	8006578 <LoopCopyDataInit>

08006570 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8006572:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006574:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006576:	3104      	adds	r1, #4

08006578 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006578:	480b      	ldr	r0, [pc, #44]	; (80065a8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800657c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800657e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006580:	d3f6      	bcc.n	8006570 <CopyDataInit>
	ldr	r2, =_sbss
 8006582:	4a0b      	ldr	r2, [pc, #44]	; (80065b0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8006584:	e002      	b.n	800658c <LoopFillZerobss>

08006586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006586:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006588:	f842 3b04 	str.w	r3, [r2], #4

0800658c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800658c:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800658e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006590:	d3f9      	bcc.n	8006586 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8006592:	f000 f82b 	bl	80065ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 8006596:	f000 fa7f 	bl	8006a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800659a:	f7fe fb6b 	bl	8004c74 <main>
	bx	lr
 800659e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80065a0:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 80065a4:	08006cd8 	.word	0x08006cd8
	ldr	r0, =_sdata
 80065a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80065ac:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 80065b0:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 80065b4:	20001da8 	.word	0x20001da8

080065b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80065b8:	e7fe      	b.n	80065b8 <ADC1_IRQHandler>

080065ba <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80065ba:	b480      	push	{r7}
 80065bc:	af00      	add	r7, sp, #0
}
 80065be:	bf00      	nop
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr

080065c6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80065c6:	b480      	push	{r7}
 80065c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80065ca:	e7fe      	b.n	80065ca <HardFault_Handler+0x4>

080065cc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80065d0:	e7fe      	b.n	80065d0 <MemManage_Handler+0x4>

080065d2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80065d2:	b480      	push	{r7}
 80065d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80065d6:	e7fe      	b.n	80065d6 <BusFault_Handler+0x4>

080065d8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80065dc:	e7fe      	b.n	80065dc <UsageFault_Handler+0x4>

080065de <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80065de:	b480      	push	{r7}
 80065e0:	af00      	add	r7, sp, #0
}
 80065e2:	bf00      	nop
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr
	...

080065ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80065f0:	4a17      	ldr	r2, [pc, #92]	; (8006650 <SystemInit+0x64>)
 80065f2:	4b17      	ldr	r3, [pc, #92]	; (8006650 <SystemInit+0x64>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80065fc:	4914      	ldr	r1, [pc, #80]	; (8006650 <SystemInit+0x64>)
 80065fe:	4b14      	ldr	r3, [pc, #80]	; (8006650 <SystemInit+0x64>)
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	4b14      	ldr	r3, [pc, #80]	; (8006654 <SystemInit+0x68>)
 8006604:	4013      	ands	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006608:	4a11      	ldr	r2, [pc, #68]	; (8006650 <SystemInit+0x64>)
 800660a:	4b11      	ldr	r3, [pc, #68]	; (8006650 <SystemInit+0x64>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006616:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006618:	4a0d      	ldr	r2, [pc, #52]	; (8006650 <SystemInit+0x64>)
 800661a:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <SystemInit+0x64>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006622:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8006624:	4a0a      	ldr	r2, [pc, #40]	; (8006650 <SystemInit+0x64>)
 8006626:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <SystemInit+0x64>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800662e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8006630:	4b07      	ldr	r3, [pc, #28]	; (8006650 <SystemInit+0x64>)
 8006632:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006636:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <SystemInit+0x64>)
 800663a:	2200      	movs	r2, #0
 800663c:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800663e:	f000 f80d 	bl	800665c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <SystemInit+0x6c>)
 8006644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006648:	609a      	str	r2, [r3, #8]
#endif 
}
 800664a:	bf00      	nop
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40021000 	.word	0x40021000
 8006654:	f8ff0000 	.word	0xf8ff0000
 8006658:	e000ed00 	.word	0xe000ed00

0800665c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8006660:	f000 f802 	bl	8006668 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8006664:	bf00      	nop
 8006666:	bd80      	pop	{r7, pc}

08006668 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	607b      	str	r3, [r7, #4]
 8006672:	2300      	movs	r3, #0
 8006674:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8006676:	4a30      	ldr	r2, [pc, #192]	; (8006738 <SetSysClockTo24+0xd0>)
 8006678:	4b2f      	ldr	r3, [pc, #188]	; (8006738 <SetSysClockTo24+0xd0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006680:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8006682:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <SetSysClockTo24+0xd0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3301      	adds	r3, #1
 8006690:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <SetSysClockTo24+0x38>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800669e:	d1f0      	bne.n	8006682 <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <SetSysClockTo24+0xd0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80066ac:	2301      	movs	r3, #1
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	e001      	b.n	80066b6 <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80066b2:	2300      	movs	r3, #0
 80066b4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d137      	bne.n	800672c <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80066bc:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <SetSysClockTo24+0xd0>)
 80066be:	4b1e      	ldr	r3, [pc, #120]	; (8006738 <SetSysClockTo24+0xd0>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80066c4:	4a1c      	ldr	r2, [pc, #112]	; (8006738 <SetSysClockTo24+0xd0>)
 80066c6:	4b1c      	ldr	r3, [pc, #112]	; (8006738 <SetSysClockTo24+0xd0>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80066cc:	4a1a      	ldr	r2, [pc, #104]	; (8006738 <SetSysClockTo24+0xd0>)
 80066ce:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <SetSysClockTo24+0xd0>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80066d4:	4a18      	ldr	r2, [pc, #96]	; (8006738 <SetSysClockTo24+0xd0>)
 80066d6:	4b18      	ldr	r3, [pc, #96]	; (8006738 <SetSysClockTo24+0xd0>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80066de:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 80066e0:	4a15      	ldr	r2, [pc, #84]	; (8006738 <SetSysClockTo24+0xd0>)
 80066e2:	4b15      	ldr	r3, [pc, #84]	; (8006738 <SetSysClockTo24+0xd0>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 80066ea:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80066ec:	4a12      	ldr	r2, [pc, #72]	; (8006738 <SetSysClockTo24+0xd0>)
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <SetSysClockTo24+0xd0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066f6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80066f8:	bf00      	nop
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <SetSysClockTo24+0xd0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f9      	beq.n	80066fa <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006706:	4a0c      	ldr	r2, [pc, #48]	; (8006738 <SetSysClockTo24+0xd0>)
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <SetSysClockTo24+0xd0>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f023 0303 	bic.w	r3, r3, #3
 8006710:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8006712:	4a09      	ldr	r2, [pc, #36]	; (8006738 <SetSysClockTo24+0xd0>)
 8006714:	4b08      	ldr	r3, [pc, #32]	; (8006738 <SetSysClockTo24+0xd0>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f043 0302 	orr.w	r3, r3, #2
 800671c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800671e:	bf00      	nop
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <SetSysClockTo24+0xd0>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b08      	cmp	r3, #8
 800672a:	d1f9      	bne.n	8006720 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000

0800673c <TIM3_IRQHandler>:
 * Timer 3 ISR
 *
 * @return none.
 **************************************************************************/
void TIM3_IRQHandler(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
    if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8006740:	2101      	movs	r1, #1
 8006742:	4811      	ldr	r0, [pc, #68]	; (8006788 <TIM3_IRQHandler+0x4c>)
 8006744:	f7fd ff2a 	bl	800459c <TIM_GetITStatus>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d015      	beq.n	800677a <TIM3_IRQHandler+0x3e>
    {
    	elapsed_ms++;
 800674e:	4b0f      	ldr	r3, [pc, #60]	; (800678c <TIM3_IRQHandler+0x50>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	4a0d      	ldr	r2, [pc, #52]	; (800678c <TIM3_IRQHandler+0x50>)
 8006756:	6013      	str	r3, [r2, #0]
    	if(timeOutTimerStatus == 1)
 8006758:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <TIM3_IRQHandler+0x54>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10b      	bne.n	800677a <TIM3_IRQHandler+0x3e>
    	{
    		if((elapsed_ms - timeOutTimerStartTime) > timeOutTimerAlarmTime)
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <TIM3_IRQHandler+0x50>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <TIM3_IRQHandler+0x58>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <TIM3_IRQHandler+0x5c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d902      	bls.n	800677a <TIM3_IRQHandler+0x3e>
    			timeOutTimerAlarmStatus = 1;
 8006774:	4b09      	ldr	r3, [pc, #36]	; (800679c <TIM3_IRQHandler+0x60>)
 8006776:	2201      	movs	r2, #1
 8006778:	701a      	strb	r2, [r3, #0]
    	}
   }

    TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 800677a:	2101      	movs	r1, #1
 800677c:	4802      	ldr	r0, [pc, #8]	; (8006788 <TIM3_IRQHandler+0x4c>)
 800677e:	f7fd ff36 	bl	80045ee <TIM_ClearITPendingBit>
}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	40000400 	.word	0x40000400
 800678c:	20001d94 	.word	0x20001d94
 8006790:	20001d98 	.word	0x20001d98
 8006794:	20001da0 	.word	0x20001da0
 8006798:	20001d9c 	.word	0x20001d9c
 800679c:	20001da4 	.word	0x20001da4

080067a0 <timer3_init>:
 * Initializes timer 3 peripheral for delay and millis functions.
 *
 * @return none.
 **************************************************************************/
void timer3_init(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80067a6:	2101      	movs	r1, #1
 80067a8:	2002      	movs	r0, #2
 80067aa:	f7fd fb51 	bl	8003e50 <RCC_APB1PeriphClockCmd>

	//configure timer 3 interrupt
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 80067ae:	231d      	movs	r3, #29
 80067b0:	733b      	strb	r3, [r7, #12]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	737b      	strb	r3, [r7, #13]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73bb      	strb	r3, [r7, #14]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&nvicStructure);
 80067be:	f107 030c 	add.w	r3, r7, #12
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fc ffe0 	bl	8003788 <NVIC_Init>
	 * interrupt.
	 *
	 * TIM_Period is actually auto reload register(ARR).
	 */
	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 2400-1;
 80067c8:	f640 135f 	movw	r3, #2399	; 0x95f
 80067cc:	803b      	strh	r3, [r7, #0]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80067ce:	2300      	movs	r3, #0
 80067d0:	807b      	strh	r3, [r7, #2]
	timerInitStructure.TIM_Period = 10-1;
 80067d2:	2309      	movs	r3, #9
 80067d4:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80067d6:	2300      	movs	r3, #0
 80067d8:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_RepetitionCounter = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	723b      	strb	r3, [r7, #8]
	TIM_TimeBaseInit(TIM3, &timerInitStructure);
 80067de:	463b      	mov	r3, r7
 80067e0:	4619      	mov	r1, r3
 80067e2:	4808      	ldr	r0, [pc, #32]	; (8006804 <timer3_init+0x64>)
 80067e4:	f7fd fb52 	bl	8003e8c <TIM_TimeBaseInit>

	TIM_ITConfig(TIM3, TIM_IT_Update , ENABLE);
 80067e8:	2201      	movs	r2, #1
 80067ea:	2101      	movs	r1, #1
 80067ec:	4805      	ldr	r0, [pc, #20]	; (8006804 <timer3_init+0x64>)
 80067ee:	f7fd fdea 	bl	80043c6 <TIM_ITConfig>
	TIM_Cmd(TIM3, ENABLE);
 80067f2:	2101      	movs	r1, #1
 80067f4:	4803      	ldr	r0, [pc, #12]	; (8006804 <timer3_init+0x64>)
 80067f6:	f7fd fdc7 	bl	8004388 <TIM_Cmd>
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40000400 	.word	0x40000400

08006808 <motors_pwm_init>:
 * initializes timer 2 to output PWM signals
 *
 * @return none.
 **************************************************************************/
void motors_pwm_init(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800680e:	2101      	movs	r1, #1
 8006810:	2001      	movs	r0, #1
 8006812:	f7fd fb1d 	bl	8003e50 <RCC_APB1PeriphClockCmd>
	/* GPIOA and GPIOB clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8006816:	2101      	movs	r1, #1
 8006818:	2005      	movs	r0, #5
 800681a:	f7fd fafb 	bl	8003e14 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 800681e:	230f      	movs	r3, #15
 8006820:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8006822:	2318      	movs	r3, #24
 8006824:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006826:	2303      	movs	r3, #3
 8006828:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800682a:	463b      	mov	r3, r7
 800682c:	4619      	mov	r1, r3
 800682e:	4831      	ldr	r0, [pc, #196]	; (80068f4 <motors_pwm_init+0xec>)
 8006830:	f7fd f80c 	bl	800384c <GPIO_Init>

	TIM_TimeBaseStructure.TIM_Period = MOTOR_TIM_ARR_REG_VAL;
 8006834:	f240 2357 	movw	r3, #599	; 0x257
 8006838:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = MOTOR_TIM_PRESCALER_VAL;
 800683a:	f240 331f 	movw	r3, #799	; 0x31f
 800683e:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8006840:	2300      	movs	r3, #0
 8006842:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006844:	2300      	movs	r3, #0
 8006846:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8006848:	f107 0314 	add.w	r3, r7, #20
 800684c:	4619      	mov	r1, r3
 800684e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006852:	f7fd fb1b 	bl	8003e8c <TIM_TimeBaseInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8006856:	2360      	movs	r3, #96	; 0x60
 8006858:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800685a:	2301      	movs	r3, #1
 800685c:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8006862:	2300      	movs	r3, #0
 8006864:	81bb      	strh	r3, [r7, #12]
	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8006866:	1d3b      	adds	r3, r7, #4
 8006868:	4619      	mov	r1, r3
 800686a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800686e:	f7fd fb89 	bl	8003f84 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8006872:	2108      	movs	r1, #8
 8006874:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006878:	f7fd fde7 	bl	800444a <TIM_OC1PreloadConfig>

	/* PWM1 Mode configuration: Channel2 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800687c:	2301      	movs	r3, #1
 800687e:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	817b      	strh	r3, [r7, #10]
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8006884:	1d3b      	adds	r3, r7, #4
 8006886:	4619      	mov	r1, r3
 8006888:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800688c:	f7fd fc06 	bl	800409c <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8006890:	2108      	movs	r1, #8
 8006892:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006896:	f7fd fdf3 	bl	8004480 <TIM_OC2PreloadConfig>

	/* PWM1 Mode configuration: Channel3 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800689a:	2301      	movs	r3, #1
 800689c:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	817b      	strh	r3, [r7, #10]
	TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068aa:	f7fd fc7f 	bl	80041ac <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80068ae:	2108      	movs	r1, #8
 80068b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068b4:	f7fd fe01 	bl	80044ba <TIM_OC3PreloadConfig>

	/* PWM1 Mode configuration: Channel4 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80068b8:	2301      	movs	r3, #1
 80068ba:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	817b      	strh	r3, [r7, #10]
	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 80068c0:	1d3b      	adds	r3, r7, #4
 80068c2:	4619      	mov	r1, r3
 80068c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068c8:	f7fd fcf6 	bl	80042b8 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80068cc:	2108      	movs	r1, #8
 80068ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068d2:	f7fd fe0d 	bl	80044f0 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 80068d6:	2101      	movs	r1, #1
 80068d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068dc:	f7fd fd96 	bl	800440c <TIM_ARRPreloadConfig>
	/* TIM3 enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80068e0:	2101      	movs	r1, #1
 80068e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068e6:	f7fd fd4f 	bl	8004388 <TIM_Cmd>
}
 80068ea:	bf00      	nop
 80068ec:	3720      	adds	r7, #32
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40010800 	.word	0x40010800

080068f8 <motor_pwm_speed_set>:
 * this can be PWM_CHANNEL1, PWM_CHANNEL2, PWM_CHANNEL3, PWM_CHANNEL4
 * @param speedPercentage: duty cycle in percentage value(0-100)
 * @return none.
 **************************************************************************/
void motor_pwm_speed_set(pwm_channels_t channelID, float speedPercentage)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	6039      	str	r1, [r7, #0]
 8006902:	71fb      	strb	r3, [r7, #7]
	uint32_t pwm_value;

	pwm_value = (speedPercentage*MOTOR_TIM_ARR_REG_VAL)/100;
 8006904:	491d      	ldr	r1, [pc, #116]	; (800697c <motor_pwm_speed_set+0x84>)
 8006906:	6838      	ldr	r0, [r7, #0]
 8006908:	f7fa fa2a 	bl	8000d60 <__aeabi_fmul>
 800690c:	4603      	mov	r3, r0
 800690e:	491c      	ldr	r1, [pc, #112]	; (8006980 <motor_pwm_speed_set+0x88>)
 8006910:	4618      	mov	r0, r3
 8006912:	f7fa fad9 	bl	8000ec8 <__aeabi_fdiv>
 8006916:	4603      	mov	r3, r0
 8006918:	4618      	mov	r0, r3
 800691a:	f7fa fb71 	bl	8001000 <__aeabi_f2uiz>
 800691e:	4603      	mov	r3, r0
 8006920:	60fb      	str	r3, [r7, #12]
	if(channelID == PWM_CHANNEL1)
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d106      	bne.n	8006936 <motor_pwm_speed_set+0x3e>
		TIM_SetCompare1(TIM2, pwm_value);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	b29b      	uxth	r3, r3
 800692c:	4619      	mov	r1, r3
 800692e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006932:	f7fd fdfa 	bl	800452a <TIM_SetCompare1>
	if(channelID == PWM_CHANNEL2)
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d106      	bne.n	800694a <motor_pwm_speed_set+0x52>
		TIM_SetCompare2(TIM2, pwm_value);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	b29b      	uxth	r3, r3
 8006940:	4619      	mov	r1, r3
 8006942:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006946:	f7fd fdfe 	bl	8004546 <TIM_SetCompare2>
	if(channelID == PWM_CHANNEL3)
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	2b03      	cmp	r3, #3
 800694e:	d106      	bne.n	800695e <motor_pwm_speed_set+0x66>
		TIM_SetCompare3(TIM2, pwm_value);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	b29b      	uxth	r3, r3
 8006954:	4619      	mov	r1, r3
 8006956:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800695a:	f7fd fe02 	bl	8004562 <TIM_SetCompare3>
	if(channelID == PWM_CHANNEL4)
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	2b04      	cmp	r3, #4
 8006962:	d106      	bne.n	8006972 <motor_pwm_speed_set+0x7a>
		TIM_SetCompare4(TIM2, pwm_value);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	b29b      	uxth	r3, r3
 8006968:	4619      	mov	r1, r3
 800696a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800696e:	f7fd fe06 	bl	800457e <TIM_SetCompare4>
}
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	4415c000 	.word	0x4415c000
 8006980:	42c80000 	.word	0x42c80000

08006984 <millis>:
 * for tracking the current time
 *
 * @retval current time in milliseconds
 **************************************************************************/
uint32_t millis(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
	return elapsed_ms;
 8006988:	4b02      	ldr	r3, [pc, #8]	; (8006994 <millis+0x10>)
 800698a:	681b      	ldr	r3, [r3, #0]
}
 800698c:	4618      	mov	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr
 8006994:	20001d94 	.word	0x20001d94

08006998 <delay_ms>:
 *
 * @param delay_ms: delay time in milli seconds
 * @return none.
 **************************************************************************/
void delay_ms(uint32_t delay_ms)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	uint32_t currentTime_ms;
	uint32_t startTime_ms;

	startTime_ms = millis();
 80069a0:	f7ff fff0 	bl	8006984 <millis>
 80069a4:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		currentTime_ms = millis();
 80069a6:	f7ff ffed 	bl	8006984 <millis>
 80069aa:	60b8      	str	r0, [r7, #8]
		if((currentTime_ms-startTime_ms)>delay_ms)
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad2      	subs	r2, r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d800      	bhi.n	80069ba <delay_ms+0x22>
		currentTime_ms = millis();
 80069b8:	e7f5      	b.n	80069a6 <delay_ms+0xe>
			return ;
 80069ba:	bf00      	nop
	}
}
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <timeout_alarm_set>:
 *
 * @param alarmTime_ms: timeout time in milliseconds.
 * @return none.
 **************************************************************************/
void timeout_alarm_set(uint32_t alarmTime_ms)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	timeOutTimerStartTime = millis();
 80069cc:	f7ff ffda 	bl	8006984 <millis>
 80069d0:	4602      	mov	r2, r0
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <timeout_alarm_set+0x2c>)
 80069d4:	601a      	str	r2, [r3, #0]
	timeOutTimerStatus = 1;
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <timeout_alarm_set+0x30>)
 80069d8:	2201      	movs	r2, #1
 80069da:	701a      	strb	r2, [r3, #0]
	timeOutTimerAlarmTime = alarmTime_ms;
 80069dc:	4a06      	ldr	r2, [pc, #24]	; (80069f8 <timeout_alarm_set+0x34>)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6013      	str	r3, [r2, #0]
	timeOutTimerAlarmStatus = 0;
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <timeout_alarm_set+0x38>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	701a      	strb	r2, [r3, #0]
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20001da0 	.word	0x20001da0
 80069f4:	20001d98 	.word	0x20001d98
 80069f8:	20001d9c 	.word	0x20001d9c
 80069fc:	20001da4 	.word	0x20001da4

08006a00 <timeout_alarm_status_check>:
 * checks if timeout has occurred
 *
 * retval 1 if timeout happened. else 0.
 **************************************************************************/
uint8_t timeout_alarm_status_check(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
	return timeOutTimerAlarmStatus;
 8006a04:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <timeout_alarm_status_check+0x14>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	b2db      	uxtb	r3, r3
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20001da4 	.word	0x20001da4

08006a18 <uart_console_init>:
 *
 * @param baudRate: uart baud rate
 * @return none.
 **************************************************************************/
void uart_console_init(uint32_t baudRate)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;

	/* Enable peripheral clocks for USART1 on GPIOA */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA |
 8006a20:	2101      	movs	r1, #1
 8006a22:	f244 0005 	movw	r0, #16389	; 0x4005
 8006a26:	f7fd f9f5 	bl	8003e14 <RCC_APB2PeriphClockCmd>
						   RCC_APB2Periph_AFIO, ENABLE);

	/* Configure PA9 and PA10 as USART1 TX/RX */

	/* PA9 = alternate function push/pull output */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8006a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a2e:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006a30:	2303      	movs	r3, #3
 8006a32:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8006a34:	2318      	movs	r3, #24
 8006a36:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006a38:	f107 031c 	add.w	r3, r7, #28
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4814      	ldr	r0, [pc, #80]	; (8006a90 <uart_console_init+0x78>)
 8006a40:	f7fc ff04 	bl	800384c <GPIO_Init>

	/* PA10 = floating input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8006a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a48:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8006a4a:	2304      	movs	r3, #4
 8006a4c:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006a4e:	f107 031c 	add.w	r3, r7, #28
 8006a52:	4619      	mov	r1, r3
 8006a54:	480e      	ldr	r0, [pc, #56]	; (8006a90 <uart_console_init+0x78>)
 8006a56:	f7fc fef9 	bl	800384c <GPIO_Init>

	/* Configure and initialize usart... */
	USART_InitStructure.USART_BaudRate = baudRate;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8006a62:	2300      	movs	r3, #0
 8006a64:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8006a66:	2300      	movs	r3, #0
 8006a68:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8006a6e:	230c      	movs	r3, #12
 8006a70:	82fb      	strh	r3, [r7, #22]

	USART_Init(USART1, &USART_InitStructure);
 8006a72:	f107 030c 	add.w	r3, r7, #12
 8006a76:	4619      	mov	r1, r3
 8006a78:	4806      	ldr	r0, [pc, #24]	; (8006a94 <uart_console_init+0x7c>)
 8006a7a:	f7fd fdc9 	bl	8004610 <USART_Init>

	/* Enable USART1 */
	USART_Cmd(USART1, ENABLE);
 8006a7e:	2101      	movs	r1, #1
 8006a80:	4804      	ldr	r0, [pc, #16]	; (8006a94 <uart_console_init+0x7c>)
 8006a82:	f7fd fe7f 	bl	8004784 <USART_Cmd>
}
 8006a86:	bf00      	nop
 8006a88:	3720      	adds	r7, #32
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	40010800 	.word	0x40010800
 8006a94:	40013800 	.word	0x40013800

08006a98 <__libc_init_array>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	4e0c      	ldr	r6, [pc, #48]	; (8006ad0 <__libc_init_array+0x38>)
 8006a9e:	4c0d      	ldr	r4, [pc, #52]	; (8006ad4 <__libc_init_array+0x3c>)
 8006aa0:	1ba4      	subs	r4, r4, r6
 8006aa2:	10a4      	asrs	r4, r4, #2
 8006aa4:	42a5      	cmp	r5, r4
 8006aa6:	d109      	bne.n	8006abc <__libc_init_array+0x24>
 8006aa8:	f000 f82e 	bl	8006b08 <_init>
 8006aac:	2500      	movs	r5, #0
 8006aae:	4e0a      	ldr	r6, [pc, #40]	; (8006ad8 <__libc_init_array+0x40>)
 8006ab0:	4c0a      	ldr	r4, [pc, #40]	; (8006adc <__libc_init_array+0x44>)
 8006ab2:	1ba4      	subs	r4, r4, r6
 8006ab4:	10a4      	asrs	r4, r4, #2
 8006ab6:	42a5      	cmp	r5, r4
 8006ab8:	d105      	bne.n	8006ac6 <__libc_init_array+0x2e>
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ac0:	4798      	blx	r3
 8006ac2:	3501      	adds	r5, #1
 8006ac4:	e7ee      	b.n	8006aa4 <__libc_init_array+0xc>
 8006ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aca:	4798      	blx	r3
 8006acc:	3501      	adds	r5, #1
 8006ace:	e7f2      	b.n	8006ab6 <__libc_init_array+0x1e>
 8006ad0:	08006cd0 	.word	0x08006cd0
 8006ad4:	08006cd0 	.word	0x08006cd0
 8006ad8:	08006cd0 	.word	0x08006cd0
 8006adc:	08006cd4 	.word	0x08006cd4

08006ae0 <memcpy>:
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	1e43      	subs	r3, r0, #1
 8006ae4:	440a      	add	r2, r1
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d100      	bne.n	8006aec <memcpy+0xc>
 8006aea:	bd10      	pop	{r4, pc}
 8006aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006af4:	e7f7      	b.n	8006ae6 <memcpy+0x6>

08006af6 <memset>:
 8006af6:	4603      	mov	r3, r0
 8006af8:	4402      	add	r2, r0
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d100      	bne.n	8006b00 <memset+0xa>
 8006afe:	4770      	bx	lr
 8006b00:	f803 1b01 	strb.w	r1, [r3], #1
 8006b04:	e7f9      	b.n	8006afa <memset+0x4>
	...

08006b08 <_init>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	bf00      	nop
 8006b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0e:	bc08      	pop	{r3}
 8006b10:	469e      	mov	lr, r3
 8006b12:	4770      	bx	lr

08006b14 <_fini>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	bf00      	nop
 8006b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1a:	bc08      	pop	{r3}
 8006b1c:	469e      	mov	lr, r3
 8006b1e:	4770      	bx	lr
