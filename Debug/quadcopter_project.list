
quadcopter_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008218  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080083e8  080083e8  000183e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  080085b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001db4  2000008c  0800863c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20001e40  0800863c  00021e40  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fad1  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000027e2  00000000  00000000  0002fb86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e98  00000000  00000000  00032368  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d30  00000000  00000000  00033200  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006bac  00000000  00000000  00033f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004961  00000000  00000000  0003aadc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f43d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004278  00000000  00000000  0003f4bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00043734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083d0 	.word	0x080083d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	080083d0 	.word	0x080083d0

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f092 0f00 	teq	r2, #0
 80004fa:	bf14      	ite	ne
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e720      	b.n	8000354 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aedc 	beq.w	8000302 <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6c1      	b.n	8000302 <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_frsub>:
 8000be4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	e002      	b.n	8000bf0 <__addsf3>
 8000bea:	bf00      	nop

08000bec <__aeabi_fsub>:
 8000bec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bf0 <__addsf3>:
 8000bf0:	0042      	lsls	r2, r0, #1
 8000bf2:	bf1f      	itttt	ne
 8000bf4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf8:	ea92 0f03 	teqne	r2, r3
 8000bfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c04:	d06a      	beq.n	8000cdc <__addsf3+0xec>
 8000c06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0e:	bfc1      	itttt	gt
 8000c10:	18d2      	addgt	r2, r2, r3
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	4048      	eorgt	r0, r1
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	bfb8      	it	lt
 8000c1a:	425b      	neglt	r3, r3
 8000c1c:	2b19      	cmp	r3, #25
 8000c1e:	bf88      	it	hi
 8000c20:	4770      	bxhi	lr
 8000c22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2e:	bf18      	it	ne
 8000c30:	4240      	negne	r0, r0
 8000c32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4249      	negne	r1, r1
 8000c42:	ea92 0f03 	teq	r2, r3
 8000c46:	d03f      	beq.n	8000cc8 <__addsf3+0xd8>
 8000c48:	f1a2 0201 	sub.w	r2, r2, #1
 8000c4c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c50:	eb10 000c 	adds.w	r0, r0, ip
 8000c54:	f1c3 0320 	rsb	r3, r3, #32
 8000c58:	fa01 f103 	lsl.w	r1, r1, r3
 8000c5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c60:	d502      	bpl.n	8000c68 <__addsf3+0x78>
 8000c62:	4249      	negs	r1, r1
 8000c64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c6c:	d313      	bcc.n	8000c96 <__addsf3+0xa6>
 8000c6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c72:	d306      	bcc.n	8000c82 <__addsf3+0x92>
 8000c74:	0840      	lsrs	r0, r0, #1
 8000c76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7a:	f102 0201 	add.w	r2, r2, #1
 8000c7e:	2afe      	cmp	r2, #254	; 0xfe
 8000c80:	d251      	bcs.n	8000d26 <__addsf3+0x136>
 8000c82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8a:	bf08      	it	eq
 8000c8c:	f020 0001 	biceq.w	r0, r0, #1
 8000c90:	ea40 0003 	orr.w	r0, r0, r3
 8000c94:	4770      	bx	lr
 8000c96:	0049      	lsls	r1, r1, #1
 8000c98:	eb40 0000 	adc.w	r0, r0, r0
 8000c9c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ca0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca4:	d1ed      	bne.n	8000c82 <__addsf3+0x92>
 8000ca6:	fab0 fc80 	clz	ip, r0
 8000caa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cae:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb6:	bfaa      	itet	ge
 8000cb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cbc:	4252      	neglt	r2, r2
 8000cbe:	4318      	orrge	r0, r3
 8000cc0:	bfbc      	itt	lt
 8000cc2:	40d0      	lsrlt	r0, r2
 8000cc4:	4318      	orrlt	r0, r3
 8000cc6:	4770      	bx	lr
 8000cc8:	f092 0f00 	teq	r2, #0
 8000ccc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cd0:	bf06      	itte	eq
 8000cd2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd6:	3201      	addeq	r2, #1
 8000cd8:	3b01      	subne	r3, #1
 8000cda:	e7b5      	b.n	8000c48 <__addsf3+0x58>
 8000cdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce4:	bf18      	it	ne
 8000ce6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cea:	d021      	beq.n	8000d30 <__addsf3+0x140>
 8000cec:	ea92 0f03 	teq	r2, r3
 8000cf0:	d004      	beq.n	8000cfc <__addsf3+0x10c>
 8000cf2:	f092 0f00 	teq	r2, #0
 8000cf6:	bf08      	it	eq
 8000cf8:	4608      	moveq	r0, r1
 8000cfa:	4770      	bx	lr
 8000cfc:	ea90 0f01 	teq	r0, r1
 8000d00:	bf1c      	itt	ne
 8000d02:	2000      	movne	r0, #0
 8000d04:	4770      	bxne	lr
 8000d06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d0a:	d104      	bne.n	8000d16 <__addsf3+0x126>
 8000d0c:	0040      	lsls	r0, r0, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d1a:	bf3c      	itt	cc
 8000d1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d20:	4770      	bxcc	lr
 8000d22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2e:	4770      	bx	lr
 8000d30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d34:	bf16      	itet	ne
 8000d36:	4608      	movne	r0, r1
 8000d38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d3c:	4601      	movne	r1, r0
 8000d3e:	0242      	lsls	r2, r0, #9
 8000d40:	bf06      	itte	eq
 8000d42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d46:	ea90 0f01 	teqeq	r0, r1
 8000d4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_ui2f>:
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e004      	b.n	8000d60 <__aeabi_i2f+0x8>
 8000d56:	bf00      	nop

08000d58 <__aeabi_i2f>:
 8000d58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d5c:	bf48      	it	mi
 8000d5e:	4240      	negmi	r0, r0
 8000d60:	ea5f 0c00 	movs.w	ip, r0
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	e01c      	b.n	8000dae <__aeabi_l2f+0x2a>

08000d74 <__aeabi_ul2f>:
 8000d74:	ea50 0201 	orrs.w	r2, r0, r1
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	e00a      	b.n	8000d98 <__aeabi_l2f+0x14>
 8000d82:	bf00      	nop

08000d84 <__aeabi_l2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d90:	d502      	bpl.n	8000d98 <__aeabi_l2f+0x14>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	ea5f 0c01 	movs.w	ip, r1
 8000d9c:	bf02      	ittt	eq
 8000d9e:	4684      	moveq	ip, r0
 8000da0:	4601      	moveq	r1, r0
 8000da2:	2000      	moveq	r0, #0
 8000da4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da8:	bf08      	it	eq
 8000daa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000db2:	fabc f28c 	clz	r2, ip
 8000db6:	3a08      	subs	r2, #8
 8000db8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dbc:	db10      	blt.n	8000de0 <__aeabi_l2f+0x5c>
 8000dbe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc2:	4463      	add	r3, ip
 8000dc4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dd0:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	f020 0001 	biceq.w	r0, r0, #1
 8000dde:	4770      	bx	lr
 8000de0:	f102 0220 	add.w	r2, r2, #32
 8000de4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de8:	f1c2 0220 	rsb	r2, r2, #32
 8000dec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df0:	fa21 f202 	lsr.w	r2, r1, r2
 8000df4:	eb43 0002 	adc.w	r0, r3, r2
 8000df8:	bf08      	it	eq
 8000dfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfe:	4770      	bx	lr

08000e00 <__aeabi_fmul>:
 8000e00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e08:	bf1e      	ittt	ne
 8000e0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0e:	ea92 0f0c 	teqne	r2, ip
 8000e12:	ea93 0f0c 	teqne	r3, ip
 8000e16:	d06f      	beq.n	8000ef8 <__aeabi_fmul+0xf8>
 8000e18:	441a      	add	r2, r3
 8000e1a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1e:	0240      	lsls	r0, r0, #9
 8000e20:	bf18      	it	ne
 8000e22:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e26:	d01e      	beq.n	8000e66 <__aeabi_fmul+0x66>
 8000e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e2c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e30:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e34:	fba0 3101 	umull	r3, r1, r0, r1
 8000e38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e40:	bf3e      	ittt	cc
 8000e42:	0049      	lslcc	r1, r1, #1
 8000e44:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	ea40 0001 	orr.w	r0, r0, r1
 8000e4e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e52:	2afd      	cmp	r2, #253	; 0xfd
 8000e54:	d81d      	bhi.n	8000e92 <__aeabi_fmul+0x92>
 8000e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5e:	bf08      	it	eq
 8000e60:	f020 0001 	biceq.w	r0, r0, #1
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6e:	bf08      	it	eq
 8000e70:	0249      	lsleq	r1, r1, #9
 8000e72:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e76:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e7a:	3a7f      	subs	r2, #127	; 0x7f
 8000e7c:	bfc2      	ittt	gt
 8000e7e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e82:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e86:	4770      	bxgt	lr
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	3a01      	subs	r2, #1
 8000e92:	dc5d      	bgt.n	8000f50 <__aeabi_fmul+0x150>
 8000e94:	f112 0f19 	cmn.w	r2, #25
 8000e98:	bfdc      	itt	le
 8000e9a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9e:	4770      	bxle	lr
 8000ea0:	f1c2 0200 	rsb	r2, r2, #0
 8000ea4:	0041      	lsls	r1, r0, #1
 8000ea6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eaa:	f1c2 0220 	rsb	r2, r2, #32
 8000eae:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb6:	f140 0000 	adc.w	r0, r0, #0
 8000eba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ebe:	bf08      	it	eq
 8000ec0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec4:	4770      	bx	lr
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fmul+0xce>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fmul+0xe6>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e78f      	b.n	8000e18 <__aeabi_fmul+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	bf18      	it	ne
 8000f02:	ea93 0f0c 	teqne	r3, ip
 8000f06:	d00a      	beq.n	8000f1e <__aeabi_fmul+0x11e>
 8000f08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f0c:	bf18      	it	ne
 8000f0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	d1d8      	bne.n	8000ec6 <__aeabi_fmul+0xc6>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f1c:	4770      	bx	lr
 8000f1e:	f090 0f00 	teq	r0, #0
 8000f22:	bf17      	itett	ne
 8000f24:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f28:	4608      	moveq	r0, r1
 8000f2a:	f091 0f00 	teqne	r1, #0
 8000f2e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f32:	d014      	beq.n	8000f5e <__aeabi_fmul+0x15e>
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	d101      	bne.n	8000f3e <__aeabi_fmul+0x13e>
 8000f3a:	0242      	lsls	r2, r0, #9
 8000f3c:	d10f      	bne.n	8000f5e <__aeabi_fmul+0x15e>
 8000f3e:	ea93 0f0c 	teq	r3, ip
 8000f42:	d103      	bne.n	8000f4c <__aeabi_fmul+0x14c>
 8000f44:	024b      	lsls	r3, r1, #9
 8000f46:	bf18      	it	ne
 8000f48:	4608      	movne	r0, r1
 8000f4a:	d108      	bne.n	8000f5e <__aeabi_fmul+0x15e>
 8000f4c:	ea80 0001 	eor.w	r0, r0, r1
 8000f50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5c:	4770      	bx	lr
 8000f5e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f62:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f66:	4770      	bx	lr

08000f68 <__aeabi_fdiv>:
 8000f68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f70:	bf1e      	ittt	ne
 8000f72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f76:	ea92 0f0c 	teqne	r2, ip
 8000f7a:	ea93 0f0c 	teqne	r3, ip
 8000f7e:	d069      	beq.n	8001054 <__aeabi_fdiv+0xec>
 8000f80:	eba2 0203 	sub.w	r2, r2, r3
 8000f84:	ea80 0c01 	eor.w	ip, r0, r1
 8000f88:	0249      	lsls	r1, r1, #9
 8000f8a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8e:	d037      	beq.n	8001000 <__aeabi_fdiv+0x98>
 8000f90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f94:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f98:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	bf38      	it	cc
 8000fa4:	005b      	lslcc	r3, r3, #1
 8000fa6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000faa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	bf24      	itt	cs
 8000fb2:	1a5b      	subcs	r3, r3, r1
 8000fb4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fbc:	bf24      	itt	cs
 8000fbe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fc2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fca:	bf24      	itt	cs
 8000fcc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fde:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	bf18      	it	ne
 8000fe6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fea:	d1e0      	bne.n	8000fae <__aeabi_fdiv+0x46>
 8000fec:	2afd      	cmp	r2, #253	; 0xfd
 8000fee:	f63f af50 	bhi.w	8000e92 <__aeabi_fmul+0x92>
 8000ff2:	428b      	cmp	r3, r1
 8000ff4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff8:	bf08      	it	eq
 8000ffa:	f020 0001 	biceq.w	r0, r0, #1
 8000ffe:	4770      	bx	lr
 8001000:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001004:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001008:	327f      	adds	r2, #127	; 0x7f
 800100a:	bfc2      	ittt	gt
 800100c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001010:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001014:	4770      	bxgt	lr
 8001016:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	3a01      	subs	r2, #1
 8001020:	e737      	b.n	8000e92 <__aeabi_fmul+0x92>
 8001022:	f092 0f00 	teq	r2, #0
 8001026:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800102a:	bf02      	ittt	eq
 800102c:	0040      	lsleq	r0, r0, #1
 800102e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001032:	3a01      	subeq	r2, #1
 8001034:	d0f9      	beq.n	800102a <__aeabi_fdiv+0xc2>
 8001036:	ea40 000c 	orr.w	r0, r0, ip
 800103a:	f093 0f00 	teq	r3, #0
 800103e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001042:	bf02      	ittt	eq
 8001044:	0049      	lsleq	r1, r1, #1
 8001046:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800104a:	3b01      	subeq	r3, #1
 800104c:	d0f9      	beq.n	8001042 <__aeabi_fdiv+0xda>
 800104e:	ea41 010c 	orr.w	r1, r1, ip
 8001052:	e795      	b.n	8000f80 <__aeabi_fdiv+0x18>
 8001054:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001058:	ea92 0f0c 	teq	r2, ip
 800105c:	d108      	bne.n	8001070 <__aeabi_fdiv+0x108>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	f47f af7d 	bne.w	8000f5e <__aeabi_fmul+0x15e>
 8001064:	ea93 0f0c 	teq	r3, ip
 8001068:	f47f af70 	bne.w	8000f4c <__aeabi_fmul+0x14c>
 800106c:	4608      	mov	r0, r1
 800106e:	e776      	b.n	8000f5e <__aeabi_fmul+0x15e>
 8001070:	ea93 0f0c 	teq	r3, ip
 8001074:	d104      	bne.n	8001080 <__aeabi_fdiv+0x118>
 8001076:	024b      	lsls	r3, r1, #9
 8001078:	f43f af4c 	beq.w	8000f14 <__aeabi_fmul+0x114>
 800107c:	4608      	mov	r0, r1
 800107e:	e76e      	b.n	8000f5e <__aeabi_fmul+0x15e>
 8001080:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001084:	bf18      	it	ne
 8001086:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800108a:	d1ca      	bne.n	8001022 <__aeabi_fdiv+0xba>
 800108c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001090:	f47f af5c 	bne.w	8000f4c <__aeabi_fmul+0x14c>
 8001094:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001098:	f47f af3c 	bne.w	8000f14 <__aeabi_fmul+0x114>
 800109c:	e75f      	b.n	8000f5e <__aeabi_fmul+0x15e>
 800109e:	bf00      	nop

080010a0 <__gesf2>:
 80010a0:	f04f 3cff 	mov.w	ip, #4294967295
 80010a4:	e006      	b.n	80010b4 <__cmpsf2+0x4>
 80010a6:	bf00      	nop

080010a8 <__lesf2>:
 80010a8:	f04f 0c01 	mov.w	ip, #1
 80010ac:	e002      	b.n	80010b4 <__cmpsf2+0x4>
 80010ae:	bf00      	nop

080010b0 <__cmpsf2>:
 80010b0:	f04f 0c01 	mov.w	ip, #1
 80010b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c4:	bf18      	it	ne
 80010c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ca:	d011      	beq.n	80010f0 <__cmpsf2+0x40>
 80010cc:	b001      	add	sp, #4
 80010ce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010d2:	bf18      	it	ne
 80010d4:	ea90 0f01 	teqne	r0, r1
 80010d8:	bf58      	it	pl
 80010da:	ebb2 0003 	subspl.w	r0, r2, r3
 80010de:	bf88      	it	hi
 80010e0:	17c8      	asrhi	r0, r1, #31
 80010e2:	bf38      	it	cc
 80010e4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e8:	bf18      	it	ne
 80010ea:	f040 0001 	orrne.w	r0, r0, #1
 80010ee:	4770      	bx	lr
 80010f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f4:	d102      	bne.n	80010fc <__cmpsf2+0x4c>
 80010f6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010fa:	d105      	bne.n	8001108 <__cmpsf2+0x58>
 80010fc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001100:	d1e4      	bne.n	80010cc <__cmpsf2+0x1c>
 8001102:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001106:	d0e1      	beq.n	80010cc <__cmpsf2+0x1c>
 8001108:	f85d 0b04 	ldr.w	r0, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <__aeabi_cfrcmple>:
 8001110:	4684      	mov	ip, r0
 8001112:	4608      	mov	r0, r1
 8001114:	4661      	mov	r1, ip
 8001116:	e7ff      	b.n	8001118 <__aeabi_cfcmpeq>

08001118 <__aeabi_cfcmpeq>:
 8001118:	b50f      	push	{r0, r1, r2, r3, lr}
 800111a:	f7ff ffc9 	bl	80010b0 <__cmpsf2>
 800111e:	2800      	cmp	r0, #0
 8001120:	bf48      	it	mi
 8001122:	f110 0f00 	cmnmi.w	r0, #0
 8001126:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001128 <__aeabi_fcmpeq>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff fff4 	bl	8001118 <__aeabi_cfcmpeq>
 8001130:	bf0c      	ite	eq
 8001132:	2001      	moveq	r0, #1
 8001134:	2000      	movne	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmplt>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffea 	bl	8001118 <__aeabi_cfcmpeq>
 8001144:	bf34      	ite	cc
 8001146:	2001      	movcc	r0, #1
 8001148:	2000      	movcs	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmple>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffe0 	bl	8001118 <__aeabi_cfcmpeq>
 8001158:	bf94      	ite	ls
 800115a:	2001      	movls	r0, #1
 800115c:	2000      	movhi	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmpge>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffd2 	bl	8001110 <__aeabi_cfrcmple>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpgt>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffc8 	bl	8001110 <__aeabi_cfrcmple>
 8001180:	bf34      	ite	cc
 8001182:	2001      	movcc	r0, #1
 8001184:	2000      	movcs	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpun>:
 800118c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001190:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001194:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001198:	d102      	bne.n	80011a0 <__aeabi_fcmpun+0x14>
 800119a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119e:	d108      	bne.n	80011b2 <__aeabi_fcmpun+0x26>
 80011a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a4:	d102      	bne.n	80011ac <__aeabi_fcmpun+0x20>
 80011a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011aa:	d102      	bne.n	80011b2 <__aeabi_fcmpun+0x26>
 80011ac:	f04f 0000 	mov.w	r0, #0
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0001 	mov.w	r0, #1
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_uldivmod>:
 80011b8:	b953      	cbnz	r3, 80011d0 <__aeabi_uldivmod+0x18>
 80011ba:	b94a      	cbnz	r2, 80011d0 <__aeabi_uldivmod+0x18>
 80011bc:	2900      	cmp	r1, #0
 80011be:	bf08      	it	eq
 80011c0:	2800      	cmpeq	r0, #0
 80011c2:	bf1c      	itt	ne
 80011c4:	f04f 31ff 	movne.w	r1, #4294967295
 80011c8:	f04f 30ff 	movne.w	r0, #4294967295
 80011cc:	f000 b97a 	b.w	80014c4 <__aeabi_idiv0>
 80011d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011d8:	f000 f806 	bl	80011e8 <__udivmoddi4>
 80011dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011e4:	b004      	add	sp, #16
 80011e6:	4770      	bx	lr

080011e8 <__udivmoddi4>:
 80011e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	468c      	mov	ip, r1
 80011ee:	460e      	mov	r6, r1
 80011f0:	4604      	mov	r4, r0
 80011f2:	9d08      	ldr	r5, [sp, #32]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d150      	bne.n	800129a <__udivmoddi4+0xb2>
 80011f8:	428a      	cmp	r2, r1
 80011fa:	4617      	mov	r7, r2
 80011fc:	d96c      	bls.n	80012d8 <__udivmoddi4+0xf0>
 80011fe:	fab2 fe82 	clz	lr, r2
 8001202:	f1be 0f00 	cmp.w	lr, #0
 8001206:	d00b      	beq.n	8001220 <__udivmoddi4+0x38>
 8001208:	f1ce 0c20 	rsb	ip, lr, #32
 800120c:	fa01 f60e 	lsl.w	r6, r1, lr
 8001210:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001214:	fa02 f70e 	lsl.w	r7, r2, lr
 8001218:	ea4c 0c06 	orr.w	ip, ip, r6
 800121c:	fa00 f40e 	lsl.w	r4, r0, lr
 8001220:	0c3a      	lsrs	r2, r7, #16
 8001222:	fbbc f9f2 	udiv	r9, ip, r2
 8001226:	b2bb      	uxth	r3, r7
 8001228:	fb02 cc19 	mls	ip, r2, r9, ip
 800122c:	fb09 fa03 	mul.w	sl, r9, r3
 8001230:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8001234:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8001238:	45b2      	cmp	sl, r6
 800123a:	d90a      	bls.n	8001252 <__udivmoddi4+0x6a>
 800123c:	19f6      	adds	r6, r6, r7
 800123e:	f109 31ff 	add.w	r1, r9, #4294967295
 8001242:	f080 8125 	bcs.w	8001490 <__udivmoddi4+0x2a8>
 8001246:	45b2      	cmp	sl, r6
 8001248:	f240 8122 	bls.w	8001490 <__udivmoddi4+0x2a8>
 800124c:	f1a9 0902 	sub.w	r9, r9, #2
 8001250:	443e      	add	r6, r7
 8001252:	eba6 060a 	sub.w	r6, r6, sl
 8001256:	fbb6 f0f2 	udiv	r0, r6, r2
 800125a:	fb02 6610 	mls	r6, r2, r0, r6
 800125e:	fb00 f303 	mul.w	r3, r0, r3
 8001262:	b2a4      	uxth	r4, r4
 8001264:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001268:	42a3      	cmp	r3, r4
 800126a:	d909      	bls.n	8001280 <__udivmoddi4+0x98>
 800126c:	19e4      	adds	r4, r4, r7
 800126e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001272:	f080 810b 	bcs.w	800148c <__udivmoddi4+0x2a4>
 8001276:	42a3      	cmp	r3, r4
 8001278:	f240 8108 	bls.w	800148c <__udivmoddi4+0x2a4>
 800127c:	3802      	subs	r0, #2
 800127e:	443c      	add	r4, r7
 8001280:	2100      	movs	r1, #0
 8001282:	1ae4      	subs	r4, r4, r3
 8001284:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001288:	2d00      	cmp	r5, #0
 800128a:	d062      	beq.n	8001352 <__udivmoddi4+0x16a>
 800128c:	2300      	movs	r3, #0
 800128e:	fa24 f40e 	lsr.w	r4, r4, lr
 8001292:	602c      	str	r4, [r5, #0]
 8001294:	606b      	str	r3, [r5, #4]
 8001296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129a:	428b      	cmp	r3, r1
 800129c:	d907      	bls.n	80012ae <__udivmoddi4+0xc6>
 800129e:	2d00      	cmp	r5, #0
 80012a0:	d055      	beq.n	800134e <__udivmoddi4+0x166>
 80012a2:	2100      	movs	r1, #0
 80012a4:	e885 0041 	stmia.w	r5, {r0, r6}
 80012a8:	4608      	mov	r0, r1
 80012aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ae:	fab3 f183 	clz	r1, r3
 80012b2:	2900      	cmp	r1, #0
 80012b4:	f040 808f 	bne.w	80013d6 <__udivmoddi4+0x1ee>
 80012b8:	42b3      	cmp	r3, r6
 80012ba:	d302      	bcc.n	80012c2 <__udivmoddi4+0xda>
 80012bc:	4282      	cmp	r2, r0
 80012be:	f200 80fc 	bhi.w	80014ba <__udivmoddi4+0x2d2>
 80012c2:	1a84      	subs	r4, r0, r2
 80012c4:	eb66 0603 	sbc.w	r6, r6, r3
 80012c8:	2001      	movs	r0, #1
 80012ca:	46b4      	mov	ip, r6
 80012cc:	2d00      	cmp	r5, #0
 80012ce:	d040      	beq.n	8001352 <__udivmoddi4+0x16a>
 80012d0:	e885 1010 	stmia.w	r5, {r4, ip}
 80012d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d8:	b912      	cbnz	r2, 80012e0 <__udivmoddi4+0xf8>
 80012da:	2701      	movs	r7, #1
 80012dc:	fbb7 f7f2 	udiv	r7, r7, r2
 80012e0:	fab7 fe87 	clz	lr, r7
 80012e4:	f1be 0f00 	cmp.w	lr, #0
 80012e8:	d135      	bne.n	8001356 <__udivmoddi4+0x16e>
 80012ea:	2101      	movs	r1, #1
 80012ec:	1bf6      	subs	r6, r6, r7
 80012ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80012f2:	fa1f f887 	uxth.w	r8, r7
 80012f6:	fbb6 f2fc 	udiv	r2, r6, ip
 80012fa:	fb0c 6612 	mls	r6, ip, r2, r6
 80012fe:	fb08 f002 	mul.w	r0, r8, r2
 8001302:	0c23      	lsrs	r3, r4, #16
 8001304:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001308:	42b0      	cmp	r0, r6
 800130a:	d907      	bls.n	800131c <__udivmoddi4+0x134>
 800130c:	19f6      	adds	r6, r6, r7
 800130e:	f102 33ff 	add.w	r3, r2, #4294967295
 8001312:	d202      	bcs.n	800131a <__udivmoddi4+0x132>
 8001314:	42b0      	cmp	r0, r6
 8001316:	f200 80d2 	bhi.w	80014be <__udivmoddi4+0x2d6>
 800131a:	461a      	mov	r2, r3
 800131c:	1a36      	subs	r6, r6, r0
 800131e:	fbb6 f0fc 	udiv	r0, r6, ip
 8001322:	fb0c 6610 	mls	r6, ip, r0, r6
 8001326:	fb08 f800 	mul.w	r8, r8, r0
 800132a:	b2a3      	uxth	r3, r4
 800132c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8001330:	45a0      	cmp	r8, r4
 8001332:	d907      	bls.n	8001344 <__udivmoddi4+0x15c>
 8001334:	19e4      	adds	r4, r4, r7
 8001336:	f100 33ff 	add.w	r3, r0, #4294967295
 800133a:	d202      	bcs.n	8001342 <__udivmoddi4+0x15a>
 800133c:	45a0      	cmp	r8, r4
 800133e:	f200 80b9 	bhi.w	80014b4 <__udivmoddi4+0x2cc>
 8001342:	4618      	mov	r0, r3
 8001344:	eba4 0408 	sub.w	r4, r4, r8
 8001348:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800134c:	e79c      	b.n	8001288 <__udivmoddi4+0xa0>
 800134e:	4629      	mov	r1, r5
 8001350:	4628      	mov	r0, r5
 8001352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001356:	fa07 f70e 	lsl.w	r7, r7, lr
 800135a:	f1ce 0320 	rsb	r3, lr, #32
 800135e:	fa26 f203 	lsr.w	r2, r6, r3
 8001362:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001366:	fbb2 f1fc 	udiv	r1, r2, ip
 800136a:	fa1f f887 	uxth.w	r8, r7
 800136e:	fb0c 2211 	mls	r2, ip, r1, r2
 8001372:	fa06 f60e 	lsl.w	r6, r6, lr
 8001376:	fa20 f303 	lsr.w	r3, r0, r3
 800137a:	fb01 f908 	mul.w	r9, r1, r8
 800137e:	4333      	orrs	r3, r6
 8001380:	0c1e      	lsrs	r6, r3, #16
 8001382:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001386:	45b1      	cmp	r9, r6
 8001388:	fa00 f40e 	lsl.w	r4, r0, lr
 800138c:	d909      	bls.n	80013a2 <__udivmoddi4+0x1ba>
 800138e:	19f6      	adds	r6, r6, r7
 8001390:	f101 32ff 	add.w	r2, r1, #4294967295
 8001394:	f080 808c 	bcs.w	80014b0 <__udivmoddi4+0x2c8>
 8001398:	45b1      	cmp	r9, r6
 800139a:	f240 8089 	bls.w	80014b0 <__udivmoddi4+0x2c8>
 800139e:	3902      	subs	r1, #2
 80013a0:	443e      	add	r6, r7
 80013a2:	eba6 0609 	sub.w	r6, r6, r9
 80013a6:	fbb6 f0fc 	udiv	r0, r6, ip
 80013aa:	fb0c 6210 	mls	r2, ip, r0, r6
 80013ae:	fb00 f908 	mul.w	r9, r0, r8
 80013b2:	b29e      	uxth	r6, r3
 80013b4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80013b8:	45b1      	cmp	r9, r6
 80013ba:	d907      	bls.n	80013cc <__udivmoddi4+0x1e4>
 80013bc:	19f6      	adds	r6, r6, r7
 80013be:	f100 33ff 	add.w	r3, r0, #4294967295
 80013c2:	d271      	bcs.n	80014a8 <__udivmoddi4+0x2c0>
 80013c4:	45b1      	cmp	r9, r6
 80013c6:	d96f      	bls.n	80014a8 <__udivmoddi4+0x2c0>
 80013c8:	3802      	subs	r0, #2
 80013ca:	443e      	add	r6, r7
 80013cc:	eba6 0609 	sub.w	r6, r6, r9
 80013d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80013d4:	e78f      	b.n	80012f6 <__udivmoddi4+0x10e>
 80013d6:	f1c1 0720 	rsb	r7, r1, #32
 80013da:	fa22 f807 	lsr.w	r8, r2, r7
 80013de:	408b      	lsls	r3, r1
 80013e0:	ea48 0303 	orr.w	r3, r8, r3
 80013e4:	fa26 f407 	lsr.w	r4, r6, r7
 80013e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80013ec:	fbb4 f9fe 	udiv	r9, r4, lr
 80013f0:	fa1f fc83 	uxth.w	ip, r3
 80013f4:	fb0e 4419 	mls	r4, lr, r9, r4
 80013f8:	408e      	lsls	r6, r1
 80013fa:	fa20 f807 	lsr.w	r8, r0, r7
 80013fe:	fb09 fa0c 	mul.w	sl, r9, ip
 8001402:	ea48 0806 	orr.w	r8, r8, r6
 8001406:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800140a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800140e:	45a2      	cmp	sl, r4
 8001410:	fa02 f201 	lsl.w	r2, r2, r1
 8001414:	fa00 f601 	lsl.w	r6, r0, r1
 8001418:	d908      	bls.n	800142c <__udivmoddi4+0x244>
 800141a:	18e4      	adds	r4, r4, r3
 800141c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001420:	d244      	bcs.n	80014ac <__udivmoddi4+0x2c4>
 8001422:	45a2      	cmp	sl, r4
 8001424:	d942      	bls.n	80014ac <__udivmoddi4+0x2c4>
 8001426:	f1a9 0902 	sub.w	r9, r9, #2
 800142a:	441c      	add	r4, r3
 800142c:	eba4 040a 	sub.w	r4, r4, sl
 8001430:	fbb4 f0fe 	udiv	r0, r4, lr
 8001434:	fb0e 4410 	mls	r4, lr, r0, r4
 8001438:	fb00 fc0c 	mul.w	ip, r0, ip
 800143c:	fa1f f888 	uxth.w	r8, r8
 8001440:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8001444:	45a4      	cmp	ip, r4
 8001446:	d907      	bls.n	8001458 <__udivmoddi4+0x270>
 8001448:	18e4      	adds	r4, r4, r3
 800144a:	f100 3eff 	add.w	lr, r0, #4294967295
 800144e:	d229      	bcs.n	80014a4 <__udivmoddi4+0x2bc>
 8001450:	45a4      	cmp	ip, r4
 8001452:	d927      	bls.n	80014a4 <__udivmoddi4+0x2bc>
 8001454:	3802      	subs	r0, #2
 8001456:	441c      	add	r4, r3
 8001458:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800145c:	fba0 8902 	umull	r8, r9, r0, r2
 8001460:	eba4 0c0c 	sub.w	ip, r4, ip
 8001464:	45cc      	cmp	ip, r9
 8001466:	46c2      	mov	sl, r8
 8001468:	46ce      	mov	lr, r9
 800146a:	d315      	bcc.n	8001498 <__udivmoddi4+0x2b0>
 800146c:	d012      	beq.n	8001494 <__udivmoddi4+0x2ac>
 800146e:	b155      	cbz	r5, 8001486 <__udivmoddi4+0x29e>
 8001470:	ebb6 030a 	subs.w	r3, r6, sl
 8001474:	eb6c 060e 	sbc.w	r6, ip, lr
 8001478:	fa06 f707 	lsl.w	r7, r6, r7
 800147c:	40cb      	lsrs	r3, r1
 800147e:	431f      	orrs	r7, r3
 8001480:	40ce      	lsrs	r6, r1
 8001482:	602f      	str	r7, [r5, #0]
 8001484:	606e      	str	r6, [r5, #4]
 8001486:	2100      	movs	r1, #0
 8001488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800148c:	4610      	mov	r0, r2
 800148e:	e6f7      	b.n	8001280 <__udivmoddi4+0x98>
 8001490:	4689      	mov	r9, r1
 8001492:	e6de      	b.n	8001252 <__udivmoddi4+0x6a>
 8001494:	4546      	cmp	r6, r8
 8001496:	d2ea      	bcs.n	800146e <__udivmoddi4+0x286>
 8001498:	ebb8 0a02 	subs.w	sl, r8, r2
 800149c:	eb69 0e03 	sbc.w	lr, r9, r3
 80014a0:	3801      	subs	r0, #1
 80014a2:	e7e4      	b.n	800146e <__udivmoddi4+0x286>
 80014a4:	4670      	mov	r0, lr
 80014a6:	e7d7      	b.n	8001458 <__udivmoddi4+0x270>
 80014a8:	4618      	mov	r0, r3
 80014aa:	e78f      	b.n	80013cc <__udivmoddi4+0x1e4>
 80014ac:	4681      	mov	r9, r0
 80014ae:	e7bd      	b.n	800142c <__udivmoddi4+0x244>
 80014b0:	4611      	mov	r1, r2
 80014b2:	e776      	b.n	80013a2 <__udivmoddi4+0x1ba>
 80014b4:	3802      	subs	r0, #2
 80014b6:	443c      	add	r4, r7
 80014b8:	e744      	b.n	8001344 <__udivmoddi4+0x15c>
 80014ba:	4608      	mov	r0, r1
 80014bc:	e706      	b.n	80012cc <__udivmoddi4+0xe4>
 80014be:	3a02      	subs	r2, #2
 80014c0:	443e      	add	r6, r7
 80014c2:	e72b      	b.n	800131c <__udivmoddi4+0x134>

080014c4 <__aeabi_idiv0>:
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f103 0208 	add.w	r2, r3, #8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f103 0208 	add.w	r2, r3, #8
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f103 0208 	add.w	r2, r3, #8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157a:	d103      	bne.n	8001584 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e00c      	b.n	800159e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3308      	adds	r3, #8
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e002      	b.n	8001592 <vListInsert+0x2e>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	429a      	cmp	r2, r3
 800159c:	d9f6      	bls.n	800158c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6892      	ldr	r2, [r2, #8]
 80015ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6852      	ldr	r2, [r2, #4]
 80015f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d103      	bne.n	8001608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1e5a      	subs	r2, r3, #1
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
	...

08001628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3b04      	subs	r3, #4
 8001638:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3b04      	subs	r3, #4
 8001646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f023 0201 	bic.w	r2, r3, #1
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3b04      	subs	r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <pxPortInitialiseStack+0x54>)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3b14      	subs	r3, #20
 8001662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3b20      	subs	r3, #32
 800166e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001670:	68fb      	ldr	r3, [r7, #12]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	08001681 	.word	0x08001681

08001680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <prvTaskExitError+0x4c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001692:	d009      	beq.n	80016a8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001698:	f383 8811 	msr	BASEPRI, r3
 800169c:	f3bf 8f6f 	isb	sy
 80016a0:	f3bf 8f4f 	dsb	sy
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e7fe      	b.n	80016a6 <prvTaskExitError+0x26>
 80016a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ac:	f383 8811 	msr	BASEPRI, r3
 80016b0:	f3bf 8f6f 	isb	sy
 80016b4:	f3bf 8f4f 	dsb	sy
 80016b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80016ba:	bf00      	nop
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0fc      	beq.n	80016bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000000 	.word	0x20000000

080016d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <pxCurrentTCBConst2>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	6808      	ldr	r0, [r1, #0]
 80016d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016da:	f380 8809 	msr	PSP, r0
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f380 8811 	msr	BASEPRI, r0
 80016ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80016ee:	4770      	bx	lr

080016f0 <pxCurrentTCBConst2>:
 80016f0:	20001cc4 	.word	0x20001cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop

080016f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <prvPortStartFirstTask+0x1c>)
 80016fa:	6800      	ldr	r0, [r0, #0]
 80016fc:	6800      	ldr	r0, [r0, #0]
 80016fe:	f380 8808 	msr	MSP, r0
 8001702:	b662      	cpsie	i
 8001704:	b661      	cpsie	f
 8001706:	f3bf 8f4f 	dsb	sy
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	df00      	svc	0
 8001710:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001712:	bf00      	nop
 8001714:	e000ed08 	.word	0xe000ed08

08001718 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <xPortStartScheduler+0xcc>)
 8001720:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	22ff      	movs	r2, #255	; 0xff
 800172e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <xPortStartScheduler+0xd0>)
 8001744:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <xPortStartScheduler+0xd4>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800174c:	e009      	b.n	8001762 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <xPortStartScheduler+0xd4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	4a25      	ldr	r2, [pc, #148]	; (80017ec <xPortStartScheduler+0xd4>)
 8001756:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176a:	2b80      	cmp	r3, #128	; 0x80
 800176c:	d0ef      	beq.n	800174e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <xPortStartScheduler+0xd4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	d009      	beq.n	800178e <xPortStartScheduler+0x76>
 800177a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800177e:	f383 8811 	msr	BASEPRI, r3
 8001782:	f3bf 8f6f 	isb	sy
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	e7fe      	b.n	800178c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <xPortStartScheduler+0xd4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	4a15      	ldr	r2, [pc, #84]	; (80017ec <xPortStartScheduler+0xd4>)
 8001796:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <xPortStartScheduler+0xd4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <xPortStartScheduler+0xd4>)
 80017a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80017ac:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <xPortStartScheduler+0xd8>)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <xPortStartScheduler+0xd8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <xPortStartScheduler+0xd8>)
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <xPortStartScheduler+0xd8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80017c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80017c4:	f000 f8b0 	bl	8001928 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <xPortStartScheduler+0xdc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80017ce:	f7ff ff93 	bl	80016f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80017d2:	f001 fa23 	bl	8002c1c <vTaskSwitchContext>
	prvTaskExitError();
 80017d6:	f7ff ff53 	bl	8001680 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	e000e400 	.word	0xe000e400
 80017e8:	200000a8 	.word	0x200000a8
 80017ec:	200000ac 	.word	0x200000ac
 80017f0:	e000ed20 	.word	0xe000ed20
 80017f4:	20000000 	.word	0x20000000

080017f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001802:	f383 8811 	msr	BASEPRI, r3
 8001806:	f3bf 8f6f 	isb	sy
 800180a:	f3bf 8f4f 	dsb	sy
 800180e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <vPortEnterCritical+0x54>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a0d      	ldr	r2, [pc, #52]	; (800184c <vPortEnterCritical+0x54>)
 8001818:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <vPortEnterCritical+0x54>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d10e      	bne.n	8001840 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <vPortEnterCritical+0x58>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <vPortEnterCritical+0x48>
 800182c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001830:	f383 8811 	msr	BASEPRI, r3
 8001834:	f3bf 8f6f 	isb	sy
 8001838:	f3bf 8f4f 	dsb	sy
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	e7fe      	b.n	800183e <vPortEnterCritical+0x46>
	}
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000
 8001850:	e000ed04 	.word	0xe000ed04

08001854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <vPortExitCritical+0x48>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <vPortExitCritical+0x22>
 8001862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001866:	f383 8811 	msr	BASEPRI, r3
 800186a:	f3bf 8f6f 	isb	sy
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	e7fe      	b.n	8001874 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <vPortExitCritical+0x48>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3b01      	subs	r3, #1
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <vPortExitCritical+0x48>)
 800187e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <vPortExitCritical+0x48>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d104      	bne.n	8001892 <vPortExitCritical+0x3e>
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	20000000 	.word	0x20000000

080018a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80018a0:	f3ef 8009 	mrs	r0, PSP
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <pxCurrentTCBConst>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80018b0:	6010      	str	r0, [r2, #0]
 80018b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80018b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018ba:	f380 8811 	msr	BASEPRI, r0
 80018be:	f001 f9ad 	bl	8002c1c <vTaskSwitchContext>
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f380 8811 	msr	BASEPRI, r0
 80018ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80018ce:	6819      	ldr	r1, [r3, #0]
 80018d0:	6808      	ldr	r0, [r1, #0]
 80018d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80018d6:	f380 8809 	msr	PSP, r0
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	4770      	bx	lr

080018e0 <pxCurrentTCBConst>:
 80018e0:	20001cc4 	.word	0x20001cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop

080018e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
	__asm volatile
 80018ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f2:	f383 8811 	msr	BASEPRI, r3
 80018f6:	f3bf 8f6f 	isb	sy
 80018fa:	f3bf 8f4f 	dsb	sy
 80018fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001900:	f001 f8d4 	bl	8002aac <xTaskIncrementTick>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SysTick_Handler+0x3c>)
 800190c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	e000ed04 	.word	0xe000ed04

08001928 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <vPortSetupTimerInterrupt+0x28>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <vPortSetupTimerInterrupt+0x2c>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <vPortSetupTimerInterrupt+0x30>)
 800193a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800193e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <vPortSetupTimerInterrupt+0x28>)
 8001942:	2207      	movs	r2, #7
 8001944:	601a      	str	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010
 8001954:	e000e018 	.word	0xe000e018
 8001958:	e000e014 	.word	0xe000e014

0800195c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001962:	f3ef 8305 	mrs	r3, IPSR
 8001966:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	d913      	bls.n	8001996 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <vPortValidateInterruptPriority+0x68>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <vPortValidateInterruptPriority+0x6c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	7afa      	ldrb	r2, [r7, #11]
 800197e:	429a      	cmp	r2, r3
 8001980:	d209      	bcs.n	8001996 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001986:	f383 8811 	msr	BASEPRI, r3
 800198a:	f3bf 8f6f 	isb	sy
 800198e:	f3bf 8f4f 	dsb	sy
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	e7fe      	b.n	8001994 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <vPortValidateInterruptPriority+0x70>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <vPortValidateInterruptPriority+0x74>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d909      	bls.n	80019ba <vPortValidateInterruptPriority+0x5e>
 80019a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019aa:	f383 8811 	msr	BASEPRI, r3
 80019ae:	f3bf 8f6f 	isb	sy
 80019b2:	f3bf 8f4f 	dsb	sy
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	e7fe      	b.n	80019b8 <vPortValidateInterruptPriority+0x5c>
	}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	e000e3f0 	.word	0xe000e3f0
 80019c8:	200000a8 	.word	0x200000a8
 80019cc:	e000ed0c 	.word	0xe000ed0c
 80019d0:	200000ac 	.word	0x200000ac

080019d4 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 80019e0:	f000 ffac 	bl	800293c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <pvPortMalloc+0x114>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d104      	bne.n	80019f6 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 80019ec:	f000 f8c8 	bl	8001b80 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 80019f0:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <pvPortMalloc+0x114>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00e      	beq.n	8001a1a <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80019fc:	2308      	movs	r3, #8
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f023 0307 	bic.w	r3, r3, #7
 8001a16:	3308      	adds	r3, #8
 8001a18:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d057      	beq.n	8001ad0 <pvPortMalloc+0xfc>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d852      	bhi.n	8001ad0 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8001a2a:	4b30      	ldr	r3, [pc, #192]	; (8001aec <pvPortMalloc+0x118>)
 8001a2c:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <pvPortMalloc+0x118>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a34:	e004      	b.n	8001a40 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d203      	bcs.n	8001a52 <pvPortMalloc+0x7e>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f1      	bne.n	8001a36 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <pvPortMalloc+0x11c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d03a      	beq.n	8001ad0 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2208      	movs	r2, #8
 8001a60:	4413      	add	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2208      	movs	r2, #8
 8001a76:	0052      	lsls	r2, r2, #1
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d922      	bls.n	8001ac2 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	1ad2      	subs	r2, r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <pvPortMalloc+0x118>)
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	e002      	b.n	8001aa8 <pvPortMalloc+0xd4>
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3f6      	bcc.n	8001aa2 <pvPortMalloc+0xce>
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <pvPortMalloc+0x120>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <pvPortMalloc+0x120>)
 8001ace:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001ad0:	f000 ff42 	bl	8002958 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001ada:	f004 f9e3 	bl	8005ea4 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8001ade:	697b      	ldr	r3, [r7, #20]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20001cc0 	.word	0x20001cc0
 8001aec:	20001cb0 	.word	0x20001cb0
 8001af0:	20001cb8 	.word	0x20001cb8
 8001af4:	20000004 	.word	0x20000004

08001af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d027      	beq.n	8001b5a <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	425b      	negs	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4413      	add	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8001b18:	f000 ff10 	bl	800293c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <vPortFree+0x6c>)
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e002      	b.n	8001b2e <vPortFree+0x36>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3f6      	bcc.n	8001b28 <vPortFree+0x30>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <vPortFree+0x70>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <vPortFree+0x70>)
 8001b54:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8001b56:	f000 feff 	bl	8002958 <xTaskResumeAll>
	}
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20001cb0 	.word	0x20001cb0
 8001b68:	20000004 	.word	0x20000004

08001b6c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8001b70:	4b02      	ldr	r3, [pc, #8]	; (8001b7c <xPortGetFreeHeapSize+0x10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000004 	.word	0x20000004

08001b80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <prvHeapInit+0x44>)
 8001b88:	f023 0307 	bic.w	r3, r3, #7
 8001b8c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <prvHeapInit+0x48>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <prvHeapInit+0x48>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <prvHeapInit+0x4c>)
 8001b9c:	f641 32f8 	movw	r2, #7160	; 0x1bf8
 8001ba0:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <prvHeapInit+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f641 32f8 	movw	r2, #7160	; 0x1bf8
 8001bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <prvHeapInit+0x4c>)
 8001bb8:	601a      	str	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	200000b8 	.word	0x200000b8
 8001bc8:	20001cb0 	.word	0x20001cb0
 8001bcc:	20001cb8 	.word	0x20001cb8

08001bd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <xQueueGenericReset+0x28>
 8001be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be8:	f383 8811 	msr	BASEPRI, r3
 8001bec:	f3bf 8f6f 	isb	sy
 8001bf0:	f3bf 8f4f 	dsb	sy
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	e7fe      	b.n	8001bf6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001bf8:	f7ff fdfe 	bl	80017f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	441a      	add	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	441a      	add	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	22ff      	movs	r2, #255	; 0xff
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	22ff      	movs	r2, #255	; 0xff
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d114      	bne.n	8001c78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01a      	beq.n	8001c8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3310      	adds	r3, #16
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 f8ac 	bl	8002db8 <xTaskRemoveFromEventList>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <xQueueGenericReset+0xcc>)
 8001c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	f3bf 8f6f 	isb	sy
 8001c76:	e009      	b.n	8001c8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fc23 	bl	80014c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3324      	adds	r3, #36	; 0x24
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fc1e 	bl	80014c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c8c:	f7ff fde2 	bl	8001854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c90:	2301      	movs	r3, #1
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	e000ed04 	.word	0xe000ed04

08001ca0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	4613      	mov	r3, r2
 8001cac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <xQueueGenericCreate+0x28>
 8001cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e7fe      	b.n	8001cc6 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3348      	adds	r3, #72	; 0x48
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fe7c 	bl	80019d4 <pvPortMalloc>
 8001cdc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00d      	beq.n	8001d00 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3348      	adds	r3, #72	; 0x48
 8001cec:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cee:	79fa      	ldrb	r2, [r7, #7]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f805 	bl	8001d0a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001d00:	69bb      	ldr	r3, [r7, #24]
	}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e002      	b.n	8001d2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d38:	2101      	movs	r1, #1
 8001d3a:	69b8      	ldr	r0, [r7, #24]
 8001d3c:	f7ff ff48 	bl	8001bd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d56:	2300      	movs	r3, #0
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <xQueueGenericSend+0x30>
 8001d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d76:	e7fe      	b.n	8001d76 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <xQueueGenericSend+0x3e>
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <xQueueGenericSend+0x42>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <xQueueGenericSend+0x44>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <xQueueGenericSend+0x5c>
 8001d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
 8001da2:	e7fe      	b.n	8001da2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d103      	bne.n	8001db2 <xQueueGenericSend+0x6a>
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <xQueueGenericSend+0x6e>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <xQueueGenericSend+0x70>
 8001db6:	2300      	movs	r3, #0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <xQueueGenericSend+0x88>
 8001dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc0:	f383 8811 	msr	BASEPRI, r3
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	e7fe      	b.n	8001dce <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dd0:	f001 f98c 	bl	80030ec <xTaskGetSchedulerState>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <xQueueGenericSend+0x98>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <xQueueGenericSend+0x9c>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <xQueueGenericSend+0x9e>
 8001de4:	2300      	movs	r3, #0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <xQueueGenericSend+0xb6>
 8001dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dee:	f383 8811 	msr	BASEPRI, r3
 8001df2:	f3bf 8f6f 	isb	sy
 8001df6:	f3bf 8f4f 	dsb	sy
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	e7fe      	b.n	8001dfc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dfe:	f7ff fcfb 	bl	80017f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d302      	bcc.n	8001e14 <xQueueGenericSend+0xcc>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d129      	bne.n	8001e68 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e1a:	f000 fa03 	bl	8002224 <prvCopyDataToQueue>
 8001e1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d010      	beq.n	8001e4a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	3324      	adds	r3, #36	; 0x24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 ffc3 	bl	8002db8 <xTaskRemoveFromEventList>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e38:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <xQueueGenericSend+0x1f0>)
 8001e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f3bf 8f4f 	dsb	sy
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	e00a      	b.n	8001e60 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e50:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <xQueueGenericSend+0x1f0>)
 8001e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f3bf 8f4f 	dsb	sy
 8001e5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e60:	f7ff fcf8 	bl	8001854 <vPortExitCritical>
				return pdPASS;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e063      	b.n	8001f30 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e6e:	f7ff fcf1 	bl	8001854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e05c      	b.n	8001f30 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fffb 	bl	8002e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e86:	2301      	movs	r3, #1
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e8a:	f7ff fce3 	bl	8001854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e8e:	f000 fd55 	bl	800293c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e92:	f7ff fcb1 	bl	80017f8 <vPortEnterCritical>
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d103      	bne.n	8001eac <xQueueGenericSend+0x164>
 8001ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d103      	bne.n	8001ec2 <xQueueGenericSend+0x17a>
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ec2:	f7ff fcc7 	bl	8001854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ec6:	1d3a      	adds	r2, r7, #4
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 ffea 	bl	8002ea8 <xTaskCheckForTimeOut>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d124      	bne.n	8001f24 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001edc:	f000 fa9a 	bl	8002414 <prvIsQueueFull>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d018      	beq.n	8001f18 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	3310      	adds	r3, #16
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 ff14 	bl	8002d1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ef6:	f000 fa25 	bl	8002344 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001efa:	f000 fd2d 	bl	8002958 <xTaskResumeAll>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f af7c 	bne.w	8001dfe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <xQueueGenericSend+0x1f0>)
 8001f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	e772      	b.n	8001dfe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f1a:	f000 fa13 	bl	8002344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f1e:	f000 fd1b 	bl	8002958 <xTaskResumeAll>
 8001f22:	e76c      	b.n	8001dfe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f26:	f000 fa0d 	bl	8002344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f2a:	f000 fd15 	bl	8002958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3738      	adds	r7, #56	; 0x38
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b090      	sub	sp, #64	; 0x40
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <xQueueGenericSendFromISR+0x2c>
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f66:	e7fe      	b.n	8001f66 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <xQueueGenericSendFromISR+0x3a>
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <xQueueGenericSendFromISR+0x3e>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <xQueueGenericSendFromISR+0x40>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <xQueueGenericSendFromISR+0x58>
 8001f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f84:	f383 8811 	msr	BASEPRI, r3
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
 8001f92:	e7fe      	b.n	8001f92 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d103      	bne.n	8001fa2 <xQueueGenericSendFromISR+0x66>
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <xQueueGenericSendFromISR+0x6a>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <xQueueGenericSendFromISR+0x6c>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <xQueueGenericSendFromISR+0x84>
 8001fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb0:	f383 8811 	msr	BASEPRI, r3
 8001fb4:	f3bf 8f6f 	isb	sy
 8001fb8:	f3bf 8f4f 	dsb	sy
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	e7fe      	b.n	8001fbe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fc0:	f7ff fccc 	bl	800195c <vPortValidateInterruptPriority>
	__asm volatile
 8001fc4:	f3ef 8211 	mrs	r2, BASEPRI
 8001fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	61fa      	str	r2, [r7, #28]
 8001fda:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d302      	bcc.n	8001ff2 <xQueueGenericSendFromISR+0xb6>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d12f      	bne.n	8002052 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ff8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002008:	f000 f90c 	bl	8002224 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800200c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d112      	bne.n	800203c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002020:	3324      	adds	r3, #36	; 0x24
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fec8 	bl	8002db8 <xTaskRemoveFromEventList>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00e      	beq.n	800204c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e007      	b.n	800204c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800203c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002040:	3301      	adds	r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	b25a      	sxtb	r2, r3
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800204c:	2301      	movs	r3, #1
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002050:	e001      	b.n	8002056 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002052:	2300      	movs	r3, #0
 8002054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002058:	617b      	str	r3, [r7, #20]
	__asm volatile
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002062:	4618      	mov	r0, r3
 8002064:	3740      	adds	r7, #64	; 0x40
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <xQueueReceive+0x2e>
	__asm volatile
 8002086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208a:	f383 8811 	msr	BASEPRI, r3
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f3bf 8f4f 	dsb	sy
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	e7fe      	b.n	8002098 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <xQueueReceive+0x3c>
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <xQueueReceive+0x40>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <xQueueReceive+0x42>
 80020ac:	2300      	movs	r3, #0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <xQueueReceive+0x5a>
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	f383 8811 	msr	BASEPRI, r3
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	e7fe      	b.n	80020c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020c6:	f001 f811 	bl	80030ec <xTaskGetSchedulerState>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <xQueueReceive+0x6a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <xQueueReceive+0x6e>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <xQueueReceive+0x70>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <xQueueReceive+0x88>
 80020e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	f3bf 8f6f 	isb	sy
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	e7fe      	b.n	80020f2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020f4:	f7ff fb80 	bl	80017f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01f      	beq.n	8002144 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002108:	f000 f8f6 	bl	80022f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	1e5a      	subs	r2, r3, #1
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00f      	beq.n	800213c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	3310      	adds	r3, #16
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fe49 	bl	8002db8 <xTaskRemoveFromEventList>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800212c:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <xQueueReceive+0x1b4>)
 800212e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800213c:	f7ff fb8a 	bl	8001854 <vPortExitCritical>
				return pdPASS;
 8002140:	2301      	movs	r3, #1
 8002142:	e069      	b.n	8002218 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800214a:	f7ff fb83 	bl	8001854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800214e:	2300      	movs	r3, #0
 8002150:	e062      	b.n	8002218 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fe8d 	bl	8002e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002162:	2301      	movs	r3, #1
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002166:	f7ff fb75 	bl	8001854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800216a:	f000 fbe7 	bl	800293c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800216e:	f7ff fb43 	bl	80017f8 <vPortEnterCritical>
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002178:	b25b      	sxtb	r3, r3
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d103      	bne.n	8002188 <xQueueReceive+0x11c>
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800218e:	b25b      	sxtb	r3, r3
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d103      	bne.n	800219e <xQueueReceive+0x132>
 8002196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800219e:	f7ff fb59 	bl	8001854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021a2:	1d3a      	adds	r2, r7, #4
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fe7c 	bl	8002ea8 <xTaskCheckForTimeOut>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d123      	bne.n	80021fe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021b8:	f000 f916 	bl	80023e8 <prvIsQueueEmpty>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d017      	beq.n	80021f2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c4:	3324      	adds	r3, #36	; 0x24
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fda6 	bl	8002d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021d2:	f000 f8b7 	bl	8002344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021d6:	f000 fbbf 	bl	8002958 <xTaskResumeAll>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d189      	bne.n	80020f4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <xQueueReceive+0x1b4>)
 80021e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	f3bf 8f6f 	isb	sy
 80021f0:	e780      	b.n	80020f4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80021f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021f4:	f000 f8a6 	bl	8002344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021f8:	f000 fbae 	bl	8002958 <xTaskResumeAll>
 80021fc:	e77a      	b.n	80020f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80021fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002200:	f000 f8a0 	bl	8002344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002204:	f000 fba8 	bl	8002958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800220a:	f000 f8ed 	bl	80023e8 <prvIsQueueEmpty>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	f43f af6f 	beq.w	80020f4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002216:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002218:	4618      	mov	r0, r3
 800221a:	3730      	adds	r7, #48	; 0x30
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	e000ed04 	.word	0xe000ed04

08002224 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002238:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10d      	bne.n	800225e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d14d      	bne.n	80022e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 ff6a 	bl	8003128 <xTaskPriorityDisinherit>
 8002254:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e043      	b.n	80022e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d119      	bne.n	8002298 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6858      	ldr	r0, [r3, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	461a      	mov	r2, r3
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	f005 fd02 	bl	8007c78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	441a      	add	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	429a      	cmp	r2, r3
 800228c:	d32b      	bcc.n	80022e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	e026      	b.n	80022e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68d8      	ldr	r0, [r3, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	461a      	mov	r2, r3
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	f005 fce8 	bl	8007c78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	425b      	negs	r3, r3
 80022b2:	441a      	add	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	425b      	negs	r3, r3
 80022ce:	441a      	add	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d105      	bne.n	80022e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80022ee:	697b      	ldr	r3, [r7, #20]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d018      	beq.n	800233c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	441a      	add	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	d303      	bcc.n	800232c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68d9      	ldr	r1, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	461a      	mov	r2, r3
 8002336:	6838      	ldr	r0, [r7, #0]
 8002338:	f005 fc9e 	bl	8007c78 <memcpy>
	}
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800234c:	f7ff fa54 	bl	80017f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002356:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002358:	e011      	b.n	800237e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3324      	adds	r3, #36	; 0x24
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fd26 	bl	8002db8 <xTaskRemoveFromEventList>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002372:	f000 fdf9 	bl	8002f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	3b01      	subs	r3, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002382:	2b00      	cmp	r3, #0
 8002384:	dce9      	bgt.n	800235a <prvUnlockQueue+0x16>
 8002386:	e000      	b.n	800238a <prvUnlockQueue+0x46>
					break;
 8002388:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002392:	f7ff fa5f 	bl	8001854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002396:	f7ff fa2f 	bl	80017f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023a2:	e011      	b.n	80023c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d012      	beq.n	80023d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3310      	adds	r3, #16
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fd01 	bl	8002db8 <xTaskRemoveFromEventList>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80023bc:	f000 fdd4 	bl	8002f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023c0:	7bbb      	ldrb	r3, [r7, #14]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	dce9      	bgt.n	80023a4 <prvUnlockQueue+0x60>
 80023d0:	e000      	b.n	80023d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80023d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	22ff      	movs	r2, #255	; 0xff
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80023dc:	f7ff fa3a 	bl	8001854 <vPortExitCritical>
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023f0:	f7ff fa02 	bl	80017f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80023fc:	2301      	movs	r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e001      	b.n	8002406 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002406:	f7ff fa25 	bl	8001854 <vPortExitCritical>

	return xReturn;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800241c:	f7ff f9ec 	bl	80017f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	429a      	cmp	r2, r3
 800242a:	d102      	bne.n	8002432 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800242c:	2301      	movs	r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e001      	b.n	8002436 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002436:	f7ff fa0d 	bl	8001854 <vPortExitCritical>

	return xReturn;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002454:	f7ff f9d0 	bl	80017f8 <vPortEnterCritical>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800245e:	b25b      	sxtb	r3, r3
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d103      	bne.n	800246e <vQueueWaitForMessageRestricted+0x2a>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002474:	b25b      	sxtb	r3, r3
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d103      	bne.n	8002484 <vQueueWaitForMessageRestricted+0x40>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002484:	f7ff f9e6 	bl	8001854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3324      	adds	r3, #36	; 0x24
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fc63 	bl	8002d64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff50 	bl	8002344 <prvUnlockQueue>
	}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af04      	add	r7, sp, #16
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fa87 	bl	80019d4 <pvPortMalloc>
 80024c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00e      	beq.n	80024ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80024ce:	2050      	movs	r0, #80	; 0x50
 80024d0:	f7ff fa80 	bl	80019d4 <pvPortMalloc>
 80024d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	631a      	str	r2, [r3, #48]	; 0x30
 80024e2:	e005      	b.n	80024f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80024e4:	6978      	ldr	r0, [r7, #20]
 80024e6:	f7ff fb07 	bl	8001af8 <vPortFree>
 80024ea:	e001      	b.n	80024f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d013      	beq.n	800251e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024f6:	88fa      	ldrh	r2, [r7, #6]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9303      	str	r3, [sp, #12]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f80e 	bl	800252e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002512:	69f8      	ldr	r0, [r7, #28]
 8002514:	f000 f89a 	bl	800264c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002518:	2301      	movs	r3, #1
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	e002      	b.n	8002524 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002524:	69bb      	ldr	r3, [r7, #24]
	}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b088      	sub	sp, #32
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	461a      	mov	r2, r3
 8002546:	21a5      	movs	r1, #165	; 0xa5
 8002548:	f005 fba1 	bl	8007c8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002556:	3b01      	subs	r3, #1
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f023 0307 	bic.w	r3, r3, #7
 8002564:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <prvInitialiseNewTask+0x56>
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e7fe      	b.n	8002582 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01f      	beq.n	80025ca <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e012      	b.n	80025b6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	7819      	ldrb	r1, [r3, #0]
 8002598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	3334      	adds	r3, #52	; 0x34
 80025a0:	460a      	mov	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	3301      	adds	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d9e9      	bls.n	8002590 <prvInitialiseNewTask+0x62>
 80025bc:	e000      	b.n	80025c0 <prvInitialiseNewTask+0x92>
			{
				break;
 80025be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025c8:	e003      	b.n	80025d2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d901      	bls.n	80025dc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025d8:	2304      	movs	r3, #4
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	3304      	adds	r3, #4
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe ff87 	bl	8001506 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	3318      	adds	r3, #24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe ff82 	bl	8001506 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002606:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	f1c3 0205 	rsb	r2, r3, #5
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	2200      	movs	r2, #0
 800261c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	2200      	movs	r2, #0
 8002622:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	68f9      	ldr	r1, [r7, #12]
 800262a:	69b8      	ldr	r0, [r7, #24]
 800262c:	f7fe fffc 	bl	8001628 <pxPortInitialiseStack>
 8002630:	4602      	mov	r2, r0
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002642:	bf00      	nop
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002654:	f7ff f8d0 	bl	80017f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <prvAddNewTaskToReadyList+0xb8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <prvAddNewTaskToReadyList+0xb8>)
 8002660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <prvAddNewTaskToReadyList+0xbc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800266a:	4a27      	ldr	r2, [pc, #156]	; (8002708 <prvAddNewTaskToReadyList+0xbc>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <prvAddNewTaskToReadyList+0xb8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d110      	bne.n	800269a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002678:	f000 fc9c 	bl	8002fb4 <prvInitialiseTaskLists>
 800267c:	e00d      	b.n	800269a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <prvAddNewTaskToReadyList+0xc0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <prvAddNewTaskToReadyList+0xbc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	429a      	cmp	r2, r3
 8002692:	d802      	bhi.n	800269a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002694:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <prvAddNewTaskToReadyList+0xbc>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <prvAddNewTaskToReadyList+0xc4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <prvAddNewTaskToReadyList+0xc4>)
 80026a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2201      	movs	r2, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <prvAddNewTaskToReadyList+0xc8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	4a18      	ldr	r2, [pc, #96]	; (8002714 <prvAddNewTaskToReadyList+0xc8>)
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4a15      	ldr	r2, [pc, #84]	; (8002718 <prvAddNewTaskToReadyList+0xcc>)
 80026c4:	441a      	add	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3304      	adds	r3, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f7fe ff26 	bl	800151e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80026d2:	f7ff f8bf 	bl	8001854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <prvAddNewTaskToReadyList+0xc0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00e      	beq.n	80026fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <prvAddNewTaskToReadyList+0xbc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d207      	bcs.n	80026fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <prvAddNewTaskToReadyList+0xd0>)
 80026ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20001d9c 	.word	0x20001d9c
 8002708:	20001cc4 	.word	0x20001cc4
 800270c:	20001da8 	.word	0x20001da8
 8002710:	20001db8 	.word	0x20001db8
 8002714:	20001da4 	.word	0x20001da4
 8002718:	20001cc8 	.word	0x20001cc8
 800271c:	e000ed04 	.word	0xe000ed04

08002720 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002728:	f7ff f866 	bl	80017f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <vTaskDelete+0x18>
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <vTaskDelete+0xf4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e000      	b.n	800273a <vTaskDelete+0x1a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3304      	adds	r3, #4
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe ff47 	bl	80015d4 <uxListRemove>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d115      	bne.n	8002778 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002750:	4931      	ldr	r1, [pc, #196]	; (8002818 <vTaskDelete+0xf8>)
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <vTaskDelete+0x58>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	2201      	movs	r2, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <vTaskDelete+0xfc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4013      	ands	r3, r2
 8002774:	4a29      	ldr	r2, [pc, #164]	; (800281c <vTaskDelete+0xfc>)
 8002776:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3318      	adds	r3, #24
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe ff25 	bl	80015d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800278a:	4b25      	ldr	r3, [pc, #148]	; (8002820 <vTaskDelete+0x100>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	4a23      	ldr	r2, [pc, #140]	; (8002820 <vTaskDelete+0x100>)
 8002792:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002794:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <vTaskDelete+0xf4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	429a      	cmp	r2, r3
 800279c:	d10b      	bne.n	80027b6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3304      	adds	r3, #4
 80027a2:	4619      	mov	r1, r3
 80027a4:	481f      	ldr	r0, [pc, #124]	; (8002824 <vTaskDelete+0x104>)
 80027a6:	f7fe feba 	bl	800151e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80027aa:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <vTaskDelete+0x108>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3301      	adds	r3, #1
 80027b0:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <vTaskDelete+0x108>)
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e009      	b.n	80027ca <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <vTaskDelete+0x10c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <vTaskDelete+0x10c>)
 80027be:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fc63 	bl	800308c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80027c6:	f000 fc71 	bl	80030ac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80027ca:	f7ff f843 	bl	8001854 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <vTaskDelete+0x110>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01a      	beq.n	800280c <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <vTaskDelete+0xf4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d115      	bne.n	800280c <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <vTaskDelete+0x114>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <vTaskDelete+0xdc>
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	e7fe      	b.n	80027fa <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <vTaskDelete+0x118>)
 80027fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20001cc4 	.word	0x20001cc4
 8002818:	20001cc8 	.word	0x20001cc8
 800281c:	20001da4 	.word	0x20001da4
 8002820:	20001db8 	.word	0x20001db8
 8002824:	20001d70 	.word	0x20001d70
 8002828:	20001d84 	.word	0x20001d84
 800282c:	20001d9c 	.word	0x20001d9c
 8002830:	20001da8 	.word	0x20001da8
 8002834:	20001dc4 	.word	0x20001dc4
 8002838:	e000ed04 	.word	0xe000ed04

0800283c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <vTaskDelay+0x60>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <vTaskDelay+0x2e>
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	e7fe      	b.n	8002868 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800286a:	f000 f867 	bl	800293c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800286e:	2100      	movs	r1, #0
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fcdd 	bl	8003230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002876:	f000 f86f 	bl	8002958 <xTaskResumeAll>
 800287a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <vTaskDelay+0x64>)
 8002884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20001dc4 	.word	0x20001dc4
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <vTaskStartScheduler+0x80>)
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	2300      	movs	r3, #0
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2300      	movs	r3, #0
 80028b4:	2246      	movs	r2, #70	; 0x46
 80028b6:	491c      	ldr	r1, [pc, #112]	; (8002928 <vTaskStartScheduler+0x84>)
 80028b8:	481c      	ldr	r0, [pc, #112]	; (800292c <vTaskStartScheduler+0x88>)
 80028ba:	f7ff fdf7 	bl	80024ac <xTaskCreate>
 80028be:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80028c6:	f000 fd19 	bl	80032fc <xTimerCreateTimerTask>
 80028ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d115      	bne.n	80028fe <vTaskStartScheduler+0x5a>
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <vTaskStartScheduler+0x8c>)
 80028e6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <vTaskStartScheduler+0x90>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <vTaskStartScheduler+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80028f8:	f7fe ff0e 	bl	8001718 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80028fc:	e00d      	b.n	800291a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d109      	bne.n	800291a <vTaskStartScheduler+0x76>
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	e7fe      	b.n	8002918 <vTaskStartScheduler+0x74>
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20001dc0 	.word	0x20001dc0
 8002928:	080083e8 	.word	0x080083e8
 800292c:	08002f81 	.word	0x08002f81
 8002930:	20001dbc 	.word	0x20001dbc
 8002934:	20001da8 	.word	0x20001da8
 8002938:	20001da0 	.word	0x20001da0

0800293c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <vTaskSuspendAll+0x18>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	4a03      	ldr	r2, [pc, #12]	; (8002954 <vTaskSuspendAll+0x18>)
 8002948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20001dc4 	.word	0x20001dc4

08002958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002966:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <xTaskResumeAll+0x114>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <xTaskResumeAll+0x2a>
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	e7fe      	b.n	8002980 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002982:	f7fe ff39 	bl	80017f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002986:	4b39      	ldr	r3, [pc, #228]	; (8002a6c <xTaskResumeAll+0x114>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3b01      	subs	r3, #1
 800298c:	4a37      	ldr	r2, [pc, #220]	; (8002a6c <xTaskResumeAll+0x114>)
 800298e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <xTaskResumeAll+0x114>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d161      	bne.n	8002a5c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002998:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <xTaskResumeAll+0x118>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d05d      	beq.n	8002a5c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029a0:	e02e      	b.n	8002a00 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029a2:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <xTaskResumeAll+0x11c>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3318      	adds	r3, #24
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fe10 	bl	80015d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fe0b 	bl	80015d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	2201      	movs	r2, #1
 80029c4:	409a      	lsls	r2, r3
 80029c6:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <xTaskResumeAll+0x120>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <xTaskResumeAll+0x120>)
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <xTaskResumeAll+0x124>)
 80029de:	441a      	add	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f7fe fd99 	bl	800151e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <xTaskResumeAll+0x128>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <xTaskResumeAll+0x12c>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <xTaskResumeAll+0x11c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1cc      	bne.n	80029a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a0e:	f000 fb4d 	bl	80030ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <xTaskResumeAll+0x130>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d010      	beq.n	8002a40 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a1e:	f000 f845 	bl	8002aac <xTaskIncrementTick>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <xTaskResumeAll+0x12c>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f1      	bne.n	8002a1e <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <xTaskResumeAll+0x130>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <xTaskResumeAll+0x12c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <xTaskResumeAll+0x134>)
 8002a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a5c:	f7fe fefa 	bl	8001854 <vPortExitCritical>

	return xAlreadyYielded;
 8002a60:	68bb      	ldr	r3, [r7, #8]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20001dc4 	.word	0x20001dc4
 8002a70:	20001d9c 	.word	0x20001d9c
 8002a74:	20001d5c 	.word	0x20001d5c
 8002a78:	20001da4 	.word	0x20001da4
 8002a7c:	20001cc8 	.word	0x20001cc8
 8002a80:	20001cc4 	.word	0x20001cc4
 8002a84:	20001db0 	.word	0x20001db0
 8002a88:	20001dac 	.word	0x20001dac
 8002a8c:	e000ed04 	.word	0xe000ed04

08002a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <xTaskGetTickCount+0x18>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	20001da0 	.word	0x20001da0

08002aac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <xTaskIncrementTick+0x144>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 808d 	bne.w	8002bda <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ac0:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <xTaskIncrementTick+0x148>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ac8:	4a4a      	ldr	r2, [pc, #296]	; (8002bf4 <xTaskIncrementTick+0x148>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d11f      	bne.n	8002b14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <xTaskIncrementTick+0x14c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <xTaskIncrementTick+0x46>
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	e7fe      	b.n	8002af0 <xTaskIncrementTick+0x44>
 8002af2:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <xTaskIncrementTick+0x14c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <xTaskIncrementTick+0x150>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3e      	ldr	r2, [pc, #248]	; (8002bf8 <xTaskIncrementTick+0x14c>)
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4a3e      	ldr	r2, [pc, #248]	; (8002bfc <xTaskIncrementTick+0x150>)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <xTaskIncrementTick+0x154>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	4a3c      	ldr	r2, [pc, #240]	; (8002c00 <xTaskIncrementTick+0x154>)
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	f000 facc 	bl	80030ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b14:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <xTaskIncrementTick+0x158>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d348      	bcc.n	8002bb0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <xTaskIncrementTick+0x14c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b28:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <xTaskIncrementTick+0x158>)
 8002b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2e:	601a      	str	r2, [r3, #0]
					break;
 8002b30:	e03e      	b.n	8002bb0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <xTaskIncrementTick+0x14c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d203      	bcs.n	8002b52 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b4a:	4a2e      	ldr	r2, [pc, #184]	; (8002c04 <xTaskIncrementTick+0x158>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b50:	e02e      	b.n	8002bb0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fd3c 	bl	80015d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	3318      	adds	r3, #24
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fd33 	bl	80015d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	2201      	movs	r2, #1
 8002b74:	409a      	lsls	r2, r3
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <xTaskIncrementTick+0x15c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <xTaskIncrementTick+0x15c>)
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <xTaskIncrementTick+0x160>)
 8002b8e:	441a      	add	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f7fe fcc1 	bl	800151e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <xTaskIncrementTick+0x164>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3b9      	bcc.n	8002b1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bae:	e7b6      	b.n	8002b1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <xTaskIncrementTick+0x164>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb6:	4915      	ldr	r1, [pc, #84]	; (8002c0c <xTaskIncrementTick+0x160>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d901      	bls.n	8002bcc <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <xTaskIncrementTick+0x168>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e004      	b.n	8002be4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <xTaskIncrementTick+0x16c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <xTaskIncrementTick+0x16c>)
 8002be2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002be4:	697b      	ldr	r3, [r7, #20]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20001dc4 	.word	0x20001dc4
 8002bf4:	20001da0 	.word	0x20001da0
 8002bf8:	20001d54 	.word	0x20001d54
 8002bfc:	20001d58 	.word	0x20001d58
 8002c00:	20001db4 	.word	0x20001db4
 8002c04:	20001dbc 	.word	0x20001dbc
 8002c08:	20001da4 	.word	0x20001da4
 8002c0c:	20001cc8 	.word	0x20001cc8
 8002c10:	20001cc4 	.word	0x20001cc4
 8002c14:	20001db0 	.word	0x20001db0
 8002c18:	20001dac 	.word	0x20001dac

08002c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c22:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <vTaskSwitchContext+0xec>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c2a:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <vTaskSwitchContext+0xf0>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c30:	e065      	b.n	8002cfe <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <vTaskSwitchContext+0xf0>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <vTaskSwitchContext+0xf4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d111      	bne.n	8002c74 <vTaskSwitchContext+0x58>
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	3304      	adds	r3, #4
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d10b      	bne.n	8002c74 <vTaskSwitchContext+0x58>
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	3308      	adds	r3, #8
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d105      	bne.n	8002c74 <vTaskSwitchContext+0x58>
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d008      	beq.n	8002c86 <vTaskSwitchContext+0x6a>
 8002c74:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <vTaskSwitchContext+0xf4>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <vTaskSwitchContext+0xf4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3334      	adds	r3, #52	; 0x34
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f003 f912 	bl	8005eaa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <vTaskSwitchContext+0xf8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	f1c3 031f 	rsb	r3, r3, #31
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	491e      	ldr	r1, [pc, #120]	; (8002d18 <vTaskSwitchContext+0xfc>)
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <vTaskSwitchContext+0xa8>
	__asm volatile
 8002cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	e7fe      	b.n	8002cc2 <vTaskSwitchContext+0xa6>
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <vTaskSwitchContext+0xfc>)
 8002cd0:	4413      	add	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d104      	bne.n	8002cf4 <vTaskSwitchContext+0xd8>
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <vTaskSwitchContext+0xf4>)
 8002cfc:	6013      	str	r3, [r2, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20001dc4 	.word	0x20001dc4
 8002d0c:	20001db0 	.word	0x20001db0
 8002d10:	20001cc4 	.word	0x20001cc4
 8002d14:	20001da4 	.word	0x20001da4
 8002d18:	20001cc8 	.word	0x20001cc8

08002d1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <vTaskPlaceOnEventList+0x24>
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	e7fe      	b.n	8002d3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <vTaskPlaceOnEventList+0x44>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3318      	adds	r3, #24
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7fe fc0b 	bl	8001564 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d4e:	2101      	movs	r1, #1
 8002d50:	6838      	ldr	r0, [r7, #0]
 8002d52:	f000 fa6d 	bl	8003230 <prvAddCurrentTaskToDelayedList>
}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20001cc4 	.word	0x20001cc4

08002d64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <vTaskPlaceOnEventListRestricted+0x26>
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e7fe      	b.n	8002d88 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <vTaskPlaceOnEventListRestricted+0x50>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3318      	adds	r3, #24
 8002d90:	4619      	mov	r1, r3
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7fe fbc3 	bl	800151e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	f000 fa42 	bl	8003230 <prvAddCurrentTaskToDelayedList>
	}
 8002dac:	bf00      	nop
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20001cc4 	.word	0x20001cc4

08002db8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <xTaskRemoveFromEventList+0x2a>
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e7fe      	b.n	8002de0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3318      	adds	r3, #24
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fbf4 	bl	80015d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <xTaskRemoveFromEventList+0xac>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11c      	bne.n	8002e2e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fbeb 	bl	80015d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <xTaskRemoveFromEventList+0xb0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <xTaskRemoveFromEventList+0xb0>)
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <xTaskRemoveFromEventList+0xb4>)
 8002e1e:	441a      	add	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f7fe fb79 	bl	800151e <vListInsertEnd>
 8002e2c:	e005      	b.n	8002e3a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	3318      	adds	r3, #24
 8002e32:	4619      	mov	r1, r3
 8002e34:	480e      	ldr	r0, [pc, #56]	; (8002e70 <xTaskRemoveFromEventList+0xb8>)
 8002e36:	f7fe fb72 	bl	800151e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <xTaskRemoveFromEventList+0xbc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d905      	bls.n	8002e54 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <xTaskRemoveFromEventList+0xc0>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e001      	b.n	8002e58 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002e58:	697b      	ldr	r3, [r7, #20]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20001dc4 	.word	0x20001dc4
 8002e68:	20001da4 	.word	0x20001da4
 8002e6c:	20001cc8 	.word	0x20001cc8
 8002e70:	20001d5c 	.word	0x20001d5c
 8002e74:	20001cc4 	.word	0x20001cc4
 8002e78:	20001db0 	.word	0x20001db0

08002e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <vTaskInternalSetTimeOutState+0x24>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <vTaskInternalSetTimeOutState+0x28>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	605a      	str	r2, [r3, #4]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20001db4 	.word	0x20001db4
 8002ea4:	20001da0 	.word	0x20001da0

08002ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <xTaskCheckForTimeOut+0x24>
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	e7fe      	b.n	8002eca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <xTaskCheckForTimeOut+0x3e>
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e7fe      	b.n	8002ee4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002ee6:	f7fe fc87 	bl	80017f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <xTaskCheckForTimeOut+0xb8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d102      	bne.n	8002f0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	e023      	b.n	8002f52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <xTaskCheckForTimeOut+0xbc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d007      	beq.n	8002f26 <xTaskCheckForTimeOut+0x7e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d802      	bhi.n	8002f26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	e015      	b.n	8002f52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d90b      	bls.n	8002f48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	1ad2      	subs	r2, r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff9d 	bl	8002e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e004      	b.n	8002f52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f52:	f7fe fc7f 	bl	8001854 <vPortExitCritical>

	return xReturn;
 8002f56:	69fb      	ldr	r3, [r7, #28]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20001da0 	.word	0x20001da0
 8002f64:	20001db4 	.word	0x20001db4

08002f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <vTaskMissedYield+0x14>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20001db0 	.word	0x20001db0

08002f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f88:	f000 f854 	bl	8003034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f8c:	4b07      	ldr	r3, [pc, #28]	; (8002fac <prvIdleTask+0x2c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d907      	bls.n	8002fa4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <prvIdleTask+0x30>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002fa4:	f002 ff87 	bl	8005eb6 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002fa8:	e7ee      	b.n	8002f88 <prvIdleTask+0x8>
 8002faa:	bf00      	nop
 8002fac:	20001cc8 	.word	0x20001cc8
 8002fb0:	e000ed04 	.word	0xe000ed04

08002fb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	e00c      	b.n	8002fda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <prvInitialiseTaskLists+0x60>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fa7a 	bl	80014c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d9ef      	bls.n	8002fc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fe0:	480d      	ldr	r0, [pc, #52]	; (8003018 <prvInitialiseTaskLists+0x64>)
 8002fe2:	f7fe fa71 	bl	80014c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fe6:	480d      	ldr	r0, [pc, #52]	; (800301c <prvInitialiseTaskLists+0x68>)
 8002fe8:	f7fe fa6e 	bl	80014c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fec:	480c      	ldr	r0, [pc, #48]	; (8003020 <prvInitialiseTaskLists+0x6c>)
 8002fee:	f7fe fa6b 	bl	80014c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ff2:	480c      	ldr	r0, [pc, #48]	; (8003024 <prvInitialiseTaskLists+0x70>)
 8002ff4:	f7fe fa68 	bl	80014c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ff8:	480b      	ldr	r0, [pc, #44]	; (8003028 <prvInitialiseTaskLists+0x74>)
 8002ffa:	f7fe fa65 	bl	80014c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <prvInitialiseTaskLists+0x78>)
 8003000:	4a05      	ldr	r2, [pc, #20]	; (8003018 <prvInitialiseTaskLists+0x64>)
 8003002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <prvInitialiseTaskLists+0x7c>)
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <prvInitialiseTaskLists+0x68>)
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20001cc8 	.word	0x20001cc8
 8003018:	20001d2c 	.word	0x20001d2c
 800301c:	20001d40 	.word	0x20001d40
 8003020:	20001d5c 	.word	0x20001d5c
 8003024:	20001d70 	.word	0x20001d70
 8003028:	20001d88 	.word	0x20001d88
 800302c:	20001d54 	.word	0x20001d54
 8003030:	20001d58 	.word	0x20001d58

08003034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800303a:	e019      	b.n	8003070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800303c:	f7fe fbdc 	bl	80017f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <prvCheckTasksWaitingTermination+0x4c>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fac1 	bl	80015d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <prvCheckTasksWaitingTermination+0x50>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3b01      	subs	r3, #1
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <prvCheckTasksWaitingTermination+0x50>)
 800305a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <prvCheckTasksWaitingTermination+0x54>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <prvCheckTasksWaitingTermination+0x54>)
 8003064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003066:	f7fe fbf5 	bl	8001854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f80e 	bl	800308c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <prvCheckTasksWaitingTermination+0x54>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e1      	bne.n	800303c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20001d70 	.word	0x20001d70
 8003084:	20001d9c 	.word	0x20001d9c
 8003088:	20001d84 	.word	0x20001d84

0800308c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fd2d 	bl	8001af8 <vPortFree>
			vPortFree( pxTCB );
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe fd2a 	bl	8001af8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <prvResetNextTaskUnblockTime+0x38>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <prvResetNextTaskUnblockTime+0x3c>)
 80030be:	f04f 32ff 	mov.w	r2, #4294967295
 80030c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030c4:	e008      	b.n	80030d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c6:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <prvResetNextTaskUnblockTime+0x38>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <prvResetNextTaskUnblockTime+0x3c>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20001d54 	.word	0x20001d54
 80030e8:	20001dbc 	.word	0x20001dbc

080030ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <xTaskGetSchedulerState+0x34>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030fa:	2301      	movs	r3, #1
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	e008      	b.n	8003112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <xTaskGetSchedulerState+0x38>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003108:	2302      	movs	r3, #2
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	e001      	b.n	8003112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003112:	687b      	ldr	r3, [r7, #4]
	}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20001da8 	.word	0x20001da8
 8003124:	20001dc4 	.word	0x20001dc4

08003128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d06c      	beq.n	8003218 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <xTaskPriorityDisinherit+0xfc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d009      	beq.n	800315c <xTaskPriorityDisinherit+0x34>
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e7fe      	b.n	800315a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <xTaskPriorityDisinherit+0x50>
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	e7fe      	b.n	8003176 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	1e5a      	subs	r2, r3, #1
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	429a      	cmp	r2, r3
 800318c:	d044      	beq.n	8003218 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	2b00      	cmp	r3, #0
 8003194:	d140      	bne.n	8003218 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3304      	adds	r3, #4
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fa1a 	bl	80015d4 <uxListRemove>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031aa:	491f      	ldr	r1, [pc, #124]	; (8003228 <xTaskPriorityDisinherit+0x100>)
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <xTaskPriorityDisinherit+0xaa>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2201      	movs	r2, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <xTaskPriorityDisinherit+0x104>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4013      	ands	r3, r2
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <xTaskPriorityDisinherit+0x104>)
 80031d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f1c3 0205 	rsb	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	2201      	movs	r2, #1
 80031ec:	409a      	lsls	r2, r3
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <xTaskPriorityDisinherit+0x104>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <xTaskPriorityDisinherit+0x104>)
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <xTaskPriorityDisinherit+0x100>)
 8003206:	441a      	add	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7fe f985 	bl	800151e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003214:	2301      	movs	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003218:	697b      	ldr	r3, [r7, #20]
	}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20001cc4 	.word	0x20001cc4
 8003228:	20001cc8 	.word	0x20001cc8
 800322c:	20001da4 	.word	0x20001da4

08003230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800323a:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3304      	adds	r3, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe f9c4 	bl	80015d4 <uxListRemove>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2201      	movs	r2, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4013      	ands	r3, r2
 8003266:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003268:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d10a      	bne.n	8003288 <prvAddCurrentTaskToDelayedList+0x58>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3304      	adds	r3, #4
 800327e:	4619      	mov	r1, r3
 8003280:	481a      	ldr	r0, [pc, #104]	; (80032ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8003282:	f7fe f94c 	bl	800151e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003286:	e026      	b.n	80032d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	429a      	cmp	r2, r3
 800329e:	d209      	bcs.n	80032b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3304      	adds	r3, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7fe f959 	bl	8001564 <vListInsert>
}
 80032b2:	e010      	b.n	80032d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3304      	adds	r3, #4
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f7fe f94f 	bl	8001564 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d202      	bcs.n	80032d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80032d0:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6013      	str	r3, [r2, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20001da0 	.word	0x20001da0
 80032e4:	20001cc4 	.word	0x20001cc4
 80032e8:	20001da4 	.word	0x20001da4
 80032ec:	20001d88 	.word	0x20001d88
 80032f0:	20001d58 	.word	0x20001d58
 80032f4:	20001d54 	.word	0x20001d54
 80032f8:	20001dbc 	.word	0x20001dbc

080032fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003306:	f000 facd 	bl	80038a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <xTimerCreateTimerTask+0x50>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <xTimerCreateTimerTask+0x54>)
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2303      	movs	r3, #3
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2300      	movs	r3, #0
 800331c:	2246      	movs	r2, #70	; 0x46
 800331e:	490d      	ldr	r1, [pc, #52]	; (8003354 <xTimerCreateTimerTask+0x58>)
 8003320:	480d      	ldr	r0, [pc, #52]	; (8003358 <xTimerCreateTimerTask+0x5c>)
 8003322:	f7ff f8c3 	bl	80024ac <xTaskCreate>
 8003326:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <xTimerCreateTimerTask+0x46>
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	e7fe      	b.n	8003340 <xTimerCreateTimerTask+0x44>
	return xReturn;
 8003342:	687b      	ldr	r3, [r7, #4]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20001df8 	.word	0x20001df8
 8003350:	20001dfc 	.word	0x20001dfc
 8003354:	080083f0 	.word	0x080083f0
 8003358:	0800348d 	.word	0x0800348d

0800335c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <xTimerGenericCommand+0x2c>
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	e7fe      	b.n	8003386 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <xTimerGenericCommand+0x94>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d02a      	beq.n	80033e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	dc18      	bgt.n	80033d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80033a2:	f7ff fea3 	bl	80030ec <xTaskGetSchedulerState>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d109      	bne.n	80033c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <xTimerGenericCommand+0x94>)
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	f107 0114 	add.w	r1, r7, #20
 80033b4:	2300      	movs	r3, #0
 80033b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b8:	f7fe fcc6 	bl	8001d48 <xQueueGenericSend>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24
 80033be:	e012      	b.n	80033e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <xTimerGenericCommand+0x94>)
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	f107 0114 	add.w	r1, r7, #20
 80033c8:	2300      	movs	r3, #0
 80033ca:	2200      	movs	r2, #0
 80033cc:	f7fe fcbc 	bl	8001d48 <xQueueGenericSend>
 80033d0:	6278      	str	r0, [r7, #36]	; 0x24
 80033d2:	e008      	b.n	80033e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <xTimerGenericCommand+0x94>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	f107 0114 	add.w	r1, r7, #20
 80033dc:	2300      	movs	r3, #0
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	f7fe fdac 	bl	8001f3c <xQueueGenericSendFromISR>
 80033e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20001df8 	.word	0x20001df8

080033f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <prvProcessExpiredTimer+0x94>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3304      	adds	r3, #4
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe f8e1 	bl	80015d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d021      	beq.n	8003464 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	18d1      	adds	r1, r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6978      	ldr	r0, [r7, #20]
 800342e:	f000 f8cf 	bl	80035d0 <prvInsertTimerInActiveList>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01e      	beq.n	8003476 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003438:	2300      	movs	r3, #0
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2300      	movs	r3, #0
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	2100      	movs	r1, #0
 8003442:	6978      	ldr	r0, [r7, #20]
 8003444:	f7ff ff8a 	bl	800335c <xTimerGenericCommand>
 8003448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d112      	bne.n	8003476 <prvProcessExpiredTimer+0x82>
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e7fe      	b.n	8003462 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	b2da      	uxtb	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	4798      	blx	r3
}
 800347e:	bf00      	nop
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20001df0 	.word	0x20001df0

0800348c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003494:	f107 0308 	add.w	r3, r7, #8
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f857 	bl	800354c <prvGetNextExpireTime>
 800349e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4619      	mov	r1, r3
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f803 	bl	80034b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80034aa:	f000 f8d3 	bl	8003654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034ae:	e7f1      	b.n	8003494 <prvTimerTask+0x8>

080034b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80034ba:	f7ff fa3f 	bl	800293c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f864 	bl	8003590 <prvSampleTimeNow>
 80034c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d130      	bne.n	8003532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <prvProcessTimerOrBlockTask+0x3c>
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d806      	bhi.n	80034ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80034de:	f7ff fa3b 	bl	8002958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff85 	bl	80033f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80034ea:	e024      	b.n	8003536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <prvProcessTimerOrBlockTask+0x90>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <prvProcessTimerOrBlockTask+0x50>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <prvProcessTimerOrBlockTask+0x52>
 8003500:	2300      	movs	r3, #0
 8003502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <prvProcessTimerOrBlockTask+0x94>)
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	f7fe ff97 	bl	8002444 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003516:	f7ff fa1f 	bl	8002958 <xTaskResumeAll>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <prvProcessTimerOrBlockTask+0x98>)
 8003522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	f3bf 8f6f 	isb	sy
}
 8003530:	e001      	b.n	8003536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003532:	f7ff fa11 	bl	8002958 <xTaskResumeAll>
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20001df4 	.word	0x20001df4
 8003544:	20001df8 	.word	0x20001df8
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003554:	4b0d      	ldr	r3, [pc, #52]	; (800358c <prvGetNextExpireTime+0x40>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <prvGetNextExpireTime+0x16>
 800355e:	2201      	movs	r2, #1
 8003560:	e000      	b.n	8003564 <prvGetNextExpireTime+0x18>
 8003562:	2200      	movs	r2, #0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <prvGetNextExpireTime+0x40>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e001      	b.n	8003580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003580:	68fb      	ldr	r3, [r7, #12]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	20001df0 	.word	0x20001df0

08003590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003598:	f7ff fa7a 	bl	8002a90 <xTaskGetTickCount>
 800359c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <prvSampleTimeNow+0x3c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d205      	bcs.n	80035b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80035a8:	f000 f918 	bl	80037dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e002      	b.n	80035ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80035ba:	4a04      	ldr	r2, [pc, #16]	; (80035cc <prvSampleTimeNow+0x3c>)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80035c0:	68fb      	ldr	r3, [r7, #12]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20001e00 	.word	0x20001e00

080035d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d812      	bhi.n	800361c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	1ad2      	subs	r2, r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003604:	2301      	movs	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	e01b      	b.n	8003642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <prvInsertTimerInActiveList+0x7c>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3304      	adds	r3, #4
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f7fd ffa5 	bl	8001564 <vListInsert>
 800361a:	e012      	b.n	8003642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d206      	bcs.n	8003632 <prvInsertTimerInActiveList+0x62>
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d302      	bcc.n	8003632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e007      	b.n	8003642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <prvInsertTimerInActiveList+0x80>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3304      	adds	r3, #4
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f7fd ff91 	bl	8001564 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003642:	697b      	ldr	r3, [r7, #20]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20001df4 	.word	0x20001df4
 8003650:	20001df0 	.word	0x20001df0

08003654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	; 0x30
 8003658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800365a:	e0ac      	b.n	80037b6 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f2c0 80a9 	blt.w	80037b6 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	3304      	adds	r3, #4
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd ffad 	bl	80015d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff87 	bl	8003590 <prvSampleTimeNow>
 8003682:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b09      	cmp	r3, #9
 8003688:	f200 8094 	bhi.w	80037b4 <prvProcessReceivedCommands+0x160>
 800368c:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <prvProcessReceivedCommands+0x40>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036bd 	.word	0x080036bd
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036bd 	.word	0x080036bd
 80036a0:	0800372f 	.word	0x0800372f
 80036a4:	08003743 	.word	0x08003743
 80036a8:	0800378b 	.word	0x0800378b
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036bd 	.word	0x080036bd
 80036b4:	0800372f 	.word	0x0800372f
 80036b8:	08003743 	.word	0x08003743
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	18d1      	adds	r1, r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036dc:	f7ff ff78 	bl	80035d0 <prvInsertTimerInActiveList>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d067      	beq.n	80037b6 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d05c      	beq.n	80037b6 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	441a      	add	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	2100      	movs	r1, #0
 800370c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800370e:	f7ff fe25 	bl	800335c <xTimerGenericCommand>
 8003712:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d14d      	bne.n	80037b6 <prvProcessReceivedCommands+0x162>
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	e7fe      	b.n	800372c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8003740:	e039      	b.n	80037b6 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	b2da      	uxtb	r2, r3
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <prvProcessReceivedCommands+0x122>
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e7fe      	b.n	8003774 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	18d1      	adds	r1, r2, r3
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003784:	f7ff ff24 	bl	80035d0 <prvInsertTimerInActiveList>
					break;
 8003788:	e015      	b.n	80037b6 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8003798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800379a:	f7fe f9ad 	bl	8001af8 <vPortFree>
 800379e:	e00a      	b.n	80037b6 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80037b2:	e000      	b.n	80037b6 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 80037b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <prvProcessReceivedCommands+0x184>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f107 0108 	add.w	r1, r7, #8
 80037be:	2200      	movs	r2, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fc53 	bl	800206c <xQueueReceive>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f af47 	bne.w	800365c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80037ce:	bf00      	nop
 80037d0:	3728      	adds	r7, #40	; 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20001df8 	.word	0x20001df8

080037dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037e2:	e047      	b.n	8003874 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037e4:	4b2d      	ldr	r3, [pc, #180]	; (800389c <prvSwitchTimerLists+0xc0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ee:	4b2b      	ldr	r3, [pc, #172]	; (800389c <prvSwitchTimerLists+0xc0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fee9 	bl	80015d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	6938      	ldr	r0, [r7, #16]
 8003808:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02d      	beq.n	8003874 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	4413      	add	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	429a      	cmp	r2, r3
 8003828:	d90e      	bls.n	8003848 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003836:	4b19      	ldr	r3, [pc, #100]	; (800389c <prvSwitchTimerLists+0xc0>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3304      	adds	r3, #4
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f7fd fe8f 	bl	8001564 <vListInsert>
 8003846:	e015      	b.n	8003874 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003848:	2300      	movs	r3, #0
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	2100      	movs	r1, #0
 8003852:	6938      	ldr	r0, [r7, #16]
 8003854:	f7ff fd82 	bl	800335c <xTimerGenericCommand>
 8003858:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <prvSwitchTimerLists+0x98>
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	e7fe      	b.n	8003872 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <prvSwitchTimerLists+0xc0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1b2      	bne.n	80037e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <prvSwitchTimerLists+0xc0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <prvSwitchTimerLists+0xc4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <prvSwitchTimerLists+0xc0>)
 800388a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800388c:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <prvSwitchTimerLists+0xc4>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6013      	str	r3, [r2, #0]
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20001df0 	.word	0x20001df0
 80038a0:	20001df4 	.word	0x20001df4

080038a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80038a8:	f7fd ffa6 	bl	80017f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <prvCheckForValidListAndQueue+0x40>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d113      	bne.n	80038dc <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80038b4:	480c      	ldr	r0, [pc, #48]	; (80038e8 <prvCheckForValidListAndQueue+0x44>)
 80038b6:	f7fd fe07 	bl	80014c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80038ba:	480c      	ldr	r0, [pc, #48]	; (80038ec <prvCheckForValidListAndQueue+0x48>)
 80038bc:	f7fd fe04 	bl	80014c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <prvCheckForValidListAndQueue+0x4c>)
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <prvCheckForValidListAndQueue+0x44>)
 80038c4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <prvCheckForValidListAndQueue+0x50>)
 80038c8:	4a08      	ldr	r2, [pc, #32]	; (80038ec <prvCheckForValidListAndQueue+0x48>)
 80038ca:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80038cc:	2200      	movs	r2, #0
 80038ce:	210c      	movs	r1, #12
 80038d0:	2005      	movs	r0, #5
 80038d2:	f7fe f9e5 	bl	8001ca0 <xQueueGenericCreate>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b02      	ldr	r3, [pc, #8]	; (80038e4 <prvCheckForValidListAndQueue+0x40>)
 80038da:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038dc:	f7fd ffba 	bl	8001854 <vPortExitCritical>
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20001df8 	.word	0x20001df8
 80038e8:	20001dc8 	.word	0x20001dc8
 80038ec:	20001ddc 	.word	0x20001ddc
 80038f0:	20001df0 	.word	0x20001df0
 80038f4:	20001df4 	.word	0x20001df4

080038f8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	230f      	movs	r3, #15
 800390a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	78db      	ldrb	r3, [r3, #3]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d03a      	beq.n	800398a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <NVIC_Init+0xbc>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	43db      	mvns	r3, r3
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f1c3 0304 	rsb	r3, r3, #4
 8003928:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	461a      	mov	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	789b      	ldrb	r3, [r3, #2]
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003958:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <NVIC_Init+0xc0>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	6979      	ldr	r1, [r7, #20]
 8003960:	b2c9      	uxtb	r1, r1
 8003962:	4413      	add	r3, r2
 8003964:	460a      	mov	r2, r1
 8003966:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <NVIC_Init+0xc0>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2101      	movs	r1, #1
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003984:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003988:	e00f      	b.n	80039aa <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800398a:	490b      	ldr	r1, [pc, #44]	; (80039b8 <NVIC_Init+0xc0>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	b2db      	uxtb	r3, r3
 8003994:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2201      	movs	r2, #1
 80039a0:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80039a2:	f100 0320 	add.w	r3, r0, #32
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00
 80039b8:	e000e100 	.word	0xe000e100

080039bc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	; 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	78db      	ldrb	r3, [r3, #3]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	78db      	ldrb	r3, [r3, #3]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	789b      	ldrb	r3, [r3, #2]
 80039f8:	461a      	mov	r2, r3
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d044      	beq.n	8003a94 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	e038      	b.n	8003a88 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8003a16:	2201      	movs	r2, #1
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d126      	bne.n	8003a82 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	78db      	ldrb	r3, [r3, #3]
 8003a60:	2b28      	cmp	r3, #40	; 0x28
 8003a62:	d105      	bne.n	8003a70 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8003a64:	2201      	movs	r2, #1
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	615a      	str	r2, [r3, #20]
 8003a6e:	e008      	b.n	8003a82 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	78db      	ldrb	r3, [r3, #3]
 8003a74:	2b48      	cmp	r3, #72	; 0x48
 8003a76:	d104      	bne.n	8003a82 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8003a78:	2201      	movs	r2, #1
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3301      	adds	r3, #1
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	d9c3      	bls.n	8003a16 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	2bff      	cmp	r3, #255	; 0xff
 8003a9a:	d946      	bls.n	8003b2a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e03a      	b.n	8003b1e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	3308      	adds	r3, #8
 8003aac:	2201      	movs	r2, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d127      	bne.n	8003b18 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003ace:	220f      	movs	r2, #15
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	78db      	ldrb	r3, [r3, #3]
 8003af4:	2b28      	cmp	r3, #40	; 0x28
 8003af6:	d105      	bne.n	8003b04 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	3308      	adds	r3, #8
 8003afc:	2201      	movs	r2, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	78db      	ldrb	r3, [r3, #3]
 8003b08:	2b48      	cmp	r3, #72	; 0x48
 8003b0a:	d105      	bne.n	8003b18 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	2201      	movs	r2, #1
 8003b12:	409a      	lsls	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b07      	cmp	r3, #7
 8003b22:	d9c1      	bls.n	8003aa8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	605a      	str	r2, [r3, #4]
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b42:	2300      	movs	r3, #0
 8003b44:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8003b46:	2304      	movs	r3, #4
 8003b48:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8003b4a:	4b57      	ldr	r3, [pc, #348]	; (8003ca8 <I2C_Init+0x174>)
 8003b4c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	889b      	ldrh	r3, [r3, #4]
 8003b52:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8003b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b5a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8003b5c:	f107 0308 	add.w	r3, r7, #8
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f98d 	bl	8003e80 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4a4f      	ldr	r2, [pc, #316]	; (8003cac <I2C_Init+0x178>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0c9b      	lsrs	r3, r3, #18
 8003b74:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8003b76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b82:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a44      	ldr	r2, [pc, #272]	; (8003cb0 <I2C_Init+0x17c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d815      	bhi.n	8003bce <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8003bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d801      	bhi.n	8003bba <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8003bba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003bc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	841a      	strh	r2, [r3, #32]
 8003bcc:	e040      	b.n	8003c50 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	88db      	ldrh	r3, [r3, #6]
 8003bd2:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d109      	bne.n	8003bee <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003bec:	e00e      	b.n	8003c0c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009a      	lsls	r2, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8003c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c0a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8003c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8003c16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8003c1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c22:	4313      	orrs	r3, r2
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c2e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <I2C_Init+0x180>)
 8003c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8003c40:	1192      	asrs	r2, r2, #6
 8003c42:	17db      	asrs	r3, r3, #31
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3301      	adds	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c54:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8003c6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c6e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8003c72:	f023 0302 	bic.w	r3, r3, #2
 8003c76:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	889a      	ldrh	r2, [r3, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	895b      	ldrh	r3, [r3, #10]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c86:	4313      	orrs	r3, r2
 8003c88:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c8e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	899a      	ldrh	r2, [r3, #12]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	891b      	ldrh	r3, [r3, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	811a      	strh	r2, [r3, #8]
}
 8003ca0:	bf00      	nop
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	007a1200 	.word	0x007a1200
 8003cac:	431bde83 	.word	0x431bde83
 8003cb0:	000186a0 	.word	0x000186a0
 8003cb4:	10624dd3 	.word	0x10624dd3

08003cb8 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8003cda:	e007      	b.n	8003cec <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	801a      	strh	r2, [r3, #0]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8003d18:	e007      	b.n	8003d2a <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	801a      	strh	r2, [r3, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8003d56:	e007      	b.n	8003d68 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	801a      	strh	r2, [r3, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8003d94:	e007      	b.n	8003da6 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	801a      	strh	r2, [r3, #0]
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	821a      	strh	r2, [r3, #16]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8a1b      	ldrh	r3, [r3, #16]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
 8003df4:	4613      	mov	r3, r2
 8003df6:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8003df8:	78bb      	ldrb	r3, [r7, #2]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	70fb      	strb	r3, [r7, #3]
 8003e06:	e003      	b.n	8003e10 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	821a      	strh	r2, [r3, #16]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	2300      	movs	r3, #0
 8003e36:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8a9b      	ldrh	r3, [r3, #20]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8b1b      	ldrh	r3, [r3, #24]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	401a      	ands	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d102      	bne.n	8003e70 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
 8003e6e:	e001      	b.n	8003e74 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8003e70:	2300      	movs	r3, #0
 8003e72:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8003e9c:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <RCC_GetClocksFreq+0x148>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d007      	beq.n	8003ebc <RCC_GetClocksFreq+0x3c>
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d009      	beq.n	8003ec4 <RCC_GetClocksFreq+0x44>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d12f      	bne.n	8003f14 <RCC_GetClocksFreq+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a45      	ldr	r2, [pc, #276]	; (8003fcc <RCC_GetClocksFreq+0x14c>)
 8003eb8:	601a      	str	r2, [r3, #0]
      break;
 8003eba:	e02f      	b.n	8003f1c <RCC_GetClocksFreq+0x9c>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a43      	ldr	r2, [pc, #268]	; (8003fcc <RCC_GetClocksFreq+0x14c>)
 8003ec0:	601a      	str	r2, [r3, #0]
      break;
 8003ec2:	e02b      	b.n	8003f1c <RCC_GetClocksFreq+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8003ec4:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <RCC_GetClocksFreq+0x148>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ecc:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8003ece:	4b3e      	ldr	r3, [pc, #248]	; (8003fc8 <RCC_GetClocksFreq+0x148>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed6:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	0c9b      	lsrs	r3, r3, #18
 8003edc:	3302      	adds	r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <RCC_GetClocksFreq+0x74>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4a39      	ldr	r2, [pc, #228]	; (8003fd0 <RCC_GetClocksFreq+0x150>)
 8003eea:	fb02 f203 	mul.w	r2, r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8003ef2:	e013      	b.n	8003f1c <RCC_GetClocksFreq+0x9c>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8003ef4:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <RCC_GetClocksFreq+0x148>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8003f00:	4a32      	ldr	r2, [pc, #200]	; (8003fcc <RCC_GetClocksFreq+0x14c>)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	fb02 f203 	mul.w	r2, r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	601a      	str	r2, [r3, #0]
      break;
 8003f12:	e003      	b.n	8003f1c <RCC_GetClocksFreq+0x9c>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a2d      	ldr	r2, [pc, #180]	; (8003fcc <RCC_GetClocksFreq+0x14c>)
 8003f18:	601a      	str	r2, [r3, #0]
      break;
 8003f1a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <RCC_GetClocksFreq+0x148>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f24:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003f2c:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <RCC_GetClocksFreq+0x154>)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	40da      	lsrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8003f44:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <RCC_GetClocksFreq+0x148>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f4c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <RCC_GetClocksFreq+0x154>)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	40da      	lsrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8003f6c:	4b16      	ldr	r3, [pc, #88]	; (8003fc8 <RCC_GetClocksFreq+0x148>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f74:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	0adb      	lsrs	r3, r3, #11
 8003f7a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003f7c:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <RCC_GetClocksFreq+0x154>)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	40da      	lsrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <RCC_GetClocksFreq+0x148>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f9c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	0b9b      	lsrs	r3, r3, #14
 8003fa2:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 8003fa4:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <RCC_GetClocksFreq+0x158>)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	611a      	str	r2, [r3, #16]
}
 8003fbe:	bf00      	nop
 8003fc0:	3724      	adds	r7, #36	; 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	007a1200 	.word	0x007a1200
 8003fd0:	003d0900 	.word	0x003d0900
 8003fd4:	20000008 	.word	0x20000008
 8003fd8:	20000018 	.word	0x20000018

08003fdc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003fee:	4909      	ldr	r1, [pc, #36]	; (8004014 <RCC_APB2PeriphClockCmd+0x38>)
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <RCC_APB2PeriphClockCmd+0x38>)
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8003ffa:	e006      	b.n	800400a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003ffc:	4905      	ldr	r1, [pc, #20]	; (8004014 <RCC_APB2PeriphClockCmd+0x38>)
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <RCC_APB2PeriphClockCmd+0x38>)
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	43db      	mvns	r3, r3
 8004006:	4013      	ands	r3, r2
 8004008:	618b      	str	r3, [r1, #24]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	40021000 	.word	0x40021000

08004018 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800402a:	4909      	ldr	r1, [pc, #36]	; (8004050 <RCC_APB1PeriphClockCmd+0x38>)
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <RCC_APB1PeriphClockCmd+0x38>)
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4313      	orrs	r3, r2
 8004034:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8004036:	e006      	b.n	8004046 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004038:	4905      	ldr	r1, [pc, #20]	; (8004050 <RCC_APB1PeriphClockCmd+0x38>)
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <RCC_APB1PeriphClockCmd+0x38>)
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	43db      	mvns	r3, r3
 8004042:	4013      	ands	r3, r2
 8004044:	61cb      	str	r3, [r1, #28]
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	40021000 	.word	0x40021000

08004054 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a2e      	ldr	r2, [pc, #184]	; (8004124 <TIM_TimeBaseInit+0xd0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <TIM_TimeBaseInit+0x44>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <TIM_TimeBaseInit+0xd4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00f      	beq.n	8004098 <TIM_TimeBaseInit+0x44>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407e:	d00b      	beq.n	8004098 <TIM_TimeBaseInit+0x44>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a2a      	ldr	r2, [pc, #168]	; (800412c <TIM_TimeBaseInit+0xd8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <TIM_TimeBaseInit+0x44>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a29      	ldr	r2, [pc, #164]	; (8004130 <TIM_TimeBaseInit+0xdc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a28      	ldr	r2, [pc, #160]	; (8004134 <TIM_TimeBaseInit+0xe0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d108      	bne.n	80040aa <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8004098:	89fb      	ldrh	r3, [r7, #14]
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	885a      	ldrh	r2, [r3, #2]
 80040a4:	89fb      	ldrh	r3, [r7, #14]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a22      	ldr	r2, [pc, #136]	; (8004138 <TIM_TimeBaseInit+0xe4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00c      	beq.n	80040cc <TIM_TimeBaseInit+0x78>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a21      	ldr	r2, [pc, #132]	; (800413c <TIM_TimeBaseInit+0xe8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d008      	beq.n	80040cc <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80040ba:	89fb      	ldrh	r3, [r7, #14]
 80040bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	88da      	ldrh	r2, [r3, #6]
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	89fa      	ldrh	r2, [r7, #14]
 80040d0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	889a      	ldrh	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	881a      	ldrh	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a0f      	ldr	r2, [pc, #60]	; (8004124 <TIM_TimeBaseInit+0xd0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00f      	beq.n	800410a <TIM_TimeBaseInit+0xb6>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a0e      	ldr	r2, [pc, #56]	; (8004128 <TIM_TimeBaseInit+0xd4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00b      	beq.n	800410a <TIM_TimeBaseInit+0xb6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <TIM_TimeBaseInit+0xec>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <TIM_TimeBaseInit+0xb6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a11      	ldr	r2, [pc, #68]	; (8004144 <TIM_TimeBaseInit+0xf0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_TimeBaseInit+0xb6>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a10      	ldr	r2, [pc, #64]	; (8004148 <TIM_TimeBaseInit+0xf4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d104      	bne.n	8004114 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	7a1b      	ldrb	r3, [r3, #8]
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	829a      	strh	r2, [r3, #20]
}
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40013400 	.word	0x40013400
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800
 8004134:	40000c00 	.word	0x40000c00
 8004138:	40001000 	.word	0x40001000
 800413c:	40001400 	.word	0x40001400
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400
 8004148:	40014800 	.word	0x40014800

0800414c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	2300      	movs	r3, #0
 800415c:	81fb      	strh	r3, [r7, #14]
 800415e:	2300      	movs	r3, #0
 8004160:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8c1b      	ldrh	r3, [r3, #32]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8c1b      	ldrh	r3, [r3, #32]
 8004176:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	889b      	ldrh	r3, [r3, #4]
 800417c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8b1b      	ldrh	r3, [r3, #24]
 8004182:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8004184:	897b      	ldrh	r3, [r7, #10]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800418c:	897b      	ldrh	r3, [r7, #10]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	881a      	ldrh	r2, [r3, #0]
 8004198:	897b      	ldrh	r3, [r7, #10]
 800419a:	4313      	orrs	r3, r2
 800419c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800419e:	89fb      	ldrh	r3, [r7, #14]
 80041a0:	f023 0302 	bic.w	r3, r3, #2
 80041a4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	891a      	ldrh	r2, [r3, #8]
 80041aa:	89fb      	ldrh	r3, [r7, #14]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	885a      	ldrh	r2, [r3, #2]
 80041b4:	89fb      	ldrh	r3, [r7, #14]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a24      	ldr	r2, [pc, #144]	; (8004250 <TIM_OC1Init+0x104>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_OC1Init+0x96>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a23      	ldr	r2, [pc, #140]	; (8004254 <TIM_OC1Init+0x108>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_OC1Init+0x96>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a22      	ldr	r2, [pc, #136]	; (8004258 <TIM_OC1Init+0x10c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_OC1Init+0x96>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a21      	ldr	r2, [pc, #132]	; (800425c <TIM_OC1Init+0x110>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a20      	ldr	r2, [pc, #128]	; (8004260 <TIM_OC1Init+0x114>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d123      	bne.n	800422a <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	f023 0308 	bic.w	r3, r3, #8
 80041e8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	895a      	ldrh	r2, [r3, #10]
 80041ee:	89fb      	ldrh	r3, [r7, #14]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 80041f4:	89fb      	ldrh	r3, [r7, #14]
 80041f6:	f023 0304 	bic.w	r3, r3, #4
 80041fa:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	889a      	ldrh	r2, [r3, #4]
 8004200:	89fb      	ldrh	r3, [r7, #14]
 8004202:	4313      	orrs	r3, r2
 8004204:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8004206:	89bb      	ldrh	r3, [r7, #12]
 8004208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800420e:	89bb      	ldrh	r3, [r7, #12]
 8004210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004214:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	899a      	ldrh	r2, [r3, #12]
 800421a:	89bb      	ldrh	r3, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	89da      	ldrh	r2, [r3, #14]
 8004224:	89bb      	ldrh	r3, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	89ba      	ldrh	r2, [r7, #12]
 800422e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	897a      	ldrh	r2, [r7, #10]
 8004234:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	88da      	ldrh	r2, [r3, #6]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	89fa      	ldrh	r2, [r7, #14]
 8004242:	841a      	strh	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40013400 	.word	0x40013400
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800

08004264 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	817b      	strh	r3, [r7, #10]
 8004272:	2300      	movs	r3, #0
 8004274:	81fb      	strh	r3, [r7, #14]
 8004276:	2300      	movs	r3, #0
 8004278:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8c1b      	ldrh	r3, [r3, #32]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f023 0310 	bic.w	r3, r3, #16
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8c1b      	ldrh	r3, [r3, #32]
 800428e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	889b      	ldrh	r3, [r3, #4]
 8004294:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8b1b      	ldrh	r3, [r3, #24]
 800429a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 800429c:	897b      	ldrh	r3, [r7, #10]
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80042a4:	897b      	ldrh	r3, [r7, #10]
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042aa:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	897b      	ldrh	r3, [r7, #10]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80042ba:	89fb      	ldrh	r3, [r7, #14]
 80042bc:	f023 0320 	bic.w	r3, r3, #32
 80042c0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	891b      	ldrh	r3, [r3, #8]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	89fb      	ldrh	r3, [r7, #14]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	885b      	ldrh	r3, [r3, #2]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	89fb      	ldrh	r3, [r7, #14]
 80042da:	4313      	orrs	r3, r2
 80042dc:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a22      	ldr	r2, [pc, #136]	; (800436c <TIM_OC2Init+0x108>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <TIM_OC2Init+0x8a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a21      	ldr	r2, [pc, #132]	; (8004370 <TIM_OC2Init+0x10c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d12b      	bne.n	8004346 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	895b      	ldrh	r3, [r3, #10]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	4313      	orrs	r3, r2
 8004302:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8004304:	89fb      	ldrh	r3, [r7, #14]
 8004306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800430a:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	889b      	ldrh	r3, [r3, #4]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	b29a      	uxth	r2, r3
 8004314:	89fb      	ldrh	r3, [r7, #14]
 8004316:	4313      	orrs	r3, r2
 8004318:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 800431a:	89bb      	ldrh	r3, [r7, #12]
 800431c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004320:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8004322:	89bb      	ldrh	r3, [r7, #12]
 8004324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004328:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	899b      	ldrh	r3, [r3, #12]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	b29a      	uxth	r2, r3
 8004332:	89bb      	ldrh	r3, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	89db      	ldrh	r3, [r3, #14]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	b29a      	uxth	r2, r3
 8004340:	89bb      	ldrh	r3, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	89ba      	ldrh	r2, [r7, #12]
 800434a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	897a      	ldrh	r2, [r7, #10]
 8004350:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	88da      	ldrh	r2, [r3, #6]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	89fa      	ldrh	r2, [r7, #14]
 800435e:	841a      	strh	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40013400 	.word	0x40013400

08004374 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	817b      	strh	r3, [r7, #10]
 8004382:	2300      	movs	r3, #0
 8004384:	81fb      	strh	r3, [r7, #14]
 8004386:	2300      	movs	r3, #0
 8004388:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8c1b      	ldrh	r3, [r3, #32]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8c1b      	ldrh	r3, [r3, #32]
 800439e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	889b      	ldrh	r3, [r3, #4]
 80043a4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8b9b      	ldrh	r3, [r3, #28]
 80043aa:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80043ac:	897b      	ldrh	r3, [r7, #10]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 80043b4:	897b      	ldrh	r3, [r7, #10]
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	897b      	ldrh	r3, [r7, #10]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80043c6:	89fb      	ldrh	r3, [r7, #14]
 80043c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043cc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	891b      	ldrh	r3, [r3, #8]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	4313      	orrs	r3, r2
 80043da:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	885b      	ldrh	r3, [r3, #2]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a22      	ldr	r2, [pc, #136]	; (8004478 <TIM_OC3Init+0x104>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d003      	beq.n	80043fa <TIM_OC3Init+0x86>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a21      	ldr	r2, [pc, #132]	; (800447c <TIM_OC3Init+0x108>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d12b      	bne.n	8004452 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 80043fa:	89fb      	ldrh	r3, [r7, #14]
 80043fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004400:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	895b      	ldrh	r3, [r3, #10]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	b29a      	uxth	r2, r3
 800440a:	89fb      	ldrh	r3, [r7, #14]
 800440c:	4313      	orrs	r3, r2
 800440e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8004410:	89fb      	ldrh	r3, [r7, #14]
 8004412:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004416:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	889b      	ldrh	r3, [r3, #4]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	b29a      	uxth	r2, r3
 8004420:	89fb      	ldrh	r3, [r7, #14]
 8004422:	4313      	orrs	r3, r2
 8004424:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8004426:	89bb      	ldrh	r3, [r7, #12]
 8004428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800442c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800442e:	89bb      	ldrh	r3, [r7, #12]
 8004430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004434:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	899b      	ldrh	r3, [r3, #12]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	b29a      	uxth	r2, r3
 800443e:	89bb      	ldrh	r3, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	89db      	ldrh	r3, [r3, #14]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	b29a      	uxth	r2, r3
 800444c:	89bb      	ldrh	r3, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	89ba      	ldrh	r2, [r7, #12]
 8004456:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	897a      	ldrh	r2, [r7, #10]
 800445c:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	88da      	ldrh	r2, [r3, #6]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	89fa      	ldrh	r2, [r7, #14]
 800446a:	841a      	strh	r2, [r3, #32]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40013400 	.word	0x40013400

08004480 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	81bb      	strh	r3, [r7, #12]
 800448e:	2300      	movs	r3, #0
 8004490:	817b      	strh	r3, [r7, #10]
 8004492:	2300      	movs	r3, #0
 8004494:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8c1b      	ldrh	r3, [r3, #32]
 800449a:	b29b      	uxth	r3, r3
 800449c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8c1b      	ldrh	r3, [r3, #32]
 80044aa:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	889b      	ldrh	r3, [r3, #4]
 80044b0:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8b9b      	ldrh	r3, [r3, #28]
 80044b6:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 80044b8:	89bb      	ldrh	r3, [r7, #12]
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044be:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80044c0:	89bb      	ldrh	r3, [r7, #12]
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c6:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	89bb      	ldrh	r3, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80044d6:	897b      	ldrh	r3, [r7, #10]
 80044d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044dc:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	891b      	ldrh	r3, [r3, #8]
 80044e2:	031b      	lsls	r3, r3, #12
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	897b      	ldrh	r3, [r7, #10]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	885b      	ldrh	r3, [r3, #2]
 80044f0:	031b      	lsls	r3, r3, #12
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	897b      	ldrh	r3, [r7, #10]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a12      	ldr	r2, [pc, #72]	; (8004548 <TIM_OC4Init+0xc8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <TIM_OC4Init+0x8a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a11      	ldr	r2, [pc, #68]	; (800454c <TIM_OC4Init+0xcc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10a      	bne.n	8004520 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 800450a:	89fb      	ldrh	r3, [r7, #14]
 800450c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004510:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	899b      	ldrh	r3, [r3, #12]
 8004516:	019b      	lsls	r3, r3, #6
 8004518:	b29a      	uxth	r2, r3
 800451a:	89fb      	ldrh	r3, [r7, #14]
 800451c:	4313      	orrs	r3, r2
 800451e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	89fa      	ldrh	r2, [r7, #14]
 8004524:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	89ba      	ldrh	r2, [r7, #12]
 800452a:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	88da      	ldrh	r2, [r3, #6]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	897a      	ldrh	r2, [r7, #10]
 800453a:	841a      	strh	r2, [r3, #32]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40013400 	.word	0x40013400

08004550 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8004572:	e007      	b.n	8004584 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	801a      	strh	r2, [r3, #0]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	807b      	strh	r3, [r7, #2]
 800459a:	4613      	mov	r3, r2
 800459c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800459e:	787b      	ldrb	r3, [r7, #1]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	899b      	ldrh	r3, [r3, #12]
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	887b      	ldrh	r3, [r7, #2]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80045b4:	e009      	b.n	80045ca <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	899b      	ldrh	r3, [r3, #12]
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	887b      	ldrh	r3, [r7, #2]
 80045be:	43db      	mvns	r3, r3
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	4013      	ands	r3, r2
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	819a      	strh	r2, [r3, #12]
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 80045f6:	e007      	b.n	8004608 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004602:	b29a      	uxth	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	801a      	strh	r2, [r3, #0]
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	460b      	mov	r3, r1
 800461c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8b1b      	ldrh	r3, [r3, #24]
 8004626:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8004628:	89fb      	ldrh	r3, [r7, #14]
 800462a:	f023 0308 	bic.w	r3, r3, #8
 800462e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8004630:	89fa      	ldrh	r2, [r7, #14]
 8004632:	887b      	ldrh	r3, [r7, #2]
 8004634:	4313      	orrs	r3, r2
 8004636:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	89fa      	ldrh	r2, [r7, #14]
 800463c:	831a      	strh	r2, [r3, #24]
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8b1b      	ldrh	r3, [r3, #24]
 800465c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 800465e:	89fb      	ldrh	r3, [r7, #14]
 8004660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004664:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8004666:	887b      	ldrh	r3, [r7, #2]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	b29a      	uxth	r2, r3
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	4313      	orrs	r3, r2
 8004670:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	89fa      	ldrh	r2, [r7, #14]
 8004676:	831a      	strh	r2, [r3, #24]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	460b      	mov	r3, r1
 800468c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8b9b      	ldrh	r3, [r3, #28]
 8004696:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8004698:	89fb      	ldrh	r3, [r7, #14]
 800469a:	f023 0308 	bic.w	r3, r3, #8
 800469e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80046a0:	89fa      	ldrh	r2, [r7, #14]
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	89fa      	ldrh	r2, [r7, #14]
 80046ac:	839a      	strh	r2, [r3, #28]
}
 80046ae:	bf00      	nop
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8b9b      	ldrh	r3, [r3, #28]
 80046cc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 80046ce:	89fb      	ldrh	r3, [r7, #14]
 80046d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	b29a      	uxth	r2, r3
 80046dc:	89fb      	ldrh	r3, [r7, #14]
 80046de:	4313      	orrs	r3, r2
 80046e0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	89fa      	ldrh	r2, [r7, #14]
 80046e6:	839a      	strh	r2, [r3, #28]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8004702:	2300      	movs	r3, #0
 8004704:	81bb      	strh	r3, [r7, #12]
 8004706:	2300      	movs	r3, #0
 8004708:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8a1b      	ldrh	r3, [r3, #16]
 800470e:	b29a      	uxth	r2, r3
 8004710:	887b      	ldrh	r3, [r7, #2]
 8004712:	4013      	ands	r3, r2
 8004714:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	899b      	ldrh	r3, [r3, #12]
 800471a:	b29a      	uxth	r2, r3
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	4013      	ands	r3, r2
 8004720:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8004722:	89bb      	ldrh	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <TIM_GetITStatus+0x42>
 8004728:	897b      	ldrh	r3, [r7, #10]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
 8004732:	e001      	b.n	8004738 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8004734:	2300      	movs	r3, #0
 8004736:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr

08004744 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	43db      	mvns	r3, r3
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	821a      	strh	r2, [r3, #16]
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08c      	sub	sp, #48	; 0x30
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004772:	2300      	movs	r3, #0
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8a1b      	ldrh	r3, [r3, #16]
 800478a:	b29b      	uxth	r3, r3
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800478e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004790:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8004794:	4013      	ands	r3, r2
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	88db      	ldrh	r3, [r3, #6]
 800479c:	461a      	mov	r2, r3
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	4313      	orrs	r3, r2
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	899b      	ldrh	r3, [r3, #12]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80047b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b6:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80047ba:	4013      	ands	r3, r2
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	889a      	ldrh	r2, [r3, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	891b      	ldrh	r3, [r3, #8]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80047ce:	4313      	orrs	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	4313      	orrs	r3, r2
 80047d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	8a9b      	ldrh	r3, [r3, #20]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80047ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ec:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80047f0:	4013      	ands	r3, r2
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	899b      	ldrh	r3, [r3, #12]
 80047f8:	461a      	mov	r2, r3
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	4313      	orrs	r3, r2
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	b29a      	uxth	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8004808:	f107 0308 	add.w	r3, r7, #8
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fb37 	bl	8003e80 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4a2e      	ldr	r2, [pc, #184]	; (80048d0 <USART_Init+0x16c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d102      	bne.n	8004820 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
 800481e:	e001      	b.n	8004824 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	899b      	ldrh	r3, [r3, #12]
 8004828:	b29b      	uxth	r3, r3
 800482a:	b21b      	sxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	da0c      	bge.n	800484a <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8004830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009a      	lsls	r2, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
 8004848:	e00b      	b.n	8004862 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800484a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009a      	lsls	r2, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <USART_Init+0x170>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	2264      	movs	r2, #100	; 0x64
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	899b      	ldrh	r3, [r3, #12]
 8004884:	b29b      	uxth	r3, r3
 8004886:	b21b      	sxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	da0c      	bge.n	80048a6 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	3332      	adds	r3, #50	; 0x32
 8004892:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <USART_Init+0x170>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a0:	4313      	orrs	r3, r2
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a4:	e00b      	b.n	80048be <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	3332      	adds	r3, #50	; 0x32
 80048ac:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <USART_Init+0x170>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ba:	4313      	orrs	r3, r2
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	811a      	strh	r2, [r3, #8]
}
 80048c6:	bf00      	nop
 80048c8:	3730      	adds	r7, #48	; 0x30
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40013800 	.word	0x40013800
 80048d4:	51eb851f 	.word	0x51eb851f

080048d8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	899b      	ldrh	r3, [r3, #12]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80048fa:	e007      	b.n	800490c <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	899b      	ldrh	r3, [r3, #12]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004906:	b29a      	uxth	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	819a      	strh	r2, [r3, #12]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr

08004916 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	460b      	mov	r3, r1
 8004920:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8004922:	887b      	ldrh	r3, [r7, #2]
 8004924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	809a      	strh	r2, [r3, #4]
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr

08004938 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29a      	uxth	r2, r3
 800494e:	887b      	ldrh	r3, [r7, #2]
 8004950:	4013      	ands	r3, r2
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e001      	b.n	8004962 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr
	...

08004970 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b09b      	sub	sp, #108	; 0x6c
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800497e:	4b9e      	ldr	r3, [pc, #632]	; (8004bf8 <MadgwickAHRSupdateIMU+0x288>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004986:	68f9      	ldr	r1, [r7, #12]
 8004988:	4618      	mov	r0, r3
 800498a:	f7fc fa39 	bl	8000e00 <__aeabi_fmul>
 800498e:	4603      	mov	r3, r0
 8004990:	461c      	mov	r4, r3
 8004992:	4b9a      	ldr	r3, [pc, #616]	; (8004bfc <MadgwickAHRSupdateIMU+0x28c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f7fc fa31 	bl	8000e00 <__aeabi_fmul>
 800499e:	4603      	mov	r3, r0
 80049a0:	4619      	mov	r1, r3
 80049a2:	4620      	mov	r0, r4
 80049a4:	f7fc f922 	bl	8000bec <__aeabi_fsub>
 80049a8:	4603      	mov	r3, r0
 80049aa:	461c      	mov	r4, r3
 80049ac:	4b94      	ldr	r3, [pc, #592]	; (8004c00 <MadgwickAHRSupdateIMU+0x290>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc fa24 	bl	8000e00 <__aeabi_fmul>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4619      	mov	r1, r3
 80049bc:	4620      	mov	r0, r4
 80049be:	f7fc f915 	bl	8000bec <__aeabi_fsub>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fc fa19 	bl	8000e00 <__aeabi_fmul>
 80049ce:	4603      	mov	r3, r0
 80049d0:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80049d2:	4b8c      	ldr	r3, [pc, #560]	; (8004c04 <MadgwickAHRSupdateIMU+0x294>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fc fa11 	bl	8000e00 <__aeabi_fmul>
 80049de:	4603      	mov	r3, r0
 80049e0:	461c      	mov	r4, r3
 80049e2:	4b86      	ldr	r3, [pc, #536]	; (8004bfc <MadgwickAHRSupdateIMU+0x28c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fc fa09 	bl	8000e00 <__aeabi_fmul>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4619      	mov	r1, r3
 80049f2:	4620      	mov	r0, r4
 80049f4:	f7fc f8fc 	bl	8000bf0 <__addsf3>
 80049f8:	4603      	mov	r3, r0
 80049fa:	461c      	mov	r4, r3
 80049fc:	4b80      	ldr	r3, [pc, #512]	; (8004c00 <MadgwickAHRSupdateIMU+0x290>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fc f9fc 	bl	8000e00 <__aeabi_fmul>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f7fc f8ed 	bl	8000bec <__aeabi_fsub>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fc f9f1 	bl	8000e00 <__aeabi_fmul>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8004a22:	4b78      	ldr	r3, [pc, #480]	; (8004c04 <MadgwickAHRSupdateIMU+0x294>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fc f9e9 	bl	8000e00 <__aeabi_fmul>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	461c      	mov	r4, r3
 8004a32:	4b71      	ldr	r3, [pc, #452]	; (8004bf8 <MadgwickAHRSupdateIMU+0x288>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fc f9e1 	bl	8000e00 <__aeabi_fmul>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4619      	mov	r1, r3
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7fc f8d2 	bl	8000bec <__aeabi_fsub>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	4b6c      	ldr	r3, [pc, #432]	; (8004c00 <MadgwickAHRSupdateIMU+0x290>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68f9      	ldr	r1, [r7, #12]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fc f9d4 	bl	8000e00 <__aeabi_fmul>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f7fc f8c7 	bl	8000bf0 <__addsf3>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fc f9c9 	bl	8000e00 <__aeabi_fmul>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8004a72:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <MadgwickAHRSupdateIMU+0x294>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fc f9c1 	bl	8000e00 <__aeabi_fmul>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	461c      	mov	r4, r3
 8004a82:	4b5d      	ldr	r3, [pc, #372]	; (8004bf8 <MadgwickAHRSupdateIMU+0x288>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fc f9b9 	bl	8000e00 <__aeabi_fmul>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4619      	mov	r1, r3
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7fc f8ac 	bl	8000bf0 <__addsf3>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461c      	mov	r4, r3
 8004a9c:	4b57      	ldr	r3, [pc, #348]	; (8004bfc <MadgwickAHRSupdateIMU+0x28c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fc f9ac 	bl	8000e00 <__aeabi_fmul>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7fc f89d 	bl	8000bec <__aeabi_fsub>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fc f9a1 	bl	8000e00 <__aeabi_fmul>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8004ac2:	f04f 0100 	mov.w	r1, #0
 8004ac6:	6838      	ldr	r0, [r7, #0]
 8004ac8:	f7fc fb2e 	bl	8001128 <__aeabi_fcmpeq>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d010      	beq.n	8004af4 <MadgwickAHRSupdateIMU+0x184>
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004ad8:	f7fc fb26 	bl	8001128 <__aeabi_fcmpeq>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <MadgwickAHRSupdateIMU+0x184>
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004ae8:	f7fc fb1e 	bl	8001128 <__aeabi_fcmpeq>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 823c 	bne.w	8004f6c <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	6838      	ldr	r0, [r7, #0]
 8004af8:	f7fc f982 	bl	8000e00 <__aeabi_fmul>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461c      	mov	r4, r3
 8004b00:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004b02:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004b04:	f7fc f97c 	bl	8000e00 <__aeabi_fmul>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7fc f86f 	bl	8000bf0 <__addsf3>
 8004b12:	4603      	mov	r3, r0
 8004b14:	461c      	mov	r4, r3
 8004b16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b18:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004b1a:	f7fc f971 	bl	8000e00 <__aeabi_fmul>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4619      	mov	r1, r3
 8004b22:	4620      	mov	r0, r4
 8004b24:	f7fc f864 	bl	8000bf0 <__addsf3>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fb82 	bl	8005234 <invSqrt>
 8004b30:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 8004b32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b34:	6838      	ldr	r0, [r7, #0]
 8004b36:	f7fc f963 	bl	8000e00 <__aeabi_fmul>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8004b3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b40:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004b42:	f7fc f95d 	bl	8000e00 <__aeabi_fmul>
 8004b46:	4603      	mov	r3, r0
 8004b48:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;   
 8004b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b4c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004b4e:	f7fc f957 	bl	8000e00 <__aeabi_fmul>
 8004b52:	4603      	mov	r3, r0
 8004b54:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8004b56:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <MadgwickAHRSupdateIMU+0x294>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fc f847 	bl	8000bf0 <__addsf3>
 8004b62:	4603      	mov	r3, r0
 8004b64:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <MadgwickAHRSupdateIMU+0x288>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fc f83f 	bl	8000bf0 <__addsf3>
 8004b72:	4603      	mov	r3, r0
 8004b74:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 8004b76:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <MadgwickAHRSupdateIMU+0x28c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fc f837 	bl	8000bf0 <__addsf3>
 8004b82:	4603      	mov	r3, r0
 8004b84:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 8004b86:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <MadgwickAHRSupdateIMU+0x290>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fc f82f 	bl	8000bf0 <__addsf3>
 8004b92:	4603      	mov	r3, r0
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 8004b96:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <MadgwickAHRSupdateIMU+0x294>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fc f92e 	bl	8000e00 <__aeabi_fmul>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 8004ba8:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <MadgwickAHRSupdateIMU+0x288>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fc f925 	bl	8000e00 <__aeabi_fmul>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <MadgwickAHRSupdateIMU+0x28c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fc f91c 	bl	8000e00 <__aeabi_fmul>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <MadgwickAHRSupdateIMU+0x288>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fc f913 	bl	8000e00 <__aeabi_fmul>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 8004bde:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <MadgwickAHRSupdateIMU+0x28c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fc f90a 	bl	8000e00 <__aeabi_fmul>
 8004bec:	4603      	mov	r3, r0
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30
		q0q0 = q0 * q0;
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <MadgwickAHRSupdateIMU+0x294>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	e008      	b.n	8004c08 <MadgwickAHRSupdateIMU+0x298>
 8004bf6:	bf00      	nop
 8004bf8:	20001e04 	.word	0x20001e04
 8004bfc:	20001e08 	.word	0x20001e08
 8004c00:	20001e0c 	.word	0x20001e0c
 8004c04:	20000020 	.word	0x20000020
 8004c08:	4b9a      	ldr	r3, [pc, #616]	; (8004e74 <MadgwickAHRSupdateIMU+0x504>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f7fc f8f6 	bl	8000e00 <__aeabi_fmul>
 8004c14:	4603      	mov	r3, r0
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8004c18:	4b97      	ldr	r3, [pc, #604]	; (8004e78 <MadgwickAHRSupdateIMU+0x508>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b96      	ldr	r3, [pc, #600]	; (8004e78 <MadgwickAHRSupdateIMU+0x508>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f7fc f8ec 	bl	8000e00 <__aeabi_fmul>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 8004c2c:	4b93      	ldr	r3, [pc, #588]	; (8004e7c <MadgwickAHRSupdateIMU+0x50c>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4b92      	ldr	r3, [pc, #584]	; (8004e7c <MadgwickAHRSupdateIMU+0x50c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f7fc f8e2 	bl	8000e00 <__aeabi_fmul>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8004c40:	4b8f      	ldr	r3, [pc, #572]	; (8004e80 <MadgwickAHRSupdateIMU+0x510>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b8e      	ldr	r3, [pc, #568]	; (8004e80 <MadgwickAHRSupdateIMU+0x510>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7fc f8d8 	bl	8000e00 <__aeabi_fmul>
 8004c50:	4603      	mov	r3, r0
 8004c52:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c58:	f7fc f8d2 	bl	8000e00 <__aeabi_fmul>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	461c      	mov	r4, r3
 8004c60:	6839      	ldr	r1, [r7, #0]
 8004c62:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004c64:	f7fc f8cc 	bl	8000e00 <__aeabi_fmul>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f7fb ffbf 	bl	8000bf0 <__addsf3>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461c      	mov	r4, r3
 8004c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c78:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c7a:	f7fc f8c1 	bl	8000e00 <__aeabi_fmul>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4619      	mov	r1, r3
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7fb ffb4 	bl	8000bf0 <__addsf3>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461c      	mov	r4, r3
 8004c8c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004c8e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004c90:	f7fc f8b6 	bl	8000e00 <__aeabi_fmul>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4619      	mov	r1, r3
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f7fb ffa7 	bl	8000bec <__aeabi_fsub>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004ca2:	6a39      	ldr	r1, [r7, #32]
 8004ca4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ca6:	f7fc f8ab 	bl	8000e00 <__aeabi_fmul>
 8004caa:	4603      	mov	r3, r0
 8004cac:	461c      	mov	r4, r3
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004cb2:	f7fc f8a5 	bl	8000e00 <__aeabi_fmul>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f7fb ff96 	bl	8000bec <__aeabi_fsub>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461c      	mov	r4, r3
 8004cc4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cca:	f7fc f899 	bl	8000e00 <__aeabi_fmul>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b69      	ldr	r3, [pc, #420]	; (8004e78 <MadgwickAHRSupdateIMU+0x508>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7fc f891 	bl	8000e00 <__aeabi_fmul>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7fb ff84 	bl	8000bf0 <__addsf3>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461c      	mov	r4, r3
 8004cec:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004cee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004cf0:	f7fc f886 	bl	8000e00 <__aeabi_fmul>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f7fb ff77 	bl	8000bec <__aeabi_fsub>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fb ff72 	bl	8000bec <__aeabi_fsub>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	461c      	mov	r4, r3
 8004d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d10:	f7fc f876 	bl	8000e00 <__aeabi_fmul>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4619      	mov	r1, r3
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7fb ff69 	bl	8000bf0 <__addsf3>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	461c      	mov	r4, r3
 8004d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d26:	f7fc f86b 	bl	8000e00 <__aeabi_fmul>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f7fb ff5e 	bl	8000bf0 <__addsf3>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461c      	mov	r4, r3
 8004d38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d3c:	f7fc f860 	bl	8000e00 <__aeabi_fmul>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4619      	mov	r1, r3
 8004d44:	4620      	mov	r0, r4
 8004d46:	f7fb ff53 	bl	8000bf0 <__addsf3>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004d4e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004d52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d54:	f7fc f854 	bl	8000e00 <__aeabi_fmul>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <MadgwickAHRSupdateIMU+0x50c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f7fc f84c 	bl	8000e00 <__aeabi_fmul>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461c      	mov	r4, r3
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004d70:	f7fc f846 	bl	8000e00 <__aeabi_fmul>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4619      	mov	r1, r3
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f7fb ff39 	bl	8000bf0 <__addsf3>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	461c      	mov	r4, r3
 8004d82:	6a39      	ldr	r1, [r7, #32]
 8004d84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d86:	f7fc f83b 	bl	8000e00 <__aeabi_fmul>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f7fb ff2e 	bl	8000bf0 <__addsf3>
 8004d94:	4603      	mov	r3, r0
 8004d96:	461c      	mov	r4, r3
 8004d98:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004d9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d9c:	f7fc f830 	bl	8000e00 <__aeabi_fmul>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4619      	mov	r1, r3
 8004da4:	4620      	mov	r0, r4
 8004da6:	f7fb ff21 	bl	8000bec <__aeabi_fsub>
 8004daa:	4603      	mov	r3, r0
 8004dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fb ff1c 	bl	8000bec <__aeabi_fsub>
 8004db4:	4603      	mov	r3, r0
 8004db6:	461c      	mov	r4, r3
 8004db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dbc:	f7fc f820 	bl	8000e00 <__aeabi_fmul>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f7fb ff13 	bl	8000bf0 <__addsf3>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	461c      	mov	r4, r3
 8004dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dd2:	f7fc f815 	bl	8000e00 <__aeabi_fmul>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f7fb ff08 	bl	8000bf0 <__addsf3>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461c      	mov	r4, r3
 8004de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004de6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004de8:	f7fc f80a 	bl	8000e00 <__aeabi_fmul>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4619      	mov	r1, r3
 8004df0:	4620      	mov	r0, r4
 8004df2:	f7fb fefd 	bl	8000bf0 <__addsf3>
 8004df6:	4603      	mov	r3, r0
 8004df8:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8004dfa:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e00:	f7fb fffe 	bl	8000e00 <__aeabi_fmul>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461a      	mov	r2, r3
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <MadgwickAHRSupdateIMU+0x510>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fb fff6 	bl	8000e00 <__aeabi_fmul>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461c      	mov	r4, r3
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004e1c:	f7fb fff0 	bl	8000e00 <__aeabi_fmul>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4619      	mov	r1, r3
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7fb fee1 	bl	8000bec <__aeabi_fsub>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461c      	mov	r4, r3
 8004e2e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e34:	f7fb ffe4 	bl	8000e00 <__aeabi_fmul>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <MadgwickAHRSupdateIMU+0x510>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f7fb ffdc 	bl	8000e00 <__aeabi_fmul>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f7fb fecf 	bl	8000bf0 <__addsf3>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461c      	mov	r4, r3
 8004e56:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004e58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004e5a:	f7fb ffd1 	bl	8000e00 <__aeabi_fmul>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4619      	mov	r1, r3
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7fb fec2 	bl	8000bec <__aeabi_fsub>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	613b      	str	r3, [r7, #16]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004e6c:	69f9      	ldr	r1, [r7, #28]
 8004e6e:	69f8      	ldr	r0, [r7, #28]
 8004e70:	e008      	b.n	8004e84 <MadgwickAHRSupdateIMU+0x514>
 8004e72:	bf00      	nop
 8004e74:	20000020 	.word	0x20000020
 8004e78:	20001e04 	.word	0x20001e04
 8004e7c:	20001e08 	.word	0x20001e08
 8004e80:	20001e0c 	.word	0x20001e0c
 8004e84:	f7fb ffbc 	bl	8000e00 <__aeabi_fmul>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461c      	mov	r4, r3
 8004e8c:	69b9      	ldr	r1, [r7, #24]
 8004e8e:	69b8      	ldr	r0, [r7, #24]
 8004e90:	f7fb ffb6 	bl	8000e00 <__aeabi_fmul>
 8004e94:	4603      	mov	r3, r0
 8004e96:	4619      	mov	r1, r3
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7fb fea9 	bl	8000bf0 <__addsf3>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	461c      	mov	r4, r3
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	6978      	ldr	r0, [r7, #20]
 8004ea6:	f7fb ffab 	bl	8000e00 <__aeabi_fmul>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4619      	mov	r1, r3
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f7fb fe9e 	bl	8000bf0 <__addsf3>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461c      	mov	r4, r3
 8004eb8:	6939      	ldr	r1, [r7, #16]
 8004eba:	6938      	ldr	r0, [r7, #16]
 8004ebc:	f7fb ffa0 	bl	8000e00 <__aeabi_fmul>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7fb fe93 	bl	8000bf0 <__addsf3>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f9b1 	bl	8005234 <invSqrt>
 8004ed2:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8004ed4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ed6:	69f8      	ldr	r0, [r7, #28]
 8004ed8:	f7fb ff92 	bl	8000e00 <__aeabi_fmul>
 8004edc:	4603      	mov	r3, r0
 8004ede:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8004ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ee2:	69b8      	ldr	r0, [r7, #24]
 8004ee4:	f7fb ff8c 	bl	8000e00 <__aeabi_fmul>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8004eec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eee:	6978      	ldr	r0, [r7, #20]
 8004ef0:	f7fb ff86 	bl	8000e00 <__aeabi_fmul>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8004ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004efa:	6938      	ldr	r0, [r7, #16]
 8004efc:	f7fb ff80 	bl	8000e00 <__aeabi_fmul>
 8004f00:	4603      	mov	r3, r0
 8004f02:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8004f04:	4b6c      	ldr	r3, [pc, #432]	; (80050b8 <MadgwickAHRSupdateIMU+0x748>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69f9      	ldr	r1, [r7, #28]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb ff78 	bl	8000e00 <__aeabi_fmul>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4619      	mov	r1, r3
 8004f14:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004f16:	f7fb fe69 	bl	8000bec <__aeabi_fsub>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8004f1e:	4b66      	ldr	r3, [pc, #408]	; (80050b8 <MadgwickAHRSupdateIMU+0x748>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb ff6b 	bl	8000e00 <__aeabi_fmul>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004f30:	f7fb fe5c 	bl	8000bec <__aeabi_fsub>
 8004f34:	4603      	mov	r3, r0
 8004f36:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8004f38:	4b5f      	ldr	r3, [pc, #380]	; (80050b8 <MadgwickAHRSupdateIMU+0x748>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6979      	ldr	r1, [r7, #20]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fb ff5e 	bl	8000e00 <__aeabi_fmul>
 8004f44:	4603      	mov	r3, r0
 8004f46:	4619      	mov	r1, r3
 8004f48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004f4a:	f7fb fe4f 	bl	8000bec <__aeabi_fsub>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8004f52:	4b59      	ldr	r3, [pc, #356]	; (80050b8 <MadgwickAHRSupdateIMU+0x748>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb ff51 	bl	8000e00 <__aeabi_fmul>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4619      	mov	r1, r3
 8004f62:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004f64:	f7fb fe42 	bl	8000bec <__aeabi_fsub>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8004f6c:	4953      	ldr	r1, [pc, #332]	; (80050bc <MadgwickAHRSupdateIMU+0x74c>)
 8004f6e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004f70:	f7fb ff46 	bl	8000e00 <__aeabi_fmul>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	4b51      	ldr	r3, [pc, #324]	; (80050c0 <MadgwickAHRSupdateIMU+0x750>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f7fb fe36 	bl	8000bf0 <__addsf3>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b4d      	ldr	r3, [pc, #308]	; (80050c0 <MadgwickAHRSupdateIMU+0x750>)
 8004f8a:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8004f8c:	494b      	ldr	r1, [pc, #300]	; (80050bc <MadgwickAHRSupdateIMU+0x74c>)
 8004f8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004f90:	f7fb ff36 	bl	8000e00 <__aeabi_fmul>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	4b4a      	ldr	r3, [pc, #296]	; (80050c4 <MadgwickAHRSupdateIMU+0x754>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f7fb fe26 	bl	8000bf0 <__addsf3>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4b46      	ldr	r3, [pc, #280]	; (80050c4 <MadgwickAHRSupdateIMU+0x754>)
 8004faa:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8004fac:	4943      	ldr	r1, [pc, #268]	; (80050bc <MadgwickAHRSupdateIMU+0x74c>)
 8004fae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004fb0:	f7fb ff26 	bl	8000e00 <__aeabi_fmul>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4b43      	ldr	r3, [pc, #268]	; (80050c8 <MadgwickAHRSupdateIMU+0x758>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f7fb fe16 	bl	8000bf0 <__addsf3>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4b3f      	ldr	r3, [pc, #252]	; (80050c8 <MadgwickAHRSupdateIMU+0x758>)
 8004fca:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8004fcc:	493b      	ldr	r1, [pc, #236]	; (80050bc <MadgwickAHRSupdateIMU+0x74c>)
 8004fce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004fd0:	f7fb ff16 	bl	8000e00 <__aeabi_fmul>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b3c      	ldr	r3, [pc, #240]	; (80050cc <MadgwickAHRSupdateIMU+0x75c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7fb fe06 	bl	8000bf0 <__addsf3>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b38      	ldr	r3, [pc, #224]	; (80050cc <MadgwickAHRSupdateIMU+0x75c>)
 8004fea:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004fec:	4b34      	ldr	r3, [pc, #208]	; (80050c0 <MadgwickAHRSupdateIMU+0x750>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <MadgwickAHRSupdateIMU+0x750>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7fb ff02 	bl	8000e00 <__aeabi_fmul>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	461c      	mov	r4, r3
 8005000:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <MadgwickAHRSupdateIMU+0x754>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <MadgwickAHRSupdateIMU+0x754>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7fb fef8 	bl	8000e00 <__aeabi_fmul>
 8005010:	4603      	mov	r3, r0
 8005012:	4619      	mov	r1, r3
 8005014:	4620      	mov	r0, r4
 8005016:	f7fb fdeb 	bl	8000bf0 <__addsf3>
 800501a:	4603      	mov	r3, r0
 800501c:	461c      	mov	r4, r3
 800501e:	4b2a      	ldr	r3, [pc, #168]	; (80050c8 <MadgwickAHRSupdateIMU+0x758>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b29      	ldr	r3, [pc, #164]	; (80050c8 <MadgwickAHRSupdateIMU+0x758>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f7fb fee9 	bl	8000e00 <__aeabi_fmul>
 800502e:	4603      	mov	r3, r0
 8005030:	4619      	mov	r1, r3
 8005032:	4620      	mov	r0, r4
 8005034:	f7fb fddc 	bl	8000bf0 <__addsf3>
 8005038:	4603      	mov	r3, r0
 800503a:	461c      	mov	r4, r3
 800503c:	4b23      	ldr	r3, [pc, #140]	; (80050cc <MadgwickAHRSupdateIMU+0x75c>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b22      	ldr	r3, [pc, #136]	; (80050cc <MadgwickAHRSupdateIMU+0x75c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7fb feda 	bl	8000e00 <__aeabi_fmul>
 800504c:	4603      	mov	r3, r0
 800504e:	4619      	mov	r1, r3
 8005050:	4620      	mov	r0, r4
 8005052:	f7fb fdcd 	bl	8000bf0 <__addsf3>
 8005056:	4603      	mov	r3, r0
 8005058:	4618      	mov	r0, r3
 800505a:	f000 f8eb 	bl	8005234 <invSqrt>
 800505e:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <MadgwickAHRSupdateIMU+0x750>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005066:	4618      	mov	r0, r3
 8005068:	f7fb feca 	bl	8000e00 <__aeabi_fmul>
 800506c:	4603      	mov	r3, r0
 800506e:	461a      	mov	r2, r3
 8005070:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <MadgwickAHRSupdateIMU+0x750>)
 8005072:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8005074:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <MadgwickAHRSupdateIMU+0x754>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb fec0 	bl	8000e00 <__aeabi_fmul>
 8005080:	4603      	mov	r3, r0
 8005082:	461a      	mov	r2, r3
 8005084:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <MadgwickAHRSupdateIMU+0x754>)
 8005086:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <MadgwickAHRSupdateIMU+0x758>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800508e:	4618      	mov	r0, r3
 8005090:	f7fb feb6 	bl	8000e00 <__aeabi_fmul>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <MadgwickAHRSupdateIMU+0x758>)
 800509a:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <MadgwickAHRSupdateIMU+0x75c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fb feac 	bl	8000e00 <__aeabi_fmul>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b07      	ldr	r3, [pc, #28]	; (80050cc <MadgwickAHRSupdateIMU+0x75c>)
 80050ae:	601a      	str	r2, [r3, #0]
}
 80050b0:	bf00      	nop
 80050b2:	376c      	adds	r7, #108	; 0x6c
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd90      	pop	{r4, r7, pc}
 80050b8:	2000001c 	.word	0x2000001c
 80050bc:	3ba3d70a 	.word	0x3ba3d70a
 80050c0:	20000020 	.word	0x20000020
 80050c4:	20001e04 	.word	0x20001e04
 80050c8:	20001e08 	.word	0x20001e08
 80050cc:	20001e0c 	.word	0x20001e0c

080050d0 <Madgwick_computeAngles>:

void Madgwick_computeAngles(void)
{
 80050d0:	b5b0      	push	{r4, r5, r7, lr}
 80050d2:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80050d4:	4b50      	ldr	r3, [pc, #320]	; (8005218 <Madgwick_computeAngles+0x148>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b50      	ldr	r3, [pc, #320]	; (800521c <Madgwick_computeAngles+0x14c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f7fb fe8e 	bl	8000e00 <__aeabi_fmul>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461c      	mov	r4, r3
 80050e8:	4b4d      	ldr	r3, [pc, #308]	; (8005220 <Madgwick_computeAngles+0x150>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b4d      	ldr	r3, [pc, #308]	; (8005224 <Madgwick_computeAngles+0x154>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7fb fe84 	bl	8000e00 <__aeabi_fmul>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4619      	mov	r1, r3
 80050fc:	4620      	mov	r0, r4
 80050fe:	f7fb fd77 	bl	8000bf0 <__addsf3>
 8005102:	4603      	mov	r3, r0
 8005104:	461c      	mov	r4, r3
 8005106:	4b45      	ldr	r3, [pc, #276]	; (800521c <Madgwick_computeAngles+0x14c>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b44      	ldr	r3, [pc, #272]	; (800521c <Madgwick_computeAngles+0x14c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fb fe75 	bl	8000e00 <__aeabi_fmul>
 8005116:	4603      	mov	r3, r0
 8005118:	4619      	mov	r1, r3
 800511a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800511e:	f7fb fd65 	bl	8000bec <__aeabi_fsub>
 8005122:	4603      	mov	r3, r0
 8005124:	461d      	mov	r5, r3
 8005126:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <Madgwick_computeAngles+0x150>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <Madgwick_computeAngles+0x150>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f7fb fe65 	bl	8000e00 <__aeabi_fmul>
 8005136:	4603      	mov	r3, r0
 8005138:	4619      	mov	r1, r3
 800513a:	4628      	mov	r0, r5
 800513c:	f7fb fd56 	bl	8000bec <__aeabi_fsub>
 8005140:	4603      	mov	r3, r0
 8005142:	4619      	mov	r1, r3
 8005144:	4620      	mov	r0, r4
 8005146:	f002 fdf9 	bl	8007d3c <atan2f>
 800514a:	4602      	mov	r2, r0
 800514c:	4b36      	ldr	r3, [pc, #216]	; (8005228 <Madgwick_computeAngles+0x158>)
 800514e:	601a      	str	r2, [r3, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8005150:	4b32      	ldr	r3, [pc, #200]	; (800521c <Madgwick_computeAngles+0x14c>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	4b33      	ldr	r3, [pc, #204]	; (8005224 <Madgwick_computeAngles+0x154>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f7fb fe50 	bl	8000e00 <__aeabi_fmul>
 8005160:	4603      	mov	r3, r0
 8005162:	461c      	mov	r4, r3
 8005164:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <Madgwick_computeAngles+0x148>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <Madgwick_computeAngles+0x150>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4619      	mov	r1, r3
 800516e:	4610      	mov	r0, r2
 8005170:	f7fb fe46 	bl	8000e00 <__aeabi_fmul>
 8005174:	4603      	mov	r3, r0
 8005176:	4619      	mov	r1, r3
 8005178:	4620      	mov	r0, r4
 800517a:	f7fb fd37 	bl	8000bec <__aeabi_fsub>
 800517e:	4603      	mov	r3, r0
 8005180:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb fe3b 	bl	8000e00 <__aeabi_fmul>
 800518a:	4603      	mov	r3, r0
 800518c:	4618      	mov	r0, r3
 800518e:	f002 fd87 	bl	8007ca0 <asinf>
 8005192:	4602      	mov	r2, r0
 8005194:	4b25      	ldr	r3, [pc, #148]	; (800522c <Madgwick_computeAngles+0x15c>)
 8005196:	601a      	str	r2, [r3, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 8005198:	4b20      	ldr	r3, [pc, #128]	; (800521c <Madgwick_computeAngles+0x14c>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b20      	ldr	r3, [pc, #128]	; (8005220 <Madgwick_computeAngles+0x150>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7fb fe2c 	bl	8000e00 <__aeabi_fmul>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461c      	mov	r4, r3
 80051ac:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <Madgwick_computeAngles+0x148>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <Madgwick_computeAngles+0x154>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7fb fe22 	bl	8000e00 <__aeabi_fmul>
 80051bc:	4603      	mov	r3, r0
 80051be:	4619      	mov	r1, r3
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7fb fd15 	bl	8000bf0 <__addsf3>
 80051c6:	4603      	mov	r3, r0
 80051c8:	461c      	mov	r4, r3
 80051ca:	4b15      	ldr	r3, [pc, #84]	; (8005220 <Madgwick_computeAngles+0x150>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <Madgwick_computeAngles+0x150>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fb fe13 	bl	8000e00 <__aeabi_fmul>
 80051da:	4603      	mov	r3, r0
 80051dc:	4619      	mov	r1, r3
 80051de:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80051e2:	f7fb fd03 	bl	8000bec <__aeabi_fsub>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461d      	mov	r5, r3
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <Madgwick_computeAngles+0x154>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <Madgwick_computeAngles+0x154>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7fb fe03 	bl	8000e00 <__aeabi_fmul>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4619      	mov	r1, r3
 80051fe:	4628      	mov	r0, r5
 8005200:	f7fb fcf4 	bl	8000bec <__aeabi_fsub>
 8005204:	4603      	mov	r3, r0
 8005206:	4619      	mov	r1, r3
 8005208:	4620      	mov	r0, r4
 800520a:	f002 fd97 	bl	8007d3c <atan2f>
 800520e:	4602      	mov	r2, r0
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <Madgwick_computeAngles+0x160>)
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	bdb0      	pop	{r4, r5, r7, pc}
 8005218:	20000020 	.word	0x20000020
 800521c:	20001e04 	.word	0x20001e04
 8005220:	20001e08 	.word	0x20001e08
 8005224:	20001e0c 	.word	0x20001e0c
 8005228:	20001e10 	.word	0x20001e10
 800522c:	20001e14 	.word	0x20001e14
 8005230:	20001e18 	.word	0x20001e18

08005234 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 800523c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7fb fddd 	bl	8000e00 <__aeabi_fmul>
 8005246:	4603      	mov	r3, r0
 8005248:	617b      	str	r3, [r7, #20]
	float y = x;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800524e:	f107 0310 	add.w	r3, r7, #16
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	105a      	asrs	r2, r3, #1
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <invSqrt+0x74>)
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8005260:	f107 030c 	add.w	r3, r7, #12
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6979      	ldr	r1, [r7, #20]
 800526c:	4618      	mov	r0, r3
 800526e:	f7fb fdc7 	bl	8000e00 <__aeabi_fmul>
 8005272:	4603      	mov	r3, r0
 8005274:	461a      	mov	r2, r3
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f7fb fdc0 	bl	8000e00 <__aeabi_fmul>
 8005280:	4603      	mov	r3, r0
 8005282:	4619      	mov	r1, r3
 8005284:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8005288:	f7fb fcb0 	bl	8000bec <__aeabi_fsub>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f7fb fdb3 	bl	8000e00 <__aeabi_fmul>
 800529a:	4603      	mov	r3, r0
 800529c:	613b      	str	r3, [r7, #16]
	return y;
 800529e:	693b      	ldr	r3, [r7, #16]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	5f3759df 	.word	0x5f3759df

080052ac <debug_led_init>:
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#include "debug.h"

void debug_led_init(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable GPIO clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80052b2:	2101      	movs	r1, #1
 80052b4:	2001      	movs	r0, #1
 80052b6:	f7fe fe91 	bl	8003fdc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80052ba:	2101      	movs	r1, #1
 80052bc:	2010      	movs	r0, #16
 80052be:	f7fe fe8d 	bl	8003fdc <RCC_APB2PeriphClockCmd>

	// Configure pin as output push-pull (LED)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 80052c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80052c8:	2310      	movs	r3, #16
 80052ca:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80052cc:	2303      	movs	r3, #3
 80052ce:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4803      	ldr	r0, [pc, #12]	; (80052e4 <debug_led_init+0x38>)
 80052d6:	f7fe fb71 	bl	80039bc <GPIO_Init>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40011000 	.word	0x40011000

080052e8 <mpu6050_init>:
 * 0x10: 1000 degrees/second, error: 26
 * 0x18: 2000 degrees/second, error: 13
 *
 **************************************************************************/
int8_t mpu6050_init(uint8_t gyroFullScaleRange, uint8_t accelFullScaleRange)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	460a      	mov	r2, r1
 80052f2:	71fb      	strb	r3, [r7, #7]
 80052f4:	4613      	mov	r3, r2
 80052f6:	71bb      	strb	r3, [r7, #6]
	int8_t returnCode=0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	73fb      	strb	r3, [r7, #15]

	/* turn off sleep mode */
	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x6B, 0);
 80052fc:	2200      	movs	r2, #0
 80052fe:	216b      	movs	r1, #107	; 0x6b
 8005300:	2068      	movs	r0, #104	; 0x68
 8005302:	f000 faf9 	bl	80058f8 <i2c_slave_mem_write>
 8005306:	4603      	mov	r3, r0
 8005308:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 800530a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d102      	bne.n	800531a <mpu6050_init+0x32>
		return -1;
 8005314:	f04f 33ff 	mov.w	r3, #4294967295
 8005318:	e020      	b.n	800535c <mpu6050_init+0x74>

	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1B, gyroFullScaleRange);
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	461a      	mov	r2, r3
 800531e:	211b      	movs	r1, #27
 8005320:	2068      	movs	r0, #104	; 0x68
 8005322:	f000 fae9 	bl	80058f8 <i2c_slave_mem_write>
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 800532a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d102      	bne.n	800533a <mpu6050_init+0x52>
		return -1;
 8005334:	f04f 33ff 	mov.w	r3, #4294967295
 8005338:	e010      	b.n	800535c <mpu6050_init+0x74>

	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1C, accelFullScaleRange);
 800533a:	79bb      	ldrb	r3, [r7, #6]
 800533c:	461a      	mov	r2, r3
 800533e:	211c      	movs	r1, #28
 8005340:	2068      	movs	r0, #104	; 0x68
 8005342:	f000 fad9 	bl	80058f8 <i2c_slave_mem_write>
 8005346:	4603      	mov	r3, r0
 8005348:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 800534a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d102      	bne.n	800535a <mpu6050_init+0x72>
		return -1;
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	e000      	b.n	800535c <mpu6050_init+0x74>

	return 0;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <gyro_measurement_read>:
 *
 * @param gyroBuffer: buffer for the read data to be stored.
 * @retval 0 on success, -1 on timeout.
 **************************************************************************/
int8_t gyro_measurement_read(int16_t* gyroBuffer)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	uint8_t gyroReadValues[6];
	int8_t errorValue;

	errorValue = i2c_slave_mem_read(MPU6050_ID, 0x43, gyroReadValues, 6);
 800536c:	f107 0208 	add.w	r2, r7, #8
 8005370:	2306      	movs	r3, #6
 8005372:	2143      	movs	r1, #67	; 0x43
 8005374:	2068      	movs	r0, #104	; 0x68
 8005376:	f000 f9fb 	bl	8005770 <i2c_slave_mem_read>
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]

	if(errorValue == 0)
 800537e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d11e      	bne.n	80053c4 <gyro_measurement_read+0x60>
	{
		gyroBuffer[0] = (gyroReadValues[0]<<8)|gyroReadValues[1];//x_out
 8005386:	7a3b      	ldrb	r3, [r7, #8]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	b21a      	sxth	r2, r3
 800538c:	7a7b      	ldrb	r3, [r7, #9]
 800538e:	b21b      	sxth	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	b21a      	sxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	801a      	strh	r2, [r3, #0]
		gyroBuffer[1] = (gyroReadValues[2]<<8)|gyroReadValues[3];//y_out
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3302      	adds	r3, #2
 800539c:	7aba      	ldrb	r2, [r7, #10]
 800539e:	0212      	lsls	r2, r2, #8
 80053a0:	b211      	sxth	r1, r2
 80053a2:	7afa      	ldrb	r2, [r7, #11]
 80053a4:	b212      	sxth	r2, r2
 80053a6:	430a      	orrs	r2, r1
 80053a8:	b212      	sxth	r2, r2
 80053aa:	801a      	strh	r2, [r3, #0]
		gyroBuffer[2] = (gyroReadValues[4]<<8)|gyroReadValues[5];//z_out
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	7b3a      	ldrb	r2, [r7, #12]
 80053b2:	0212      	lsls	r2, r2, #8
 80053b4:	b211      	sxth	r1, r2
 80053b6:	7b7a      	ldrb	r2, [r7, #13]
 80053b8:	b212      	sxth	r2, r2
 80053ba:	430a      	orrs	r2, r1
 80053bc:	b212      	sxth	r2, r2
 80053be:	801a      	strh	r2, [r3, #0]
		return 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e001      	b.n	80053c8 <gyro_measurement_read+0x64>
	}
	else
		return -1;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <accel_measurement_read>:
 *
 * @param accelBuffer: buffer for the read data to be stored.
 * @retval 0 on success, -1 on timeout.
 **************************************************************************/
int8_t accel_measurement_read(int16_t* accelBuffer)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	uint8_t accelReadValues[6];
	int8_t errorValue;

	errorValue = i2c_slave_mem_read(MPU6050_ID, 0x3B, accelReadValues, 6);
 80053d8:	f107 0208 	add.w	r2, r7, #8
 80053dc:	2306      	movs	r3, #6
 80053de:	213b      	movs	r1, #59	; 0x3b
 80053e0:	2068      	movs	r0, #104	; 0x68
 80053e2:	f000 f9c5 	bl	8005770 <i2c_slave_mem_read>
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]

	if(errorValue == 0)
 80053ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11e      	bne.n	8005430 <accel_measurement_read+0x60>
	{
		accelBuffer[0] = (accelReadValues[0]<<8)|accelReadValues[1];//x_out
 80053f2:	7a3b      	ldrb	r3, [r7, #8]
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	b21a      	sxth	r2, r3
 80053f8:	7a7b      	ldrb	r3, [r7, #9]
 80053fa:	b21b      	sxth	r3, r3
 80053fc:	4313      	orrs	r3, r2
 80053fe:	b21a      	sxth	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	801a      	strh	r2, [r3, #0]
		accelBuffer[1] = (accelReadValues[2]<<8)|accelReadValues[3];//y_out
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3302      	adds	r3, #2
 8005408:	7aba      	ldrb	r2, [r7, #10]
 800540a:	0212      	lsls	r2, r2, #8
 800540c:	b211      	sxth	r1, r2
 800540e:	7afa      	ldrb	r2, [r7, #11]
 8005410:	b212      	sxth	r2, r2
 8005412:	430a      	orrs	r2, r1
 8005414:	b212      	sxth	r2, r2
 8005416:	801a      	strh	r2, [r3, #0]
		accelBuffer[2] = (accelReadValues[4]<<8)|accelReadValues[5];//z_out
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	7b3a      	ldrb	r2, [r7, #12]
 800541e:	0212      	lsls	r2, r2, #8
 8005420:	b211      	sxth	r1, r2
 8005422:	7b7a      	ldrb	r2, [r7, #13]
 8005424:	b212      	sxth	r2, r2
 8005426:	430a      	orrs	r2, r1
 8005428:	b212      	sxth	r2, r2
 800542a:	801a      	strh	r2, [r3, #0]
		return 0;
 800542c:	2300      	movs	r3, #0
 800542e:	e001      	b.n	8005434 <accel_measurement_read+0x64>
	}
	else
		return -1;
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <gyro_do_calibration>:
 * @param gyroCalibData: gyro axis calibration values return buffer.
 * @retval 0 if success, -1 on failure.
 *
 **************************************************************************/
int8_t gyro_do_calibration(double* gyroCalibData)
{
 800543c:	b5b0      	push	{r4, r5, r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	uint32_t sampleCount=0;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
	int16_t gyroRawData[3];

	gyroCalibData[X_AXIS_INDEX]=0;
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	f04f 0400 	mov.w	r4, #0
 8005452:	e882 0018 	stmia.w	r2, {r3, r4}
	gyroCalibData[Y_AXIS_INDEX]=0;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f103 0208 	add.w	r2, r3, #8
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	f04f 0400 	mov.w	r4, #0
 8005464:	e882 0018 	stmia.w	r2, {r3, r4}
	gyroCalibData[Z_AXIS_INDEX]=0;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f103 0210 	add.w	r2, r3, #16
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	e882 0018 	stmia.w	r2, {r3, r4}

	while(sampleCount<200)
 800547a:	e046      	b.n	800550a <gyro_do_calibration+0xce>
	{
		if(gyro_measurement_read(gyroRawData)<0)
 800547c:	f107 030c 	add.w	r3, r7, #12
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff ff6f 	bl	8005364 <gyro_measurement_read>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	da02      	bge.n	8005492 <gyro_do_calibration+0x56>
			return -1;
 800548c:	f04f 33ff 	mov.w	r3, #4294967295
 8005490:	e06c      	b.n	800556c <gyro_do_calibration+0x130>

		gyroCalibData[X_AXIS_INDEX] = (gyroRawData[X_AXIS_INDEX]+gyroCalibData[X_AXIS_INDEX]);
 8005492:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fb f80c 	bl	80004b4 <__aeabi_i2d>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	cb18      	ldmia	r3, {r3, r4}
 80054a0:	461a      	mov	r2, r3
 80054a2:	4623      	mov	r3, r4
 80054a4:	f7fa feba 	bl	800021c <__adddf3>
 80054a8:	4603      	mov	r3, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	e882 0018 	stmia.w	r2, {r3, r4}
		gyroCalibData[Y_AXIS_INDEX] = (gyroRawData[Y_AXIS_INDEX]+gyroCalibData[Y_AXIS_INDEX]);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f103 0508 	add.w	r5, r3, #8
 80054b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fa fff9 	bl	80004b4 <__aeabi_i2d>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3308      	adds	r3, #8
 80054c6:	cb18      	ldmia	r3, {r3, r4}
 80054c8:	461a      	mov	r2, r3
 80054ca:	4623      	mov	r3, r4
 80054cc:	f7fa fea6 	bl	800021c <__adddf3>
 80054d0:	4603      	mov	r3, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	e885 0018 	stmia.w	r5, {r3, r4}
		gyroCalibData[Z_AXIS_INDEX] = (gyroRawData[Z_AXIS_INDEX]+gyroCalibData[Z_AXIS_INDEX]);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f103 0510 	add.w	r5, r3, #16
 80054de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fa ffe6 	bl	80004b4 <__aeabi_i2d>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3310      	adds	r3, #16
 80054ec:	cb18      	ldmia	r3, {r3, r4}
 80054ee:	461a      	mov	r2, r3
 80054f0:	4623      	mov	r3, r4
 80054f2:	f7fa fe93 	bl	800021c <__adddf3>
 80054f6:	4603      	mov	r3, r0
 80054f8:	460c      	mov	r4, r1
 80054fa:	e885 0018 	stmia.w	r5, {r3, r4}
		sampleCount++;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
		delay_ms(15);
 8005504:	200f      	movs	r0, #15
 8005506:	f002 fb03 	bl	8007b10 <delay_ms>
	while(sampleCount<200)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2bc7      	cmp	r3, #199	; 0xc7
 800550e:	d9b5      	bls.n	800547c <gyro_do_calibration+0x40>
	}

	gyroCalibData[X_AXIS_INDEX] = gyroCalibData[X_AXIS_INDEX]/200;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	4b16      	ldr	r3, [pc, #88]	; (8005574 <gyro_do_calibration+0x138>)
 800551c:	f7fb f95a 	bl	80007d4 <__aeabi_ddiv>
 8005520:	4603      	mov	r3, r0
 8005522:	460c      	mov	r4, r1
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	e882 0018 	stmia.w	r2, {r3, r4}
	gyroCalibData[Y_AXIS_INDEX] = gyroCalibData[Y_AXIS_INDEX]/200;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f103 0508 	add.w	r5, r3, #8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3308      	adds	r3, #8
 8005534:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <gyro_do_calibration+0x138>)
 800553e:	f7fb f949 	bl	80007d4 <__aeabi_ddiv>
 8005542:	4603      	mov	r3, r0
 8005544:	460c      	mov	r4, r1
 8005546:	e885 0018 	stmia.w	r5, {r3, r4}
	gyroCalibData[Z_AXIS_INDEX] = gyroCalibData[Z_AXIS_INDEX]/200;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f103 0510 	add.w	r5, r3, #16
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3310      	adds	r3, #16
 8005554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <gyro_do_calibration+0x138>)
 800555e:	f7fb f939 	bl	80007d4 <__aeabi_ddiv>
 8005562:	4603      	mov	r3, r0
 8005564:	460c      	mov	r4, r1
 8005566:	e885 0018 	stmia.w	r5, {r3, r4}

	return 0;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bdb0      	pop	{r4, r5, r7, pc}
 8005574:	40690000 	.word	0x40690000

08005578 <accel_do_calibration>:
 * buffer.
 * @retval 0 if success, -1 on failure.
 *
 **************************************************************************/
int8_t accel_do_calibration(double* accelCalibData)
{
 8005578:	b5b0      	push	{r4, r5, r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	uint32_t sampleCount=0;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
	int16_t accelRawData[3];

	accelCalibData[X_AXIS_INDEX]=0;
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	f04f 0400 	mov.w	r4, #0
 800558e:	e882 0018 	stmia.w	r2, {r3, r4}
	accelCalibData[Y_AXIS_INDEX]=0;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f103 0208 	add.w	r2, r3, #8
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	f04f 0400 	mov.w	r4, #0
 80055a0:	e882 0018 	stmia.w	r2, {r3, r4}
	accelCalibData[Z_AXIS_INDEX]=0;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f103 0210 	add.w	r2, r3, #16
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	f04f 0400 	mov.w	r4, #0
 80055b2:	e882 0018 	stmia.w	r2, {r3, r4}

	while(sampleCount<200)
 80055b6:	e046      	b.n	8005646 <accel_do_calibration+0xce>
	{
		if(accel_measurement_read(accelRawData)<0)
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff ff07 	bl	80053d0 <accel_measurement_read>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	da02      	bge.n	80055ce <accel_do_calibration+0x56>
			return -1;
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295
 80055cc:	e089      	b.n	80056e2 <accel_do_calibration+0x16a>

		accelCalibData[X_AXIS_INDEX] = (accelRawData[X_AXIS_INDEX]+accelCalibData[X_AXIS_INDEX]);
 80055ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fa ff6e 	bl	80004b4 <__aeabi_i2d>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	cb18      	ldmia	r3, {r3, r4}
 80055dc:	461a      	mov	r2, r3
 80055de:	4623      	mov	r3, r4
 80055e0:	f7fa fe1c 	bl	800021c <__adddf3>
 80055e4:	4603      	mov	r3, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	e882 0018 	stmia.w	r2, {r3, r4}
		accelCalibData[Y_AXIS_INDEX] = (accelRawData[Y_AXIS_INDEX]+accelCalibData[Y_AXIS_INDEX]);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f103 0508 	add.w	r5, r3, #8
 80055f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fa ff5b 	bl	80004b4 <__aeabi_i2d>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3308      	adds	r3, #8
 8005602:	cb18      	ldmia	r3, {r3, r4}
 8005604:	461a      	mov	r2, r3
 8005606:	4623      	mov	r3, r4
 8005608:	f7fa fe08 	bl	800021c <__adddf3>
 800560c:	4603      	mov	r3, r0
 800560e:	460c      	mov	r4, r1
 8005610:	e885 0018 	stmia.w	r5, {r3, r4}
		accelCalibData[Z_AXIS_INDEX] = (accelRawData[Z_AXIS_INDEX]+accelCalibData[Z_AXIS_INDEX]);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f103 0510 	add.w	r5, r3, #16
 800561a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fa ff48 	bl	80004b4 <__aeabi_i2d>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3310      	adds	r3, #16
 8005628:	cb18      	ldmia	r3, {r3, r4}
 800562a:	461a      	mov	r2, r3
 800562c:	4623      	mov	r3, r4
 800562e:	f7fa fdf5 	bl	800021c <__adddf3>
 8005632:	4603      	mov	r3, r0
 8005634:	460c      	mov	r4, r1
 8005636:	e885 0018 	stmia.w	r5, {r3, r4}
		sampleCount++;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	3301      	adds	r3, #1
 800563e:	617b      	str	r3, [r7, #20]
		delay_ms(15);
 8005640:	200f      	movs	r0, #15
 8005642:	f002 fa65 	bl	8007b10 <delay_ms>
	while(sampleCount<200)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2bc7      	cmp	r3, #199	; 0xc7
 800564a:	d9b5      	bls.n	80055b8 <accel_do_calibration+0x40>
	}

	accelCalibData[X_AXIS_INDEX] = 0-(accelCalibData[X_AXIS_INDEX]/200);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	4b25      	ldr	r3, [pc, #148]	; (80056ec <accel_do_calibration+0x174>)
 8005658:	f7fb f8bc 	bl	80007d4 <__aeabi_ddiv>
 800565c:	4603      	mov	r3, r0
 800565e:	460c      	mov	r4, r1
 8005660:	461a      	mov	r2, r3
 8005662:	4623      	mov	r3, r4
 8005664:	f04f 0000 	mov.w	r0, #0
 8005668:	f04f 0100 	mov.w	r1, #0
 800566c:	f7fa fdd4 	bl	8000218 <__aeabi_dsub>
 8005670:	4603      	mov	r3, r0
 8005672:	460c      	mov	r4, r1
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	e882 0018 	stmia.w	r2, {r3, r4}
	accelCalibData[Y_AXIS_INDEX] = 0-(accelCalibData[Y_AXIS_INDEX]/200);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f103 0508 	add.w	r5, r3, #8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3308      	adds	r3, #8
 8005684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	4b17      	ldr	r3, [pc, #92]	; (80056ec <accel_do_calibration+0x174>)
 800568e:	f7fb f8a1 	bl	80007d4 <__aeabi_ddiv>
 8005692:	4603      	mov	r3, r0
 8005694:	460c      	mov	r4, r1
 8005696:	461a      	mov	r2, r3
 8005698:	4623      	mov	r3, r4
 800569a:	f04f 0000 	mov.w	r0, #0
 800569e:	f04f 0100 	mov.w	r1, #0
 80056a2:	f7fa fdb9 	bl	8000218 <__aeabi_dsub>
 80056a6:	4603      	mov	r3, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	e885 0018 	stmia.w	r5, {r3, r4}
	accelCalibData[Z_AXIS_INDEX] = 8192-(accelCalibData[Z_AXIS_INDEX]/200);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f103 0510 	add.w	r5, r3, #16
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3310      	adds	r3, #16
 80056b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <accel_do_calibration+0x174>)
 80056c2:	f7fb f887 	bl	80007d4 <__aeabi_ddiv>
 80056c6:	4603      	mov	r3, r0
 80056c8:	460c      	mov	r4, r1
 80056ca:	461a      	mov	r2, r3
 80056cc:	4623      	mov	r3, r4
 80056ce:	f04f 0000 	mov.w	r0, #0
 80056d2:	4907      	ldr	r1, [pc, #28]	; (80056f0 <accel_do_calibration+0x178>)
 80056d4:	f7fa fda0 	bl	8000218 <__aeabi_dsub>
 80056d8:	4603      	mov	r3, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	e885 0018 	stmia.w	r5, {r3, r4}

	return 0;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bdb0      	pop	{r4, r5, r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40690000 	.word	0x40690000
 80056f0:	40c00000 	.word	0x40c00000

080056f4 <I2C_LowLevel_Init>:
 * @param ClockSpeed Bus communication frequency in Hz
 * @param OwnAddress MCU I2C address
 * @return none.
 **************************************************************************/
void I2C_LowLevel_Init(uint32_t ClockSpeed, uint8_t OwnAddress)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
	I2C_InitTypeDef  I2C_InitStructure;
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8005700:	2101      	movs	r1, #1
 8005702:	2008      	movs	r0, #8
 8005704:	f7fe fc6a 	bl	8003fdc <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8005708:	2101      	movs	r1, #1
 800570a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800570e:	f7fe fc83 	bl	8004018 <RCC_APB1PeriphClockCmd>


	/* Configure I2C_EE pins: SCL and SDA */
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
 8005712:	23c0      	movs	r3, #192	; 0xc0
 8005714:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005716:	2303      	movs	r3, #3
 8005718:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800571a:	231c      	movs	r3, #28
 800571c:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800571e:	f107 030c 	add.w	r3, r7, #12
 8005722:	4619      	mov	r1, r3
 8005724:	4810      	ldr	r0, [pc, #64]	; (8005768 <I2C_LowLevel_Init+0x74>)
 8005726:	f7fe f949 	bl	80039bc <GPIO_Init>

	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800572a:	2300      	movs	r3, #0
 800572c:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800572e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8005732:	82fb      	strh	r3, [r7, #22]
	I2C_InitStructure.I2C_OwnAddress1 = OwnAddress;
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	b29b      	uxth	r3, r3
 8005738:	833b      	strh	r3, [r7, #24]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800573a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800573e:	837b      	strh	r3, [r7, #26]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8005740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005744:	83bb      	strh	r3, [r7, #28]
	I2C_InitStructure.I2C_ClockSpeed = ClockSpeed;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	613b      	str	r3, [r7, #16]

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 800574a:	2101      	movs	r1, #1
 800574c:	4807      	ldr	r0, [pc, #28]	; (800576c <I2C_LowLevel_Init+0x78>)
 800574e:	f7fe fab3 	bl	8003cb8 <I2C_Cmd>
	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8005752:	f107 0310 	add.w	r3, r7, #16
 8005756:	4619      	mov	r1, r3
 8005758:	4804      	ldr	r0, [pc, #16]	; (800576c <I2C_LowLevel_Init+0x78>)
 800575a:	f7fe f9eb 	bl	8003b34 <I2C_Init>
}
 800575e:	bf00      	nop
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40010c00 	.word	0x40010c00
 800576c:	40005400 	.word	0x40005400

08005770 <i2c_slave_mem_read>:
 * @param writeBuffer pointer to the buffer to hold the read data.
 * @param bytesNum number of bytes to read from slave.
 * @return 0 on success, -1 on timeout.
 **************************************************************************/
int8_t i2c_slave_mem_read(uint8_t slaveAddr, uint8_t registerAddr, uint8_t* writeBuffer, uint8_t bytesNum)
{
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	603a      	str	r2, [r7, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	4603      	mov	r3, r0
 800577c:	71fb      	strb	r3, [r7, #7]
 800577e:	460b      	mov	r3, r1
 8005780:	71bb      	strb	r3, [r7, #6]
 8005782:	4613      	mov	r3, r2
 8005784:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	i = bytesNum;
 8005786:	797b      	ldrb	r3, [r7, #5]
 8005788:	73fb      	strb	r3, [r7, #15]
	timeout_alarm_set(5*bytesNum);
 800578a:	797a      	ldrb	r2, [r7, #5]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f002 f9d2 	bl	8007b3c <timeout_alarm_set>

	I2C_AcknowledgeConfig(I2C1,ENABLE);
 8005798:	2101      	movs	r1, #1
 800579a:	4851      	ldr	r0, [pc, #324]	; (80058e0 <i2c_slave_mem_read+0x170>)
 800579c:	f7fe fae9 	bl	8003d72 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2C1,ENABLE);
 80057a0:	2101      	movs	r1, #1
 80057a2:	484f      	ldr	r0, [pc, #316]	; (80058e0 <i2c_slave_mem_read+0x170>)
 80057a4:	f7fe faa7 	bl	8003cf6 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80057a8:	e007      	b.n	80057ba <i2c_slave_mem_read+0x4a>
	{
		if(timeout_alarm_status_check() == 1)
 80057aa:	f002 f9e5 	bl	8007b78 <timeout_alarm_status_check>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d102      	bne.n	80057ba <i2c_slave_mem_read+0x4a>
			return -1;
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295
 80057b8:	e08e      	b.n	80058d8 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80057ba:	494a      	ldr	r1, [pc, #296]	; (80058e4 <i2c_slave_mem_read+0x174>)
 80057bc:	4848      	ldr	r0, [pc, #288]	; (80058e0 <i2c_slave_mem_read+0x170>)
 80057be:	f7fe fb30 	bl	8003e22 <I2C_CheckEvent>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <i2c_slave_mem_read+0x3a>
	}

	I2C_Send7bitAddress(I2C1, (slaveAddr<<1), I2C_Direction_Transmitter);
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2200      	movs	r2, #0
 80057d0:	4619      	mov	r1, r3
 80057d2:	4843      	ldr	r0, [pc, #268]	; (80058e0 <i2c_slave_mem_read+0x170>)
 80057d4:	f7fe fb08 	bl	8003de8 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80057d8:	e007      	b.n	80057ea <i2c_slave_mem_read+0x7a>
	{
		if(timeout_alarm_status_check() == 1)
 80057da:	f002 f9cd 	bl	8007b78 <timeout_alarm_status_check>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d102      	bne.n	80057ea <i2c_slave_mem_read+0x7a>
			return -1;
 80057e4:	f04f 33ff 	mov.w	r3, #4294967295
 80057e8:	e076      	b.n	80058d8 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80057ea:	493f      	ldr	r1, [pc, #252]	; (80058e8 <i2c_slave_mem_read+0x178>)
 80057ec:	483c      	ldr	r0, [pc, #240]	; (80058e0 <i2c_slave_mem_read+0x170>)
 80057ee:	f7fe fb18 	bl	8003e22 <I2C_CheckEvent>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0f0      	beq.n	80057da <i2c_slave_mem_read+0x6a>
	}

	I2C_SendData(I2C1, registerAddr);
 80057f8:	79bb      	ldrb	r3, [r7, #6]
 80057fa:	4619      	mov	r1, r3
 80057fc:	4838      	ldr	r0, [pc, #224]	; (80058e0 <i2c_slave_mem_read+0x170>)
 80057fe:	f7fe fad7 	bl	8003db0 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8005802:	e007      	b.n	8005814 <i2c_slave_mem_read+0xa4>
	{
		if(timeout_alarm_status_check() == 1)
 8005804:	f002 f9b8 	bl	8007b78 <timeout_alarm_status_check>
 8005808:	4603      	mov	r3, r0
 800580a:	2b01      	cmp	r3, #1
 800580c:	d102      	bne.n	8005814 <i2c_slave_mem_read+0xa4>
			return -1;
 800580e:	f04f 33ff 	mov.w	r3, #4294967295
 8005812:	e061      	b.n	80058d8 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8005814:	4935      	ldr	r1, [pc, #212]	; (80058ec <i2c_slave_mem_read+0x17c>)
 8005816:	4832      	ldr	r0, [pc, #200]	; (80058e0 <i2c_slave_mem_read+0x170>)
 8005818:	f7fe fb03 	bl	8003e22 <I2C_CheckEvent>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <i2c_slave_mem_read+0x94>
	}

	I2C_GenerateSTART(I2C1,ENABLE);
 8005822:	2101      	movs	r1, #1
 8005824:	482e      	ldr	r0, [pc, #184]	; (80058e0 <i2c_slave_mem_read+0x170>)
 8005826:	f7fe fa66 	bl	8003cf6 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800582a:	e007      	b.n	800583c <i2c_slave_mem_read+0xcc>
	{
		if(timeout_alarm_status_check() == 1)
 800582c:	f002 f9a4 	bl	8007b78 <timeout_alarm_status_check>
 8005830:	4603      	mov	r3, r0
 8005832:	2b01      	cmp	r3, #1
 8005834:	d102      	bne.n	800583c <i2c_slave_mem_read+0xcc>
			return -1;
 8005836:	f04f 33ff 	mov.w	r3, #4294967295
 800583a:	e04d      	b.n	80058d8 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800583c:	4929      	ldr	r1, [pc, #164]	; (80058e4 <i2c_slave_mem_read+0x174>)
 800583e:	4828      	ldr	r0, [pc, #160]	; (80058e0 <i2c_slave_mem_read+0x170>)
 8005840:	f7fe faef 	bl	8003e22 <I2C_CheckEvent>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <i2c_slave_mem_read+0xbc>
	}

	I2C_Send7bitAddress(I2C1, slaveAddr<<1, I2C_Direction_Receiver);
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2201      	movs	r2, #1
 8005852:	4619      	mov	r1, r3
 8005854:	4822      	ldr	r0, [pc, #136]	; (80058e0 <i2c_slave_mem_read+0x170>)
 8005856:	f7fe fac7 	bl	8003de8 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 800585a:	e007      	b.n	800586c <i2c_slave_mem_read+0xfc>
	{
		if(timeout_alarm_status_check() == 1)
 800585c:	f002 f98c 	bl	8007b78 <timeout_alarm_status_check>
 8005860:	4603      	mov	r3, r0
 8005862:	2b01      	cmp	r3, #1
 8005864:	d102      	bne.n	800586c <i2c_slave_mem_read+0xfc>
			return -1;
 8005866:	f04f 33ff 	mov.w	r3, #4294967295
 800586a:	e035      	b.n	80058d8 <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 800586c:	4920      	ldr	r1, [pc, #128]	; (80058f0 <i2c_slave_mem_read+0x180>)
 800586e:	481c      	ldr	r0, [pc, #112]	; (80058e0 <i2c_slave_mem_read+0x170>)
 8005870:	f7fe fad7 	bl	8003e22 <I2C_CheckEvent>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f0      	beq.n	800585c <i2c_slave_mem_read+0xec>
	}

	while(i>0)
 800587a:	e023      	b.n	80058c4 <i2c_slave_mem_read+0x154>
	{
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
		{
			if(timeout_alarm_status_check() == 1)
 800587c:	f002 f97c 	bl	8007b78 <timeout_alarm_status_check>
 8005880:	4603      	mov	r3, r0
 8005882:	2b01      	cmp	r3, #1
 8005884:	d102      	bne.n	800588c <i2c_slave_mem_read+0x11c>
				return -1;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	e025      	b.n	80058d8 <i2c_slave_mem_read+0x168>
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
 800588c:	4919      	ldr	r1, [pc, #100]	; (80058f4 <i2c_slave_mem_read+0x184>)
 800588e:	4814      	ldr	r0, [pc, #80]	; (80058e0 <i2c_slave_mem_read+0x170>)
 8005890:	f7fe fac7 	bl	8003e22 <I2C_CheckEvent>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <i2c_slave_mem_read+0x10c>
		}
		if(i==1)
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d103      	bne.n	80058a8 <i2c_slave_mem_read+0x138>
			I2C_AcknowledgeConfig(I2C1,DISABLE);
 80058a0:	2100      	movs	r1, #0
 80058a2:	480f      	ldr	r0, [pc, #60]	; (80058e0 <i2c_slave_mem_read+0x170>)
 80058a4:	f7fe fa65 	bl	8003d72 <I2C_AcknowledgeConfig>
		writeBuffer[bytesNum-i] = I2C_ReceiveData(I2C1);
 80058a8:	797a      	ldrb	r2, [r7, #5]
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	189c      	adds	r4, r3, r2
 80058b4:	480a      	ldr	r0, [pc, #40]	; (80058e0 <i2c_slave_mem_read+0x170>)
 80058b6:	f7fe fa8a 	bl	8003dce <I2C_ReceiveData>
 80058ba:	4603      	mov	r3, r0
 80058bc:	7023      	strb	r3, [r4, #0]
		i--;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
	while(i>0)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e0      	bne.n	800588c <i2c_slave_mem_read+0x11c>
	}
	I2C_GenerateSTOP(I2C1,ENABLE);
 80058ca:	2101      	movs	r1, #1
 80058cc:	4804      	ldr	r0, [pc, #16]	; (80058e0 <i2c_slave_mem_read+0x170>)
 80058ce:	f7fe fa31 	bl	8003d34 <I2C_GenerateSTOP>
	timeout_alarm_off();
 80058d2:	f002 f95d 	bl	8007b90 <timeout_alarm_off>
	return 0;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd90      	pop	{r4, r7, pc}
 80058e0:	40005400 	.word	0x40005400
 80058e4:	00030001 	.word	0x00030001
 80058e8:	00070082 	.word	0x00070082
 80058ec:	00070084 	.word	0x00070084
 80058f0:	00030002 	.word	0x00030002
 80058f4:	00030040 	.word	0x00030040

080058f8 <i2c_slave_mem_write>:
 * @param registerAddr starting memory location of slave to start writing to.
 * @param writedata data to be written to the slave register.
 * @return 0 on success, -1 on timeout.
 **************************************************************************/
int8_t i2c_slave_mem_write(uint8_t slaveAddr, uint8_t registerAddr, uint8_t writeData)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	71fb      	strb	r3, [r7, #7]
 8005902:	460b      	mov	r3, r1
 8005904:	71bb      	strb	r3, [r7, #6]
 8005906:	4613      	mov	r3, r2
 8005908:	717b      	strb	r3, [r7, #5]
	timeout_alarm_set(20);
 800590a:	2014      	movs	r0, #20
 800590c:	f002 f916 	bl	8007b3c <timeout_alarm_set>

	I2C_GenerateSTART(I2C1,ENABLE);
 8005910:	2101      	movs	r1, #1
 8005912:	482f      	ldr	r0, [pc, #188]	; (80059d0 <i2c_slave_mem_write+0xd8>)
 8005914:	f7fe f9ef 	bl	8003cf6 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 8005918:	e007      	b.n	800592a <i2c_slave_mem_write+0x32>
	{
			if(timeout_alarm_status_check() == 1)
 800591a:	f002 f92d 	bl	8007b78 <timeout_alarm_status_check>
 800591e:	4603      	mov	r3, r0
 8005920:	2b01      	cmp	r3, #1
 8005922:	d102      	bne.n	800592a <i2c_slave_mem_write+0x32>
				return -1;
 8005924:	f04f 33ff 	mov.w	r3, #4294967295
 8005928:	e04d      	b.n	80059c6 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800592a:	492a      	ldr	r1, [pc, #168]	; (80059d4 <i2c_slave_mem_write+0xdc>)
 800592c:	4828      	ldr	r0, [pc, #160]	; (80059d0 <i2c_slave_mem_write+0xd8>)
 800592e:	f7fe fa78 	bl	8003e22 <I2C_CheckEvent>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <i2c_slave_mem_write+0x22>
	}

	I2C_Send7bitAddress(I2C1, (slaveAddr<<1), I2C_Direction_Transmitter);
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2200      	movs	r2, #0
 8005940:	4619      	mov	r1, r3
 8005942:	4823      	ldr	r0, [pc, #140]	; (80059d0 <i2c_slave_mem_write+0xd8>)
 8005944:	f7fe fa50 	bl	8003de8 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8005948:	e007      	b.n	800595a <i2c_slave_mem_write+0x62>
	{
			if(timeout_alarm_status_check() == 1)
 800594a:	f002 f915 	bl	8007b78 <timeout_alarm_status_check>
 800594e:	4603      	mov	r3, r0
 8005950:	2b01      	cmp	r3, #1
 8005952:	d102      	bne.n	800595a <i2c_slave_mem_write+0x62>
				return -1;
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
 8005958:	e035      	b.n	80059c6 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800595a:	491f      	ldr	r1, [pc, #124]	; (80059d8 <i2c_slave_mem_write+0xe0>)
 800595c:	481c      	ldr	r0, [pc, #112]	; (80059d0 <i2c_slave_mem_write+0xd8>)
 800595e:	f7fe fa60 	bl	8003e22 <I2C_CheckEvent>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f0      	beq.n	800594a <i2c_slave_mem_write+0x52>
	}

	I2C_SendData(I2C1,registerAddr);
 8005968:	79bb      	ldrb	r3, [r7, #6]
 800596a:	4619      	mov	r1, r3
 800596c:	4818      	ldr	r0, [pc, #96]	; (80059d0 <i2c_slave_mem_write+0xd8>)
 800596e:	f7fe fa1f 	bl	8003db0 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8005972:	e007      	b.n	8005984 <i2c_slave_mem_write+0x8c>
	{
			if(timeout_alarm_status_check() == 1)
 8005974:	f002 f900 	bl	8007b78 <timeout_alarm_status_check>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d102      	bne.n	8005984 <i2c_slave_mem_write+0x8c>
				return -1;
 800597e:	f04f 33ff 	mov.w	r3, #4294967295
 8005982:	e020      	b.n	80059c6 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8005984:	4915      	ldr	r1, [pc, #84]	; (80059dc <i2c_slave_mem_write+0xe4>)
 8005986:	4812      	ldr	r0, [pc, #72]	; (80059d0 <i2c_slave_mem_write+0xd8>)
 8005988:	f7fe fa4b 	bl	8003e22 <I2C_CheckEvent>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f0      	beq.n	8005974 <i2c_slave_mem_write+0x7c>
	}

	I2C_SendData(I2C1,writeData);
 8005992:	797b      	ldrb	r3, [r7, #5]
 8005994:	4619      	mov	r1, r3
 8005996:	480e      	ldr	r0, [pc, #56]	; (80059d0 <i2c_slave_mem_write+0xd8>)
 8005998:	f7fe fa0a 	bl	8003db0 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 800599c:	e007      	b.n	80059ae <i2c_slave_mem_write+0xb6>
	{
			if(timeout_alarm_status_check() == 1)
 800599e:	f002 f8eb 	bl	8007b78 <timeout_alarm_status_check>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d102      	bne.n	80059ae <i2c_slave_mem_write+0xb6>
				return -1;
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ac:	e00b      	b.n	80059c6 <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80059ae:	490b      	ldr	r1, [pc, #44]	; (80059dc <i2c_slave_mem_write+0xe4>)
 80059b0:	4807      	ldr	r0, [pc, #28]	; (80059d0 <i2c_slave_mem_write+0xd8>)
 80059b2:	f7fe fa36 	bl	8003e22 <I2C_CheckEvent>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f0      	beq.n	800599e <i2c_slave_mem_write+0xa6>
	}

	I2C_GenerateSTOP(I2C1,ENABLE);
 80059bc:	2101      	movs	r1, #1
 80059be:	4804      	ldr	r0, [pc, #16]	; (80059d0 <i2c_slave_mem_write+0xd8>)
 80059c0:	f7fe f9b8 	bl	8003d34 <I2C_GenerateSTOP>

	return 0;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40005400 	.word	0x40005400
 80059d4:	00030001 	.word	0x00030001
 80059d8:	00070082 	.word	0x00070082
 80059dc:	00070084 	.word	0x00070084

080059e0 <motion_control_task>:
//	}
//}


void motion_control_task(void *pvParameters)
{
 80059e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80059e4:	b0a8      	sub	sp, #160	; 0xa0
 80059e6:	af04      	add	r7, sp, #16
 80059e8:	6078      	str	r0, [r7, #4]
	double accelAngleValues[3]={0};
 80059ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	605a      	str	r2, [r3, #4]
 80059f4:	609a      	str	r2, [r3, #8]
 80059f6:	60da      	str	r2, [r3, #12]
 80059f8:	611a      	str	r2, [r3, #16]
 80059fa:	615a      	str	r2, [r3, #20]
	uint8_t accelCalibFlag=0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	double accelCalibVal[3]={0};
 8005a02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	605a      	str	r2, [r3, #4]
 8005a0c:	609a      	str	r2, [r3, #8]
 8005a0e:	60da      	str	r2, [r3, #12]
 8005a10:	611a      	str	r2, [r3, #16]
 8005a12:	615a      	str	r2, [r3, #20]
	float gyroRadPerSec_X = 0;
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	float gyroRadPerSec_Y = 0;
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	67fb      	str	r3, [r7, #124]	; 0x7c
	float gyroRadPerSec_Z = 0;
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	67bb      	str	r3, [r7, #120]	; 0x78

	double gyroAngleValues[3]={0};
 8005a28:	f107 0320 	add.w	r3, r7, #32
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	609a      	str	r2, [r3, #8]
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	611a      	str	r2, [r3, #16]
 8005a38:	615a      	str	r2, [r3, #20]
	uint8_t gyroCalibFlag=0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	double gyroCalibVal[3]={0};
 8005a40:	f107 0308 	add.w	r3, r7, #8
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	605a      	str	r2, [r3, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	611a      	str	r2, [r3, #16]
 8005a50:	615a      	str	r2, [r3, #20]
	double calc1;
	double calc2;

	uint32_t previousTime=0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t currentTime=0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t elapsed_time_in_seconds=0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
	extern volatile float q0, q1, q2, q3;
	extern volatile float roll, pitch, yaw;


	uint32_t i=0,j=0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	while(1)
	{
    	if(!gyroCalibFlag)
 8005a6a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d112      	bne.n	8005a98 <motion_control_task+0xb8>
    	{
    		uart_printf("gyro calibration started\n");
 8005a72:	489b      	ldr	r0, [pc, #620]	; (8005ce0 <motion_control_task+0x300>)
 8005a74:	f001 fe60 	bl	8007738 <printf_>
    		if(gyro_do_calibration(gyroCalibVal)<0)
 8005a78:	f107 0308 	add.w	r3, r7, #8
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fcdd 	bl	800543c <gyro_do_calibration>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	da03      	bge.n	8005a90 <motion_control_task+0xb0>
    		{
    			uart_printf("gyro calibration fail\n");
 8005a88:	4896      	ldr	r0, [pc, #600]	; (8005ce4 <motion_control_task+0x304>)
 8005a8a:	f001 fe55 	bl	8007738 <printf_>
    			while(1);
 8005a8e:	e7fe      	b.n	8005a8e <motion_control_task+0xae>
    		}
    		gyroCalibFlag = 1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8005a96:	e7e8      	b.n	8005a6a <motion_control_task+0x8a>
//    		uart_printf("calib value: %.1f\n", gyroCalibVal[X_AXIS_INDEX]);
    	}
    	else if(!accelCalibFlag)
 8005a98:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d112      	bne.n	8005ac6 <motion_control_task+0xe6>
		{
			uart_printf("accel calibration started\n");
 8005aa0:	4891      	ldr	r0, [pc, #580]	; (8005ce8 <motion_control_task+0x308>)
 8005aa2:	f001 fe49 	bl	8007738 <printf_>
			if(accel_do_calibration(accelCalibVal)<0)
 8005aa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff fd64 	bl	8005578 <accel_do_calibration>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da03      	bge.n	8005abe <motion_control_task+0xde>
			{
				uart_printf("accel calibration fail\n");
 8005ab6:	488d      	ldr	r0, [pc, #564]	; (8005cec <motion_control_task+0x30c>)
 8005ab8:	f001 fe3e 	bl	8007738 <printf_>
				while(1);
 8005abc:	e7fe      	b.n	8005abc <motion_control_task+0xdc>
			}
			accelCalibFlag = 1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005ac4:	e7d1      	b.n	8005a6a <motion_control_task+0x8a>
//    		uart_printf("calib value: %.1f\n", gyroCalibVal[X_AXIS_INDEX]);
		}

    	else if((gyroCalibFlag == 1)&&(accelCalibFlag == 1))
 8005ac6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d1cd      	bne.n	8005a6a <motion_control_task+0x8a>
 8005ace:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d1c9      	bne.n	8005a6a <motion_control_task+0x8a>
    	{
    		if(accel_measurement_read(accelRawData)<0)
 8005ad6:	4886      	ldr	r0, [pc, #536]	; (8005cf0 <motion_control_task+0x310>)
 8005ad8:	f7ff fc7a 	bl	80053d0 <accel_measurement_read>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da02      	bge.n	8005ae8 <motion_control_task+0x108>
    			uart_printf("accel read fail\n");
 8005ae2:	4884      	ldr	r0, [pc, #528]	; (8005cf4 <motion_control_task+0x314>)
 8005ae4:	f001 fe28 	bl	8007738 <printf_>
    		accelRawData[X_AXIS_INDEX] = accelRawData[X_AXIS_INDEX]+accelCalibVal[X_AXIS_INDEX];
 8005ae8:	4b81      	ldr	r3, [pc, #516]	; (8005cf0 <motion_control_task+0x310>)
 8005aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fa fce0 	bl	80004b4 <__aeabi_i2d>
 8005af4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005af8:	461a      	mov	r2, r3
 8005afa:	4623      	mov	r3, r4
 8005afc:	f7fa fb8e 	bl	800021c <__adddf3>
 8005b00:	4603      	mov	r3, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	4618      	mov	r0, r3
 8005b06:	4621      	mov	r1, r4
 8005b08:	f7fa ffd4 	bl	8000ab4 <__aeabi_d2iz>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	b21a      	sxth	r2, r3
 8005b10:	4b77      	ldr	r3, [pc, #476]	; (8005cf0 <motion_control_task+0x310>)
 8005b12:	801a      	strh	r2, [r3, #0]
			accelRawData[Y_AXIS_INDEX] = accelRawData[Y_AXIS_INDEX]+accelCalibVal[Y_AXIS_INDEX];
 8005b14:	4b76      	ldr	r3, [pc, #472]	; (8005cf0 <motion_control_task+0x310>)
 8005b16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fa fcca 	bl	80004b4 <__aeabi_i2d>
 8005b20:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005b24:	461a      	mov	r2, r3
 8005b26:	4623      	mov	r3, r4
 8005b28:	f7fa fb78 	bl	800021c <__adddf3>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	4618      	mov	r0, r3
 8005b32:	4621      	mov	r1, r4
 8005b34:	f7fa ffbe 	bl	8000ab4 <__aeabi_d2iz>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	b21a      	sxth	r2, r3
 8005b3c:	4b6c      	ldr	r3, [pc, #432]	; (8005cf0 <motion_control_task+0x310>)
 8005b3e:	805a      	strh	r2, [r3, #2]
			accelRawData[Z_AXIS_INDEX] = accelRawData[Z_AXIS_INDEX]+accelCalibVal[Z_AXIS_INDEX];
 8005b40:	4b6b      	ldr	r3, [pc, #428]	; (8005cf0 <motion_control_task+0x310>)
 8005b42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fa fcb4 	bl	80004b4 <__aeabi_i2d>
 8005b4c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005b50:	461a      	mov	r2, r3
 8005b52:	4623      	mov	r3, r4
 8005b54:	f7fa fb62 	bl	800021c <__adddf3>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	4621      	mov	r1, r4
 8005b60:	f7fa ffa8 	bl	8000ab4 <__aeabi_d2iz>
 8005b64:	4603      	mov	r3, r0
 8005b66:	b21a      	sxth	r2, r3
 8005b68:	4b61      	ldr	r3, [pc, #388]	; (8005cf0 <motion_control_task+0x310>)
 8005b6a:	809a      	strh	r2, [r3, #4]

			vTaskDelay(5/portTICK_PERIOD_MS);
 8005b6c:	2005      	movs	r0, #5
 8005b6e:	f7fc fe65 	bl	800283c <vTaskDelay>

			if(gyro_measurement_read(gyroRawData)<0)
 8005b72:	4861      	ldr	r0, [pc, #388]	; (8005cf8 <motion_control_task+0x318>)
 8005b74:	f7ff fbf6 	bl	8005364 <gyro_measurement_read>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	da02      	bge.n	8005b84 <motion_control_task+0x1a4>
			    uart_printf("gyro read fail\n");
 8005b7e:	485f      	ldr	r0, [pc, #380]	; (8005cfc <motion_control_task+0x31c>)
 8005b80:	f001 fdda 	bl	8007738 <printf_>
			gyroRawData[X_AXIS_INDEX] = (gyroRawData[X_AXIS_INDEX])-gyroCalibVal[X_AXIS_INDEX];
 8005b84:	4b5c      	ldr	r3, [pc, #368]	; (8005cf8 <motion_control_task+0x318>)
 8005b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fa fc92 	bl	80004b4 <__aeabi_i2d>
 8005b90:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005b94:	461a      	mov	r2, r3
 8005b96:	4623      	mov	r3, r4
 8005b98:	f7fa fb3e 	bl	8000218 <__aeabi_dsub>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	f7fa ff86 	bl	8000ab4 <__aeabi_d2iz>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	b21a      	sxth	r2, r3
 8005bac:	4b52      	ldr	r3, [pc, #328]	; (8005cf8 <motion_control_task+0x318>)
 8005bae:	801a      	strh	r2, [r3, #0]
			gyroRawData[Y_AXIS_INDEX] = (gyroRawData[Y_AXIS_INDEX])-gyroCalibVal[Y_AXIS_INDEX];
 8005bb0:	4b51      	ldr	r3, [pc, #324]	; (8005cf8 <motion_control_task+0x318>)
 8005bb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fa fc7c 	bl	80004b4 <__aeabi_i2d>
 8005bbc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	f7fa fb28 	bl	8000218 <__aeabi_dsub>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	4618      	mov	r0, r3
 8005bce:	4621      	mov	r1, r4
 8005bd0:	f7fa ff70 	bl	8000ab4 <__aeabi_d2iz>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	b21a      	sxth	r2, r3
 8005bd8:	4b47      	ldr	r3, [pc, #284]	; (8005cf8 <motion_control_task+0x318>)
 8005bda:	805a      	strh	r2, [r3, #2]
			gyroRawData[Z_AXIS_INDEX] = (gyroRawData[Z_AXIS_INDEX])-gyroCalibVal[Z_AXIS_INDEX];
 8005bdc:	4b46      	ldr	r3, [pc, #280]	; (8005cf8 <motion_control_task+0x318>)
 8005bde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fa fc66 	bl	80004b4 <__aeabi_i2d>
 8005be8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005bec:	461a      	mov	r2, r3
 8005bee:	4623      	mov	r3, r4
 8005bf0:	f7fa fb12 	bl	8000218 <__aeabi_dsub>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	f7fa ff5a 	bl	8000ab4 <__aeabi_d2iz>
 8005c00:	4603      	mov	r3, r0
 8005c02:	b21a      	sxth	r2, r3
 8005c04:	4b3c      	ldr	r3, [pc, #240]	; (8005cf8 <motion_control_task+0x318>)
 8005c06:	809a      	strh	r2, [r3, #4]

			//convert to radians/second
			gyroRadPerSec_X = (((float)gyroRawData[X_AXIS_INDEX])*M_PI)/180;
 8005c08:	4b3b      	ldr	r3, [pc, #236]	; (8005cf8 <motion_control_task+0x318>)
 8005c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fb f8a2 	bl	8000d58 <__aeabi_i2f>
 8005c14:	4603      	mov	r3, r0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fa fc5e 	bl	80004d8 <__aeabi_f2d>
 8005c1c:	a32e      	add	r3, pc, #184	; (adr r3, 8005cd8 <motion_control_task+0x2f8>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f7fa fcad 	bl	8000580 <__aeabi_dmul>
 8005c26:	4603      	mov	r3, r0
 8005c28:	460c      	mov	r4, r1
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	4b33      	ldr	r3, [pc, #204]	; (8005d00 <motion_control_task+0x320>)
 8005c34:	f7fa fdce 	bl	80007d4 <__aeabi_ddiv>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	4621      	mov	r1, r4
 8005c40:	f7fa ff80 	bl	8000b44 <__aeabi_d2f>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			gyroRadPerSec_Y = (((float)gyroRawData[Y_AXIS_INDEX])*M_PI)/180;
 8005c4a:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <motion_control_task+0x318>)
 8005c4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fb f881 	bl	8000d58 <__aeabi_i2f>
 8005c56:	4603      	mov	r3, r0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fa fc3d 	bl	80004d8 <__aeabi_f2d>
 8005c5e:	a31e      	add	r3, pc, #120	; (adr r3, 8005cd8 <motion_control_task+0x2f8>)
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f7fa fc8c 	bl	8000580 <__aeabi_dmul>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	4621      	mov	r1, r4
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <motion_control_task+0x320>)
 8005c76:	f7fa fdad 	bl	80007d4 <__aeabi_ddiv>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	4618      	mov	r0, r3
 8005c80:	4621      	mov	r1, r4
 8005c82:	f7fa ff5f 	bl	8000b44 <__aeabi_d2f>
 8005c86:	4603      	mov	r3, r0
 8005c88:	67fb      	str	r3, [r7, #124]	; 0x7c
			gyroRadPerSec_Z = (((float)gyroRawData[Z_AXIS_INDEX])*M_PI)/180;
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <motion_control_task+0x318>)
 8005c8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fb f861 	bl	8000d58 <__aeabi_i2f>
 8005c96:	4603      	mov	r3, r0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fa fc1d 	bl	80004d8 <__aeabi_f2d>
 8005c9e:	a30e      	add	r3, pc, #56	; (adr r3, 8005cd8 <motion_control_task+0x2f8>)
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f7fa fc6c 	bl	8000580 <__aeabi_dmul>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	4618      	mov	r0, r3
 8005cae:	4621      	mov	r1, r4
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <motion_control_task+0x320>)
 8005cb6:	f7fa fd8d 	bl	80007d4 <__aeabi_ddiv>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	f7fa ff3f 	bl	8000b44 <__aeabi_d2f>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	67bb      	str	r3, [r7, #120]	; 0x78

			for(j=0;j<20;j++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cd0:	e03d      	b.n	8005d4e <motion_control_task+0x36e>
 8005cd2:	bf00      	nop
 8005cd4:	f3af 8000 	nop.w
 8005cd8:	54442d18 	.word	0x54442d18
 8005cdc:	400921fb 	.word	0x400921fb
 8005ce0:	08008408 	.word	0x08008408
 8005ce4:	08008424 	.word	0x08008424
 8005ce8:	0800843c 	.word	0x0800843c
 8005cec:	08008458 	.word	0x08008458
 8005cf0:	20001e30 	.word	0x20001e30
 8005cf4:	08008470 	.word	0x08008470
 8005cf8:	20001e38 	.word	0x20001e38
 8005cfc:	08008484 	.word	0x08008484
 8005d00:	40668000 	.word	0x40668000
			{
				MadgwickAHRSupdateIMU(gyroRadPerSec_X, gyroRadPerSec_Y, gyroRadPerSec_Z,
						(float)accelRawData[X_AXIS_INDEX], (float)accelRawData[Y_AXIS_INDEX], (float)accelRawData[Z_AXIS_INDEX]);
 8005d04:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <motion_control_task+0x400>)
 8005d06:	f9b3 3000 	ldrsh.w	r3, [r3]
				MadgwickAHRSupdateIMU(gyroRadPerSec_X, gyroRadPerSec_Y, gyroRadPerSec_Z,
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fb f824 	bl	8000d58 <__aeabi_i2f>
 8005d10:	4605      	mov	r5, r0
						(float)accelRawData[X_AXIS_INDEX], (float)accelRawData[Y_AXIS_INDEX], (float)accelRawData[Z_AXIS_INDEX]);
 8005d12:	4b33      	ldr	r3, [pc, #204]	; (8005de0 <motion_control_task+0x400>)
 8005d14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
				MadgwickAHRSupdateIMU(gyroRadPerSec_X, gyroRadPerSec_Y, gyroRadPerSec_Z,
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fb f81d 	bl	8000d58 <__aeabi_i2f>
 8005d1e:	4604      	mov	r4, r0
						(float)accelRawData[X_AXIS_INDEX], (float)accelRawData[Y_AXIS_INDEX], (float)accelRawData[Z_AXIS_INDEX]);
 8005d20:	4b2f      	ldr	r3, [pc, #188]	; (8005de0 <motion_control_task+0x400>)
 8005d22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
				MadgwickAHRSupdateIMU(gyroRadPerSec_X, gyroRadPerSec_Y, gyroRadPerSec_Z,
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fb f816 	bl	8000d58 <__aeabi_i2f>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	9400      	str	r4, [sp, #0]
 8005d32:	462b      	mov	r3, r5
 8005d34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d38:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8005d3c:	f7fe fe18 	bl	8004970 <MadgwickAHRSupdateIMU>
				Madgwick_computeAngles();
 8005d40:	f7ff f9c6 	bl	80050d0 <Madgwick_computeAngles>
			for(j=0;j<20;j++)
 8005d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d48:	3301      	adds	r3, #1
 8005d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d52:	2b13      	cmp	r3, #19
 8005d54:	d9d6      	bls.n	8005d04 <motion_control_task+0x324>
			}

			i++;
 8005d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			if(i==10)
 8005d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d64:	2b0a      	cmp	r3, #10
 8005d66:	f47f ae80 	bne.w	8005a6a <motion_control_task+0x8a>
			{
//				uart_printf("q0: %.1f  q1: %.1f  q2: %.1f  q3: %.1f\n", q0, q1, q2, q3);
				uart_printf("roll: %.1f  pitch: %.1f  yaw: %.1f\n", roll*DEGREE_CNVRT_CONST, pitch*DEGREE_CNVRT_CONST, yaw*DEGREE_CNVRT_CONST);
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <motion_control_task+0x404>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fa fbb2 	bl	80004d8 <__aeabi_f2d>
 8005d74:	a318      	add	r3, pc, #96	; (adr r3, 8005dd8 <motion_control_task+0x3f8>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa fc01 	bl	8000580 <__aeabi_dmul>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	460c      	mov	r4, r1
 8005d82:	4698      	mov	r8, r3
 8005d84:	46a1      	mov	r9, r4
 8005d86:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <motion_control_task+0x408>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fa fba4 	bl	80004d8 <__aeabi_f2d>
 8005d90:	a311      	add	r3, pc, #68	; (adr r3, 8005dd8 <motion_control_task+0x3f8>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f7fa fbf3 	bl	8000580 <__aeabi_dmul>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	4625      	mov	r5, r4
 8005da0:	461c      	mov	r4, r3
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <motion_control_task+0x40c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fa fb96 	bl	80004d8 <__aeabi_f2d>
 8005dac:	a30a      	add	r3, pc, #40	; (adr r3, 8005dd8 <motion_control_task+0x3f8>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f7fa fbe5 	bl	8000580 <__aeabi_dmul>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dbe:	e9cd 4500 	strd	r4, r5, [sp]
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	480a      	ldr	r0, [pc, #40]	; (8005df0 <motion_control_task+0x410>)
 8005dc8:	f001 fcb6 	bl	8007738 <printf_>
//				uart_printf("x: %.1f  y: %.1f  z: %.1f\n", (float)gyroRawData[X_AXIS_INDEX], (float)gyroRawData[Y_AXIS_INDEX], (float)gyroRawData[Z_AXIS_INDEX]);

				i=0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    	if(!gyroCalibFlag)
 8005dd2:	e64a      	b.n	8005a6a <motion_control_task+0x8a>
 8005dd4:	f3af 8000 	nop.w
 8005dd8:	7f62b6ae 	.word	0x7f62b6ae
 8005ddc:	404ca5d9 	.word	0x404ca5d9
 8005de0:	20001e30 	.word	0x20001e30
 8005de4:	20001e10 	.word	0x20001e10
 8005de8:	20001e14 	.word	0x20001e14
 8005dec:	20001e18 	.word	0x20001e18
 8005df0:	08008494 	.word	0x08008494

08005df4 <drone_init_task>:
	}
}


void drone_init_task(void *pvParameters)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
	timer3_init();
 8005dfc:	f001 fdd4 	bl	80079a8 <timer3_init>
	motors_pwm_init();
 8005e00:	f001 fe06 	bl	8007a10 <motors_pwm_init>
	I2C_LowLevel_Init(400000, 0x38);
 8005e04:	2138      	movs	r1, #56	; 0x38
 8005e06:	4818      	ldr	r0, [pc, #96]	; (8005e68 <drone_init_task+0x74>)
 8005e08:	f7ff fc74 	bl	80056f4 <I2C_LowLevel_Init>
	debug_led_init();
 8005e0c:	f7ff fa4e 	bl	80052ac <debug_led_init>
	uart_console_init(9600);
 8005e10:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8005e14:	f001 fecc 	bl	8007bb0 <uart_console_init>
	/*safety delay for mpu6050 to powerup*/
	vTaskDelay(500/portTICK_PERIOD_MS);
 8005e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e1c:	f7fc fd0e 	bl	800283c <vTaskDelay>
	if(mpu6050_init(FS_SEL3, FS_SEL1)<0)
 8005e20:	2108      	movs	r1, #8
 8005e22:	2018      	movs	r0, #24
 8005e24:	f7ff fa60 	bl	80052e8 <mpu6050_init>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	da03      	bge.n	8005e36 <drone_init_task+0x42>
	{
		uart_printf("mpu6050 init failed.\n");
 8005e2e:	480f      	ldr	r0, [pc, #60]	; (8005e6c <drone_init_task+0x78>)
 8005e30:	f001 fc82 	bl	8007738 <printf_>
		while(1);
 8005e34:	e7fe      	b.n	8005e34 <drone_init_task+0x40>
	}
	else
	{
		uart_printf("drone init complete.\n");
 8005e36:	480e      	ldr	r0, [pc, #56]	; (8005e70 <drone_init_task+0x7c>)
 8005e38:	f001 fc7e 	bl	8007738 <printf_>
		vTaskDelay(2000/portTICK_PERIOD_MS);
 8005e3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005e40:	f7fc fcfc 	bl	800283c <vTaskDelay>
		xTaskCreate(motion_control_task, "motion_control_task", 500, NULL, 1, NULL );
 8005e44:	2300      	movs	r3, #0
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	2301      	movs	r3, #1
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005e52:	4908      	ldr	r1, [pc, #32]	; (8005e74 <drone_init_task+0x80>)
 8005e54:	4808      	ldr	r0, [pc, #32]	; (8005e78 <drone_init_task+0x84>)
 8005e56:	f7fc fb29 	bl	80024ac <xTaskCreate>
		vTaskDelete(NULL);
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	f7fc fc60 	bl	8002720 <vTaskDelete>
	}
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	00061a80 	.word	0x00061a80
 8005e6c:	080084b8 	.word	0x080084b8
 8005e70:	080084d0 	.word	0x080084d0
 8005e74:	080084e8 	.word	0x080084e8
 8005e78:	080059e1 	.word	0x080059e1

08005e7c <main>:

int main(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af02      	add	r7, sp, #8
	xTaskCreate(drone_init_task, "drone_init_task", 200, NULL, 0, NULL );
 8005e82:	2300      	movs	r3, #0
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	22c8      	movs	r2, #200	; 0xc8
 8005e8e:	4903      	ldr	r1, [pc, #12]	; (8005e9c <main+0x20>)
 8005e90:	4803      	ldr	r0, [pc, #12]	; (8005ea0 <main+0x24>)
 8005e92:	f7fc fb0b 	bl	80024ac <xTaskCreate>
	vTaskStartScheduler();
 8005e96:	f7fc fd05 	bl	80028a4 <vTaskStartScheduler>
	while(1);
 8005e9a:	e7fe      	b.n	8005e9a <main+0x1e>
 8005e9c:	080084fc 	.word	0x080084fc
 8005ea0:	08005df5 	.word	0x08005df5

08005ea4 <vApplicationMallocFailedHook>:

    }
}

void vApplicationMallocFailedHook( void )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8005ea8:	e7fe      	b.n	8005ea8 <vApplicationMallocFailedHook+0x4>

08005eaa <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8005eb4:	e7fe      	b.n	8005eb4 <vApplicationStackOverflowHook+0xa>

08005eb6 <vApplicationIdleHook>:
}

void vApplicationIdleHook( void )
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
	volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8005ebc:	f7fb fe56 	bl	8001b6c <xPortGetFreeHeapSize>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8005ec4:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <_putchar>:
  void* arg;
} out_fct_wrap_type;

// custom function
void _putchar(char character)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	71fb      	strb	r3, [r7, #7]
	USART_SendData(PRINTF_USART, character);
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4807      	ldr	r0, [pc, #28]	; (8005f00 <_putchar+0x30>)
 8005ee2:	f7fe fd18 	bl	8004916 <USART_SendData>
	while(USART_GetFlagStatus(PRINTF_USART, USART_FLAG_TC) == 0);
 8005ee6:	bf00      	nop
 8005ee8:	2140      	movs	r1, #64	; 0x40
 8005eea:	4805      	ldr	r0, [pc, #20]	; (8005f00 <_putchar+0x30>)
 8005eec:	f7fe fd24 	bl	8004938 <USART_GetFlagStatus>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f8      	beq.n	8005ee8 <_putchar+0x18>
}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40013800 	.word	0x40013800

08005f04 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr

08005f1e <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <_out_char+0x1e>
    _putchar(character);
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff ffca 	bl	8005ed0 <_putchar>
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e002      	b.n	8005f5a <_strnlen_s+0x16>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d004      	beq.n	8005f6c <_strnlen_s+0x28>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	1e5a      	subs	r2, r3, #1
 8005f66:	603a      	str	r2, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f3      	bne.n	8005f54 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	1ad3      	subs	r3, r2, r3
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	2b2f      	cmp	r3, #47	; 0x2f
 8005f8a:	d904      	bls.n	8005f96 <_is_digit+0x1a>
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	2b39      	cmp	r3, #57	; 0x39
 8005f90:	d801      	bhi.n	8005f96 <_is_digit+0x1a>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <_is_digit+0x1c>
 8005f96:	2300      	movs	r3, #0
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	b2db      	uxtb	r3, r3
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr

08005fa8 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8005fb4:	e00e      	b.n	8005fd4 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	1c59      	adds	r1, r3, #1
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6011      	str	r1, [r2, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	4403      	add	r3, r0
 8005fd0:	3b30      	subs	r3, #48	; 0x30
 8005fd2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff ffce 	bl	8005f7c <_is_digit>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e7      	bne.n	8005fb6 <_atoi+0xe>
  }
  return i;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8005ff0:	b590      	push	{r4, r7, lr}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d125      	bne.n	8006058 <_out_rev+0x68>
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d120      	bne.n	8006058 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e00a      	b.n	8006032 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	1c53      	adds	r3, r2, #1
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	68fc      	ldr	r4, [r7, #12]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	2020      	movs	r0, #32
 800602a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	429a      	cmp	r2, r3
 8006038:	d3f0      	bcc.n	800601c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800603a:	e00d      	b.n	8006058 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	3b01      	subs	r3, #1
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	4413      	add	r3, r2
 8006048:	7818      	ldrb	r0, [r3, #0]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	1c53      	adds	r3, r2, #1
 800604e:	607b      	str	r3, [r7, #4]
 8006050:	68fc      	ldr	r4, [r7, #12]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	47a0      	blx	r4
  while (len) {
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1ee      	bne.n	800603c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8006068:	e007      	b.n	800607a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	1c53      	adds	r3, r2, #1
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	68fc      	ldr	r4, [r7, #12]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	2020      	movs	r0, #32
 8006078:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	429a      	cmp	r2, r3
 8006084:	d3f1      	bcc.n	800606a <_out_rev+0x7a>
    }
  }

  return idx;
 8006086:	687b      	ldr	r3, [r7, #4]
}
 8006088:	4618      	mov	r0, r3
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd90      	pop	{r4, r7, pc}

08006090 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af04      	add	r7, sp, #16
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d136      	bne.n	8006116 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d018      	beq.n	80060e0 <_ntoa_format+0x50>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d013      	beq.n	80060e0 <_ntoa_format+0x50>
 80060b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <_ntoa_format+0x3a>
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <_ntoa_format+0x50>
      width--;
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	3b01      	subs	r3, #1
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80060d0:	e006      	b.n	80060e0 <_ntoa_format+0x50>
      buf[len++] = '0';
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	61fa      	str	r2, [r7, #28]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4413      	add	r3, r2
 80060dc:	2230      	movs	r2, #48	; 0x30
 80060de:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d20a      	bcs.n	80060fe <_ntoa_format+0x6e>
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	2b1f      	cmp	r3, #31
 80060ec:	d9f1      	bls.n	80060d2 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80060ee:	e006      	b.n	80060fe <_ntoa_format+0x6e>
      buf[len++] = '0';
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	61fa      	str	r2, [r7, #28]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4413      	add	r3, r2
 80060fa:	2230      	movs	r2, #48	; 0x30
 80060fc:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <_ntoa_format+0x86>
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	429a      	cmp	r2, r3
 800610e:	d202      	bcs.n	8006116 <_ntoa_format+0x86>
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2b1f      	cmp	r3, #31
 8006114:	d9ec      	bls.n	80060f0 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	f003 0310 	and.w	r3, r3, #16
 800611c:	2b00      	cmp	r3, #0
 800611e:	d058      	beq.n	80061d2 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006126:	2b00      	cmp	r3, #0
 8006128:	d116      	bne.n	8006158 <_ntoa_format+0xc8>
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d013      	beq.n	8006158 <_ntoa_format+0xc8>
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	429a      	cmp	r2, r3
 8006136:	d003      	beq.n	8006140 <_ntoa_format+0xb0>
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	429a      	cmp	r2, r3
 800613e:	d10b      	bne.n	8006158 <_ntoa_format+0xc8>
      len--;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	3b01      	subs	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <_ntoa_format+0xc8>
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	2b10      	cmp	r3, #16
 8006150:	d102      	bne.n	8006158 <_ntoa_format+0xc8>
        len--;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	3b01      	subs	r3, #1
 8006156:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	2b10      	cmp	r3, #16
 800615c:	d10f      	bne.n	800617e <_ntoa_format+0xee>
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <_ntoa_format+0xee>
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b1f      	cmp	r3, #31
 800616c:	d807      	bhi.n	800617e <_ntoa_format+0xee>
      buf[len++] = 'x';
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	61fa      	str	r2, [r7, #28]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4413      	add	r3, r2
 8006178:	2278      	movs	r2, #120	; 0x78
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e01f      	b.n	80061be <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	2b10      	cmp	r3, #16
 8006182:	d10f      	bne.n	80061a4 <_ntoa_format+0x114>
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <_ntoa_format+0x114>
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b1f      	cmp	r3, #31
 8006192:	d807      	bhi.n	80061a4 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	61fa      	str	r2, [r7, #28]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4413      	add	r3, r2
 800619e:	2258      	movs	r2, #88	; 0x58
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e00c      	b.n	80061be <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d109      	bne.n	80061be <_ntoa_format+0x12e>
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b1f      	cmp	r3, #31
 80061ae:	d806      	bhi.n	80061be <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	61fa      	str	r2, [r7, #28]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4413      	add	r3, r2
 80061ba:	2262      	movs	r2, #98	; 0x62
 80061bc:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	2b1f      	cmp	r3, #31
 80061c2:	d806      	bhi.n	80061d2 <_ntoa_format+0x142>
      buf[len++] = '0';
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	61fa      	str	r2, [r7, #28]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4413      	add	r3, r2
 80061ce:	2230      	movs	r2, #48	; 0x30
 80061d0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b1f      	cmp	r3, #31
 80061d6:	d824      	bhi.n	8006222 <_ntoa_format+0x192>
    if (negative) {
 80061d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <_ntoa_format+0x160>
      buf[len++] = '-';
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	61fa      	str	r2, [r7, #28]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4413      	add	r3, r2
 80061ea:	222d      	movs	r2, #45	; 0x2d
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e018      	b.n	8006222 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	61fa      	str	r2, [r7, #28]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	4413      	add	r3, r2
 8006204:	222b      	movs	r2, #43	; 0x2b
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e00b      	b.n	8006222 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d006      	beq.n	8006222 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	61fa      	str	r2, [r7, #28]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	4413      	add	r3, r2
 800621e:	2220      	movs	r2, #32
 8006220:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	9303      	str	r3, [sp, #12]
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	9302      	str	r3, [sp, #8]
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff fed9 	bl	8005ff0 <_out_rev>
 800623e:	4603      	mov	r3, r0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b096      	sub	sp, #88	; 0x58
 800624c:	af08      	add	r7, sp, #32
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800625a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8006260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006262:	f023 0310 	bic.w	r3, r3, #16
 8006266:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8006268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800626a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <_ntoa_long+0x30>
 8006272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d033      	beq.n	80062e0 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8006278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800627c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006280:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006282:	fb01 f202 	mul.w	r2, r1, r2
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	637a      	str	r2, [r7, #52]	; 0x34
 8006292:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006296:	2a09      	cmp	r2, #9
 8006298:	d804      	bhi.n	80062a4 <_ntoa_long+0x5c>
 800629a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800629e:	3230      	adds	r2, #48	; 0x30
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	e00d      	b.n	80062c0 <_ntoa_long+0x78>
 80062a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062a6:	f002 0220 	and.w	r2, r2, #32
 80062aa:	2a00      	cmp	r2, #0
 80062ac:	d001      	beq.n	80062b2 <_ntoa_long+0x6a>
 80062ae:	2141      	movs	r1, #65	; 0x41
 80062b0:	e000      	b.n	80062b4 <_ntoa_long+0x6c>
 80062b2:	2161      	movs	r1, #97	; 0x61
 80062b4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80062b8:	440a      	add	r2, r1
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	3a0a      	subs	r2, #10
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80062c4:	440b      	add	r3, r1
 80062c6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80062ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d2:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80062d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <_ntoa_long+0x98>
 80062da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062dc:	2b1f      	cmp	r3, #31
 80062de:	d9cb      	bls.n	8006278 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80062e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e2:	9306      	str	r3, [sp, #24]
 80062e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80062f4:	9302      	str	r3, [sp, #8]
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	f107 0310 	add.w	r3, r7, #16
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff fec2 	bl	8006090 <_ntoa_format>
 800630c:	4603      	mov	r3, r0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3738      	adds	r7, #56	; 0x38
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006316:	b590      	push	{r4, r7, lr}
 8006318:	b097      	sub	sp, #92	; 0x5c
 800631a:	af08      	add	r7, sp, #32
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8006328:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800632c:	4323      	orrs	r3, r4
 800632e:	d103      	bne.n	8006338 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8006330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006332:	f023 0310 	bic.w	r3, r3, #16
 8006336:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8006338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800633a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <_ntoa_long_long+0x34>
 8006342:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006346:	4323      	orrs	r3, r4
 8006348:	d039      	beq.n	80063be <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800634a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800634e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006352:	f7fa ff31 	bl	80011b8 <__aeabi_uldivmod>
 8006356:	461c      	mov	r4, r3
 8006358:	4613      	mov	r3, r2
 800635a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800635e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	637a      	str	r2, [r7, #52]	; 0x34
 8006364:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006368:	2a09      	cmp	r2, #9
 800636a:	d804      	bhi.n	8006376 <_ntoa_long_long+0x60>
 800636c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006370:	3230      	adds	r2, #48	; 0x30
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	e00d      	b.n	8006392 <_ntoa_long_long+0x7c>
 8006376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006378:	f002 0220 	and.w	r2, r2, #32
 800637c:	2a00      	cmp	r2, #0
 800637e:	d001      	beq.n	8006384 <_ntoa_long_long+0x6e>
 8006380:	2141      	movs	r1, #65	; 0x41
 8006382:	e000      	b.n	8006386 <_ntoa_long_long+0x70>
 8006384:	2161      	movs	r1, #97	; 0x61
 8006386:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800638a:	440a      	add	r2, r1
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	3a0a      	subs	r2, #10
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006396:	440b      	add	r3, r1
 8006398:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800639c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80063a4:	f7fa ff08 	bl	80011b8 <__aeabi_uldivmod>
 80063a8:	4603      	mov	r3, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80063b0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80063b4:	4323      	orrs	r3, r4
 80063b6:	d002      	beq.n	80063be <_ntoa_long_long+0xa8>
 80063b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ba:	2b1f      	cmp	r3, #31
 80063bc:	d9c5      	bls.n	800634a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80063be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063c2:	9206      	str	r2, [sp, #24]
 80063c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063c6:	9205      	str	r2, [sp, #20]
 80063c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063ca:	9204      	str	r2, [sp, #16]
 80063cc:	9303      	str	r3, [sp, #12]
 80063ce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80063d2:	9302      	str	r3, [sp, #8]
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	9301      	str	r3, [sp, #4]
 80063d8:	f107 0310 	add.w	r3, r7, #16
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7ff fe53 	bl	8006090 <_ntoa_format>
 80063ea:	4603      	mov	r3, r0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	373c      	adds	r7, #60	; 0x3c
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd90      	pop	{r4, r7, pc}
 80063f4:	0000      	movs	r0, r0
	...

080063f8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80063f8:	b590      	push	{r4, r7, lr}
 80063fa:	b09d      	sub	sp, #116	; 0x74
 80063fc:	af06      	add	r7, sp, #24
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	f04f 0400 	mov.w	r4, #0
 8006412:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8006416:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800641a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800641e:	f7fa fb17 	bl	8000a50 <__aeabi_dcmpeq>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10f      	bne.n	8006448 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8006428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800642a:	9303      	str	r3, [sp, #12]
 800642c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800642e:	9302      	str	r3, [sp, #8]
 8006430:	2303      	movs	r3, #3
 8006432:	9301      	str	r3, [sp, #4]
 8006434:	4bac      	ldr	r3, [pc, #688]	; (80066e8 <_ftoa+0x2f0>)
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff fdd6 	bl	8005ff0 <_out_rev>
 8006444:	4603      	mov	r3, r0
 8006446:	e234      	b.n	80068b2 <_ftoa+0x4ba>
  if (value < -DBL_MAX)
 8006448:	f04f 32ff 	mov.w	r2, #4294967295
 800644c:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8006450:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006454:	f7fa fb06 	bl	8000a64 <__aeabi_dcmplt>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00f      	beq.n	800647e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800645e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006460:	9303      	str	r3, [sp, #12]
 8006462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006464:	9302      	str	r3, [sp, #8]
 8006466:	2304      	movs	r3, #4
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	4ba0      	ldr	r3, [pc, #640]	; (80066ec <_ftoa+0x2f4>)
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff fdbb 	bl	8005ff0 <_out_rev>
 800647a:	4603      	mov	r3, r0
 800647c:	e219      	b.n	80068b2 <_ftoa+0x4ba>
  if (value > DBL_MAX)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	4b9b      	ldr	r3, [pc, #620]	; (80066f0 <_ftoa+0x2f8>)
 8006484:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006488:	f7fa fb0a 	bl	8000aa0 <__aeabi_dcmpgt>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01d      	beq.n	80064ce <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8006492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <_ftoa+0xa8>
 800649c:	4b95      	ldr	r3, [pc, #596]	; (80066f4 <_ftoa+0x2fc>)
 800649e:	e000      	b.n	80064a2 <_ftoa+0xaa>
 80064a0:	4b95      	ldr	r3, [pc, #596]	; (80066f8 <_ftoa+0x300>)
 80064a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064a4:	f002 0204 	and.w	r2, r2, #4
 80064a8:	2a00      	cmp	r2, #0
 80064aa:	d001      	beq.n	80064b0 <_ftoa+0xb8>
 80064ac:	2204      	movs	r2, #4
 80064ae:	e000      	b.n	80064b2 <_ftoa+0xba>
 80064b0:	2203      	movs	r2, #3
 80064b2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80064b4:	9103      	str	r1, [sp, #12]
 80064b6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80064b8:	9102      	str	r1, [sp, #8]
 80064ba:	9201      	str	r2, [sp, #4]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff fd93 	bl	8005ff0 <_out_rev>
 80064ca:	4603      	mov	r3, r0
 80064cc:	e1f1      	b.n	80068b2 <_ftoa+0x4ba>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80064ce:	a382      	add	r3, pc, #520	; (adr r3, 80066d8 <_ftoa+0x2e0>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064d8:	f7fa fae2 	bl	8000aa0 <__aeabi_dcmpgt>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <_ftoa+0xfe>
 80064e2:	a37f      	add	r3, pc, #508	; (adr r3, 80066e0 <_ftoa+0x2e8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064ec:	f7fa faba 	bl	8000a64 <__aeabi_dcmplt>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d011      	beq.n	800651a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80064f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064fc:	9303      	str	r3, [sp, #12]
 80064fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006506:	e88d 0018 	stmia.w	sp, {r3, r4}
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f9d9 	bl	80068c8 <_etoa>
 8006516:	4603      	mov	r3, r0
 8006518:	e1cb      	b.n	80068b2 <_ftoa+0x4ba>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800651a:	2300      	movs	r3, #0
 800651c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800652c:	f7fa fa9a 	bl	8000a64 <__aeabi_dcmplt>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00e      	beq.n	8006554 <_ftoa+0x15c>
    negative = true;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 800653c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006540:	f04f 0000 	mov.w	r0, #0
 8006544:	f04f 0100 	mov.w	r1, #0
 8006548:	f7f9 fe66 	bl	8000218 <__aeabi_dsub>
 800654c:	4603      	mov	r3, r0
 800654e:	460c      	mov	r4, r1
 8006550:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8006554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10e      	bne.n	800657c <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800655e:	2306      	movs	r3, #6
 8006560:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8006562:	e00b      	b.n	800657c <_ftoa+0x184>
    buf[len++] = '0';
 8006564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	657a      	str	r2, [r7, #84]	; 0x54
 800656a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800656e:	4413      	add	r3, r2
 8006570:	2230      	movs	r2, #48	; 0x30
 8006572:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8006576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006578:	3b01      	subs	r3, #1
 800657a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800657c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800657e:	2b1f      	cmp	r3, #31
 8006580:	d802      	bhi.n	8006588 <_ftoa+0x190>
 8006582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006584:	2b09      	cmp	r3, #9
 8006586:	d8ed      	bhi.n	8006564 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8006588:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800658c:	f7fa fa92 	bl	8000ab4 <__aeabi_d2iz>
 8006590:	4603      	mov	r3, r0
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8006594:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006596:	f7f9 ff8d 	bl	80004b4 <__aeabi_i2d>
 800659a:	4603      	mov	r3, r0
 800659c:	460c      	mov	r4, r1
 800659e:	461a      	mov	r2, r3
 80065a0:	4623      	mov	r3, r4
 80065a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065a6:	f7f9 fe37 	bl	8000218 <__aeabi_dsub>
 80065aa:	4603      	mov	r3, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	4618      	mov	r0, r3
 80065b0:	4621      	mov	r1, r4
 80065b2:	4a52      	ldr	r2, [pc, #328]	; (80066fc <_ftoa+0x304>)
 80065b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	4413      	add	r3, r2
 80065ba:	cb18      	ldmia	r3, {r3, r4}
 80065bc:	461a      	mov	r2, r3
 80065be:	4623      	mov	r3, r4
 80065c0:	f7f9 ffde 	bl	8000580 <__aeabi_dmul>
 80065c4:	4603      	mov	r3, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 80065cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80065d0:	f7fa fa98 	bl	8000b04 <__aeabi_d2uiz>
 80065d4:	4603      	mov	r3, r0
 80065d6:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 80065d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80065da:	f7f9 ff5b 	bl	8000494 <__aeabi_ui2d>
 80065de:	4603      	mov	r3, r0
 80065e0:	460c      	mov	r4, r1
 80065e2:	461a      	mov	r2, r3
 80065e4:	4623      	mov	r3, r4
 80065e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80065ea:	f7f9 fe15 	bl	8000218 <__aeabi_dsub>
 80065ee:	4603      	mov	r3, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  if (diff > 0.5) {
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	4b41      	ldr	r3, [pc, #260]	; (8006700 <_ftoa+0x308>)
 80065fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006600:	f7fa fa4e 	bl	8000aa0 <__aeabi_dcmpgt>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d017      	beq.n	800663a <_ftoa+0x242>
    ++frac;
 800660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660c:	3301      	adds	r3, #1
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8006610:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006612:	f7f9 ff3f 	bl	8000494 <__aeabi_ui2d>
 8006616:	4a39      	ldr	r2, [pc, #228]	; (80066fc <_ftoa+0x304>)
 8006618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	cb18      	ldmia	r3, {r3, r4}
 8006620:	461a      	mov	r2, r3
 8006622:	4623      	mov	r3, r4
 8006624:	f7fa fa32 	bl	8000a8c <__aeabi_dcmpge>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d01a      	beq.n	8006664 <_ftoa+0x26c>
      frac = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 8006632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006634:	3301      	adds	r3, #1
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006638:	e014      	b.n	8006664 <_ftoa+0x26c>
    }
  }
  else if (diff < 0.5) {
 800663a:	f04f 0200 	mov.w	r2, #0
 800663e:	4b30      	ldr	r3, [pc, #192]	; (8006700 <_ftoa+0x308>)
 8006640:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006644:	f7fa fa0e 	bl	8000a64 <__aeabi_dcmplt>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <_ftoa+0x26c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <_ftoa+0x266>
 8006654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <_ftoa+0x26c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800665e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006660:	3301      	adds	r3, #1
 8006662:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8006664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006666:	2b00      	cmp	r3, #0
 8006668:	d14c      	bne.n	8006704 <_ftoa+0x30c>
    diff = value - (double)whole;
 800666a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800666c:	f7f9 ff22 	bl	80004b4 <__aeabi_i2d>
 8006670:	4603      	mov	r3, r0
 8006672:	460c      	mov	r4, r1
 8006674:	461a      	mov	r2, r3
 8006676:	4623      	mov	r3, r4
 8006678:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800667c:	f7f9 fdcc 	bl	8000218 <__aeabi_dsub>
 8006680:	4603      	mov	r3, r0
 8006682:	460c      	mov	r4, r1
 8006684:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8006688:	2301      	movs	r3, #1
 800668a:	461c      	mov	r4, r3
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <_ftoa+0x308>)
 8006692:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006696:	f7fa f9e5 	bl	8000a64 <__aeabi_dcmplt>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <_ftoa+0x2ac>
 80066a0:	2300      	movs	r3, #0
 80066a2:	461c      	mov	r4, r3
 80066a4:	b2e3      	uxtb	r3, r4
 80066a6:	f083 0301 	eor.w	r3, r3, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d109      	bne.n	80066c4 <_ftoa+0x2cc>
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	4b12      	ldr	r3, [pc, #72]	; (8006700 <_ftoa+0x308>)
 80066b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80066ba:	f7fa f9f1 	bl	8000aa0 <__aeabi_dcmpgt>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d066      	beq.n	8006792 <_ftoa+0x39a>
 80066c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8084 	beq.w	80067d8 <_ftoa+0x3e0>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80066d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d2:	3301      	adds	r3, #1
 80066d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d6:	e07f      	b.n	80067d8 <_ftoa+0x3e0>
 80066d8:	00000000 	.word	0x00000000
 80066dc:	41cdcd65 	.word	0x41cdcd65
 80066e0:	00000000 	.word	0x00000000
 80066e4:	c1cdcd65 	.word	0xc1cdcd65
 80066e8:	0800850c 	.word	0x0800850c
 80066ec:	08008510 	.word	0x08008510
 80066f0:	7fefffff 	.word	0x7fefffff
 80066f4:	08008518 	.word	0x08008518
 80066f8:	08008520 	.word	0x08008520
 80066fc:	08008528 	.word	0x08008528
 8006700:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8006704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006706:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006708:	e020      	b.n	800674c <_ftoa+0x354>
      --count;
 800670a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670c:	3b01      	subs	r3, #1
 800670e:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8006710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006712:	1c4b      	adds	r3, r1, #1
 8006714:	657b      	str	r3, [r7, #84]	; 0x54
 8006716:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006718:	4b68      	ldr	r3, [pc, #416]	; (80068bc <_ftoa+0x4c4>)
 800671a:	fba3 2300 	umull	r2, r3, r3, r0
 800671e:	08da      	lsrs	r2, r3, #3
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	1ac2      	subs	r2, r0, r3
 800672a:	b2d3      	uxtb	r3, r2
 800672c:	3330      	adds	r3, #48	; 0x30
 800672e:	b2da      	uxtb	r2, r3
 8006730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006734:	440b      	add	r3, r1
 8006736:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800673a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673c:	4a5f      	ldr	r2, [pc, #380]	; (80068bc <_ftoa+0x4c4>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	08db      	lsrs	r3, r3, #3
 8006744:	64bb      	str	r3, [r7, #72]	; 0x48
 8006746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <_ftoa+0x35c>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800674c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800674e:	2b1f      	cmp	r3, #31
 8006750:	d9db      	bls.n	800670a <_ftoa+0x312>
 8006752:	e00a      	b.n	800676a <_ftoa+0x372>
        break;
 8006754:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8006756:	e008      	b.n	800676a <_ftoa+0x372>
      buf[len++] = '0';
 8006758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	657a      	str	r2, [r7, #84]	; 0x54
 800675e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006762:	4413      	add	r3, r2
 8006764:	2230      	movs	r2, #48	; 0x30
 8006766:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800676a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800676c:	2b1f      	cmp	r3, #31
 800676e:	d804      	bhi.n	800677a <_ftoa+0x382>
 8006770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006772:	1e5a      	subs	r2, r3, #1
 8006774:	647a      	str	r2, [r7, #68]	; 0x44
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1ee      	bne.n	8006758 <_ftoa+0x360>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800677a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800677c:	2b1f      	cmp	r3, #31
 800677e:	d82b      	bhi.n	80067d8 <_ftoa+0x3e0>
      // add decimal
      buf[len++] = '.';
 8006780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	657a      	str	r2, [r7, #84]	; 0x54
 8006786:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800678a:	4413      	add	r3, r2
 800678c:	222e      	movs	r2, #46	; 0x2e
 800678e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006792:	e021      	b.n	80067d8 <_ftoa+0x3e0>
    buf[len++] = (char)(48 + (whole % 10));
 8006794:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	657b      	str	r3, [r7, #84]	; 0x54
 800679a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800679c:	4b48      	ldr	r3, [pc, #288]	; (80068c0 <_ftoa+0x4c8>)
 800679e:	fb83 1302 	smull	r1, r3, r3, r2
 80067a2:	1099      	asrs	r1, r3, #2
 80067a4:	17d3      	asrs	r3, r2, #31
 80067a6:	1ac9      	subs	r1, r1, r3
 80067a8:	460b      	mov	r3, r1
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	1ad1      	subs	r1, r2, r3
 80067b2:	b2cb      	uxtb	r3, r1
 80067b4:	3330      	adds	r3, #48	; 0x30
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80067bc:	4403      	add	r3, r0
 80067be:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80067c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c4:	4a3e      	ldr	r2, [pc, #248]	; (80068c0 <_ftoa+0x4c8>)
 80067c6:	fb82 1203 	smull	r1, r2, r2, r3
 80067ca:	1092      	asrs	r2, r2, #2
 80067cc:	17db      	asrs	r3, r3, #31
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <_ftoa+0x3e8>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80067d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067da:	2b1f      	cmp	r3, #31
 80067dc:	d9da      	bls.n	8006794 <_ftoa+0x39c>
 80067de:	e000      	b.n	80067e2 <_ftoa+0x3ea>
      break;
 80067e0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80067e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d124      	bne.n	8006836 <_ftoa+0x43e>
 80067ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d01f      	beq.n	8006836 <_ftoa+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80067f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d015      	beq.n	8006828 <_ftoa+0x430>
 80067fc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <_ftoa+0x416>
 8006804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006806:	f003 030c 	and.w	r3, r3, #12
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <_ftoa+0x430>
      width--;
 800680e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006810:	3b01      	subs	r3, #1
 8006812:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8006814:	e008      	b.n	8006828 <_ftoa+0x430>
      buf[len++] = '0';
 8006816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	657a      	str	r2, [r7, #84]	; 0x54
 800681c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006820:	4413      	add	r3, r2
 8006822:	2230      	movs	r2, #48	; 0x30
 8006824:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8006828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800682a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800682c:	429a      	cmp	r2, r3
 800682e:	d202      	bcs.n	8006836 <_ftoa+0x43e>
 8006830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006832:	2b1f      	cmp	r3, #31
 8006834:	d9ef      	bls.n	8006816 <_ftoa+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006838:	2b1f      	cmp	r3, #31
 800683a:	d82a      	bhi.n	8006892 <_ftoa+0x49a>
    if (negative) {
 800683c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <_ftoa+0x460>
      buf[len++] = '-';
 8006844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	657a      	str	r2, [r7, #84]	; 0x54
 800684a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800684e:	4413      	add	r3, r2
 8006850:	222d      	movs	r2, #45	; 0x2d
 8006852:	f803 2c48 	strb.w	r2, [r3, #-72]
 8006856:	e01c      	b.n	8006892 <_ftoa+0x49a>
    }
    else if (flags & FLAGS_PLUS) {
 8006858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <_ftoa+0x47e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8006862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	657a      	str	r2, [r7, #84]	; 0x54
 8006868:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800686c:	4413      	add	r3, r2
 800686e:	222b      	movs	r2, #43	; 0x2b
 8006870:	f803 2c48 	strb.w	r2, [r3, #-72]
 8006874:	e00d      	b.n	8006892 <_ftoa+0x49a>
    }
    else if (flags & FLAGS_SPACE) {
 8006876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <_ftoa+0x49a>
      buf[len++] = ' ';
 8006880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	657a      	str	r2, [r7, #84]	; 0x54
 8006886:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800688a:	4413      	add	r3, r2
 800688c:	2220      	movs	r2, #32
 800688e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8006892:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006898:	9302      	str	r3, [sp, #8]
 800689a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	f107 0310 	add.w	r3, r7, #16
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff fba0 	bl	8005ff0 <_out_rev>
 80068b0:	4603      	mov	r3, r0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	375c      	adds	r7, #92	; 0x5c
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd90      	pop	{r4, r7, pc}
 80068ba:	bf00      	nop
 80068bc:	cccccccd 	.word	0xcccccccd
 80068c0:	66666667 	.word	0x66666667
 80068c4:	00000000 	.word	0x00000000

080068c8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	b09b      	sub	sp, #108	; 0x6c
 80068ce:	af06      	add	r7, sp, #24
 80068d0:	6178      	str	r0, [r7, #20]
 80068d2:	6139      	str	r1, [r7, #16]
 80068d4:	60fa      	str	r2, [r7, #12]
 80068d6:	60bb      	str	r3, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80068d8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80068dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80068e0:	f7fa f8b6 	bl	8000a50 <__aeabi_dcmpeq>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d014      	beq.n	8006914 <_etoa+0x4c>
 80068ea:	f04f 32ff 	mov.w	r2, #4294967295
 80068ee:	4bc0      	ldr	r3, [pc, #768]	; (8006bf0 <_etoa+0x328>)
 80068f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80068f4:	f7fa f8d4 	bl	8000aa0 <__aeabi_dcmpgt>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <_etoa+0x4c>
 80068fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006902:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8006906:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800690a:	f7fa f8ab 	bl	8000a64 <__aeabi_dcmplt>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d014      	beq.n	800693e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8006914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800691e:	9303      	str	r3, [sp, #12]
 8006920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006924:	9302      	str	r3, [sp, #8]
 8006926:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800692a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	6939      	ldr	r1, [r7, #16]
 8006934:	6978      	ldr	r0, [r7, #20]
 8006936:	f7ff fd5f 	bl	80063f8 <_ftoa>
 800693a:	4603      	mov	r3, r0
 800693c:	e241      	b.n	8006dc2 <_etoa+0x4fa>
  }

  // determine the sign
  const bool negative = value < 0;
 800693e:	2301      	movs	r3, #1
 8006940:	461e      	mov	r6, r3
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800694e:	f7fa f889 	bl	8000a64 <__aeabi_dcmplt>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <_etoa+0x94>
 8006958:	2300      	movs	r3, #0
 800695a:	461e      	mov	r6, r3
 800695c:	f887 6043 	strb.w	r6, [r7, #67]	; 0x43
  if (negative) {
 8006960:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006964:	2b00      	cmp	r3, #0
 8006966:	d005      	beq.n	8006974 <_etoa+0xac>
    value = -value;
 8006968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800696a:	67bb      	str	r3, [r7, #120]	; 0x78
 800696c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800696e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006972:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8006974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8006980:	2306      	movs	r3, #6
 8006982:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8006986:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800698a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800698e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006992:	ea4f 5813 	mov.w	r8, r3, lsr #20
 8006996:	f04f 0900 	mov.w	r9, #0
 800699a:	4643      	mov	r3, r8
 800699c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80069a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295
 80069ae:	4991      	ldr	r1, [pc, #580]	; (8006bf4 <_etoa+0x32c>)
 80069b0:	ea02 0200 	and.w	r2, r2, r0
 80069b4:	ea03 0301 	and.w	r3, r3, r1
 80069b8:	f04f 0000 	mov.w	r0, #0
 80069bc:	498e      	ldr	r1, [pc, #568]	; (8006bf8 <_etoa+0x330>)
 80069be:	ea42 0200 	orr.w	r2, r2, r0
 80069c2:	ea43 0301 	orr.w	r3, r3, r1
 80069c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80069ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80069cc:	f7f9 fd72 	bl	80004b4 <__aeabi_i2d>
 80069d0:	a37b      	add	r3, pc, #492	; (adr r3, 8006bc0 <_etoa+0x2f8>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fdd3 	bl	8000580 <__aeabi_dmul>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4610      	mov	r0, r2
 80069e0:	4619      	mov	r1, r3
 80069e2:	a379      	add	r3, pc, #484	; (adr r3, 8006bc8 <_etoa+0x300>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fc18 	bl	800021c <__adddf3>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4690      	mov	r8, r2
 80069f2:	4699      	mov	r9, r3
 80069f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	4b7f      	ldr	r3, [pc, #508]	; (8006bfc <_etoa+0x334>)
 80069fe:	f7f9 fc0b 	bl	8000218 <__aeabi_dsub>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4610      	mov	r0, r2
 8006a08:	4619      	mov	r1, r3
 8006a0a:	a371      	add	r3, pc, #452	; (adr r3, 8006bd0 <_etoa+0x308>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fdb6 	bl	8000580 <__aeabi_dmul>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7f9 fbfe 	bl	800021c <__adddf3>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4610      	mov	r0, r2
 8006a26:	4619      	mov	r1, r3
 8006a28:	f7fa f844 	bl	8000ab4 <__aeabi_d2iz>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8006a30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006a32:	f7f9 fd3f 	bl	80004b4 <__aeabi_i2d>
 8006a36:	a368      	add	r3, pc, #416	; (adr r3, 8006bd8 <_etoa+0x310>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f7f9 fda0 	bl	8000580 <__aeabi_dmul>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4610      	mov	r0, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <_etoa+0x338>)
 8006a4e:	f7f9 fbe5 	bl	800021c <__adddf3>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f7fa f82b 	bl	8000ab4 <__aeabi_d2iz>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8006a62:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006a64:	f7f9 fd26 	bl	80004b4 <__aeabi_i2d>
 8006a68:	a35d      	add	r3, pc, #372	; (adr r3, 8006be0 <_etoa+0x318>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7f9 fd87 	bl	8000580 <__aeabi_dmul>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4690      	mov	r8, r2
 8006a78:	4699      	mov	r9, r3
 8006a7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a7c:	f7f9 fd1a 	bl	80004b4 <__aeabi_i2d>
 8006a80:	a359      	add	r3, pc, #356	; (adr r3, 8006be8 <_etoa+0x320>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fd7b 	bl	8000580 <__aeabi_dmul>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7f9 fbc1 	bl	8000218 <__aeabi_dsub>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  const double z2 = z * z;
 8006a9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006aa2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006aa6:	f7f9 fd6b 	bl	8000580 <__aeabi_dmul>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8006ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006ab8:	461a      	mov	r2, r3
 8006aba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006abe:	0515      	lsls	r5, r2, #20
 8006ac0:	2400      	movs	r4, #0
 8006ac2:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8006ac6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8006aca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	f7f9 fba3 	bl	800021c <__adddf3>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4690      	mov	r8, r2
 8006adc:	4699      	mov	r9, r3
 8006ade:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006aea:	f7f9 fb95 	bl	8000218 <__aeabi_dsub>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4692      	mov	sl, r2
 8006af4:	469b      	mov	fp, r3
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	4b42      	ldr	r3, [pc, #264]	; (8006c04 <_etoa+0x33c>)
 8006afc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b00:	f7f9 fe68 	bl	80007d4 <__aeabi_ddiv>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	4b3d      	ldr	r3, [pc, #244]	; (8006c08 <_etoa+0x340>)
 8006b12:	f7f9 fb83 	bl	800021c <__adddf3>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b1e:	f7f9 fe59 	bl	80007d4 <__aeabi_ddiv>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	4610      	mov	r0, r2
 8006b28:	4619      	mov	r1, r3
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	4b37      	ldr	r3, [pc, #220]	; (8006c0c <_etoa+0x344>)
 8006b30:	f7f9 fb74 	bl	800021c <__adddf3>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b3c:	f7f9 fe4a 	bl	80007d4 <__aeabi_ddiv>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4650      	mov	r0, sl
 8006b46:	4659      	mov	r1, fp
 8006b48:	f7f9 fb68 	bl	800021c <__adddf3>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4640      	mov	r0, r8
 8006b52:	4649      	mov	r1, r9
 8006b54:	f7f9 fe3e 	bl	80007d4 <__aeabi_ddiv>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <_etoa+0x330>)
 8006b66:	f7f9 fb59 	bl	800021c <__adddf3>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4620      	mov	r0, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7f9 fd05 	bl	8000580 <__aeabi_dmul>
 8006b76:	4603      	mov	r3, r0
 8006b78:	460c      	mov	r4, r1
 8006b7a:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8006b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b82:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006b86:	f7f9 ff8b 	bl	8000aa0 <__aeabi_dcmpgt>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00d      	beq.n	8006bac <_etoa+0x2e4>
    expval--;
 8006b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b92:	3b01      	subs	r3, #1
 8006b94:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 8006b96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	4b1a      	ldr	r3, [pc, #104]	; (8006c08 <_etoa+0x340>)
 8006ba0:	f7f9 fe18 	bl	80007d4 <__aeabi_ddiv>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8006bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bae:	2b63      	cmp	r3, #99	; 0x63
 8006bb0:	dc2e      	bgt.n	8006c10 <_etoa+0x348>
 8006bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8006bb8:	db2a      	blt.n	8006c10 <_etoa+0x348>
 8006bba:	2304      	movs	r3, #4
 8006bbc:	e029      	b.n	8006c12 <_etoa+0x34a>
 8006bbe:	bf00      	nop
 8006bc0:	509f79fb 	.word	0x509f79fb
 8006bc4:	3fd34413 	.word	0x3fd34413
 8006bc8:	8b60c8b3 	.word	0x8b60c8b3
 8006bcc:	3fc68a28 	.word	0x3fc68a28
 8006bd0:	636f4361 	.word	0x636f4361
 8006bd4:	3fd287a7 	.word	0x3fd287a7
 8006bd8:	0979a371 	.word	0x0979a371
 8006bdc:	400a934f 	.word	0x400a934f
 8006be0:	bbb55516 	.word	0xbbb55516
 8006be4:	40026bb1 	.word	0x40026bb1
 8006be8:	fefa39ef 	.word	0xfefa39ef
 8006bec:	3fe62e42 	.word	0x3fe62e42
 8006bf0:	7fefffff 	.word	0x7fefffff
 8006bf4:	000fffff 	.word	0x000fffff
 8006bf8:	3ff00000 	.word	0x3ff00000
 8006bfc:	3ff80000 	.word	0x3ff80000
 8006c00:	3fe00000 	.word	0x3fe00000
 8006c04:	402c0000 	.word	0x402c0000
 8006c08:	40240000 	.word	0x40240000
 8006c0c:	40180000 	.word	0x40180000
 8006c10:	2305      	movs	r3, #5
 8006c12:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8006c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d03d      	beq.n	8006c9c <_etoa+0x3d4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8006c20:	a36b      	add	r3, pc, #428	; (adr r3, 8006dd0 <_etoa+0x508>)
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006c2a:	f7f9 ff2f 	bl	8000a8c <__aeabi_dcmpge>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d024      	beq.n	8006c7e <_etoa+0x3b6>
 8006c34:	a368      	add	r3, pc, #416	; (adr r3, 8006dd8 <_etoa+0x510>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006c3e:	f7f9 ff11 	bl	8000a64 <__aeabi_dcmplt>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01a      	beq.n	8006c7e <_etoa+0x3b6>
      if ((int)prec > expval) {
 8006c48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	dd07      	ble.n	8006c62 <_etoa+0x39a>
        prec = (unsigned)((int)prec - expval - 1);
 8006c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c60:	e002      	b.n	8006c68 <_etoa+0x3a0>
      }
      else {
        prec = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8006c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c7c:	e00e      	b.n	8006c9c <_etoa+0x3d4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8006c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <_etoa+0x3d4>
 8006c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <_etoa+0x3d4>
        --prec;
 8006c92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c96:	3b01      	subs	r3, #1
 8006c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8006c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ca0:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 8006ca2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d904      	bls.n	8006cb6 <_etoa+0x3ee>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8006cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb4:	e001      	b.n	8006cba <_etoa+0x3f2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8006cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <_etoa+0x408>
 8006cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <_etoa+0x408>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00b      	beq.n	8006cee <_etoa+0x426>
    value /= conv.F;
 8006cd6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4623      	mov	r3, r4
 8006cde:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006ce2:	f7f9 fd77 	bl	80007d4 <__aeabi_ddiv>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
  }

  // output the floating part
  const size_t start_idx = idx;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8006cf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d006      	beq.n	8006d08 <_etoa+0x440>
 8006cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	e003      	b.n	8006d10 <_etoa+0x448>
 8006d08:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006d0c:	e887 0018 	stmia.w	r7, {r3, r4}
 8006d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1c:	9303      	str	r3, [sp, #12]
 8006d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d22:	9302      	str	r3, [sp, #8]
 8006d24:	e897 0018 	ldmia.w	r7, {r3, r4}
 8006d28:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	6939      	ldr	r1, [r7, #16]
 8006d32:	6978      	ldr	r0, [r7, #20]
 8006d34:	f7ff fb60 	bl	80063f8 <_ftoa>
 8006d38:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 8006d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d03f      	beq.n	8006dc0 <_etoa+0x4f8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8006d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <_etoa+0x488>
 8006d4c:	2045      	movs	r0, #69	; 0x45
 8006d4e:	e000      	b.n	8006d52 <_etoa+0x48a>
 8006d50:	2065      	movs	r0, #101	; 0x65
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	1c53      	adds	r3, r2, #1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	697c      	ldr	r4, [r7, #20]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6939      	ldr	r1, [r7, #16]
 8006d5e:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8006d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bfb8      	it	lt
 8006d66:	425b      	neglt	r3, r3
 8006d68:	4618      	mov	r0, r3
 8006d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6c:	0fdb      	lsrs	r3, r3, #31
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d72:	3a01      	subs	r2, #1
 8006d74:	2105      	movs	r1, #5
 8006d76:	9105      	str	r1, [sp, #20]
 8006d78:	9204      	str	r2, [sp, #16]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	9203      	str	r2, [sp, #12]
 8006d7e:	220a      	movs	r2, #10
 8006d80:	9202      	str	r2, [sp, #8]
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	9000      	str	r0, [sp, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	6939      	ldr	r1, [r7, #16]
 8006d8c:	6978      	ldr	r0, [r7, #20]
 8006d8e:	f7ff fa5b 	bl	8006248 <_ntoa_long>
 8006d92:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8006d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00f      	beq.n	8006dc0 <_etoa+0x4f8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8006da0:	e007      	b.n	8006db2 <_etoa+0x4ea>
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	1c53      	adds	r3, r2, #1
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	697c      	ldr	r4, [r7, #20]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6939      	ldr	r1, [r7, #16]
 8006dae:	2020      	movs	r0, #32
 8006db0:	47a0      	blx	r4
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d3f0      	bcc.n	8006da2 <_etoa+0x4da>
    }
  }
  return idx;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3754      	adds	r7, #84	; 0x54
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dcc:	f3af 8000 	nop.w
 8006dd0:	eb1c432d 	.word	0xeb1c432d
 8006dd4:	3f1a36e2 	.word	0x3f1a36e2
 8006dd8:	00000000 	.word	0x00000000
 8006ddc:	412e8480 	.word	0x412e8480

08006de0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8006de0:	b5b0      	push	{r4, r5, r7, lr}
 8006de2:	b0a0      	sub	sp, #128	; 0x80
 8006de4:	af0a      	add	r7, sp, #40	; 0x28
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 8488 	bne.w	800770a <_vsnprintf+0x92a>
    // use null output function
    out = _out_null;
 8006dfa:	4ba0      	ldr	r3, [pc, #640]	; (800707c <_vsnprintf+0x29c>)
 8006dfc:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8006dfe:	f000 bc84 	b.w	800770a <_vsnprintf+0x92a>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b25      	cmp	r3, #37	; 0x25
 8006e08:	d00d      	beq.n	8006e26 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	7818      	ldrb	r0, [r3, #0]
 8006e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e10:	1c53      	adds	r3, r2, #1
 8006e12:	647b      	str	r3, [r7, #68]	; 0x44
 8006e14:	68fc      	ldr	r4, [r7, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	47a0      	blx	r4
      format++;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	603b      	str	r3, [r7, #0]
      continue;
 8006e22:	f000 bc72 	b.w	800770a <_vsnprintf+0x92a>
    }
    else {
      // yes, evaluate it
      format++;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	3b20      	subs	r3, #32
 8006e36:	2b10      	cmp	r3, #16
 8006e38:	d856      	bhi.n	8006ee8 <_vsnprintf+0x108>
 8006e3a:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <_vsnprintf+0x60>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006ec1 	.word	0x08006ec1
 8006e44:	08006ee9 	.word	0x08006ee9
 8006e48:	08006ee9 	.word	0x08006ee9
 8006e4c:	08006ed5 	.word	0x08006ed5
 8006e50:	08006ee9 	.word	0x08006ee9
 8006e54:	08006ee9 	.word	0x08006ee9
 8006e58:	08006ee9 	.word	0x08006ee9
 8006e5c:	08006ee9 	.word	0x08006ee9
 8006e60:	08006ee9 	.word	0x08006ee9
 8006e64:	08006ee9 	.word	0x08006ee9
 8006e68:	08006ee9 	.word	0x08006ee9
 8006e6c:	08006ead 	.word	0x08006ead
 8006e70:	08006ee9 	.word	0x08006ee9
 8006e74:	08006e99 	.word	0x08006e99
 8006e78:	08006ee9 	.word	0x08006ee9
 8006e7c:	08006ee9 	.word	0x08006ee9
 8006e80:	08006e85 	.word	0x08006e85
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8006e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	2301      	movs	r3, #1
 8006e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e96:	e02a      	b.n	8006eee <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8006e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9a:	f043 0302 	orr.w	r3, r3, #2
 8006e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eaa:	e020      	b.n	8006eee <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8006eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eae:	f043 0304 	orr.w	r3, r3, #4
 8006eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	2301      	movs	r3, #1
 8006ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ebe:	e016      	b.n	8006eee <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8006ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec2:	f043 0308 	orr.w	r3, r3, #8
 8006ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	2301      	movs	r3, #1
 8006ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ed2:	e00c      	b.n	8006eee <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8006ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed6:	f043 0310 	orr.w	r3, r3, #16
 8006eda:	657b      	str	r3, [r7, #84]	; 0x54
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ee6:	e002      	b.n	8006eee <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eec:	bf00      	nop
      }
    } while (n);
 8006eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d19d      	bne.n	8006e30 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff f83d 	bl	8005f7c <_is_digit>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <_vsnprintf+0x134>
      width = _atoi(&format);
 8006f08:	463b      	mov	r3, r7
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff f84c 	bl	8005fa8 <_atoi>
 8006f10:	6538      	str	r0, [r7, #80]	; 0x50
 8006f12:	e018      	b.n	8006f46 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b2a      	cmp	r3, #42	; 0x2a
 8006f1a:	d114      	bne.n	8006f46 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8006f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f1e:	1d1a      	adds	r2, r3, #4
 8006f20:	66ba      	str	r2, [r7, #104]	; 0x68
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	da07      	bge.n	8006f3c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8006f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f2e:	f043 0302 	orr.w	r3, r3, #2
 8006f32:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	425b      	negs	r3, r3
 8006f38:	653b      	str	r3, [r7, #80]	; 0x50
 8006f3a:	e001      	b.n	8006f40 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f50:	d124      	bne.n	8006f9c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8006f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f58:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff f809 	bl	8005f7c <_is_digit>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8006f70:	463b      	mov	r3, r7
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff f818 	bl	8005fa8 <_atoi>
 8006f78:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006f7a:	e00f      	b.n	8006f9c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b2a      	cmp	r3, #42	; 0x2a
 8006f82:	d10b      	bne.n	8006f9c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8006f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f86:	1d1a      	adds	r2, r3, #4
 8006f88:	66ba      	str	r2, [r7, #104]	; 0x68
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f94:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	3b68      	subs	r3, #104	; 0x68
 8006fa2:	2b12      	cmp	r3, #18
 8006fa4:	d866      	bhi.n	8007074 <_vsnprintf+0x294>
 8006fa6:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <_vsnprintf+0x1cc>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	0800701f 	.word	0x0800701f
 8006fb0:	08007075 	.word	0x08007075
 8006fb4:	08007055 	.word	0x08007055
 8006fb8:	08007075 	.word	0x08007075
 8006fbc:	08006ff9 	.word	0x08006ff9
 8006fc0:	08007075 	.word	0x08007075
 8006fc4:	08007075 	.word	0x08007075
 8006fc8:	08007075 	.word	0x08007075
 8006fcc:	08007075 	.word	0x08007075
 8006fd0:	08007075 	.word	0x08007075
 8006fd4:	08007075 	.word	0x08007075
 8006fd8:	08007075 	.word	0x08007075
 8006fdc:	08007045 	.word	0x08007045
 8006fe0:	08007075 	.word	0x08007075
 8006fe4:	08007075 	.word	0x08007075
 8006fe8:	08007075 	.word	0x08007075
 8006fec:	08007075 	.word	0x08007075
 8006ff0:	08007075 	.word	0x08007075
 8006ff4:	08007065 	.word	0x08007065
      case 'l' :
        flags |= FLAGS_LONG;
 8006ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ffe:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b6c      	cmp	r3, #108	; 0x6c
 800700c:	d134      	bne.n	8007078 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800700e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007014:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	603b      	str	r3, [r7, #0]
        }
        break;
 800701c:	e02c      	b.n	8007078 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800701e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007024:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	3301      	adds	r3, #1
 800702a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b68      	cmp	r3, #104	; 0x68
 8007032:	d125      	bne.n	8007080 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8007034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800703a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	3301      	adds	r3, #1
 8007040:	603b      	str	r3, [r7, #0]
        }
        break;
 8007042:	e01d      	b.n	8007080 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	603b      	str	r3, [r7, #0]
        break;
 8007052:	e016      	b.n	8007082 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800705a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	3301      	adds	r3, #1
 8007060:	603b      	str	r3, [r7, #0]
        break;
 8007062:	e00e      	b.n	8007082 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800706a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	3301      	adds	r3, #1
 8007070:	603b      	str	r3, [r7, #0]
        break;
 8007072:	e006      	b.n	8007082 <_vsnprintf+0x2a2>
      default :
        break;
 8007074:	bf00      	nop
 8007076:	e004      	b.n	8007082 <_vsnprintf+0x2a2>
        break;
 8007078:	bf00      	nop
 800707a:	e002      	b.n	8007082 <_vsnprintf+0x2a2>
 800707c:	08005f05 	.word	0x08005f05
        break;
 8007080:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	3b25      	subs	r3, #37	; 0x25
 8007088:	2b53      	cmp	r3, #83	; 0x53
 800708a:	f200 8331 	bhi.w	80076f0 <_vsnprintf+0x910>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <_vsnprintf+0x2b4>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080076d9 	.word	0x080076d9
 8007098:	080076f1 	.word	0x080076f1
 800709c:	080076f1 	.word	0x080076f1
 80070a0:	080076f1 	.word	0x080076f1
 80070a4:	080076f1 	.word	0x080076f1
 80070a8:	080076f1 	.word	0x080076f1
 80070ac:	080076f1 	.word	0x080076f1
 80070b0:	080076f1 	.word	0x080076f1
 80070b4:	080076f1 	.word	0x080076f1
 80070b8:	080076f1 	.word	0x080076f1
 80070bc:	080076f1 	.word	0x080076f1
 80070c0:	080076f1 	.word	0x080076f1
 80070c4:	080076f1 	.word	0x080076f1
 80070c8:	080076f1 	.word	0x080076f1
 80070cc:	080076f1 	.word	0x080076f1
 80070d0:	080076f1 	.word	0x080076f1
 80070d4:	080076f1 	.word	0x080076f1
 80070d8:	080076f1 	.word	0x080076f1
 80070dc:	080076f1 	.word	0x080076f1
 80070e0:	080076f1 	.word	0x080076f1
 80070e4:	080076f1 	.word	0x080076f1
 80070e8:	080076f1 	.word	0x080076f1
 80070ec:	080076f1 	.word	0x080076f1
 80070f0:	080076f1 	.word	0x080076f1
 80070f4:	080076f1 	.word	0x080076f1
 80070f8:	080076f1 	.word	0x080076f1
 80070fc:	080076f1 	.word	0x080076f1
 8007100:	080076f1 	.word	0x080076f1
 8007104:	080076f1 	.word	0x080076f1
 8007108:	080076f1 	.word	0x080076f1
 800710c:	080076f1 	.word	0x080076f1
 8007110:	080076f1 	.word	0x080076f1
 8007114:	080074b3 	.word	0x080074b3
 8007118:	0800746d 	.word	0x0800746d
 800711c:	080074b3 	.word	0x080074b3
 8007120:	080076f1 	.word	0x080076f1
 8007124:	080076f1 	.word	0x080076f1
 8007128:	080076f1 	.word	0x080076f1
 800712c:	080076f1 	.word	0x080076f1
 8007130:	080076f1 	.word	0x080076f1
 8007134:	080076f1 	.word	0x080076f1
 8007138:	080076f1 	.word	0x080076f1
 800713c:	080076f1 	.word	0x080076f1
 8007140:	080076f1 	.word	0x080076f1
 8007144:	080076f1 	.word	0x080076f1
 8007148:	080076f1 	.word	0x080076f1
 800714c:	080076f1 	.word	0x080076f1
 8007150:	080076f1 	.word	0x080076f1
 8007154:	080076f1 	.word	0x080076f1
 8007158:	080076f1 	.word	0x080076f1
 800715c:	080076f1 	.word	0x080076f1
 8007160:	080071e5 	.word	0x080071e5
 8007164:	080076f1 	.word	0x080076f1
 8007168:	080076f1 	.word	0x080076f1
 800716c:	080076f1 	.word	0x080076f1
 8007170:	080076f1 	.word	0x080076f1
 8007174:	080076f1 	.word	0x080076f1
 8007178:	080076f1 	.word	0x080076f1
 800717c:	080076f1 	.word	0x080076f1
 8007180:	080076f1 	.word	0x080076f1
 8007184:	080076f1 	.word	0x080076f1
 8007188:	080071e5 	.word	0x080071e5
 800718c:	08007519 	.word	0x08007519
 8007190:	080071e5 	.word	0x080071e5
 8007194:	080074b3 	.word	0x080074b3
 8007198:	0800746d 	.word	0x0800746d
 800719c:	080074b3 	.word	0x080074b3
 80071a0:	080076f1 	.word	0x080076f1
 80071a4:	080071e5 	.word	0x080071e5
 80071a8:	080076f1 	.word	0x080076f1
 80071ac:	080076f1 	.word	0x080076f1
 80071b0:	080076f1 	.word	0x080076f1
 80071b4:	080076f1 	.word	0x080076f1
 80071b8:	080076f1 	.word	0x080076f1
 80071bc:	080071e5 	.word	0x080071e5
 80071c0:	08007651 	.word	0x08007651
 80071c4:	080076f1 	.word	0x080076f1
 80071c8:	080076f1 	.word	0x080076f1
 80071cc:	0800758d 	.word	0x0800758d
 80071d0:	080076f1 	.word	0x080076f1
 80071d4:	080071e5 	.word	0x080071e5
 80071d8:	080076f1 	.word	0x080076f1
 80071dc:	080076f1 	.word	0x080076f1
 80071e0:	080071e5 	.word	0x080071e5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b78      	cmp	r3, #120	; 0x78
 80071ea:	d003      	beq.n	80071f4 <_vsnprintf+0x414>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b58      	cmp	r3, #88	; 0x58
 80071f2:	d102      	bne.n	80071fa <_vsnprintf+0x41a>
          base = 16U;
 80071f4:	2310      	movs	r3, #16
 80071f6:	643b      	str	r3, [r7, #64]	; 0x40
 80071f8:	e013      	b.n	8007222 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b6f      	cmp	r3, #111	; 0x6f
 8007200:	d102      	bne.n	8007208 <_vsnprintf+0x428>
          base =  8U;
 8007202:	2308      	movs	r3, #8
 8007204:	643b      	str	r3, [r7, #64]	; 0x40
 8007206:	e00c      	b.n	8007222 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b62      	cmp	r3, #98	; 0x62
 800720e:	d102      	bne.n	8007216 <_vsnprintf+0x436>
          base =  2U;
 8007210:	2302      	movs	r3, #2
 8007212:	643b      	str	r3, [r7, #64]	; 0x40
 8007214:	e005      	b.n	8007222 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8007216:	230a      	movs	r3, #10
 8007218:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800721a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800721c:	f023 0310 	bic.w	r3, r3, #16
 8007220:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b58      	cmp	r3, #88	; 0x58
 8007228:	d103      	bne.n	8007232 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800722a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800722c:	f043 0320 	orr.w	r3, r3, #32
 8007230:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b69      	cmp	r3, #105	; 0x69
 8007238:	d007      	beq.n	800724a <_vsnprintf+0x46a>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b64      	cmp	r3, #100	; 0x64
 8007240:	d003      	beq.n	800724a <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8007242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007244:	f023 030c 	bic.w	r3, r3, #12
 8007248:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800724a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800724c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8007254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b69      	cmp	r3, #105	; 0x69
 8007262:	d004      	beq.n	800726e <_vsnprintf+0x48e>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b64      	cmp	r3, #100	; 0x64
 800726a:	f040 808c 	bne.w	8007386 <_vsnprintf+0x5a6>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800726e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007274:	2b00      	cmp	r3, #0
 8007276:	d02d      	beq.n	80072d4 <_vsnprintf+0x4f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8007278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800727a:	3307      	adds	r3, #7
 800727c:	f023 0307 	bic.w	r3, r3, #7
 8007280:	f103 0208 	add.w	r2, r3, #8
 8007284:	66ba      	str	r2, [r7, #104]	; 0x68
 8007286:	cb18      	ldmia	r3, {r3, r4}
 8007288:	e9c7 3408 	strd	r3, r4, [r7, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800728c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f174 0200 	sbcs.w	r2, r4, #0
 8007296:	da02      	bge.n	800729e <_vsnprintf+0x4be>
 8007298:	425b      	negs	r3, r3
 800729a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800729e:	4619      	mov	r1, r3
 80072a0:	4622      	mov	r2, r4
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	0fdb      	lsrs	r3, r3, #31
 80072a6:	b2d8      	uxtb	r0, r3
 80072a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072aa:	f04f 0400 	mov.w	r4, #0
 80072ae:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80072b0:	9508      	str	r5, [sp, #32]
 80072b2:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80072b4:	9507      	str	r5, [sp, #28]
 80072b6:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80072b8:	9506      	str	r5, [sp, #24]
 80072ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072be:	9002      	str	r0, [sp, #8]
 80072c0:	e88d 0006 	stmia.w	sp, {r1, r2}
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff f823 	bl	8006316 <_ntoa_long_long>
 80072d0:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80072d2:	e0c7      	b.n	8007464 <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80072d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01e      	beq.n	800731c <_vsnprintf+0x53c>
            const long value = va_arg(va, long);
 80072de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072e0:	1d1a      	adds	r2, r3, #4
 80072e2:	66ba      	str	r2, [r7, #104]	; 0x68
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bfb8      	it	lt
 80072ee:	425b      	neglt	r3, r3
 80072f0:	4619      	mov	r1, r3
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	0fdb      	lsrs	r3, r3, #31
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072fa:	9205      	str	r2, [sp, #20]
 80072fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072fe:	9204      	str	r2, [sp, #16]
 8007300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007302:	9203      	str	r2, [sp, #12]
 8007304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007306:	9202      	str	r2, [sp, #8]
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	9100      	str	r1, [sp, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7fe ff98 	bl	8006248 <_ntoa_long>
 8007318:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800731a:	e0a3      	b.n	8007464 <_vsnprintf+0x684>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800731c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800731e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <_vsnprintf+0x552>
 8007326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007328:	1d1a      	adds	r2, r3, #4
 800732a:	66ba      	str	r2, [r7, #104]	; 0x68
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	e00e      	b.n	8007350 <_vsnprintf+0x570>
 8007332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <_vsnprintf+0x568>
 800733c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800733e:	1d1a      	adds	r2, r3, #4
 8007340:	66ba      	str	r2, [r7, #104]	; 0x68
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	b21b      	sxth	r3, r3
 8007346:	e003      	b.n	8007350 <_vsnprintf+0x570>
 8007348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	66ba      	str	r2, [r7, #104]	; 0x68
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	bfb8      	it	lt
 8007358:	425b      	neglt	r3, r3
 800735a:	4619      	mov	r1, r3
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	0fdb      	lsrs	r3, r3, #31
 8007360:	b2db      	uxtb	r3, r3
 8007362:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007364:	9205      	str	r2, [sp, #20]
 8007366:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007368:	9204      	str	r2, [sp, #16]
 800736a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800736c:	9203      	str	r2, [sp, #12]
 800736e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007370:	9202      	str	r2, [sp, #8]
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	9100      	str	r1, [sp, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7fe ff63 	bl	8006248 <_ntoa_long>
 8007382:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8007384:	e06e      	b.n	8007464 <_vsnprintf+0x684>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8007386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01f      	beq.n	80073d0 <_vsnprintf+0x5f0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8007390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007392:	3307      	adds	r3, #7
 8007394:	f023 0307 	bic.w	r3, r3, #7
 8007398:	f103 0208 	add.w	r2, r3, #8
 800739c:	66ba      	str	r2, [r7, #104]	; 0x68
 800739e:	cb18      	ldmia	r3, {r3, r4}
 80073a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073a2:	4611      	mov	r1, r2
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80073aa:	9008      	str	r0, [sp, #32]
 80073ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80073ae:	9007      	str	r0, [sp, #28]
 80073b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80073b2:	9006      	str	r0, [sp, #24]
 80073b4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80073b8:	2200      	movs	r2, #0
 80073ba:	9202      	str	r2, [sp, #8]
 80073bc:	e88d 0018 	stmia.w	sp, {r3, r4}
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073c4:	68b9      	ldr	r1, [r7, #8]
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f7fe ffa5 	bl	8006316 <_ntoa_long_long>
 80073cc:	6478      	str	r0, [r7, #68]	; 0x44
 80073ce:	e049      	b.n	8007464 <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80073d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d016      	beq.n	8007408 <_vsnprintf+0x628>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80073da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073dc:	1d1a      	adds	r2, r3, #4
 80073de:	66ba      	str	r2, [r7, #104]	; 0x68
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073e4:	9205      	str	r2, [sp, #20]
 80073e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073e8:	9204      	str	r2, [sp, #16]
 80073ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073ec:	9203      	str	r2, [sp, #12]
 80073ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073f0:	9202      	str	r2, [sp, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	9201      	str	r2, [sp, #4]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7fe ff22 	bl	8006248 <_ntoa_long>
 8007404:	6478      	str	r0, [r7, #68]	; 0x44
 8007406:	e02d      	b.n	8007464 <_vsnprintf+0x684>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8007408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800740a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <_vsnprintf+0x63e>
 8007412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007414:	1d1a      	adds	r2, r3, #4
 8007416:	66ba      	str	r2, [r7, #104]	; 0x68
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	e00e      	b.n	800743c <_vsnprintf+0x65c>
 800741e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007424:	2b00      	cmp	r3, #0
 8007426:	d005      	beq.n	8007434 <_vsnprintf+0x654>
 8007428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800742a:	1d1a      	adds	r2, r3, #4
 800742c:	66ba      	str	r2, [r7, #104]	; 0x68
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	e003      	b.n	800743c <_vsnprintf+0x65c>
 8007434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	66ba      	str	r2, [r7, #104]	; 0x68
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800743e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007444:	9304      	str	r3, [sp, #16]
 8007446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007448:	9303      	str	r3, [sp, #12]
 800744a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744c:	9302      	str	r3, [sp, #8]
 800744e:	2300      	movs	r3, #0
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7fe fef3 	bl	8006248 <_ntoa_long>
 8007462:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	3301      	adds	r3, #1
 8007468:	603b      	str	r3, [r7, #0]
        break;
 800746a:	e14e      	b.n	800770a <_vsnprintf+0x92a>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b46      	cmp	r3, #70	; 0x46
 8007472:	d103      	bne.n	800747c <_vsnprintf+0x69c>
 8007474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007476:	f043 0320 	orr.w	r3, r3, #32
 800747a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800747c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800747e:	3307      	adds	r3, #7
 8007480:	f023 0307 	bic.w	r3, r3, #7
 8007484:	f103 0208 	add.w	r2, r3, #8
 8007488:	66ba      	str	r2, [r7, #104]	; 0x68
 800748a:	cb18      	ldmia	r3, {r3, r4}
 800748c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800748e:	9204      	str	r2, [sp, #16]
 8007490:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007492:	9203      	str	r2, [sp, #12]
 8007494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	e88d 0018 	stmia.w	sp, {r3, r4}
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7fe ffa8 	bl	80063f8 <_ftoa>
 80074a8:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	603b      	str	r3, [r7, #0]
        break;
 80074b0:	e12b      	b.n	800770a <_vsnprintf+0x92a>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b67      	cmp	r3, #103	; 0x67
 80074b8:	d003      	beq.n	80074c2 <_vsnprintf+0x6e2>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b47      	cmp	r3, #71	; 0x47
 80074c0:	d103      	bne.n	80074ca <_vsnprintf+0x6ea>
 80074c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80074c8:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b45      	cmp	r3, #69	; 0x45
 80074d0:	d003      	beq.n	80074da <_vsnprintf+0x6fa>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b47      	cmp	r3, #71	; 0x47
 80074d8:	d103      	bne.n	80074e2 <_vsnprintf+0x702>
 80074da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074dc:	f043 0320 	orr.w	r3, r3, #32
 80074e0:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80074e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074e4:	3307      	adds	r3, #7
 80074e6:	f023 0307 	bic.w	r3, r3, #7
 80074ea:	f103 0208 	add.w	r2, r3, #8
 80074ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80074f0:	cb18      	ldmia	r3, {r3, r4}
 80074f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074f4:	9204      	str	r2, [sp, #16]
 80074f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074f8:	9203      	str	r2, [sp, #12]
 80074fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074fc:	9202      	str	r2, [sp, #8]
 80074fe:	e88d 0018 	stmia.w	sp, {r3, r4}
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff f9dd 	bl	80068c8 <_etoa>
 800750e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	603b      	str	r3, [r7, #0]
        break;
 8007516:	e0f8      	b.n	800770a <_vsnprintf+0x92a>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8007518:	2301      	movs	r3, #1
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800751c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10e      	bne.n	8007544 <_vsnprintf+0x764>
          while (l++ < width) {
 8007526:	e007      	b.n	8007538 <_vsnprintf+0x758>
            out(' ', buffer, idx++, maxlen);
 8007528:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800752a:	1c53      	adds	r3, r2, #1
 800752c:	647b      	str	r3, [r7, #68]	; 0x44
 800752e:	68fc      	ldr	r4, [r7, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	2020      	movs	r0, #32
 8007536:	47a0      	blx	r4
          while (l++ < width) {
 8007538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800753e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007540:	4293      	cmp	r3, r2
 8007542:	d3f1      	bcc.n	8007528 <_vsnprintf+0x748>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8007544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007546:	1d1a      	adds	r2, r3, #4
 8007548:	66ba      	str	r2, [r7, #104]	; 0x68
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	b2d8      	uxtb	r0, r3
 800754e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007550:	1c53      	adds	r3, r2, #1
 8007552:	647b      	str	r3, [r7, #68]	; 0x44
 8007554:	68fc      	ldr	r4, [r7, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800755c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00e      	beq.n	8007584 <_vsnprintf+0x7a4>
          while (l++ < width) {
 8007566:	e007      	b.n	8007578 <_vsnprintf+0x798>
            out(' ', buffer, idx++, maxlen);
 8007568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800756a:	1c53      	adds	r3, r2, #1
 800756c:	647b      	str	r3, [r7, #68]	; 0x44
 800756e:	68fc      	ldr	r4, [r7, #12]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	2020      	movs	r0, #32
 8007576:	47a0      	blx	r4
          while (l++ < width) {
 8007578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800757e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007580:	4293      	cmp	r3, r2
 8007582:	d3f1      	bcc.n	8007568 <_vsnprintf+0x788>
          }
        }
        format++;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	603b      	str	r3, [r7, #0]
        break;
 800758a:	e0be      	b.n	800770a <_vsnprintf+0x92a>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800758c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800758e:	1d1a      	adds	r2, r3, #4
 8007590:	66ba      	str	r2, [r7, #104]	; 0x68
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8007596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <_vsnprintf+0x7c0>
 800759c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759e:	e001      	b.n	80075a4 <_vsnprintf+0x7c4>
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295
 80075a4:	4619      	mov	r1, r3
 80075a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075a8:	f7fe fccc 	bl	8005f44 <_strnlen_s>
 80075ac:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80075ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <_vsnprintf+0x7e4>
          l = (l < precision ? l : precision);
 80075b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075bc:	4293      	cmp	r3, r2
 80075be:	bf28      	it	cs
 80075c0:	4613      	movcs	r3, r2
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80075c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d11a      	bne.n	8007604 <_vsnprintf+0x824>
          while (l++ < width) {
 80075ce:	e007      	b.n	80075e0 <_vsnprintf+0x800>
            out(' ', buffer, idx++, maxlen);
 80075d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075d2:	1c53      	adds	r3, r2, #1
 80075d4:	647b      	str	r3, [r7, #68]	; 0x44
 80075d6:	68fc      	ldr	r4, [r7, #12]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68b9      	ldr	r1, [r7, #8]
 80075dc:	2020      	movs	r0, #32
 80075de:	47a0      	blx	r4
          while (l++ < width) {
 80075e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	637a      	str	r2, [r7, #52]	; 0x34
 80075e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d3f1      	bcc.n	80075d0 <_vsnprintf+0x7f0>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80075ec:	e00a      	b.n	8007604 <_vsnprintf+0x824>
          out(*(p++), buffer, idx++, maxlen);
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80075f4:	7818      	ldrb	r0, [r3, #0]
 80075f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f8:	1c53      	adds	r3, r2, #1
 80075fa:	647b      	str	r3, [r7, #68]	; 0x44
 80075fc:	68fc      	ldr	r4, [r7, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d009      	beq.n	8007620 <_vsnprintf+0x840>
 800760c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800760e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0eb      	beq.n	80075ee <_vsnprintf+0x80e>
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	1e5a      	subs	r2, r3, #1
 800761a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <_vsnprintf+0x80e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8007620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00e      	beq.n	8007648 <_vsnprintf+0x868>
          while (l++ < width) {
 800762a:	e007      	b.n	800763c <_vsnprintf+0x85c>
            out(' ', buffer, idx++, maxlen);
 800762c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800762e:	1c53      	adds	r3, r2, #1
 8007630:	647b      	str	r3, [r7, #68]	; 0x44
 8007632:	68fc      	ldr	r4, [r7, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	2020      	movs	r0, #32
 800763a:	47a0      	blx	r4
          while (l++ < width) {
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	637a      	str	r2, [r7, #52]	; 0x34
 8007642:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007644:	4293      	cmp	r3, r2
 8007646:	d3f1      	bcc.n	800762c <_vsnprintf+0x84c>
          }
        }
        format++;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	603b      	str	r3, [r7, #0]
        break;
 800764e:	e05c      	b.n	800770a <_vsnprintf+0x92a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8007650:	2308      	movs	r3, #8
 8007652:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8007654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007656:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800765a:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800765c:	2300      	movs	r3, #0
 800765e:	75fb      	strb	r3, [r7, #23]
        if (is_ll) {
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01d      	beq.n	80076a2 <_vsnprintf+0x8c2>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8007666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007668:	1d1a      	adds	r2, r3, #4
 800766a:	66ba      	str	r2, [r7, #104]	; 0x68
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f04f 0400 	mov.w	r4, #0
 8007672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007674:	9208      	str	r2, [sp, #32]
 8007676:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007678:	9207      	str	r2, [sp, #28]
 800767a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800767c:	9206      	str	r2, [sp, #24]
 800767e:	f04f 0110 	mov.w	r1, #16
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800768a:	2200      	movs	r2, #0
 800768c:	9202      	str	r2, [sp, #8]
 800768e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7fe fe3c 	bl	8006316 <_ntoa_long_long>
 800769e:	6478      	str	r0, [r7, #68]	; 0x44
 80076a0:	e016      	b.n	80076d0 <_vsnprintf+0x8f0>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80076a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	66ba      	str	r2, [r7, #104]	; 0x68
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ae:	9305      	str	r3, [sp, #20]
 80076b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b6:	9303      	str	r3, [sp, #12]
 80076b8:	2310      	movs	r3, #16
 80076ba:	9302      	str	r3, [sp, #8]
 80076bc:	2300      	movs	r3, #0
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	9200      	str	r2, [sp, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7fe fdbd 	bl	8006248 <_ntoa_long>
 80076ce:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	603b      	str	r3, [r7, #0]
        break;
 80076d6:	e018      	b.n	800770a <_vsnprintf+0x92a>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80076d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076da:	1c53      	adds	r3, r2, #1
 80076dc:	647b      	str	r3, [r7, #68]	; 0x44
 80076de:	68fc      	ldr	r4, [r7, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	2025      	movs	r0, #37	; 0x25
 80076e6:	47a0      	blx	r4
        format++;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	603b      	str	r3, [r7, #0]
        break;
 80076ee:	e00c      	b.n	800770a <_vsnprintf+0x92a>

      default :
        out(*format, buffer, idx++, maxlen);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	7818      	ldrb	r0, [r3, #0]
 80076f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076f6:	1c53      	adds	r3, r2, #1
 80076f8:	647b      	str	r3, [r7, #68]	; 0x44
 80076fa:	68fc      	ldr	r4, [r7, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68b9      	ldr	r1, [r7, #8]
 8007700:	47a0      	blx	r4
        format++;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	603b      	str	r3, [r7, #0]
        break;
 8007708:	bf00      	nop
  while (*format)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f47f ab77 	bne.w	8006e02 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8007714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	d302      	bcc.n	8007722 <_vsnprintf+0x942>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	1e5a      	subs	r2, r3, #1
 8007720:	e000      	b.n	8007724 <_vsnprintf+0x944>
 8007722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007724:	68fc      	ldr	r4, [r7, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	2000      	movs	r0, #0
 800772c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800772e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007730:	4618      	mov	r0, r3
 8007732:	3758      	adds	r7, #88	; 0x58
 8007734:	46bd      	mov	sp, r7
 8007736:	bdb0      	pop	{r4, r5, r7, pc}

08007738 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8007738:	b40f      	push	{r0, r1, r2, r3}
 800773a:	b580      	push	{r7, lr}
 800773c:	b086      	sub	sp, #24
 800773e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8007740:	f107 031c 	add.w	r3, r7, #28
 8007744:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8007746:	1d39      	adds	r1, r7, #4
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	f04f 32ff 	mov.w	r2, #4294967295
 8007752:	4806      	ldr	r0, [pc, #24]	; (800776c <printf_+0x34>)
 8007754:	f7ff fb44 	bl	8006de0 <_vsnprintf>
 8007758:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800775a:	68fb      	ldr	r3, [r7, #12]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007766:	b004      	add	sp, #16
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	08005f1f 	.word	0x08005f1f

08007770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80077a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007774:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007776:	e003      	b.n	8007780 <LoopCopyDataInit>

08007778 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800777a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800777c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800777e:	3104      	adds	r1, #4

08007780 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007780:	480b      	ldr	r0, [pc, #44]	; (80077b0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8007782:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8007784:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007786:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007788:	d3f6      	bcc.n	8007778 <CopyDataInit>
	ldr	r2, =_sbss
 800778a:	4a0b      	ldr	r2, [pc, #44]	; (80077b8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800778c:	e002      	b.n	8007794 <LoopFillZerobss>

0800778e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800778e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007790:	f842 3b04 	str.w	r3, [r2], #4

08007794 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007794:	4b09      	ldr	r3, [pc, #36]	; (80077bc <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8007796:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007798:	d3f9      	bcc.n	800778e <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 800779a:	f000 f82b 	bl	80077f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 800779e:	f000 fa47 	bl	8007c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80077a2:	f7fe fb6b 	bl	8005e7c <main>
	bx	lr
 80077a6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80077a8:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 80077ac:	080085b0 	.word	0x080085b0
	ldr	r0, =_sdata
 80077b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80077b4:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 80077b8:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 80077bc:	20001e40 	.word	0x20001e40

080077c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80077c0:	e7fe      	b.n	80077c0 <ADC1_IRQHandler>

080077c2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80077c2:	b480      	push	{r7}
 80077c4:	af00      	add	r7, sp, #0
}
 80077c6:	bf00      	nop
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr

080077ce <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80077ce:	b480      	push	{r7}
 80077d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80077d2:	e7fe      	b.n	80077d2 <HardFault_Handler+0x4>

080077d4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80077d8:	e7fe      	b.n	80077d8 <MemManage_Handler+0x4>

080077da <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80077da:	b480      	push	{r7}
 80077dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80077de:	e7fe      	b.n	80077de <BusFault_Handler+0x4>

080077e0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80077e4:	e7fe      	b.n	80077e4 <UsageFault_Handler+0x4>

080077e6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80077e6:	b480      	push	{r7}
 80077e8:	af00      	add	r7, sp, #0
}
 80077ea:	bf00      	nop
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr
	...

080077f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80077f8:	4a17      	ldr	r2, [pc, #92]	; (8007858 <SystemInit+0x64>)
 80077fa:	4b17      	ldr	r3, [pc, #92]	; (8007858 <SystemInit+0x64>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8007804:	4914      	ldr	r1, [pc, #80]	; (8007858 <SystemInit+0x64>)
 8007806:	4b14      	ldr	r3, [pc, #80]	; (8007858 <SystemInit+0x64>)
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	4b14      	ldr	r3, [pc, #80]	; (800785c <SystemInit+0x68>)
 800780c:	4013      	ands	r3, r2
 800780e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007810:	4a11      	ldr	r2, [pc, #68]	; (8007858 <SystemInit+0x64>)
 8007812:	4b11      	ldr	r3, [pc, #68]	; (8007858 <SystemInit+0x64>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800781a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800781e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007820:	4a0d      	ldr	r2, [pc, #52]	; (8007858 <SystemInit+0x64>)
 8007822:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <SystemInit+0x64>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800782a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800782c:	4a0a      	ldr	r2, [pc, #40]	; (8007858 <SystemInit+0x64>)
 800782e:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <SystemInit+0x64>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007836:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8007838:	4b07      	ldr	r3, [pc, #28]	; (8007858 <SystemInit+0x64>)
 800783a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800783e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <SystemInit+0x64>)
 8007842:	2200      	movs	r2, #0
 8007844:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8007846:	f000 f80d 	bl	8007864 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <SystemInit+0x6c>)
 800784c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007850:	609a      	str	r2, [r3, #8]
#endif 
}
 8007852:	bf00      	nop
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40021000 	.word	0x40021000
 800785c:	f8ff0000 	.word	0xf8ff0000
 8007860:	e000ed00 	.word	0xe000ed00

08007864 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8007868:	f000 f802 	bl	8007870 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800786c:	bf00      	nop
 800786e:	bd80      	pop	{r7, pc}

08007870 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	2300      	movs	r3, #0
 800787c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800787e:	4a30      	ldr	r2, [pc, #192]	; (8007940 <SetSysClockTo24+0xd0>)
 8007880:	4b2f      	ldr	r3, [pc, #188]	; (8007940 <SetSysClockTo24+0xd0>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007888:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800788a:	4b2d      	ldr	r3, [pc, #180]	; (8007940 <SetSysClockTo24+0xd0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007892:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3301      	adds	r3, #1
 8007898:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <SetSysClockTo24+0x38>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80078a6:	d1f0      	bne.n	800788a <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80078a8:	4b25      	ldr	r3, [pc, #148]	; (8007940 <SetSysClockTo24+0xd0>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80078b4:	2301      	movs	r3, #1
 80078b6:	603b      	str	r3, [r7, #0]
 80078b8:	e001      	b.n	80078be <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80078ba:	2300      	movs	r3, #0
 80078bc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d137      	bne.n	8007934 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80078c4:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <SetSysClockTo24+0xd0>)
 80078c6:	4b1e      	ldr	r3, [pc, #120]	; (8007940 <SetSysClockTo24+0xd0>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80078cc:	4a1c      	ldr	r2, [pc, #112]	; (8007940 <SetSysClockTo24+0xd0>)
 80078ce:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <SetSysClockTo24+0xd0>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80078d4:	4a1a      	ldr	r2, [pc, #104]	; (8007940 <SetSysClockTo24+0xd0>)
 80078d6:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <SetSysClockTo24+0xd0>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80078dc:	4a18      	ldr	r2, [pc, #96]	; (8007940 <SetSysClockTo24+0xd0>)
 80078de:	4b18      	ldr	r3, [pc, #96]	; (8007940 <SetSysClockTo24+0xd0>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80078e6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 80078e8:	4a15      	ldr	r2, [pc, #84]	; (8007940 <SetSysClockTo24+0xd0>)
 80078ea:	4b15      	ldr	r3, [pc, #84]	; (8007940 <SetSysClockTo24+0xd0>)
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 80078f2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80078f4:	4a12      	ldr	r2, [pc, #72]	; (8007940 <SetSysClockTo24+0xd0>)
 80078f6:	4b12      	ldr	r3, [pc, #72]	; (8007940 <SetSysClockTo24+0xd0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078fe:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8007900:	bf00      	nop
 8007902:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <SetSysClockTo24+0xd0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f9      	beq.n	8007902 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800790e:	4a0c      	ldr	r2, [pc, #48]	; (8007940 <SetSysClockTo24+0xd0>)
 8007910:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <SetSysClockTo24+0xd0>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f023 0303 	bic.w	r3, r3, #3
 8007918:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800791a:	4a09      	ldr	r2, [pc, #36]	; (8007940 <SetSysClockTo24+0xd0>)
 800791c:	4b08      	ldr	r3, [pc, #32]	; (8007940 <SetSysClockTo24+0xd0>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f043 0302 	orr.w	r3, r3, #2
 8007924:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8007926:	bf00      	nop
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <SetSysClockTo24+0xd0>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f003 030c 	and.w	r3, r3, #12
 8007930:	2b08      	cmp	r3, #8
 8007932:	d1f9      	bne.n	8007928 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	bc80      	pop	{r7}
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40021000 	.word	0x40021000

08007944 <TIM3_IRQHandler>:
volatile uint8_t timeOutTimerAlarmStatus=0;



void TIM3_IRQHandler(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
    if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8007948:	2101      	movs	r1, #1
 800794a:	4811      	ldr	r0, [pc, #68]	; (8007990 <TIM3_IRQHandler+0x4c>)
 800794c:	f7fc fed1 	bl	80046f2 <TIM_GetITStatus>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d015      	beq.n	8007982 <TIM3_IRQHandler+0x3e>
    {
    	elapsed_ms++;
 8007956:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <TIM3_IRQHandler+0x50>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3301      	adds	r3, #1
 800795c:	4a0d      	ldr	r2, [pc, #52]	; (8007994 <TIM3_IRQHandler+0x50>)
 800795e:	6013      	str	r3, [r2, #0]
    	if(timeOutTimerStatus == 1)
 8007960:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <TIM3_IRQHandler+0x54>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b01      	cmp	r3, #1
 8007968:	d10b      	bne.n	8007982 <TIM3_IRQHandler+0x3e>
    	{
    		if((elapsed_ms - timeOutTimerStartTime) > timeOutTimerAlarmTime)
 800796a:	4b0a      	ldr	r3, [pc, #40]	; (8007994 <TIM3_IRQHandler+0x50>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	4b0b      	ldr	r3, [pc, #44]	; (800799c <TIM3_IRQHandler+0x58>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	1ad2      	subs	r2, r2, r3
 8007974:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <TIM3_IRQHandler+0x5c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d902      	bls.n	8007982 <TIM3_IRQHandler+0x3e>
    			timeOutTimerAlarmStatus = 1;
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <TIM3_IRQHandler+0x60>)
 800797e:	2201      	movs	r2, #1
 8007980:	701a      	strb	r2, [r3, #0]
    	}
   }

    TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8007982:	2101      	movs	r1, #1
 8007984:	4802      	ldr	r0, [pc, #8]	; (8007990 <TIM3_IRQHandler+0x4c>)
 8007986:	f7fc fedd 	bl	8004744 <TIM_ClearITPendingBit>
}
 800798a:	bf00      	nop
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	40000400 	.word	0x40000400
 8007994:	20001e1c 	.word	0x20001e1c
 8007998:	20001e20 	.word	0x20001e20
 800799c:	20001e28 	.word	0x20001e28
 80079a0:	20001e24 	.word	0x20001e24
 80079a4:	20001e2c 	.word	0x20001e2c

080079a8 <timer3_init>:

void timer3_init(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80079ae:	2101      	movs	r1, #1
 80079b0:	2002      	movs	r0, #2
 80079b2:	f7fc fb31 	bl	8004018 <RCC_APB1PeriphClockCmd>

	//configure timer 3 interrupt
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 80079b6:	231d      	movs	r3, #29
 80079b8:	733b      	strb	r3, [r7, #12]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	737b      	strb	r3, [r7, #13]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	73bb      	strb	r3, [r7, #14]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80079c2:	2301      	movs	r3, #1
 80079c4:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&nvicStructure);
 80079c6:	f107 030c 	add.w	r3, r7, #12
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fb ff94 	bl	80038f8 <NVIC_Init>
	 * interrupt.
	 *
	 * TIM_Period is actually auto reload register(ARR).
	 */
	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 2400-1;
 80079d0:	f640 135f 	movw	r3, #2399	; 0x95f
 80079d4:	803b      	strh	r3, [r7, #0]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80079d6:	2300      	movs	r3, #0
 80079d8:	807b      	strh	r3, [r7, #2]
	timerInitStructure.TIM_Period = 10-1;
 80079da:	2309      	movs	r3, #9
 80079dc:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80079de:	2300      	movs	r3, #0
 80079e0:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_RepetitionCounter = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	723b      	strb	r3, [r7, #8]
	TIM_TimeBaseInit(TIM3, &timerInitStructure);
 80079e6:	463b      	mov	r3, r7
 80079e8:	4619      	mov	r1, r3
 80079ea:	4808      	ldr	r0, [pc, #32]	; (8007a0c <timer3_init+0x64>)
 80079ec:	f7fc fb32 	bl	8004054 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM3, TIM_IT_Update , ENABLE);
 80079f0:	2201      	movs	r2, #1
 80079f2:	2101      	movs	r1, #1
 80079f4:	4805      	ldr	r0, [pc, #20]	; (8007a0c <timer3_init+0x64>)
 80079f6:	f7fc fdca 	bl	800458e <TIM_ITConfig>
	TIM_Cmd(TIM3, ENABLE);
 80079fa:	2101      	movs	r1, #1
 80079fc:	4803      	ldr	r0, [pc, #12]	; (8007a0c <timer3_init+0x64>)
 80079fe:	f7fc fda7 	bl	8004550 <TIM_Cmd>
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	40000400 	.word	0x40000400

08007a10 <motors_pwm_init>:

void motors_pwm_init(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8007a16:	2101      	movs	r1, #1
 8007a18:	2001      	movs	r0, #1
 8007a1a:	f7fc fafd 	bl	8004018 <RCC_APB1PeriphClockCmd>
	/* GPIOA and GPIOB clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8007a1e:	2101      	movs	r1, #1
 8007a20:	2005      	movs	r0, #5
 8007a22:	f7fc fadb 	bl	8003fdc <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 8007a26:	230f      	movs	r3, #15
 8007a28:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007a2a:	2318      	movs	r3, #24
 8007a2c:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007a32:	463b      	mov	r3, r7
 8007a34:	4619      	mov	r1, r3
 8007a36:	4830      	ldr	r0, [pc, #192]	; (8007af8 <motors_pwm_init+0xe8>)
 8007a38:	f7fb ffc0 	bl	80039bc <GPIO_Init>

	TIM_TimeBaseStructure.TIM_Period = MOTOR_TIM_ARR_REG_VAL;
 8007a3c:	23c7      	movs	r3, #199	; 0xc7
 8007a3e:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = MOTOR_TIM_PRESCALER_VAL;
 8007a40:	f640 135f 	movw	r3, #2399	; 0x95f
 8007a44:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8007a46:	2300      	movs	r3, #0
 8007a48:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8007a4e:	f107 0314 	add.w	r3, r7, #20
 8007a52:	4619      	mov	r1, r3
 8007a54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007a58:	f7fc fafc 	bl	8004054 <TIM_TimeBaseInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8007a5c:	2360      	movs	r3, #96	; 0x60
 8007a5e:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8007a60:	2301      	movs	r3, #1
 8007a62:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	81bb      	strh	r3, [r7, #12]
	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8007a6c:	1d3b      	adds	r3, r7, #4
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007a74:	f7fc fb6a 	bl	800414c <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8007a78:	2108      	movs	r1, #8
 8007a7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007a7e:	f7fc fdc8 	bl	8004612 <TIM_OC1PreloadConfig>

	/* PWM1 Mode configuration: Channel2 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8007a82:	2301      	movs	r3, #1
 8007a84:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	817b      	strh	r3, [r7, #10]
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8007a8a:	1d3b      	adds	r3, r7, #4
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007a92:	f7fc fbe7 	bl	8004264 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8007a96:	2108      	movs	r1, #8
 8007a98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007a9c:	f7fc fdd4 	bl	8004648 <TIM_OC2PreloadConfig>

	/* PWM1 Mode configuration: Channel3 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	817b      	strh	r3, [r7, #10]
	TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8007aa8:	1d3b      	adds	r3, r7, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007ab0:	f7fc fc60 	bl	8004374 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8007ab4:	2108      	movs	r1, #8
 8007ab6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007aba:	f7fc fde2 	bl	8004682 <TIM_OC3PreloadConfig>

	/* PWM1 Mode configuration: Channel4 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	817b      	strh	r3, [r7, #10]
	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8007ac6:	1d3b      	adds	r3, r7, #4
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007ace:	f7fc fcd7 	bl	8004480 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8007ad2:	2108      	movs	r1, #8
 8007ad4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007ad8:	f7fc fdee 	bl	80046b8 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 8007adc:	2101      	movs	r1, #1
 8007ade:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007ae2:	f7fc fd77 	bl	80045d4 <TIM_ARRPreloadConfig>
	/* TIM3 enable counter */
	TIM_Cmd(TIM2, ENABLE);
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007aec:	f7fc fd30 	bl	8004550 <TIM_Cmd>
}
 8007af0:	bf00      	nop
 8007af2:	3720      	adds	r7, #32
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40010800 	.word	0x40010800

08007afc <millis>:
	if(channelID == PWM_CHANNEL4)
		TIM_SetCompare4(TIM2, pwm_value);
}

uint32_t millis(void)
{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
	return elapsed_ms;
 8007b00:	4b02      	ldr	r3, [pc, #8]	; (8007b0c <millis+0x10>)
 8007b02:	681b      	ldr	r3, [r3, #0]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr
 8007b0c:	20001e1c 	.word	0x20001e1c

08007b10 <delay_ms>:

void delay_ms(uint32_t delay_ms)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	uint32_t currentTime_ms;
	uint32_t startTime_ms;

	startTime_ms = millis();
 8007b18:	f7ff fff0 	bl	8007afc <millis>
 8007b1c:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		currentTime_ms = millis();
 8007b1e:	f7ff ffed 	bl	8007afc <millis>
 8007b22:	60b8      	str	r0, [r7, #8]
		if((currentTime_ms-startTime_ms)>delay_ms)
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad2      	subs	r2, r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d800      	bhi.n	8007b32 <delay_ms+0x22>
		currentTime_ms = millis();
 8007b30:	e7f5      	b.n	8007b1e <delay_ms+0xe>
			return ;
 8007b32:	bf00      	nop
	}
}
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <timeout_alarm_set>:

void timeout_alarm_set(uint32_t alarmTime_ms)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	timeOutTimerStartTime = millis();
 8007b44:	f7ff ffda 	bl	8007afc <millis>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <timeout_alarm_set+0x2c>)
 8007b4c:	601a      	str	r2, [r3, #0]
	timeOutTimerStatus = 1;
 8007b4e:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <timeout_alarm_set+0x30>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	701a      	strb	r2, [r3, #0]
	timeOutTimerAlarmTime = alarmTime_ms;
 8007b54:	4a06      	ldr	r2, [pc, #24]	; (8007b70 <timeout_alarm_set+0x34>)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6013      	str	r3, [r2, #0]
	timeOutTimerAlarmStatus = 0;
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <timeout_alarm_set+0x38>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	701a      	strb	r2, [r3, #0]
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	20001e28 	.word	0x20001e28
 8007b6c:	20001e20 	.word	0x20001e20
 8007b70:	20001e24 	.word	0x20001e24
 8007b74:	20001e2c 	.word	0x20001e2c

08007b78 <timeout_alarm_status_check>:

uint8_t timeout_alarm_status_check(void)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
	return timeOutTimerAlarmStatus;
 8007b7c:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <timeout_alarm_status_check+0x14>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b2db      	uxtb	r3, r3
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20001e2c 	.word	0x20001e2c

08007b90 <timeout_alarm_off>:

void timeout_alarm_off(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
	timeOutTimerStatus = 0;
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <timeout_alarm_off+0x18>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
	timeOutTimerAlarmStatus = 0;
 8007b9a:	4b04      	ldr	r3, [pc, #16]	; (8007bac <timeout_alarm_off+0x1c>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr
 8007ba8:	20001e20 	.word	0x20001e20
 8007bac:	20001e2c 	.word	0x20001e2c

08007bb0 <uart_console_init>:
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#include "uart_comm.h"

void uart_console_init(uint32_t baudRate)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;

	/* Enable peripheral clocks for USART1 on GPIOA */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA |
 8007bb8:	2101      	movs	r1, #1
 8007bba:	f244 0005 	movw	r0, #16389	; 0x4005
 8007bbe:	f7fc fa0d 	bl	8003fdc <RCC_APB2PeriphClockCmd>
						   RCC_APB2Periph_AFIO, ENABLE);

	/* Configure PA9 and PA10 as USART1 TX/RX */

	/* PA9 = alternate function push/pull output */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8007bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc6:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007bcc:	2318      	movs	r3, #24
 8007bce:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007bd0:	f107 031c 	add.w	r3, r7, #28
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4814      	ldr	r0, [pc, #80]	; (8007c28 <uart_console_init+0x78>)
 8007bd8:	f7fb fef0 	bl	80039bc <GPIO_Init>

	/* PA10 = floating input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8007bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be0:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8007be2:	2304      	movs	r3, #4
 8007be4:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007be6:	f107 031c 	add.w	r3, r7, #28
 8007bea:	4619      	mov	r1, r3
 8007bec:	480e      	ldr	r0, [pc, #56]	; (8007c28 <uart_console_init+0x78>)
 8007bee:	f7fb fee5 	bl	80039bc <GPIO_Init>

	/* Configure and initialize usart... */
	USART_InitStructure.USART_BaudRate = baudRate;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8007c02:	2300      	movs	r3, #0
 8007c04:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8007c06:	230c      	movs	r3, #12
 8007c08:	82fb      	strh	r3, [r7, #22]

	USART_Init(USART1, &USART_InitStructure);
 8007c0a:	f107 030c 	add.w	r3, r7, #12
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4806      	ldr	r0, [pc, #24]	; (8007c2c <uart_console_init+0x7c>)
 8007c12:	f7fc fda7 	bl	8004764 <USART_Init>

	/* Enable USART1 */
	USART_Cmd(USART1, ENABLE);
 8007c16:	2101      	movs	r1, #1
 8007c18:	4804      	ldr	r0, [pc, #16]	; (8007c2c <uart_console_init+0x7c>)
 8007c1a:	f7fc fe5d 	bl	80048d8 <USART_Cmd>
}
 8007c1e:	bf00      	nop
 8007c20:	3720      	adds	r7, #32
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40010800 	.word	0x40010800
 8007c2c:	40013800 	.word	0x40013800

08007c30 <__libc_init_array>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	2500      	movs	r5, #0
 8007c34:	4e0c      	ldr	r6, [pc, #48]	; (8007c68 <__libc_init_array+0x38>)
 8007c36:	4c0d      	ldr	r4, [pc, #52]	; (8007c6c <__libc_init_array+0x3c>)
 8007c38:	1ba4      	subs	r4, r4, r6
 8007c3a:	10a4      	asrs	r4, r4, #2
 8007c3c:	42a5      	cmp	r5, r4
 8007c3e:	d109      	bne.n	8007c54 <__libc_init_array+0x24>
 8007c40:	f000 fbc6 	bl	80083d0 <_init>
 8007c44:	2500      	movs	r5, #0
 8007c46:	4e0a      	ldr	r6, [pc, #40]	; (8007c70 <__libc_init_array+0x40>)
 8007c48:	4c0a      	ldr	r4, [pc, #40]	; (8007c74 <__libc_init_array+0x44>)
 8007c4a:	1ba4      	subs	r4, r4, r6
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	42a5      	cmp	r5, r4
 8007c50:	d105      	bne.n	8007c5e <__libc_init_array+0x2e>
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c58:	4798      	blx	r3
 8007c5a:	3501      	adds	r5, #1
 8007c5c:	e7ee      	b.n	8007c3c <__libc_init_array+0xc>
 8007c5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c62:	4798      	blx	r3
 8007c64:	3501      	adds	r5, #1
 8007c66:	e7f2      	b.n	8007c4e <__libc_init_array+0x1e>
 8007c68:	080085a8 	.word	0x080085a8
 8007c6c:	080085a8 	.word	0x080085a8
 8007c70:	080085a8 	.word	0x080085a8
 8007c74:	080085ac 	.word	0x080085ac

08007c78 <memcpy>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	1e43      	subs	r3, r0, #1
 8007c7c:	440a      	add	r2, r1
 8007c7e:	4291      	cmp	r1, r2
 8007c80:	d100      	bne.n	8007c84 <memcpy+0xc>
 8007c82:	bd10      	pop	{r4, pc}
 8007c84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c8c:	e7f7      	b.n	8007c7e <memcpy+0x6>

08007c8e <memset>:
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4402      	add	r2, r0
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d100      	bne.n	8007c98 <memset+0xa>
 8007c96:	4770      	bx	lr
 8007c98:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9c:	e7f9      	b.n	8007c92 <memset+0x4>
	...

08007ca0 <asinf>:
 8007ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca2:	b08b      	sub	sp, #44	; 0x2c
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	f000 f84b 	bl	8007d40 <__ieee754_asinf>
 8007caa:	4e21      	ldr	r6, [pc, #132]	; (8007d30 <asinf+0x90>)
 8007cac:	4605      	mov	r5, r0
 8007cae:	f996 3000 	ldrsb.w	r3, [r6]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	d038      	beq.n	8007d28 <asinf+0x88>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f7f9 fa67 	bl	800118c <__aeabi_fcmpun>
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d131      	bne.n	8007d28 <asinf+0x88>
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 fb79 	bl	80083bc <fabsf>
 8007cca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007cce:	f7f9 fa53 	bl	8001178 <__aeabi_fcmpgt>
 8007cd2:	b348      	cbz	r0, 8007d28 <asinf+0x88>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <asinf+0x94>)
 8007cda:	4620      	mov	r0, r4
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	9708      	str	r7, [sp, #32]
 8007ce0:	f7f8 fbfa 	bl	80004d8 <__aeabi_f2d>
 8007ce4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cec:	4812      	ldr	r0, [pc, #72]	; (8007d38 <asinf+0x98>)
 8007cee:	f000 fa4f 	bl	8008190 <nan>
 8007cf2:	f996 3000 	ldrsb.w	r3, [r6]
 8007cf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d104      	bne.n	8007d08 <asinf+0x68>
 8007cfe:	f000 fb61 	bl	80083c4 <__errno>
 8007d02:	2321      	movs	r3, #33	; 0x21
 8007d04:	6003      	str	r3, [r0, #0]
 8007d06:	e004      	b.n	8007d12 <asinf+0x72>
 8007d08:	4668      	mov	r0, sp
 8007d0a:	f000 fa3f 	bl	800818c <matherr>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d0f5      	beq.n	8007cfe <asinf+0x5e>
 8007d12:	9b08      	ldr	r3, [sp, #32]
 8007d14:	b11b      	cbz	r3, 8007d1e <asinf+0x7e>
 8007d16:	f000 fb55 	bl	80083c4 <__errno>
 8007d1a:	9b08      	ldr	r3, [sp, #32]
 8007d1c:	6003      	str	r3, [r0, #0]
 8007d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d22:	f7f8 ff0f 	bl	8000b44 <__aeabi_d2f>
 8007d26:	4605      	mov	r5, r0
 8007d28:	4628      	mov	r0, r5
 8007d2a:	b00b      	add	sp, #44	; 0x2c
 8007d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000024 	.word	0x20000024
 8007d34:	08008578 	.word	0x08008578
 8007d38:	0800857d 	.word	0x0800857d

08007d3c <atan2f>:
 8007d3c:	f000 b944 	b.w	8007fc8 <__ieee754_atan2f>

08007d40 <__ieee754_asinf>:
 8007d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d44:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8007d48:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	4607      	mov	r7, r0
 8007d50:	d10c      	bne.n	8007d6c <__ieee754_asinf+0x2c>
 8007d52:	498d      	ldr	r1, [pc, #564]	; (8007f88 <__ieee754_asinf+0x248>)
 8007d54:	f7f9 f854 	bl	8000e00 <__aeabi_fmul>
 8007d58:	498c      	ldr	r1, [pc, #560]	; (8007f8c <__ieee754_asinf+0x24c>)
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f7f9 f84f 	bl	8000e00 <__aeabi_fmul>
 8007d62:	4601      	mov	r1, r0
 8007d64:	4628      	mov	r0, r5
 8007d66:	f7f8 ff43 	bl	8000bf0 <__addsf3>
 8007d6a:	e006      	b.n	8007d7a <__ieee754_asinf+0x3a>
 8007d6c:	dd09      	ble.n	8007d82 <__ieee754_asinf+0x42>
 8007d6e:	4601      	mov	r1, r0
 8007d70:	f7f8 ff3c 	bl	8000bec <__aeabi_fsub>
 8007d74:	4601      	mov	r1, r0
 8007d76:	f7f9 f8f7 	bl	8000f68 <__aeabi_fdiv>
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d82:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007d86:	da0b      	bge.n	8007da0 <__ieee754_asinf+0x60>
 8007d88:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 8007d8c:	da73      	bge.n	8007e76 <__ieee754_asinf+0x136>
 8007d8e:	4980      	ldr	r1, [pc, #512]	; (8007f90 <__ieee754_asinf+0x250>)
 8007d90:	f7f8 ff2e 	bl	8000bf0 <__addsf3>
 8007d94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007d98:	f7f9 f9ee 	bl	8001178 <__aeabi_fcmpgt>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d1ed      	bne.n	8007d7c <__ieee754_asinf+0x3c>
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 fb0b 	bl	80083bc <fabsf>
 8007da6:	4601      	mov	r1, r0
 8007da8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007dac:	f7f8 ff1e 	bl	8000bec <__aeabi_fsub>
 8007db0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007db4:	f7f9 f824 	bl	8000e00 <__aeabi_fmul>
 8007db8:	4604      	mov	r4, r0
 8007dba:	4976      	ldr	r1, [pc, #472]	; (8007f94 <__ieee754_asinf+0x254>)
 8007dbc:	f7f9 f820 	bl	8000e00 <__aeabi_fmul>
 8007dc0:	4975      	ldr	r1, [pc, #468]	; (8007f98 <__ieee754_asinf+0x258>)
 8007dc2:	f7f8 ff15 	bl	8000bf0 <__addsf3>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	f7f9 f81a 	bl	8000e00 <__aeabi_fmul>
 8007dcc:	4973      	ldr	r1, [pc, #460]	; (8007f9c <__ieee754_asinf+0x25c>)
 8007dce:	f7f8 ff0d 	bl	8000bec <__aeabi_fsub>
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	f7f9 f814 	bl	8000e00 <__aeabi_fmul>
 8007dd8:	4971      	ldr	r1, [pc, #452]	; (8007fa0 <__ieee754_asinf+0x260>)
 8007dda:	f7f8 ff09 	bl	8000bf0 <__addsf3>
 8007dde:	4621      	mov	r1, r4
 8007de0:	f7f9 f80e 	bl	8000e00 <__aeabi_fmul>
 8007de4:	496f      	ldr	r1, [pc, #444]	; (8007fa4 <__ieee754_asinf+0x264>)
 8007de6:	f7f8 ff01 	bl	8000bec <__aeabi_fsub>
 8007dea:	4621      	mov	r1, r4
 8007dec:	f7f9 f808 	bl	8000e00 <__aeabi_fmul>
 8007df0:	496d      	ldr	r1, [pc, #436]	; (8007fa8 <__ieee754_asinf+0x268>)
 8007df2:	f7f8 fefd 	bl	8000bf0 <__addsf3>
 8007df6:	4621      	mov	r1, r4
 8007df8:	f7f9 f802 	bl	8000e00 <__aeabi_fmul>
 8007dfc:	496b      	ldr	r1, [pc, #428]	; (8007fac <__ieee754_asinf+0x26c>)
 8007dfe:	4680      	mov	r8, r0
 8007e00:	4620      	mov	r0, r4
 8007e02:	f7f8 fffd 	bl	8000e00 <__aeabi_fmul>
 8007e06:	496a      	ldr	r1, [pc, #424]	; (8007fb0 <__ieee754_asinf+0x270>)
 8007e08:	f7f8 fef0 	bl	8000bec <__aeabi_fsub>
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	f7f8 fff7 	bl	8000e00 <__aeabi_fmul>
 8007e12:	4968      	ldr	r1, [pc, #416]	; (8007fb4 <__ieee754_asinf+0x274>)
 8007e14:	f7f8 feec 	bl	8000bf0 <__addsf3>
 8007e18:	4621      	mov	r1, r4
 8007e1a:	f7f8 fff1 	bl	8000e00 <__aeabi_fmul>
 8007e1e:	4966      	ldr	r1, [pc, #408]	; (8007fb8 <__ieee754_asinf+0x278>)
 8007e20:	f7f8 fee4 	bl	8000bec <__aeabi_fsub>
 8007e24:	4621      	mov	r1, r4
 8007e26:	f7f8 ffeb 	bl	8000e00 <__aeabi_fmul>
 8007e2a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007e2e:	f7f8 fedf 	bl	8000bf0 <__addsf3>
 8007e32:	4681      	mov	r9, r0
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 f957 	bl	80080e8 <__ieee754_sqrtf>
 8007e3a:	4b60      	ldr	r3, [pc, #384]	; (8007fbc <__ieee754_asinf+0x27c>)
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	429d      	cmp	r5, r3
 8007e40:	dd63      	ble.n	8007f0a <__ieee754_asinf+0x1ca>
 8007e42:	4649      	mov	r1, r9
 8007e44:	4640      	mov	r0, r8
 8007e46:	f7f9 f88f 	bl	8000f68 <__aeabi_fdiv>
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	f7f8 ffd8 	bl	8000e00 <__aeabi_fmul>
 8007e50:	4631      	mov	r1, r6
 8007e52:	f7f8 fecd 	bl	8000bf0 <__addsf3>
 8007e56:	4601      	mov	r1, r0
 8007e58:	f7f8 feca 	bl	8000bf0 <__addsf3>
 8007e5c:	4958      	ldr	r1, [pc, #352]	; (8007fc0 <__ieee754_asinf+0x280>)
 8007e5e:	f7f8 fec7 	bl	8000bf0 <__addsf3>
 8007e62:	4601      	mov	r1, r0
 8007e64:	4848      	ldr	r0, [pc, #288]	; (8007f88 <__ieee754_asinf+0x248>)
 8007e66:	f7f8 fec1 	bl	8000bec <__aeabi_fsub>
 8007e6a:	2f00      	cmp	r7, #0
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	bfd8      	it	le
 8007e70:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 8007e74:	e782      	b.n	8007d7c <__ieee754_asinf+0x3c>
 8007e76:	4601      	mov	r1, r0
 8007e78:	f7f8 ffc2 	bl	8000e00 <__aeabi_fmul>
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	4945      	ldr	r1, [pc, #276]	; (8007f94 <__ieee754_asinf+0x254>)
 8007e80:	f7f8 ffbe 	bl	8000e00 <__aeabi_fmul>
 8007e84:	4944      	ldr	r1, [pc, #272]	; (8007f98 <__ieee754_asinf+0x258>)
 8007e86:	f7f8 feb3 	bl	8000bf0 <__addsf3>
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	f7f8 ffb8 	bl	8000e00 <__aeabi_fmul>
 8007e90:	4942      	ldr	r1, [pc, #264]	; (8007f9c <__ieee754_asinf+0x25c>)
 8007e92:	f7f8 feab 	bl	8000bec <__aeabi_fsub>
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 ffb2 	bl	8000e00 <__aeabi_fmul>
 8007e9c:	4940      	ldr	r1, [pc, #256]	; (8007fa0 <__ieee754_asinf+0x260>)
 8007e9e:	f7f8 fea7 	bl	8000bf0 <__addsf3>
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f7f8 ffac 	bl	8000e00 <__aeabi_fmul>
 8007ea8:	493e      	ldr	r1, [pc, #248]	; (8007fa4 <__ieee754_asinf+0x264>)
 8007eaa:	f7f8 fe9f 	bl	8000bec <__aeabi_fsub>
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 ffa6 	bl	8000e00 <__aeabi_fmul>
 8007eb4:	493c      	ldr	r1, [pc, #240]	; (8007fa8 <__ieee754_asinf+0x268>)
 8007eb6:	f7f8 fe9b 	bl	8000bf0 <__addsf3>
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7f8 ffa0 	bl	8000e00 <__aeabi_fmul>
 8007ec0:	493a      	ldr	r1, [pc, #232]	; (8007fac <__ieee754_asinf+0x26c>)
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f7f8 ff9b 	bl	8000e00 <__aeabi_fmul>
 8007eca:	4939      	ldr	r1, [pc, #228]	; (8007fb0 <__ieee754_asinf+0x270>)
 8007ecc:	f7f8 fe8e 	bl	8000bec <__aeabi_fsub>
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7f8 ff95 	bl	8000e00 <__aeabi_fmul>
 8007ed6:	4937      	ldr	r1, [pc, #220]	; (8007fb4 <__ieee754_asinf+0x274>)
 8007ed8:	f7f8 fe8a 	bl	8000bf0 <__addsf3>
 8007edc:	4629      	mov	r1, r5
 8007ede:	f7f8 ff8f 	bl	8000e00 <__aeabi_fmul>
 8007ee2:	4935      	ldr	r1, [pc, #212]	; (8007fb8 <__ieee754_asinf+0x278>)
 8007ee4:	f7f8 fe82 	bl	8000bec <__aeabi_fsub>
 8007ee8:	4629      	mov	r1, r5
 8007eea:	f7f8 ff89 	bl	8000e00 <__aeabi_fmul>
 8007eee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007ef2:	f7f8 fe7d 	bl	8000bf0 <__addsf3>
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7f9 f835 	bl	8000f68 <__aeabi_fdiv>
 8007efe:	4621      	mov	r1, r4
 8007f00:	f7f8 ff7e 	bl	8000e00 <__aeabi_fmul>
 8007f04:	4601      	mov	r1, r0
 8007f06:	4620      	mov	r0, r4
 8007f08:	e72d      	b.n	8007d66 <__ieee754_asinf+0x26>
 8007f0a:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8007f0e:	4649      	mov	r1, r9
 8007f10:	4640      	mov	r0, r8
 8007f12:	f7f9 f829 	bl	8000f68 <__aeabi_fdiv>
 8007f16:	4631      	mov	r1, r6
 8007f18:	4680      	mov	r8, r0
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7f8 fe68 	bl	8000bf0 <__addsf3>
 8007f20:	4601      	mov	r1, r0
 8007f22:	4640      	mov	r0, r8
 8007f24:	f7f8 ff6c 	bl	8000e00 <__aeabi_fmul>
 8007f28:	f025 050f 	bic.w	r5, r5, #15
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	4629      	mov	r1, r5
 8007f30:	4628      	mov	r0, r5
 8007f32:	f7f8 ff65 	bl	8000e00 <__aeabi_fmul>
 8007f36:	4601      	mov	r1, r0
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f7f8 fe57 	bl	8000bec <__aeabi_fsub>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4604      	mov	r4, r0
 8007f42:	4628      	mov	r0, r5
 8007f44:	f7f8 fe54 	bl	8000bf0 <__addsf3>
 8007f48:	4601      	mov	r1, r0
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7f9 f80c 	bl	8000f68 <__aeabi_fdiv>
 8007f50:	4601      	mov	r1, r0
 8007f52:	f7f8 fe4d 	bl	8000bf0 <__addsf3>
 8007f56:	4601      	mov	r1, r0
 8007f58:	480c      	ldr	r0, [pc, #48]	; (8007f8c <__ieee754_asinf+0x24c>)
 8007f5a:	f7f8 fe47 	bl	8000bec <__aeabi_fsub>
 8007f5e:	4601      	mov	r1, r0
 8007f60:	4640      	mov	r0, r8
 8007f62:	f7f8 fe43 	bl	8000bec <__aeabi_fsub>
 8007f66:	4629      	mov	r1, r5
 8007f68:	4604      	mov	r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f7f8 fe40 	bl	8000bf0 <__addsf3>
 8007f70:	4601      	mov	r1, r0
 8007f72:	4814      	ldr	r0, [pc, #80]	; (8007fc4 <__ieee754_asinf+0x284>)
 8007f74:	f7f8 fe3a 	bl	8000bec <__aeabi_fsub>
 8007f78:	4601      	mov	r1, r0
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7f8 fe36 	bl	8000bec <__aeabi_fsub>
 8007f80:	4601      	mov	r1, r0
 8007f82:	4810      	ldr	r0, [pc, #64]	; (8007fc4 <__ieee754_asinf+0x284>)
 8007f84:	e76f      	b.n	8007e66 <__ieee754_asinf+0x126>
 8007f86:	bf00      	nop
 8007f88:	3fc90fdb 	.word	0x3fc90fdb
 8007f8c:	b33bbd2e 	.word	0xb33bbd2e
 8007f90:	7149f2ca 	.word	0x7149f2ca
 8007f94:	3811ef08 	.word	0x3811ef08
 8007f98:	3a4f7f04 	.word	0x3a4f7f04
 8007f9c:	3d241146 	.word	0x3d241146
 8007fa0:	3e4e0aa8 	.word	0x3e4e0aa8
 8007fa4:	3ea6b090 	.word	0x3ea6b090
 8007fa8:	3e2aaaab 	.word	0x3e2aaaab
 8007fac:	3d9dc62e 	.word	0x3d9dc62e
 8007fb0:	3f303361 	.word	0x3f303361
 8007fb4:	4001572d 	.word	0x4001572d
 8007fb8:	4019d139 	.word	0x4019d139
 8007fbc:	3f799999 	.word	0x3f799999
 8007fc0:	333bbd2e 	.word	0x333bbd2e
 8007fc4:	3f490fdb 	.word	0x3f490fdb

08007fc8 <__ieee754_atan2f>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007fce:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	dc05      	bgt.n	8007fe2 <__ieee754_atan2f+0x1a>
 8007fd6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8007fda:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007fde:	4607      	mov	r7, r0
 8007fe0:	dd04      	ble.n	8007fec <__ieee754_atan2f+0x24>
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7f8 fe04 	bl	8000bf0 <__addsf3>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	e010      	b.n	800800e <__ieee754_atan2f+0x46>
 8007fec:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007ff0:	d103      	bne.n	8007ffa <__ieee754_atan2f+0x32>
 8007ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ff6:	f000 b8d1 	b.w	800819c <atanf>
 8007ffa:	178c      	asrs	r4, r1, #30
 8007ffc:	f004 0402 	and.w	r4, r4, #2
 8008000:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008004:	b92a      	cbnz	r2, 8008012 <__ieee754_atan2f+0x4a>
 8008006:	2c02      	cmp	r4, #2
 8008008:	d023      	beq.n	8008052 <__ieee754_atan2f+0x8a>
 800800a:	2c03      	cmp	r4, #3
 800800c:	d023      	beq.n	8008056 <__ieee754_atan2f+0x8e>
 800800e:	4618      	mov	r0, r3
 8008010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008012:	b91e      	cbnz	r6, 800801c <__ieee754_atan2f+0x54>
 8008014:	2f00      	cmp	r7, #0
 8008016:	da53      	bge.n	80080c0 <__ieee754_atan2f+0xf8>
 8008018:	4b2a      	ldr	r3, [pc, #168]	; (80080c4 <__ieee754_atan2f+0xfc>)
 800801a:	e7f8      	b.n	800800e <__ieee754_atan2f+0x46>
 800801c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008020:	d11b      	bne.n	800805a <__ieee754_atan2f+0x92>
 8008022:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008026:	d10b      	bne.n	8008040 <__ieee754_atan2f+0x78>
 8008028:	2c02      	cmp	r4, #2
 800802a:	d005      	beq.n	8008038 <__ieee754_atan2f+0x70>
 800802c:	2c03      	cmp	r4, #3
 800802e:	d005      	beq.n	800803c <__ieee754_atan2f+0x74>
 8008030:	2c01      	cmp	r4, #1
 8008032:	d141      	bne.n	80080b8 <__ieee754_atan2f+0xf0>
 8008034:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <__ieee754_atan2f+0x100>)
 8008036:	e7ea      	b.n	800800e <__ieee754_atan2f+0x46>
 8008038:	4b24      	ldr	r3, [pc, #144]	; (80080cc <__ieee754_atan2f+0x104>)
 800803a:	e7e8      	b.n	800800e <__ieee754_atan2f+0x46>
 800803c:	4b24      	ldr	r3, [pc, #144]	; (80080d0 <__ieee754_atan2f+0x108>)
 800803e:	e7e6      	b.n	800800e <__ieee754_atan2f+0x46>
 8008040:	2c02      	cmp	r4, #2
 8008042:	d006      	beq.n	8008052 <__ieee754_atan2f+0x8a>
 8008044:	2c03      	cmp	r4, #3
 8008046:	d006      	beq.n	8008056 <__ieee754_atan2f+0x8e>
 8008048:	2c01      	cmp	r4, #1
 800804a:	d137      	bne.n	80080bc <__ieee754_atan2f+0xf4>
 800804c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008050:	e7dd      	b.n	800800e <__ieee754_atan2f+0x46>
 8008052:	4b20      	ldr	r3, [pc, #128]	; (80080d4 <__ieee754_atan2f+0x10c>)
 8008054:	e7db      	b.n	800800e <__ieee754_atan2f+0x46>
 8008056:	4b20      	ldr	r3, [pc, #128]	; (80080d8 <__ieee754_atan2f+0x110>)
 8008058:	e7d9      	b.n	800800e <__ieee754_atan2f+0x46>
 800805a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800805e:	d0d9      	beq.n	8008014 <__ieee754_atan2f+0x4c>
 8008060:	1b92      	subs	r2, r2, r6
 8008062:	15d2      	asrs	r2, r2, #23
 8008064:	2a3c      	cmp	r2, #60	; 0x3c
 8008066:	dc17      	bgt.n	8008098 <__ieee754_atan2f+0xd0>
 8008068:	2900      	cmp	r1, #0
 800806a:	da01      	bge.n	8008070 <__ieee754_atan2f+0xa8>
 800806c:	323c      	adds	r2, #60	; 0x3c
 800806e:	db15      	blt.n	800809c <__ieee754_atan2f+0xd4>
 8008070:	4618      	mov	r0, r3
 8008072:	f7f8 ff79 	bl	8000f68 <__aeabi_fdiv>
 8008076:	f000 f9a1 	bl	80083bc <fabsf>
 800807a:	f000 f88f 	bl	800819c <atanf>
 800807e:	4603      	mov	r3, r0
 8008080:	2c01      	cmp	r4, #1
 8008082:	d00d      	beq.n	80080a0 <__ieee754_atan2f+0xd8>
 8008084:	2c02      	cmp	r4, #2
 8008086:	d00e      	beq.n	80080a6 <__ieee754_atan2f+0xde>
 8008088:	2c00      	cmp	r4, #0
 800808a:	d0c0      	beq.n	800800e <__ieee754_atan2f+0x46>
 800808c:	4913      	ldr	r1, [pc, #76]	; (80080dc <__ieee754_atan2f+0x114>)
 800808e:	4618      	mov	r0, r3
 8008090:	f7f8 fdae 	bl	8000bf0 <__addsf3>
 8008094:	490f      	ldr	r1, [pc, #60]	; (80080d4 <__ieee754_atan2f+0x10c>)
 8008096:	e00c      	b.n	80080b2 <__ieee754_atan2f+0xea>
 8008098:	4b11      	ldr	r3, [pc, #68]	; (80080e0 <__ieee754_atan2f+0x118>)
 800809a:	e7f1      	b.n	8008080 <__ieee754_atan2f+0xb8>
 800809c:	2300      	movs	r3, #0
 800809e:	e7ef      	b.n	8008080 <__ieee754_atan2f+0xb8>
 80080a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80080a4:	e7b3      	b.n	800800e <__ieee754_atan2f+0x46>
 80080a6:	490d      	ldr	r1, [pc, #52]	; (80080dc <__ieee754_atan2f+0x114>)
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7f8 fda1 	bl	8000bf0 <__addsf3>
 80080ae:	4601      	mov	r1, r0
 80080b0:	4808      	ldr	r0, [pc, #32]	; (80080d4 <__ieee754_atan2f+0x10c>)
 80080b2:	f7f8 fd9b 	bl	8000bec <__aeabi_fsub>
 80080b6:	e797      	b.n	8007fe8 <__ieee754_atan2f+0x20>
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <__ieee754_atan2f+0x11c>)
 80080ba:	e7a8      	b.n	800800e <__ieee754_atan2f+0x46>
 80080bc:	2300      	movs	r3, #0
 80080be:	e7a6      	b.n	800800e <__ieee754_atan2f+0x46>
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <__ieee754_atan2f+0x118>)
 80080c2:	e7a4      	b.n	800800e <__ieee754_atan2f+0x46>
 80080c4:	bfc90fdb 	.word	0xbfc90fdb
 80080c8:	bf490fdb 	.word	0xbf490fdb
 80080cc:	4016cbe4 	.word	0x4016cbe4
 80080d0:	c016cbe4 	.word	0xc016cbe4
 80080d4:	40490fdb 	.word	0x40490fdb
 80080d8:	c0490fdb 	.word	0xc0490fdb
 80080dc:	33bbbd2e 	.word	0x33bbbd2e
 80080e0:	3fc90fdb 	.word	0x3fc90fdb
 80080e4:	3f490fdb 	.word	0x3f490fdb

080080e8 <__ieee754_sqrtf>:
 80080e8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80080ec:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	4603      	mov	r3, r0
 80080f4:	4604      	mov	r4, r0
 80080f6:	d309      	bcc.n	800810c <__ieee754_sqrtf+0x24>
 80080f8:	4601      	mov	r1, r0
 80080fa:	f7f8 fe81 	bl	8000e00 <__aeabi_fmul>
 80080fe:	4601      	mov	r1, r0
 8008100:	4620      	mov	r0, r4
 8008102:	f7f8 fd75 	bl	8000bf0 <__addsf3>
 8008106:	4604      	mov	r4, r0
 8008108:	4620      	mov	r0, r4
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	2a00      	cmp	r2, #0
 800810e:	d0fb      	beq.n	8008108 <__ieee754_sqrtf+0x20>
 8008110:	2800      	cmp	r0, #0
 8008112:	da06      	bge.n	8008122 <__ieee754_sqrtf+0x3a>
 8008114:	4601      	mov	r1, r0
 8008116:	f7f8 fd69 	bl	8000bec <__aeabi_fsub>
 800811a:	4601      	mov	r1, r0
 800811c:	f7f8 ff24 	bl	8000f68 <__aeabi_fdiv>
 8008120:	e7f1      	b.n	8008106 <__ieee754_sqrtf+0x1e>
 8008122:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008126:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800812a:	d204      	bcs.n	8008136 <__ieee754_sqrtf+0x4e>
 800812c:	2200      	movs	r2, #0
 800812e:	0219      	lsls	r1, r3, #8
 8008130:	d529      	bpl.n	8008186 <__ieee754_sqrtf+0x9e>
 8008132:	3a01      	subs	r2, #1
 8008134:	1aa4      	subs	r4, r4, r2
 8008136:	3c7f      	subs	r4, #127	; 0x7f
 8008138:	07e2      	lsls	r2, r4, #31
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	ea4f 0164 	mov.w	r1, r4, asr #1
 8008142:	4616      	mov	r6, r2
 8008144:	f04f 0419 	mov.w	r4, #25
 8008148:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800814c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008154:	bf48      	it	mi
 8008156:	005b      	lslmi	r3, r3, #1
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	1835      	adds	r5, r6, r0
 800815c:	429d      	cmp	r5, r3
 800815e:	bfde      	ittt	le
 8008160:	182e      	addle	r6, r5, r0
 8008162:	1b5b      	suble	r3, r3, r5
 8008164:	1812      	addle	r2, r2, r0
 8008166:	3c01      	subs	r4, #1
 8008168:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800816c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008170:	d1f3      	bne.n	800815a <__ieee754_sqrtf+0x72>
 8008172:	b113      	cbz	r3, 800817a <__ieee754_sqrtf+0x92>
 8008174:	3201      	adds	r2, #1
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	1054      	asrs	r4, r2, #1
 800817c:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008180:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8008184:	e7c0      	b.n	8008108 <__ieee754_sqrtf+0x20>
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	3201      	adds	r2, #1
 800818a:	e7d0      	b.n	800812e <__ieee754_sqrtf+0x46>

0800818c <matherr>:
 800818c:	2000      	movs	r0, #0
 800818e:	4770      	bx	lr

08008190 <nan>:
 8008190:	2000      	movs	r0, #0
 8008192:	4901      	ldr	r1, [pc, #4]	; (8008198 <nan+0x8>)
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	7ff80000 	.word	0x7ff80000

0800819c <atanf>:
 800819c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80081a4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80081a8:	4604      	mov	r4, r0
 80081aa:	4607      	mov	r7, r0
 80081ac:	db0e      	blt.n	80081cc <atanf+0x30>
 80081ae:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80081b2:	dd04      	ble.n	80081be <atanf+0x22>
 80081b4:	4601      	mov	r1, r0
 80081b6:	f7f8 fd1b 	bl	8000bf0 <__addsf3>
 80081ba:	4604      	mov	r4, r0
 80081bc:	e003      	b.n	80081c6 <atanf+0x2a>
 80081be:	2800      	cmp	r0, #0
 80081c0:	f300 80d2 	bgt.w	8008368 <atanf+0x1cc>
 80081c4:	4c69      	ldr	r4, [pc, #420]	; (800836c <atanf+0x1d0>)
 80081c6:	4620      	mov	r0, r4
 80081c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081cc:	4b68      	ldr	r3, [pc, #416]	; (8008370 <atanf+0x1d4>)
 80081ce:	429d      	cmp	r5, r3
 80081d0:	dc0e      	bgt.n	80081f0 <atanf+0x54>
 80081d2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80081d6:	da08      	bge.n	80081ea <atanf+0x4e>
 80081d8:	4966      	ldr	r1, [pc, #408]	; (8008374 <atanf+0x1d8>)
 80081da:	f7f8 fd09 	bl	8000bf0 <__addsf3>
 80081de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80081e2:	f7f8 ffc9 	bl	8001178 <__aeabi_fcmpgt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d1ed      	bne.n	80081c6 <atanf+0x2a>
 80081ea:	f04f 36ff 	mov.w	r6, #4294967295
 80081ee:	e01c      	b.n	800822a <atanf+0x8e>
 80081f0:	f000 f8e4 	bl	80083bc <fabsf>
 80081f4:	4b60      	ldr	r3, [pc, #384]	; (8008378 <atanf+0x1dc>)
 80081f6:	4604      	mov	r4, r0
 80081f8:	429d      	cmp	r5, r3
 80081fa:	dc7c      	bgt.n	80082f6 <atanf+0x15a>
 80081fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008200:	429d      	cmp	r5, r3
 8008202:	dc67      	bgt.n	80082d4 <atanf+0x138>
 8008204:	4601      	mov	r1, r0
 8008206:	f7f8 fcf3 	bl	8000bf0 <__addsf3>
 800820a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800820e:	f7f8 fced 	bl	8000bec <__aeabi_fsub>
 8008212:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008216:	4605      	mov	r5, r0
 8008218:	4620      	mov	r0, r4
 800821a:	f7f8 fce9 	bl	8000bf0 <__addsf3>
 800821e:	4601      	mov	r1, r0
 8008220:	4628      	mov	r0, r5
 8008222:	f7f8 fea1 	bl	8000f68 <__aeabi_fdiv>
 8008226:	2600      	movs	r6, #0
 8008228:	4604      	mov	r4, r0
 800822a:	4621      	mov	r1, r4
 800822c:	4620      	mov	r0, r4
 800822e:	f7f8 fde7 	bl	8000e00 <__aeabi_fmul>
 8008232:	4601      	mov	r1, r0
 8008234:	4680      	mov	r8, r0
 8008236:	f7f8 fde3 	bl	8000e00 <__aeabi_fmul>
 800823a:	4605      	mov	r5, r0
 800823c:	494f      	ldr	r1, [pc, #316]	; (800837c <atanf+0x1e0>)
 800823e:	f7f8 fddf 	bl	8000e00 <__aeabi_fmul>
 8008242:	494f      	ldr	r1, [pc, #316]	; (8008380 <atanf+0x1e4>)
 8008244:	f7f8 fcd4 	bl	8000bf0 <__addsf3>
 8008248:	4629      	mov	r1, r5
 800824a:	f7f8 fdd9 	bl	8000e00 <__aeabi_fmul>
 800824e:	494d      	ldr	r1, [pc, #308]	; (8008384 <atanf+0x1e8>)
 8008250:	f7f8 fcce 	bl	8000bf0 <__addsf3>
 8008254:	4629      	mov	r1, r5
 8008256:	f7f8 fdd3 	bl	8000e00 <__aeabi_fmul>
 800825a:	494b      	ldr	r1, [pc, #300]	; (8008388 <atanf+0x1ec>)
 800825c:	f7f8 fcc8 	bl	8000bf0 <__addsf3>
 8008260:	4629      	mov	r1, r5
 8008262:	f7f8 fdcd 	bl	8000e00 <__aeabi_fmul>
 8008266:	4949      	ldr	r1, [pc, #292]	; (800838c <atanf+0x1f0>)
 8008268:	f7f8 fcc2 	bl	8000bf0 <__addsf3>
 800826c:	4629      	mov	r1, r5
 800826e:	f7f8 fdc7 	bl	8000e00 <__aeabi_fmul>
 8008272:	4947      	ldr	r1, [pc, #284]	; (8008390 <atanf+0x1f4>)
 8008274:	f7f8 fcbc 	bl	8000bf0 <__addsf3>
 8008278:	4641      	mov	r1, r8
 800827a:	f7f8 fdc1 	bl	8000e00 <__aeabi_fmul>
 800827e:	4945      	ldr	r1, [pc, #276]	; (8008394 <atanf+0x1f8>)
 8008280:	4680      	mov	r8, r0
 8008282:	4628      	mov	r0, r5
 8008284:	f7f8 fdbc 	bl	8000e00 <__aeabi_fmul>
 8008288:	4943      	ldr	r1, [pc, #268]	; (8008398 <atanf+0x1fc>)
 800828a:	f7f8 fcaf 	bl	8000bec <__aeabi_fsub>
 800828e:	4629      	mov	r1, r5
 8008290:	f7f8 fdb6 	bl	8000e00 <__aeabi_fmul>
 8008294:	4941      	ldr	r1, [pc, #260]	; (800839c <atanf+0x200>)
 8008296:	f7f8 fca9 	bl	8000bec <__aeabi_fsub>
 800829a:	4629      	mov	r1, r5
 800829c:	f7f8 fdb0 	bl	8000e00 <__aeabi_fmul>
 80082a0:	493f      	ldr	r1, [pc, #252]	; (80083a0 <atanf+0x204>)
 80082a2:	f7f8 fca3 	bl	8000bec <__aeabi_fsub>
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7f8 fdaa 	bl	8000e00 <__aeabi_fmul>
 80082ac:	493d      	ldr	r1, [pc, #244]	; (80083a4 <atanf+0x208>)
 80082ae:	f7f8 fc9d 	bl	8000bec <__aeabi_fsub>
 80082b2:	4629      	mov	r1, r5
 80082b4:	f7f8 fda4 	bl	8000e00 <__aeabi_fmul>
 80082b8:	1c73      	adds	r3, r6, #1
 80082ba:	4601      	mov	r1, r0
 80082bc:	4640      	mov	r0, r8
 80082be:	d139      	bne.n	8008334 <atanf+0x198>
 80082c0:	f7f8 fc96 	bl	8000bf0 <__addsf3>
 80082c4:	4621      	mov	r1, r4
 80082c6:	f7f8 fd9b 	bl	8000e00 <__aeabi_fmul>
 80082ca:	4601      	mov	r1, r0
 80082cc:	4620      	mov	r0, r4
 80082ce:	f7f8 fc8d 	bl	8000bec <__aeabi_fsub>
 80082d2:	e772      	b.n	80081ba <atanf+0x1e>
 80082d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082d8:	f7f8 fc88 	bl	8000bec <__aeabi_fsub>
 80082dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082e0:	4605      	mov	r5, r0
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7f8 fc84 	bl	8000bf0 <__addsf3>
 80082e8:	4601      	mov	r1, r0
 80082ea:	4628      	mov	r0, r5
 80082ec:	f7f8 fe3c 	bl	8000f68 <__aeabi_fdiv>
 80082f0:	2601      	movs	r6, #1
 80082f2:	4604      	mov	r4, r0
 80082f4:	e799      	b.n	800822a <atanf+0x8e>
 80082f6:	4b2c      	ldr	r3, [pc, #176]	; (80083a8 <atanf+0x20c>)
 80082f8:	429d      	cmp	r5, r3
 80082fa:	dc14      	bgt.n	8008326 <atanf+0x18a>
 80082fc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008300:	f7f8 fc74 	bl	8000bec <__aeabi_fsub>
 8008304:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008308:	4605      	mov	r5, r0
 800830a:	4620      	mov	r0, r4
 800830c:	f7f8 fd78 	bl	8000e00 <__aeabi_fmul>
 8008310:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008314:	f7f8 fc6c 	bl	8000bf0 <__addsf3>
 8008318:	4601      	mov	r1, r0
 800831a:	4628      	mov	r0, r5
 800831c:	f7f8 fe24 	bl	8000f68 <__aeabi_fdiv>
 8008320:	2602      	movs	r6, #2
 8008322:	4604      	mov	r4, r0
 8008324:	e781      	b.n	800822a <atanf+0x8e>
 8008326:	4601      	mov	r1, r0
 8008328:	4820      	ldr	r0, [pc, #128]	; (80083ac <atanf+0x210>)
 800832a:	f7f8 fe1d 	bl	8000f68 <__aeabi_fdiv>
 800832e:	2603      	movs	r6, #3
 8008330:	4604      	mov	r4, r0
 8008332:	e77a      	b.n	800822a <atanf+0x8e>
 8008334:	f7f8 fc5c 	bl	8000bf0 <__addsf3>
 8008338:	4621      	mov	r1, r4
 800833a:	f7f8 fd61 	bl	8000e00 <__aeabi_fmul>
 800833e:	4b1c      	ldr	r3, [pc, #112]	; (80083b0 <atanf+0x214>)
 8008340:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008344:	f7f8 fc52 	bl	8000bec <__aeabi_fsub>
 8008348:	4621      	mov	r1, r4
 800834a:	f7f8 fc4f 	bl	8000bec <__aeabi_fsub>
 800834e:	4b19      	ldr	r3, [pc, #100]	; (80083b4 <atanf+0x218>)
 8008350:	4601      	mov	r1, r0
 8008352:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008356:	f7f8 fc49 	bl	8000bec <__aeabi_fsub>
 800835a:	2f00      	cmp	r7, #0
 800835c:	4604      	mov	r4, r0
 800835e:	f6bf af32 	bge.w	80081c6 <atanf+0x2a>
 8008362:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8008366:	e72e      	b.n	80081c6 <atanf+0x2a>
 8008368:	4c13      	ldr	r4, [pc, #76]	; (80083b8 <atanf+0x21c>)
 800836a:	e72c      	b.n	80081c6 <atanf+0x2a>
 800836c:	bfc90fdb 	.word	0xbfc90fdb
 8008370:	3edfffff 	.word	0x3edfffff
 8008374:	7149f2ca 	.word	0x7149f2ca
 8008378:	3f97ffff 	.word	0x3f97ffff
 800837c:	3c8569d7 	.word	0x3c8569d7
 8008380:	3d4bda59 	.word	0x3d4bda59
 8008384:	3d886b35 	.word	0x3d886b35
 8008388:	3dba2e6e 	.word	0x3dba2e6e
 800838c:	3e124925 	.word	0x3e124925
 8008390:	3eaaaaab 	.word	0x3eaaaaab
 8008394:	bd15a221 	.word	0xbd15a221
 8008398:	3d6ef16b 	.word	0x3d6ef16b
 800839c:	3d9d8795 	.word	0x3d9d8795
 80083a0:	3de38e38 	.word	0x3de38e38
 80083a4:	3e4ccccd 	.word	0x3e4ccccd
 80083a8:	401bffff 	.word	0x401bffff
 80083ac:	bf800000 	.word	0xbf800000
 80083b0:	08008590 	.word	0x08008590
 80083b4:	08008580 	.word	0x08008580
 80083b8:	3fc90fdb 	.word	0x3fc90fdb

080083bc <fabsf>:
 80083bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80083c0:	4770      	bx	lr
	...

080083c4 <__errno>:
 80083c4:	4b01      	ldr	r3, [pc, #4]	; (80083cc <__errno+0x8>)
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000028 	.word	0x20000028

080083d0 <_init>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr

080083dc <_fini>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	bf00      	nop
 80083e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e2:	bc08      	pop	{r3}
 80083e4:	469e      	mov	lr, r3
 80083e6:	4770      	bx	lr
