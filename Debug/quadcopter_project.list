
quadcopter_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009efc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  0800a0d0  0800a0d0  0001a0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a30c  0800a30c  0001a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a314  0800a314  0001a314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  0800a31c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001dc8  2000008c  0800a3a8  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20001e54  0800a3a8  00021e54  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010a77  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a6c  00000000  00000000  00030b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f18  00000000  00000000  00033598  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da0  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006ff7  00000000  00000000  00035250  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004bfe  00000000  00000000  0003c247  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00040e45  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004520  00000000  00000000  00040ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a0b4 	.word	0x0800a0b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	0800a0b4 	.word	0x0800a0b4

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f092 0f00 	teq	r2, #0
 80004fa:	bf14      	ite	ne
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e720      	b.n	8000354 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aedc 	beq.w	8000302 <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6c1      	b.n	8000302 <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_frsub>:
 8000c10:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c14:	e002      	b.n	8000c1c <__addsf3>
 8000c16:	bf00      	nop

08000c18 <__aeabi_fsub>:
 8000c18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c1c <__addsf3>:
 8000c1c:	0042      	lsls	r2, r0, #1
 8000c1e:	bf1f      	itttt	ne
 8000c20:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c24:	ea92 0f03 	teqne	r2, r3
 8000c28:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c2c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c30:	d06a      	beq.n	8000d08 <__addsf3+0xec>
 8000c32:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c36:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c3a:	bfc1      	itttt	gt
 8000c3c:	18d2      	addgt	r2, r2, r3
 8000c3e:	4041      	eorgt	r1, r0
 8000c40:	4048      	eorgt	r0, r1
 8000c42:	4041      	eorgt	r1, r0
 8000c44:	bfb8      	it	lt
 8000c46:	425b      	neglt	r3, r3
 8000c48:	2b19      	cmp	r3, #25
 8000c4a:	bf88      	it	hi
 8000c4c:	4770      	bxhi	lr
 8000c4e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4240      	negne	r0, r0
 8000c5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c6a:	bf18      	it	ne
 8000c6c:	4249      	negne	r1, r1
 8000c6e:	ea92 0f03 	teq	r2, r3
 8000c72:	d03f      	beq.n	8000cf4 <__addsf3+0xd8>
 8000c74:	f1a2 0201 	sub.w	r2, r2, #1
 8000c78:	fa41 fc03 	asr.w	ip, r1, r3
 8000c7c:	eb10 000c 	adds.w	r0, r0, ip
 8000c80:	f1c3 0320 	rsb	r3, r3, #32
 8000c84:	fa01 f103 	lsl.w	r1, r1, r3
 8000c88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8c:	d502      	bpl.n	8000c94 <__addsf3+0x78>
 8000c8e:	4249      	negs	r1, r1
 8000c90:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c98:	d313      	bcc.n	8000cc2 <__addsf3+0xa6>
 8000c9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c9e:	d306      	bcc.n	8000cae <__addsf3+0x92>
 8000ca0:	0840      	lsrs	r0, r0, #1
 8000ca2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ca6:	f102 0201 	add.w	r2, r2, #1
 8000caa:	2afe      	cmp	r2, #254	; 0xfe
 8000cac:	d251      	bcs.n	8000d52 <__addsf3+0x136>
 8000cae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cb6:	bf08      	it	eq
 8000cb8:	f020 0001 	biceq.w	r0, r0, #1
 8000cbc:	ea40 0003 	orr.w	r0, r0, r3
 8000cc0:	4770      	bx	lr
 8000cc2:	0049      	lsls	r1, r1, #1
 8000cc4:	eb40 0000 	adc.w	r0, r0, r0
 8000cc8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ccc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cd0:	d1ed      	bne.n	8000cae <__addsf3+0x92>
 8000cd2:	fab0 fc80 	clz	ip, r0
 8000cd6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cda:	ebb2 020c 	subs.w	r2, r2, ip
 8000cde:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ce2:	bfaa      	itet	ge
 8000ce4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ce8:	4252      	neglt	r2, r2
 8000cea:	4318      	orrge	r0, r3
 8000cec:	bfbc      	itt	lt
 8000cee:	40d0      	lsrlt	r0, r2
 8000cf0:	4318      	orrlt	r0, r3
 8000cf2:	4770      	bx	lr
 8000cf4:	f092 0f00 	teq	r2, #0
 8000cf8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cfc:	bf06      	itte	eq
 8000cfe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d02:	3201      	addeq	r2, #1
 8000d04:	3b01      	subne	r3, #1
 8000d06:	e7b5      	b.n	8000c74 <__addsf3+0x58>
 8000d08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d10:	bf18      	it	ne
 8000d12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d16:	d021      	beq.n	8000d5c <__addsf3+0x140>
 8000d18:	ea92 0f03 	teq	r2, r3
 8000d1c:	d004      	beq.n	8000d28 <__addsf3+0x10c>
 8000d1e:	f092 0f00 	teq	r2, #0
 8000d22:	bf08      	it	eq
 8000d24:	4608      	moveq	r0, r1
 8000d26:	4770      	bx	lr
 8000d28:	ea90 0f01 	teq	r0, r1
 8000d2c:	bf1c      	itt	ne
 8000d2e:	2000      	movne	r0, #0
 8000d30:	4770      	bxne	lr
 8000d32:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d36:	d104      	bne.n	8000d42 <__addsf3+0x126>
 8000d38:	0040      	lsls	r0, r0, #1
 8000d3a:	bf28      	it	cs
 8000d3c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d40:	4770      	bx	lr
 8000d42:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d46:	bf3c      	itt	cc
 8000d48:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d4c:	4770      	bxcc	lr
 8000d4e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d52:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5a:	4770      	bx	lr
 8000d5c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d60:	bf16      	itet	ne
 8000d62:	4608      	movne	r0, r1
 8000d64:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d68:	4601      	movne	r1, r0
 8000d6a:	0242      	lsls	r2, r0, #9
 8000d6c:	bf06      	itte	eq
 8000d6e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d72:	ea90 0f01 	teqeq	r0, r1
 8000d76:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_ui2f>:
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	e004      	b.n	8000d8c <__aeabi_i2f+0x8>
 8000d82:	bf00      	nop

08000d84 <__aeabi_i2f>:
 8000d84:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d88:	bf48      	it	mi
 8000d8a:	4240      	negmi	r0, r0
 8000d8c:	ea5f 0c00 	movs.w	ip, r0
 8000d90:	bf08      	it	eq
 8000d92:	4770      	bxeq	lr
 8000d94:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d98:	4601      	mov	r1, r0
 8000d9a:	f04f 0000 	mov.w	r0, #0
 8000d9e:	e01c      	b.n	8000dda <__aeabi_l2f+0x2a>

08000da0 <__aeabi_ul2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e00a      	b.n	8000dc4 <__aeabi_l2f+0x14>
 8000dae:	bf00      	nop

08000db0 <__aeabi_l2f>:
 8000db0:	ea50 0201 	orrs.w	r2, r0, r1
 8000db4:	bf08      	it	eq
 8000db6:	4770      	bxeq	lr
 8000db8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dbc:	d502      	bpl.n	8000dc4 <__aeabi_l2f+0x14>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	ea5f 0c01 	movs.w	ip, r1
 8000dc8:	bf02      	ittt	eq
 8000dca:	4684      	moveq	ip, r0
 8000dcc:	4601      	moveq	r1, r0
 8000dce:	2000      	moveq	r0, #0
 8000dd0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dd4:	bf08      	it	eq
 8000dd6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dda:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dde:	fabc f28c 	clz	r2, ip
 8000de2:	3a08      	subs	r2, #8
 8000de4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000de8:	db10      	blt.n	8000e0c <__aeabi_l2f+0x5c>
 8000dea:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dee:	4463      	add	r3, ip
 8000df0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	f020 0001 	biceq.w	r0, r0, #1
 8000e0a:	4770      	bx	lr
 8000e0c:	f102 0220 	add.w	r2, r2, #32
 8000e10:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e1c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_fmul>:
 8000e2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e34:	bf1e      	ittt	ne
 8000e36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3a:	ea92 0f0c 	teqne	r2, ip
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d06f      	beq.n	8000f24 <__aeabi_fmul+0xf8>
 8000e44:	441a      	add	r2, r3
 8000e46:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4a:	0240      	lsls	r0, r0, #9
 8000e4c:	bf18      	it	ne
 8000e4e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e52:	d01e      	beq.n	8000e92 <__aeabi_fmul+0x66>
 8000e54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e58:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e5c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e60:	fba0 3101 	umull	r3, r1, r0, r1
 8000e64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e68:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e6c:	bf3e      	ittt	cc
 8000e6e:	0049      	lslcc	r1, r1, #1
 8000e70:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e74:	005b      	lslcc	r3, r3, #1
 8000e76:	ea40 0001 	orr.w	r0, r0, r1
 8000e7a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e7e:	2afd      	cmp	r2, #253	; 0xfd
 8000e80:	d81d      	bhi.n	8000ebe <__aeabi_fmul+0x92>
 8000e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8a:	bf08      	it	eq
 8000e8c:	f020 0001 	biceq.w	r0, r0, #1
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e9a:	bf08      	it	eq
 8000e9c:	0249      	lsleq	r1, r1, #9
 8000e9e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ea6:	3a7f      	subs	r2, #127	; 0x7f
 8000ea8:	bfc2      	ittt	gt
 8000eaa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb2:	4770      	bxgt	lr
 8000eb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	3a01      	subs	r2, #1
 8000ebe:	dc5d      	bgt.n	8000f7c <__aeabi_fmul+0x150>
 8000ec0:	f112 0f19 	cmn.w	r2, #25
 8000ec4:	bfdc      	itt	le
 8000ec6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eca:	4770      	bxle	lr
 8000ecc:	f1c2 0200 	rsb	r2, r2, #0
 8000ed0:	0041      	lsls	r1, r0, #1
 8000ed2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ed6:	f1c2 0220 	rsb	r2, r2, #32
 8000eda:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ede:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ee2:	f140 0000 	adc.w	r0, r0, #0
 8000ee6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eea:	bf08      	it	eq
 8000eec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef0:	4770      	bx	lr
 8000ef2:	f092 0f00 	teq	r2, #0
 8000ef6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0040      	lsleq	r0, r0, #1
 8000efe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f02:	3a01      	subeq	r2, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xce>
 8000f06:	ea40 000c 	orr.w	r0, r0, ip
 8000f0a:	f093 0f00 	teq	r3, #0
 8000f0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	bf02      	ittt	eq
 8000f14:	0049      	lsleq	r1, r1, #1
 8000f16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1a:	3b01      	subeq	r3, #1
 8000f1c:	d0f9      	beq.n	8000f12 <__aeabi_fmul+0xe6>
 8000f1e:	ea41 010c 	orr.w	r1, r1, ip
 8000f22:	e78f      	b.n	8000e44 <__aeabi_fmul+0x18>
 8000f24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f28:	ea92 0f0c 	teq	r2, ip
 8000f2c:	bf18      	it	ne
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d00a      	beq.n	8000f4a <__aeabi_fmul+0x11e>
 8000f34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f38:	bf18      	it	ne
 8000f3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3e:	d1d8      	bne.n	8000ef2 <__aeabi_fmul+0xc6>
 8000f40:	ea80 0001 	eor.w	r0, r0, r1
 8000f44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f48:	4770      	bx	lr
 8000f4a:	f090 0f00 	teq	r0, #0
 8000f4e:	bf17      	itett	ne
 8000f50:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f54:	4608      	moveq	r0, r1
 8000f56:	f091 0f00 	teqne	r1, #0
 8000f5a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f5e:	d014      	beq.n	8000f8a <__aeabi_fmul+0x15e>
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d101      	bne.n	8000f6a <__aeabi_fmul+0x13e>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	d10f      	bne.n	8000f8a <__aeabi_fmul+0x15e>
 8000f6a:	ea93 0f0c 	teq	r3, ip
 8000f6e:	d103      	bne.n	8000f78 <__aeabi_fmul+0x14c>
 8000f70:	024b      	lsls	r3, r1, #9
 8000f72:	bf18      	it	ne
 8000f74:	4608      	movne	r0, r1
 8000f76:	d108      	bne.n	8000f8a <__aeabi_fmul+0x15e>
 8000f78:	ea80 0001 	eor.w	r0, r0, r1
 8000f7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f88:	4770      	bx	lr
 8000f8a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f8e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f92:	4770      	bx	lr

08000f94 <__aeabi_fdiv>:
 8000f94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f9c:	bf1e      	ittt	ne
 8000f9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fa2:	ea92 0f0c 	teqne	r2, ip
 8000fa6:	ea93 0f0c 	teqne	r3, ip
 8000faa:	d069      	beq.n	8001080 <__aeabi_fdiv+0xec>
 8000fac:	eba2 0203 	sub.w	r2, r2, r3
 8000fb0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fb4:	0249      	lsls	r1, r1, #9
 8000fb6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fba:	d037      	beq.n	800102c <__aeabi_fdiv+0x98>
 8000fbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fc0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fc4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fcc:	428b      	cmp	r3, r1
 8000fce:	bf38      	it	cc
 8000fd0:	005b      	lslcc	r3, r3, #1
 8000fd2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fd6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	bf24      	itt	cs
 8000fde:	1a5b      	subcs	r3, r3, r1
 8000fe0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fe4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fe8:	bf24      	itt	cs
 8000fea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ff2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ff6:	bf24      	itt	cs
 8000ff8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ffc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001000:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001004:	bf24      	itt	cs
 8001006:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800100a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	bf18      	it	ne
 8001012:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001016:	d1e0      	bne.n	8000fda <__aeabi_fdiv+0x46>
 8001018:	2afd      	cmp	r2, #253	; 0xfd
 800101a:	f63f af50 	bhi.w	8000ebe <__aeabi_fmul+0x92>
 800101e:	428b      	cmp	r3, r1
 8001020:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001024:	bf08      	it	eq
 8001026:	f020 0001 	biceq.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001030:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001034:	327f      	adds	r2, #127	; 0x7f
 8001036:	bfc2      	ittt	gt
 8001038:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800103c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001040:	4770      	bxgt	lr
 8001042:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	3a01      	subs	r2, #1
 800104c:	e737      	b.n	8000ebe <__aeabi_fmul+0x92>
 800104e:	f092 0f00 	teq	r2, #0
 8001052:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0040      	lsleq	r0, r0, #1
 800105a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800105e:	3a01      	subeq	r2, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xc2>
 8001062:	ea40 000c 	orr.w	r0, r0, ip
 8001066:	f093 0f00 	teq	r3, #0
 800106a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800106e:	bf02      	ittt	eq
 8001070:	0049      	lsleq	r1, r1, #1
 8001072:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001076:	3b01      	subeq	r3, #1
 8001078:	d0f9      	beq.n	800106e <__aeabi_fdiv+0xda>
 800107a:	ea41 010c 	orr.w	r1, r1, ip
 800107e:	e795      	b.n	8000fac <__aeabi_fdiv+0x18>
 8001080:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001084:	ea92 0f0c 	teq	r2, ip
 8001088:	d108      	bne.n	800109c <__aeabi_fdiv+0x108>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	f47f af7d 	bne.w	8000f8a <__aeabi_fmul+0x15e>
 8001090:	ea93 0f0c 	teq	r3, ip
 8001094:	f47f af70 	bne.w	8000f78 <__aeabi_fmul+0x14c>
 8001098:	4608      	mov	r0, r1
 800109a:	e776      	b.n	8000f8a <__aeabi_fmul+0x15e>
 800109c:	ea93 0f0c 	teq	r3, ip
 80010a0:	d104      	bne.n	80010ac <__aeabi_fdiv+0x118>
 80010a2:	024b      	lsls	r3, r1, #9
 80010a4:	f43f af4c 	beq.w	8000f40 <__aeabi_fmul+0x114>
 80010a8:	4608      	mov	r0, r1
 80010aa:	e76e      	b.n	8000f8a <__aeabi_fmul+0x15e>
 80010ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010b0:	bf18      	it	ne
 80010b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010b6:	d1ca      	bne.n	800104e <__aeabi_fdiv+0xba>
 80010b8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010bc:	f47f af5c 	bne.w	8000f78 <__aeabi_fmul+0x14c>
 80010c0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010c4:	f47f af3c 	bne.w	8000f40 <__aeabi_fmul+0x114>
 80010c8:	e75f      	b.n	8000f8a <__aeabi_fmul+0x15e>
 80010ca:	bf00      	nop

080010cc <__gesf2>:
 80010cc:	f04f 3cff 	mov.w	ip, #4294967295
 80010d0:	e006      	b.n	80010e0 <__cmpsf2+0x4>
 80010d2:	bf00      	nop

080010d4 <__lesf2>:
 80010d4:	f04f 0c01 	mov.w	ip, #1
 80010d8:	e002      	b.n	80010e0 <__cmpsf2+0x4>
 80010da:	bf00      	nop

080010dc <__cmpsf2>:
 80010dc:	f04f 0c01 	mov.w	ip, #1
 80010e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	bf18      	it	ne
 80010f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010f6:	d011      	beq.n	800111c <__cmpsf2+0x40>
 80010f8:	b001      	add	sp, #4
 80010fa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010fe:	bf18      	it	ne
 8001100:	ea90 0f01 	teqne	r0, r1
 8001104:	bf58      	it	pl
 8001106:	ebb2 0003 	subspl.w	r0, r2, r3
 800110a:	bf88      	it	hi
 800110c:	17c8      	asrhi	r0, r1, #31
 800110e:	bf38      	it	cc
 8001110:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001114:	bf18      	it	ne
 8001116:	f040 0001 	orrne.w	r0, r0, #1
 800111a:	4770      	bx	lr
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	d102      	bne.n	8001128 <__cmpsf2+0x4c>
 8001122:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001126:	d105      	bne.n	8001134 <__cmpsf2+0x58>
 8001128:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800112c:	d1e4      	bne.n	80010f8 <__cmpsf2+0x1c>
 800112e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001132:	d0e1      	beq.n	80010f8 <__cmpsf2+0x1c>
 8001134:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__aeabi_cfrcmple>:
 800113c:	4684      	mov	ip, r0
 800113e:	4608      	mov	r0, r1
 8001140:	4661      	mov	r1, ip
 8001142:	e7ff      	b.n	8001144 <__aeabi_cfcmpeq>

08001144 <__aeabi_cfcmpeq>:
 8001144:	b50f      	push	{r0, r1, r2, r3, lr}
 8001146:	f7ff ffc9 	bl	80010dc <__cmpsf2>
 800114a:	2800      	cmp	r0, #0
 800114c:	bf48      	it	mi
 800114e:	f110 0f00 	cmnmi.w	r0, #0
 8001152:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001154 <__aeabi_fcmpeq>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff fff4 	bl	8001144 <__aeabi_cfcmpeq>
 800115c:	bf0c      	ite	eq
 800115e:	2001      	moveq	r0, #1
 8001160:	2000      	movne	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_fcmplt>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffea 	bl	8001144 <__aeabi_cfcmpeq>
 8001170:	bf34      	ite	cc
 8001172:	2001      	movcc	r0, #1
 8001174:	2000      	movcs	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_fcmple>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff ffe0 	bl	8001144 <__aeabi_cfcmpeq>
 8001184:	bf94      	ite	ls
 8001186:	2001      	movls	r0, #1
 8001188:	2000      	movhi	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmpge>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffd2 	bl	800113c <__aeabi_cfrcmple>
 8001198:	bf94      	ite	ls
 800119a:	2001      	movls	r0, #1
 800119c:	2000      	movhi	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_fcmpgt>:
 80011a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a8:	f7ff ffc8 	bl	800113c <__aeabi_cfrcmple>
 80011ac:	bf34      	ite	cc
 80011ae:	2001      	movcc	r0, #1
 80011b0:	2000      	movcs	r0, #0
 80011b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b6:	bf00      	nop

080011b8 <__aeabi_fcmpun>:
 80011b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011c4:	d102      	bne.n	80011cc <__aeabi_fcmpun+0x14>
 80011c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011ca:	d108      	bne.n	80011de <__aeabi_fcmpun+0x26>
 80011cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011d0:	d102      	bne.n	80011d8 <__aeabi_fcmpun+0x20>
 80011d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011d6:	d102      	bne.n	80011de <__aeabi_fcmpun+0x26>
 80011d8:	f04f 0000 	mov.w	r0, #0
 80011dc:	4770      	bx	lr
 80011de:	f04f 0001 	mov.w	r0, #1
 80011e2:	4770      	bx	lr

080011e4 <__aeabi_f2iz>:
 80011e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011ec:	d30f      	bcc.n	800120e <__aeabi_f2iz+0x2a>
 80011ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011f6:	d90d      	bls.n	8001214 <__aeabi_f2iz+0x30>
 80011f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001200:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001204:	fa23 f002 	lsr.w	r0, r3, r2
 8001208:	bf18      	it	ne
 800120a:	4240      	negne	r0, r0
 800120c:	4770      	bx	lr
 800120e:	f04f 0000 	mov.w	r0, #0
 8001212:	4770      	bx	lr
 8001214:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001218:	d101      	bne.n	800121e <__aeabi_f2iz+0x3a>
 800121a:	0242      	lsls	r2, r0, #9
 800121c:	d105      	bne.n	800122a <__aeabi_f2iz+0x46>
 800121e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001222:	bf08      	it	eq
 8001224:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001228:	4770      	bx	lr
 800122a:	f04f 0000 	mov.w	r0, #0
 800122e:	4770      	bx	lr

08001230 <__aeabi_uldivmod>:
 8001230:	b953      	cbnz	r3, 8001248 <__aeabi_uldivmod+0x18>
 8001232:	b94a      	cbnz	r2, 8001248 <__aeabi_uldivmod+0x18>
 8001234:	2900      	cmp	r1, #0
 8001236:	bf08      	it	eq
 8001238:	2800      	cmpeq	r0, #0
 800123a:	bf1c      	itt	ne
 800123c:	f04f 31ff 	movne.w	r1, #4294967295
 8001240:	f04f 30ff 	movne.w	r0, #4294967295
 8001244:	f000 b97a 	b.w	800153c <__aeabi_idiv0>
 8001248:	f1ad 0c08 	sub.w	ip, sp, #8
 800124c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001250:	f000 f806 	bl	8001260 <__udivmoddi4>
 8001254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800125c:	b004      	add	sp, #16
 800125e:	4770      	bx	lr

08001260 <__udivmoddi4>:
 8001260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001264:	468c      	mov	ip, r1
 8001266:	460e      	mov	r6, r1
 8001268:	4604      	mov	r4, r0
 800126a:	9d08      	ldr	r5, [sp, #32]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d150      	bne.n	8001312 <__udivmoddi4+0xb2>
 8001270:	428a      	cmp	r2, r1
 8001272:	4617      	mov	r7, r2
 8001274:	d96c      	bls.n	8001350 <__udivmoddi4+0xf0>
 8001276:	fab2 fe82 	clz	lr, r2
 800127a:	f1be 0f00 	cmp.w	lr, #0
 800127e:	d00b      	beq.n	8001298 <__udivmoddi4+0x38>
 8001280:	f1ce 0c20 	rsb	ip, lr, #32
 8001284:	fa01 f60e 	lsl.w	r6, r1, lr
 8001288:	fa20 fc0c 	lsr.w	ip, r0, ip
 800128c:	fa02 f70e 	lsl.w	r7, r2, lr
 8001290:	ea4c 0c06 	orr.w	ip, ip, r6
 8001294:	fa00 f40e 	lsl.w	r4, r0, lr
 8001298:	0c3a      	lsrs	r2, r7, #16
 800129a:	fbbc f9f2 	udiv	r9, ip, r2
 800129e:	b2bb      	uxth	r3, r7
 80012a0:	fb02 cc19 	mls	ip, r2, r9, ip
 80012a4:	fb09 fa03 	mul.w	sl, r9, r3
 80012a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80012ac:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80012b0:	45b2      	cmp	sl, r6
 80012b2:	d90a      	bls.n	80012ca <__udivmoddi4+0x6a>
 80012b4:	19f6      	adds	r6, r6, r7
 80012b6:	f109 31ff 	add.w	r1, r9, #4294967295
 80012ba:	f080 8125 	bcs.w	8001508 <__udivmoddi4+0x2a8>
 80012be:	45b2      	cmp	sl, r6
 80012c0:	f240 8122 	bls.w	8001508 <__udivmoddi4+0x2a8>
 80012c4:	f1a9 0902 	sub.w	r9, r9, #2
 80012c8:	443e      	add	r6, r7
 80012ca:	eba6 060a 	sub.w	r6, r6, sl
 80012ce:	fbb6 f0f2 	udiv	r0, r6, r2
 80012d2:	fb02 6610 	mls	r6, r2, r0, r6
 80012d6:	fb00 f303 	mul.w	r3, r0, r3
 80012da:	b2a4      	uxth	r4, r4
 80012dc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80012e0:	42a3      	cmp	r3, r4
 80012e2:	d909      	bls.n	80012f8 <__udivmoddi4+0x98>
 80012e4:	19e4      	adds	r4, r4, r7
 80012e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80012ea:	f080 810b 	bcs.w	8001504 <__udivmoddi4+0x2a4>
 80012ee:	42a3      	cmp	r3, r4
 80012f0:	f240 8108 	bls.w	8001504 <__udivmoddi4+0x2a4>
 80012f4:	3802      	subs	r0, #2
 80012f6:	443c      	add	r4, r7
 80012f8:	2100      	movs	r1, #0
 80012fa:	1ae4      	subs	r4, r4, r3
 80012fc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001300:	2d00      	cmp	r5, #0
 8001302:	d062      	beq.n	80013ca <__udivmoddi4+0x16a>
 8001304:	2300      	movs	r3, #0
 8001306:	fa24 f40e 	lsr.w	r4, r4, lr
 800130a:	602c      	str	r4, [r5, #0]
 800130c:	606b      	str	r3, [r5, #4]
 800130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001312:	428b      	cmp	r3, r1
 8001314:	d907      	bls.n	8001326 <__udivmoddi4+0xc6>
 8001316:	2d00      	cmp	r5, #0
 8001318:	d055      	beq.n	80013c6 <__udivmoddi4+0x166>
 800131a:	2100      	movs	r1, #0
 800131c:	e885 0041 	stmia.w	r5, {r0, r6}
 8001320:	4608      	mov	r0, r1
 8001322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001326:	fab3 f183 	clz	r1, r3
 800132a:	2900      	cmp	r1, #0
 800132c:	f040 808f 	bne.w	800144e <__udivmoddi4+0x1ee>
 8001330:	42b3      	cmp	r3, r6
 8001332:	d302      	bcc.n	800133a <__udivmoddi4+0xda>
 8001334:	4282      	cmp	r2, r0
 8001336:	f200 80fc 	bhi.w	8001532 <__udivmoddi4+0x2d2>
 800133a:	1a84      	subs	r4, r0, r2
 800133c:	eb66 0603 	sbc.w	r6, r6, r3
 8001340:	2001      	movs	r0, #1
 8001342:	46b4      	mov	ip, r6
 8001344:	2d00      	cmp	r5, #0
 8001346:	d040      	beq.n	80013ca <__udivmoddi4+0x16a>
 8001348:	e885 1010 	stmia.w	r5, {r4, ip}
 800134c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001350:	b912      	cbnz	r2, 8001358 <__udivmoddi4+0xf8>
 8001352:	2701      	movs	r7, #1
 8001354:	fbb7 f7f2 	udiv	r7, r7, r2
 8001358:	fab7 fe87 	clz	lr, r7
 800135c:	f1be 0f00 	cmp.w	lr, #0
 8001360:	d135      	bne.n	80013ce <__udivmoddi4+0x16e>
 8001362:	2101      	movs	r1, #1
 8001364:	1bf6      	subs	r6, r6, r7
 8001366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800136a:	fa1f f887 	uxth.w	r8, r7
 800136e:	fbb6 f2fc 	udiv	r2, r6, ip
 8001372:	fb0c 6612 	mls	r6, ip, r2, r6
 8001376:	fb08 f002 	mul.w	r0, r8, r2
 800137a:	0c23      	lsrs	r3, r4, #16
 800137c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001380:	42b0      	cmp	r0, r6
 8001382:	d907      	bls.n	8001394 <__udivmoddi4+0x134>
 8001384:	19f6      	adds	r6, r6, r7
 8001386:	f102 33ff 	add.w	r3, r2, #4294967295
 800138a:	d202      	bcs.n	8001392 <__udivmoddi4+0x132>
 800138c:	42b0      	cmp	r0, r6
 800138e:	f200 80d2 	bhi.w	8001536 <__udivmoddi4+0x2d6>
 8001392:	461a      	mov	r2, r3
 8001394:	1a36      	subs	r6, r6, r0
 8001396:	fbb6 f0fc 	udiv	r0, r6, ip
 800139a:	fb0c 6610 	mls	r6, ip, r0, r6
 800139e:	fb08 f800 	mul.w	r8, r8, r0
 80013a2:	b2a3      	uxth	r3, r4
 80013a4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80013a8:	45a0      	cmp	r8, r4
 80013aa:	d907      	bls.n	80013bc <__udivmoddi4+0x15c>
 80013ac:	19e4      	adds	r4, r4, r7
 80013ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80013b2:	d202      	bcs.n	80013ba <__udivmoddi4+0x15a>
 80013b4:	45a0      	cmp	r8, r4
 80013b6:	f200 80b9 	bhi.w	800152c <__udivmoddi4+0x2cc>
 80013ba:	4618      	mov	r0, r3
 80013bc:	eba4 0408 	sub.w	r4, r4, r8
 80013c0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80013c4:	e79c      	b.n	8001300 <__udivmoddi4+0xa0>
 80013c6:	4629      	mov	r1, r5
 80013c8:	4628      	mov	r0, r5
 80013ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ce:	fa07 f70e 	lsl.w	r7, r7, lr
 80013d2:	f1ce 0320 	rsb	r3, lr, #32
 80013d6:	fa26 f203 	lsr.w	r2, r6, r3
 80013da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80013de:	fbb2 f1fc 	udiv	r1, r2, ip
 80013e2:	fa1f f887 	uxth.w	r8, r7
 80013e6:	fb0c 2211 	mls	r2, ip, r1, r2
 80013ea:	fa06 f60e 	lsl.w	r6, r6, lr
 80013ee:	fa20 f303 	lsr.w	r3, r0, r3
 80013f2:	fb01 f908 	mul.w	r9, r1, r8
 80013f6:	4333      	orrs	r3, r6
 80013f8:	0c1e      	lsrs	r6, r3, #16
 80013fa:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80013fe:	45b1      	cmp	r9, r6
 8001400:	fa00 f40e 	lsl.w	r4, r0, lr
 8001404:	d909      	bls.n	800141a <__udivmoddi4+0x1ba>
 8001406:	19f6      	adds	r6, r6, r7
 8001408:	f101 32ff 	add.w	r2, r1, #4294967295
 800140c:	f080 808c 	bcs.w	8001528 <__udivmoddi4+0x2c8>
 8001410:	45b1      	cmp	r9, r6
 8001412:	f240 8089 	bls.w	8001528 <__udivmoddi4+0x2c8>
 8001416:	3902      	subs	r1, #2
 8001418:	443e      	add	r6, r7
 800141a:	eba6 0609 	sub.w	r6, r6, r9
 800141e:	fbb6 f0fc 	udiv	r0, r6, ip
 8001422:	fb0c 6210 	mls	r2, ip, r0, r6
 8001426:	fb00 f908 	mul.w	r9, r0, r8
 800142a:	b29e      	uxth	r6, r3
 800142c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001430:	45b1      	cmp	r9, r6
 8001432:	d907      	bls.n	8001444 <__udivmoddi4+0x1e4>
 8001434:	19f6      	adds	r6, r6, r7
 8001436:	f100 33ff 	add.w	r3, r0, #4294967295
 800143a:	d271      	bcs.n	8001520 <__udivmoddi4+0x2c0>
 800143c:	45b1      	cmp	r9, r6
 800143e:	d96f      	bls.n	8001520 <__udivmoddi4+0x2c0>
 8001440:	3802      	subs	r0, #2
 8001442:	443e      	add	r6, r7
 8001444:	eba6 0609 	sub.w	r6, r6, r9
 8001448:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800144c:	e78f      	b.n	800136e <__udivmoddi4+0x10e>
 800144e:	f1c1 0720 	rsb	r7, r1, #32
 8001452:	fa22 f807 	lsr.w	r8, r2, r7
 8001456:	408b      	lsls	r3, r1
 8001458:	ea48 0303 	orr.w	r3, r8, r3
 800145c:	fa26 f407 	lsr.w	r4, r6, r7
 8001460:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001464:	fbb4 f9fe 	udiv	r9, r4, lr
 8001468:	fa1f fc83 	uxth.w	ip, r3
 800146c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001470:	408e      	lsls	r6, r1
 8001472:	fa20 f807 	lsr.w	r8, r0, r7
 8001476:	fb09 fa0c 	mul.w	sl, r9, ip
 800147a:	ea48 0806 	orr.w	r8, r8, r6
 800147e:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8001482:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8001486:	45a2      	cmp	sl, r4
 8001488:	fa02 f201 	lsl.w	r2, r2, r1
 800148c:	fa00 f601 	lsl.w	r6, r0, r1
 8001490:	d908      	bls.n	80014a4 <__udivmoddi4+0x244>
 8001492:	18e4      	adds	r4, r4, r3
 8001494:	f109 30ff 	add.w	r0, r9, #4294967295
 8001498:	d244      	bcs.n	8001524 <__udivmoddi4+0x2c4>
 800149a:	45a2      	cmp	sl, r4
 800149c:	d942      	bls.n	8001524 <__udivmoddi4+0x2c4>
 800149e:	f1a9 0902 	sub.w	r9, r9, #2
 80014a2:	441c      	add	r4, r3
 80014a4:	eba4 040a 	sub.w	r4, r4, sl
 80014a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80014ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80014b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80014b4:	fa1f f888 	uxth.w	r8, r8
 80014b8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80014bc:	45a4      	cmp	ip, r4
 80014be:	d907      	bls.n	80014d0 <__udivmoddi4+0x270>
 80014c0:	18e4      	adds	r4, r4, r3
 80014c2:	f100 3eff 	add.w	lr, r0, #4294967295
 80014c6:	d229      	bcs.n	800151c <__udivmoddi4+0x2bc>
 80014c8:	45a4      	cmp	ip, r4
 80014ca:	d927      	bls.n	800151c <__udivmoddi4+0x2bc>
 80014cc:	3802      	subs	r0, #2
 80014ce:	441c      	add	r4, r3
 80014d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014d4:	fba0 8902 	umull	r8, r9, r0, r2
 80014d8:	eba4 0c0c 	sub.w	ip, r4, ip
 80014dc:	45cc      	cmp	ip, r9
 80014de:	46c2      	mov	sl, r8
 80014e0:	46ce      	mov	lr, r9
 80014e2:	d315      	bcc.n	8001510 <__udivmoddi4+0x2b0>
 80014e4:	d012      	beq.n	800150c <__udivmoddi4+0x2ac>
 80014e6:	b155      	cbz	r5, 80014fe <__udivmoddi4+0x29e>
 80014e8:	ebb6 030a 	subs.w	r3, r6, sl
 80014ec:	eb6c 060e 	sbc.w	r6, ip, lr
 80014f0:	fa06 f707 	lsl.w	r7, r6, r7
 80014f4:	40cb      	lsrs	r3, r1
 80014f6:	431f      	orrs	r7, r3
 80014f8:	40ce      	lsrs	r6, r1
 80014fa:	602f      	str	r7, [r5, #0]
 80014fc:	606e      	str	r6, [r5, #4]
 80014fe:	2100      	movs	r1, #0
 8001500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001504:	4610      	mov	r0, r2
 8001506:	e6f7      	b.n	80012f8 <__udivmoddi4+0x98>
 8001508:	4689      	mov	r9, r1
 800150a:	e6de      	b.n	80012ca <__udivmoddi4+0x6a>
 800150c:	4546      	cmp	r6, r8
 800150e:	d2ea      	bcs.n	80014e6 <__udivmoddi4+0x286>
 8001510:	ebb8 0a02 	subs.w	sl, r8, r2
 8001514:	eb69 0e03 	sbc.w	lr, r9, r3
 8001518:	3801      	subs	r0, #1
 800151a:	e7e4      	b.n	80014e6 <__udivmoddi4+0x286>
 800151c:	4670      	mov	r0, lr
 800151e:	e7d7      	b.n	80014d0 <__udivmoddi4+0x270>
 8001520:	4618      	mov	r0, r3
 8001522:	e78f      	b.n	8001444 <__udivmoddi4+0x1e4>
 8001524:	4681      	mov	r9, r0
 8001526:	e7bd      	b.n	80014a4 <__udivmoddi4+0x244>
 8001528:	4611      	mov	r1, r2
 800152a:	e776      	b.n	800141a <__udivmoddi4+0x1ba>
 800152c:	3802      	subs	r0, #2
 800152e:	443c      	add	r4, r7
 8001530:	e744      	b.n	80013bc <__udivmoddi4+0x15c>
 8001532:	4608      	mov	r0, r1
 8001534:	e706      	b.n	8001344 <__udivmoddi4+0xe4>
 8001536:	3a02      	subs	r2, #2
 8001538:	443e      	add	r6, r7
 800153a:	e72b      	b.n	8001394 <__udivmoddi4+0x134>

0800153c <__aeabi_idiv0>:
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f103 0208 	add.w	r2, r3, #8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f103 0208 	add.w	r2, r3, #8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f103 0208 	add.w	r2, r3, #8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f2:	d103      	bne.n	80015fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e00c      	b.n	8001616 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3308      	adds	r3, #8
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e002      	b.n	800160a <vListInsert+0x2e>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	429a      	cmp	r2, r3
 8001614:	d9f6      	bls.n	8001604 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	601a      	str	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6892      	ldr	r2, [r2, #8]
 8001662:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6852      	ldr	r2, [r2, #4]
 800166c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	d103      	bne.n	8001680 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	1e5a      	subs	r2, r3, #1
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
	...

080016a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3b04      	subs	r3, #4
 80016b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3b04      	subs	r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f023 0201 	bic.w	r2, r3, #1
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3b04      	subs	r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <pxPortInitialiseStack+0x54>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3b14      	subs	r3, #20
 80016da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3b20      	subs	r3, #32
 80016e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	080016f9 	.word	0x080016f9

080016f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <prvTaskExitError+0x4c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170a:	d009      	beq.n	8001720 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800170c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001710:	f383 8811 	msr	BASEPRI, r3
 8001714:	f3bf 8f6f 	isb	sy
 8001718:	f3bf 8f4f 	dsb	sy
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e7fe      	b.n	800171e <prvTaskExitError+0x26>
 8001720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
 8001730:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001732:	bf00      	nop
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0fc      	beq.n	8001734 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	20000000 	.word	0x20000000
	...

08001750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <pxCurrentTCBConst2>)
 8001752:	6819      	ldr	r1, [r3, #0]
 8001754:	6808      	ldr	r0, [r1, #0]
 8001756:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800175a:	f380 8809 	msr	PSP, r0
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f380 8811 	msr	BASEPRI, r0
 800176a:	f04e 0e0d 	orr.w	lr, lr, #13
 800176e:	4770      	bx	lr

08001770 <pxCurrentTCBConst2>:
 8001770:	20001cc4 	.word	0x20001cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop

08001778 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <prvPortStartFirstTask+0x1c>)
 800177a:	6800      	ldr	r0, [r0, #0]
 800177c:	6800      	ldr	r0, [r0, #0]
 800177e:	f380 8808 	msr	MSP, r0
 8001782:	b662      	cpsie	i
 8001784:	b661      	cpsie	f
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	f3bf 8f6f 	isb	sy
 800178e:	df00      	svc	0
 8001790:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001792:	bf00      	nop
 8001794:	e000ed08 	.word	0xe000ed08

08001798 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800179e:	4b31      	ldr	r3, [pc, #196]	; (8001864 <xPortStartScheduler+0xcc>)
 80017a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	22ff      	movs	r2, #255	; 0xff
 80017ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <xPortStartScheduler+0xd0>)
 80017c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80017c6:	4b29      	ldr	r3, [pc, #164]	; (800186c <xPortStartScheduler+0xd4>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017cc:	e009      	b.n	80017e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <xPortStartScheduler+0xd4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	4a25      	ldr	r2, [pc, #148]	; (800186c <xPortStartScheduler+0xd4>)
 80017d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b80      	cmp	r3, #128	; 0x80
 80017ec:	d0ef      	beq.n	80017ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <xPortStartScheduler+0xd4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d009      	beq.n	800180e <xPortStartScheduler+0x76>
 80017fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fe:	f383 8811 	msr	BASEPRI, r3
 8001802:	f3bf 8f6f 	isb	sy
 8001806:	f3bf 8f4f 	dsb	sy
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	e7fe      	b.n	800180c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <xPortStartScheduler+0xd4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	4a15      	ldr	r2, [pc, #84]	; (800186c <xPortStartScheduler+0xd4>)
 8001816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <xPortStartScheduler+0xd4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <xPortStartScheduler+0xd4>)
 8001822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800182c:	4a10      	ldr	r2, [pc, #64]	; (8001870 <xPortStartScheduler+0xd8>)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <xPortStartScheduler+0xd8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <xPortStartScheduler+0xd8>)
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <xPortStartScheduler+0xd8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001844:	f000 f8b0 	bl	80019a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <xPortStartScheduler+0xdc>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800184e:	f7ff ff93 	bl	8001778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001852:	f001 fa23 	bl	8002c9c <vTaskSwitchContext>
	prvTaskExitError();
 8001856:	f7ff ff4f 	bl	80016f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	e000e400 	.word	0xe000e400
 8001868:	200000a8 	.word	0x200000a8
 800186c:	200000ac 	.word	0x200000ac
 8001870:	e000ed20 	.word	0xe000ed20
 8001874:	20000000 	.word	0x20000000

08001878 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001882:	f383 8811 	msr	BASEPRI, r3
 8001886:	f3bf 8f6f 	isb	sy
 800188a:	f3bf 8f4f 	dsb	sy
 800188e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <vPortEnterCritical+0x54>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <vPortEnterCritical+0x54>)
 8001898:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <vPortEnterCritical+0x54>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10e      	bne.n	80018c0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <vPortEnterCritical+0x58>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <vPortEnterCritical+0x48>
 80018ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	e7fe      	b.n	80018be <vPortEnterCritical+0x46>
	}
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000
 80018d0:	e000ed04 	.word	0xe000ed04

080018d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <vPortExitCritical+0x48>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <vPortExitCritical+0x22>
 80018e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e6:	f383 8811 	msr	BASEPRI, r3
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	e7fe      	b.n	80018f4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <vPortExitCritical+0x48>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <vPortExitCritical+0x48>)
 80018fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <vPortExitCritical+0x48>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d104      	bne.n	8001912 <vPortExitCritical+0x3e>
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000000 	.word	0x20000000

08001920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001920:	f3ef 8009 	mrs	r0, PSP
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <pxCurrentTCBConst>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001930:	6010      	str	r0, [r2, #0]
 8001932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001936:	f04f 0050 	mov.w	r0, #80	; 0x50
 800193a:	f380 8811 	msr	BASEPRI, r0
 800193e:	f001 f9ad 	bl	8002c9c <vTaskSwitchContext>
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	f380 8811 	msr	BASEPRI, r0
 800194a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	6808      	ldr	r0, [r1, #0]
 8001952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001956:	f380 8809 	msr	PSP, r0
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	4770      	bx	lr

08001960 <pxCurrentTCBConst>:
 8001960:	20001cc4 	.word	0x20001cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop

08001968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
	__asm volatile
 800196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001980:	f001 f8d4 	bl	8002b2c <xTaskIncrementTick>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <SysTick_Handler+0x3c>)
 800198c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	e000ed04 	.word	0xe000ed04

080019a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <vPortSetupTimerInterrupt+0x28>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <vPortSetupTimerInterrupt+0x2c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <vPortSetupTimerInterrupt+0x30>)
 80019ba:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80019be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <vPortSetupTimerInterrupt+0x28>)
 80019c2:	2207      	movs	r2, #7
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010
 80019d4:	e000e018 	.word	0xe000e018
 80019d8:	e000e014 	.word	0xe000e014

080019dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80019e2:	f3ef 8305 	mrs	r3, IPSR
 80019e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b0f      	cmp	r3, #15
 80019ec:	d913      	bls.n	8001a16 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80019ee:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <vPortValidateInterruptPriority+0x68>)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <vPortValidateInterruptPriority+0x6c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	7afa      	ldrb	r2, [r7, #11]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d209      	bcs.n	8001a16 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a06:	f383 8811 	msr	BASEPRI, r3
 8001a0a:	f3bf 8f6f 	isb	sy
 8001a0e:	f3bf 8f4f 	dsb	sy
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	e7fe      	b.n	8001a14 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <vPortValidateInterruptPriority+0x70>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <vPortValidateInterruptPriority+0x74>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d909      	bls.n	8001a3a <vPortValidateInterruptPriority+0x5e>
 8001a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2a:	f383 8811 	msr	BASEPRI, r3
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f3bf 8f4f 	dsb	sy
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	e7fe      	b.n	8001a38 <vPortValidateInterruptPriority+0x5c>
	}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	e000e3f0 	.word	0xe000e3f0
 8001a48:	200000a8 	.word	0x200000a8
 8001a4c:	e000ed0c 	.word	0xe000ed0c
 8001a50:	200000ac 	.word	0x200000ac

08001a54 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8001a60:	f000 ffac 	bl	80029bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8001a64:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <pvPortMalloc+0x114>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d104      	bne.n	8001a76 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8001a6c:	f000 f8c8 	bl	8001c00 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <pvPortMalloc+0x114>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	461a      	mov	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f023 0307 	bic.w	r3, r3, #7
 8001a96:	3308      	adds	r3, #8
 8001a98:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d057      	beq.n	8001b50 <pvPortMalloc+0xfc>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d852      	bhi.n	8001b50 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <pvPortMalloc+0x118>)
 8001aac:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <pvPortMalloc+0x118>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001ab4:	e004      	b.n	8001ac0 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d203      	bcs.n	8001ad2 <pvPortMalloc+0x7e>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f1      	bne.n	8001ab6 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <pvPortMalloc+0x11c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d03a      	beq.n	8001b50 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2208      	movs	r2, #8
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2208      	movs	r2, #8
 8001af6:	0052      	lsls	r2, r2, #1
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d922      	bls.n	8001b42 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	1ad2      	subs	r2, r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <pvPortMalloc+0x118>)
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e002      	b.n	8001b28 <pvPortMalloc+0xd4>
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3f6      	bcc.n	8001b22 <pvPortMalloc+0xce>
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <pvPortMalloc+0x120>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <pvPortMalloc+0x120>)
 8001b4e:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001b50:	f000 ff42 	bl	80029d8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001b5a:	f004 f813 	bl	8005b84 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8001b5e:	697b      	ldr	r3, [r7, #20]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20001cc0 	.word	0x20001cc0
 8001b6c:	20001cb0 	.word	0x20001cb0
 8001b70:	20001cb8 	.word	0x20001cb8
 8001b74:	20000004 	.word	0x20000004

08001b78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d027      	beq.n	8001bda <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4413      	add	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8001b98:	f000 ff10 	bl	80029bc <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <vPortFree+0x6c>)
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e002      	b.n	8001bae <vPortFree+0x36>
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3f6      	bcc.n	8001ba8 <vPortFree+0x30>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <vPortFree+0x70>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <vPortFree+0x70>)
 8001bd4:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8001bd6:	f000 feff 	bl	80029d8 <xTaskResumeAll>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20001cb0 	.word	0x20001cb0
 8001be8:	20000004 	.word	0x20000004

08001bec <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <xPortGetFreeHeapSize+0x10>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000004 	.word	0x20000004

08001c00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <prvHeapInit+0x44>)
 8001c08:	f023 0307 	bic.w	r3, r3, #7
 8001c0c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <prvHeapInit+0x48>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <prvHeapInit+0x48>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <prvHeapInit+0x4c>)
 8001c1c:	f641 32f8 	movw	r2, #7160	; 0x1bf8
 8001c20:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <prvHeapInit+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f641 32f8 	movw	r2, #7160	; 0x1bf8
 8001c32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <prvHeapInit+0x4c>)
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	200000b8 	.word	0x200000b8
 8001c48:	20001cb0 	.word	0x20001cb0
 8001c4c:	20001cb8 	.word	0x20001cb8

08001c50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <xQueueGenericReset+0x28>
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	e7fe      	b.n	8001c76 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001c78:	f7ff fdfe 	bl	8001878 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	441a      	add	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	68f9      	ldr	r1, [r7, #12]
 8001cac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	441a      	add	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	22ff      	movs	r2, #255	; 0xff
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	22ff      	movs	r2, #255	; 0xff
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d114      	bne.n	8001cf8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01a      	beq.n	8001d0c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3310      	adds	r3, #16
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 f8ac 	bl	8002e38 <xTaskRemoveFromEventList>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d012      	beq.n	8001d0c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <xQueueGenericReset+0xcc>)
 8001ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f3bf 8f4f 	dsb	sy
 8001cf2:	f3bf 8f6f 	isb	sy
 8001cf6:	e009      	b.n	8001d0c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3310      	adds	r3, #16
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fc1f 	bl	8001540 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3324      	adds	r3, #36	; 0x24
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fc1a 	bl	8001540 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d0c:	f7ff fde2 	bl	80018d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000ed04 	.word	0xe000ed04

08001d20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <xQueueGenericCreate+0x28>
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	e7fe      	b.n	8001d46 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3348      	adds	r3, #72	; 0x48
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fe7c 	bl	8001a54 <pvPortMalloc>
 8001d5c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00d      	beq.n	8001d80 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3348      	adds	r3, #72	; 0x48
 8001d6c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f805 	bl	8001d8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001d80:	69bb      	ldr	r3, [r7, #24]
	}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e002      	b.n	8001dac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001db8:	2101      	movs	r1, #1
 8001dba:	69b8      	ldr	r0, [r7, #24]
 8001dbc:	f7ff ff48 	bl	8001c50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	; 0x38
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <xQueueGenericSend+0x30>
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df6:	e7fe      	b.n	8001df6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <xQueueGenericSend+0x3e>
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <xQueueGenericSend+0x42>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <xQueueGenericSend+0x44>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <xQueueGenericSend+0x5c>
 8001e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e14:	f383 8811 	msr	BASEPRI, r3
 8001e18:	f3bf 8f6f 	isb	sy
 8001e1c:	f3bf 8f4f 	dsb	sy
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	e7fe      	b.n	8001e22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d103      	bne.n	8001e32 <xQueueGenericSend+0x6a>
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <xQueueGenericSend+0x6e>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <xQueueGenericSend+0x70>
 8001e36:	2300      	movs	r3, #0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <xQueueGenericSend+0x88>
 8001e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e40:	f383 8811 	msr	BASEPRI, r3
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	623b      	str	r3, [r7, #32]
 8001e4e:	e7fe      	b.n	8001e4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e50:	f001 f98c 	bl	800316c <xTaskGetSchedulerState>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <xQueueGenericSend+0x98>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <xQueueGenericSend+0x9c>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <xQueueGenericSend+0x9e>
 8001e64:	2300      	movs	r3, #0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <xQueueGenericSend+0xb6>
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	e7fe      	b.n	8001e7c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e7e:	f7ff fcfb 	bl	8001878 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <xQueueGenericSend+0xcc>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d129      	bne.n	8001ee8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e9a:	f000 fa03 	bl	80022a4 <prvCopyDataToQueue>
 8001e9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d010      	beq.n	8001eca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eaa:	3324      	adds	r3, #36	; 0x24
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 ffc3 	bl	8002e38 <xTaskRemoveFromEventList>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <xQueueGenericSend+0x1f0>)
 8001eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	e00a      	b.n	8001ee0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ed0:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <xQueueGenericSend+0x1f0>)
 8001ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ee0:	f7ff fcf8 	bl	80018d4 <vPortExitCritical>
				return pdPASS;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e063      	b.n	8001fb0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001eee:	f7ff fcf1 	bl	80018d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e05c      	b.n	8001fb0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fffb 	bl	8002efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f0a:	f7ff fce3 	bl	80018d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f0e:	f000 fd55 	bl	80029bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f12:	f7ff fcb1 	bl	8001878 <vPortEnterCritical>
 8001f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f1c:	b25b      	sxtb	r3, r3
 8001f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f22:	d103      	bne.n	8001f2c <xQueueGenericSend+0x164>
 8001f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d103      	bne.n	8001f42 <xQueueGenericSend+0x17a>
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f42:	f7ff fcc7 	bl	80018d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f46:	1d3a      	adds	r2, r7, #4
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 ffea 	bl	8002f28 <xTaskCheckForTimeOut>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d124      	bne.n	8001fa4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f5c:	f000 fa9a 	bl	8002494 <prvIsQueueFull>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d018      	beq.n	8001f98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f68:	3310      	adds	r3, #16
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 ff14 	bl	8002d9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f76:	f000 fa25 	bl	80023c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f7a:	f000 fd2d 	bl	80029d8 <xTaskResumeAll>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f af7c 	bne.w	8001e7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <xQueueGenericSend+0x1f0>)
 8001f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	e772      	b.n	8001e7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f9a:	f000 fa13 	bl	80023c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f9e:	f000 fd1b 	bl	80029d8 <xTaskResumeAll>
 8001fa2:	e76c      	b.n	8001e7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fa6:	f000 fa0d 	bl	80023c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001faa:	f000 fd15 	bl	80029d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001fae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3738      	adds	r7, #56	; 0x38
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	e000ed04 	.word	0xe000ed04

08001fbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b090      	sub	sp, #64	; 0x40
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <xQueueGenericSendFromISR+0x2c>
 8001fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd8:	f383 8811 	msr	BASEPRI, r3
 8001fdc:	f3bf 8f6f 	isb	sy
 8001fe0:	f3bf 8f4f 	dsb	sy
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe6:	e7fe      	b.n	8001fe6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <xQueueGenericSendFromISR+0x3a>
 8001fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <xQueueGenericSendFromISR+0x3e>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <xQueueGenericSendFromISR+0x40>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <xQueueGenericSendFromISR+0x58>
 8002000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002004:	f383 8811 	msr	BASEPRI, r3
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	f3bf 8f4f 	dsb	sy
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e7fe      	b.n	8002012 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d103      	bne.n	8002022 <xQueueGenericSendFromISR+0x66>
 800201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <xQueueGenericSendFromISR+0x6a>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <xQueueGenericSendFromISR+0x6c>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <xQueueGenericSendFromISR+0x84>
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	e7fe      	b.n	800203e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002040:	f7ff fccc 	bl	80019dc <vPortValidateInterruptPriority>
	__asm volatile
 8002044:	f3ef 8211 	mrs	r2, BASEPRI
 8002048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	61fa      	str	r2, [r7, #28]
 800205a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800205c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	429a      	cmp	r2, r3
 800206a:	d302      	bcc.n	8002072 <xQueueGenericSendFromISR+0xb6>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d12f      	bne.n	80020d2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002078:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002088:	f000 f90c 	bl	80022a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800208c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d112      	bne.n	80020bc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a0:	3324      	adds	r3, #36	; 0x24
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fec8 	bl	8002e38 <xTaskRemoveFromEventList>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00e      	beq.n	80020cc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	e007      	b.n	80020cc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80020bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	b25a      	sxtb	r2, r3
 80020c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80020cc:	2301      	movs	r3, #1
 80020ce:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80020d0:	e001      	b.n	80020d6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	617b      	str	r3, [r7, #20]
	__asm volatile
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80020e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3740      	adds	r7, #64	; 0x40
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <xQueueReceive+0x2e>
	__asm volatile
 8002106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210a:	f383 8811 	msr	BASEPRI, r3
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	f3bf 8f4f 	dsb	sy
 8002116:	623b      	str	r3, [r7, #32]
 8002118:	e7fe      	b.n	8002118 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <xQueueReceive+0x3c>
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <xQueueReceive+0x40>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <xQueueReceive+0x42>
 800212c:	2300      	movs	r3, #0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <xQueueReceive+0x5a>
 8002132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	f3bf 8f6f 	isb	sy
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e7fe      	b.n	8002144 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002146:	f001 f811 	bl	800316c <xTaskGetSchedulerState>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <xQueueReceive+0x6a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <xQueueReceive+0x6e>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <xQueueReceive+0x70>
 800215a:	2300      	movs	r3, #0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <xQueueReceive+0x88>
 8002160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002164:	f383 8811 	msr	BASEPRI, r3
 8002168:	f3bf 8f6f 	isb	sy
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	e7fe      	b.n	8002172 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002174:	f7ff fb80 	bl	8001878 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01f      	beq.n	80021c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002188:	f000 f8f6 	bl	8002378 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002192:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00f      	beq.n	80021bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219e:	3310      	adds	r3, #16
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fe49 	bl	8002e38 <xTaskRemoveFromEventList>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80021ac:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <xQueueReceive+0x1b4>)
 80021ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80021bc:	f7ff fb8a 	bl	80018d4 <vPortExitCritical>
				return pdPASS;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e069      	b.n	8002298 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021ca:	f7ff fb83 	bl	80018d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e062      	b.n	8002298 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fe8d 	bl	8002efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021e6:	f7ff fb75 	bl	80018d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021ea:	f000 fbe7 	bl	80029bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021ee:	f7ff fb43 	bl	8001878 <vPortEnterCritical>
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fe:	d103      	bne.n	8002208 <xQueueReceive+0x11c>
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800220e:	b25b      	sxtb	r3, r3
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d103      	bne.n	800221e <xQueueReceive+0x132>
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800221e:	f7ff fb59 	bl	80018d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002222:	1d3a      	adds	r2, r7, #4
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fe7c 	bl	8002f28 <xTaskCheckForTimeOut>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d123      	bne.n	800227e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002238:	f000 f916 	bl	8002468 <prvIsQueueEmpty>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d017      	beq.n	8002272 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	3324      	adds	r3, #36	; 0x24
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fda6 	bl	8002d9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002252:	f000 f8b7 	bl	80023c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002256:	f000 fbbf 	bl	80029d8 <xTaskResumeAll>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d189      	bne.n	8002174 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <xQueueReceive+0x1b4>)
 8002262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	e780      	b.n	8002174 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002274:	f000 f8a6 	bl	80023c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002278:	f000 fbae 	bl	80029d8 <xTaskResumeAll>
 800227c:	e77a      	b.n	8002174 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800227e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002280:	f000 f8a0 	bl	80023c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002284:	f000 fba8 	bl	80029d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800228a:	f000 f8ed 	bl	8002468 <prvIsQueueEmpty>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	f43f af6f 	beq.w	8002174 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002296:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002298:	4618      	mov	r0, r3
 800229a:	3730      	adds	r7, #48	; 0x30
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	e000ed04 	.word	0xe000ed04

080022a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10d      	bne.n	80022de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d14d      	bne.n	8002366 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 ff6a 	bl	80031a8 <xTaskPriorityDisinherit>
 80022d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	e043      	b.n	8002366 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d119      	bne.n	8002318 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6858      	ldr	r0, [r3, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	461a      	mov	r2, r3
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	f007 fa34 	bl	800975c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	441a      	add	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	429a      	cmp	r2, r3
 800230c:	d32b      	bcc.n	8002366 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	e026      	b.n	8002366 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68d8      	ldr	r0, [r3, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	461a      	mov	r2, r3
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	f007 fa1a 	bl	800975c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	425b      	negs	r3, r3
 8002332:	441a      	add	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d207      	bcs.n	8002354 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	425b      	negs	r3, r3
 800234e:	441a      	add	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d105      	bne.n	8002366 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	3b01      	subs	r3, #1
 8002364:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800236e:	697b      	ldr	r3, [r7, #20]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d018      	beq.n	80023bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	441a      	add	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d303      	bcc.n	80023ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68d9      	ldr	r1, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	461a      	mov	r2, r3
 80023b6:	6838      	ldr	r0, [r7, #0]
 80023b8:	f007 f9d0 	bl	800975c <memcpy>
	}
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80023cc:	f7ff fa54 	bl	8001878 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023d8:	e011      	b.n	80023fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d012      	beq.n	8002408 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3324      	adds	r3, #36	; 0x24
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fd26 	bl	8002e38 <xTaskRemoveFromEventList>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80023f2:	f000 fdf9 	bl	8002fe8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	dce9      	bgt.n	80023da <prvUnlockQueue+0x16>
 8002406:	e000      	b.n	800240a <prvUnlockQueue+0x46>
					break;
 8002408:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	22ff      	movs	r2, #255	; 0xff
 800240e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002412:	f7ff fa5f 	bl	80018d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002416:	f7ff fa2f 	bl	8001878 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002420:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002422:	e011      	b.n	8002448 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d012      	beq.n	8002452 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3310      	adds	r3, #16
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fd01 	bl	8002e38 <xTaskRemoveFromEventList>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800243c:	f000 fdd4 	bl	8002fe8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002440:	7bbb      	ldrb	r3, [r7, #14]
 8002442:	3b01      	subs	r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800244c:	2b00      	cmp	r3, #0
 800244e:	dce9      	bgt.n	8002424 <prvUnlockQueue+0x60>
 8002450:	e000      	b.n	8002454 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002452:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	22ff      	movs	r2, #255	; 0xff
 8002458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800245c:	f7ff fa3a 	bl	80018d4 <vPortExitCritical>
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002470:	f7ff fa02 	bl	8001878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800247c:	2301      	movs	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e001      	b.n	8002486 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002486:	f7ff fa25 	bl	80018d4 <vPortExitCritical>

	return xReturn;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800249c:	f7ff f9ec 	bl	8001878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d102      	bne.n	80024b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e001      	b.n	80024b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024b6:	f7ff fa0d 	bl	80018d4 <vPortExitCritical>

	return xReturn;
 80024ba:	68fb      	ldr	r3, [r7, #12]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024d4:	f7ff f9d0 	bl	8001878 <vPortEnterCritical>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d103      	bne.n	80024ee <vQueueWaitForMessageRestricted+0x2a>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d103      	bne.n	8002504 <vQueueWaitForMessageRestricted+0x40>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002504:	f7ff f9e6 	bl	80018d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	2b00      	cmp	r3, #0
 800250e:	d106      	bne.n	800251e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3324      	adds	r3, #36	; 0x24
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fc63 	bl	8002de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff50 	bl	80023c4 <prvUnlockQueue>
	}
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af04      	add	r7, sp, #16
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fa87 	bl	8001a54 <pvPortMalloc>
 8002546:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00e      	beq.n	800256c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800254e:	2050      	movs	r0, #80	; 0x50
 8002550:	f7ff fa80 	bl	8001a54 <pvPortMalloc>
 8002554:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
 8002562:	e005      	b.n	8002570 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002564:	6978      	ldr	r0, [r7, #20]
 8002566:	f7ff fb07 	bl	8001b78 <vPortFree>
 800256a:	e001      	b.n	8002570 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	2300      	movs	r3, #0
 800257a:	9303      	str	r3, [sp, #12]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	9302      	str	r3, [sp, #8]
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f80e 	bl	80025ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002592:	69f8      	ldr	r0, [r7, #28]
 8002594:	f000 f89a 	bl	80026cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002598:	2301      	movs	r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	e002      	b.n	80025a4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025a4:	69bb      	ldr	r3, [r7, #24]
	}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b088      	sub	sp, #32
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	461a      	mov	r2, r3
 80025c6:	21a5      	movs	r1, #165	; 0xa5
 80025c8:	f007 f8d3 	bl	8009772 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025d6:	3b01      	subs	r3, #1
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f023 0307 	bic.w	r3, r3, #7
 80025e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <prvInitialiseNewTask+0x56>
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e7fe      	b.n	8002602 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01f      	beq.n	800264a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e012      	b.n	8002636 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	7819      	ldrb	r1, [r3, #0]
 8002618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	3334      	adds	r3, #52	; 0x34
 8002620:	460a      	mov	r2, r1
 8002622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3301      	adds	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	2b09      	cmp	r3, #9
 800263a:	d9e9      	bls.n	8002610 <prvInitialiseNewTask+0x62>
 800263c:	e000      	b.n	8002640 <prvInitialiseNewTask+0x92>
			{
				break;
 800263e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002648:	e003      	b.n	8002652 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	2b04      	cmp	r3, #4
 8002656:	d901      	bls.n	800265c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002658:	2304      	movs	r3, #4
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	2200      	movs	r2, #0
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	3304      	adds	r3, #4
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe ff83 	bl	800157e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	3318      	adds	r3, #24
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe ff7e 	bl	800157e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	f1c3 0205 	rsb	r2, r3, #5
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	2200      	movs	r2, #0
 800269c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	69b8      	ldr	r0, [r7, #24]
 80026ac:	f7fe fff8 	bl	80016a0 <pxPortInitialiseStack>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026c2:	bf00      	nop
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026d4:	f7ff f8d0 	bl	8001878 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <prvAddNewTaskToReadyList+0xb8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	4a29      	ldr	r2, [pc, #164]	; (8002784 <prvAddNewTaskToReadyList+0xb8>)
 80026e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <prvAddNewTaskToReadyList+0xbc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <prvAddNewTaskToReadyList+0xbc>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <prvAddNewTaskToReadyList+0xb8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d110      	bne.n	800271a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026f8:	f000 fc9c 	bl	8003034 <prvInitialiseTaskLists>
 80026fc:	e00d      	b.n	800271a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <prvAddNewTaskToReadyList+0xc0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <prvAddNewTaskToReadyList+0xbc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	429a      	cmp	r2, r3
 8002712:	d802      	bhi.n	800271a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <prvAddNewTaskToReadyList+0xbc>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800271a:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <prvAddNewTaskToReadyList+0xc4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <prvAddNewTaskToReadyList+0xc4>)
 8002722:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	2201      	movs	r2, #1
 800272a:	409a      	lsls	r2, r3
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <prvAddNewTaskToReadyList+0xc8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	4a18      	ldr	r2, [pc, #96]	; (8002794 <prvAddNewTaskToReadyList+0xc8>)
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4a15      	ldr	r2, [pc, #84]	; (8002798 <prvAddNewTaskToReadyList+0xcc>)
 8002744:	441a      	add	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f7fe ff22 	bl	8001596 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002752:	f7ff f8bf 	bl	80018d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <prvAddNewTaskToReadyList+0xc0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00e      	beq.n	800277c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <prvAddNewTaskToReadyList+0xbc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	429a      	cmp	r2, r3
 800276a:	d207      	bcs.n	800277c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <prvAddNewTaskToReadyList+0xd0>)
 800276e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20001d9c 	.word	0x20001d9c
 8002788:	20001cc4 	.word	0x20001cc4
 800278c:	20001da8 	.word	0x20001da8
 8002790:	20001db8 	.word	0x20001db8
 8002794:	20001da4 	.word	0x20001da4
 8002798:	20001cc8 	.word	0x20001cc8
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80027a8:	f7ff f866 	bl	8001878 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <vTaskDelete+0x18>
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <vTaskDelete+0xf4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	e000      	b.n	80027ba <vTaskDelete+0x1a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3304      	adds	r3, #4
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe ff43 	bl	800164c <uxListRemove>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d115      	bne.n	80027f8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d0:	4931      	ldr	r1, [pc, #196]	; (8002898 <vTaskDelete+0xf8>)
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <vTaskDelete+0x58>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	2201      	movs	r2, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43da      	mvns	r2, r3
 80027ee:	4b2b      	ldr	r3, [pc, #172]	; (800289c <vTaskDelete+0xfc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4013      	ands	r3, r2
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <vTaskDelete+0xfc>)
 80027f6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3318      	adds	r3, #24
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe ff21 	bl	800164c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800280a:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <vTaskDelete+0x100>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3301      	adds	r3, #1
 8002810:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <vTaskDelete+0x100>)
 8002812:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002814:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <vTaskDelete+0xf4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	429a      	cmp	r2, r3
 800281c:	d10b      	bne.n	8002836 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3304      	adds	r3, #4
 8002822:	4619      	mov	r1, r3
 8002824:	481f      	ldr	r0, [pc, #124]	; (80028a4 <vTaskDelete+0x104>)
 8002826:	f7fe feb6 	bl	8001596 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <vTaskDelete+0x108>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3301      	adds	r3, #1
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <vTaskDelete+0x108>)
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e009      	b.n	800284a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <vTaskDelete+0x10c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3b01      	subs	r3, #1
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <vTaskDelete+0x10c>)
 800283e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fc63 	bl	800310c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002846:	f000 fc71 	bl	800312c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800284a:	f7ff f843 	bl	80018d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <vTaskDelete+0x110>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01a      	beq.n	800288c <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <vTaskDelete+0xf4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d115      	bne.n	800288c <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <vTaskDelete+0x114>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <vTaskDelete+0xdc>
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	e7fe      	b.n	800287a <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <vTaskDelete+0x118>)
 800287e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20001cc4 	.word	0x20001cc4
 8002898:	20001cc8 	.word	0x20001cc8
 800289c:	20001da4 	.word	0x20001da4
 80028a0:	20001db8 	.word	0x20001db8
 80028a4:	20001d70 	.word	0x20001d70
 80028a8:	20001d84 	.word	0x20001d84
 80028ac:	20001d9c 	.word	0x20001d9c
 80028b0:	20001da8 	.word	0x20001da8
 80028b4:	20001dc4 	.word	0x20001dc4
 80028b8:	e000ed04 	.word	0xe000ed04

080028bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <vTaskDelay+0x60>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <vTaskDelay+0x2e>
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	e7fe      	b.n	80028e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80028ea:	f000 f867 	bl	80029bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028ee:	2100      	movs	r1, #0
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fcdd 	bl	80032b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80028f6:	f000 f86f 	bl	80029d8 <xTaskResumeAll>
 80028fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <vTaskDelay+0x64>)
 8002904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20001dc4 	.word	0x20001dc4
 8002920:	e000ed04 	.word	0xe000ed04

08002924 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <vTaskStartScheduler+0x80>)
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2300      	movs	r3, #0
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	2246      	movs	r2, #70	; 0x46
 8002936:	491c      	ldr	r1, [pc, #112]	; (80029a8 <vTaskStartScheduler+0x84>)
 8002938:	481c      	ldr	r0, [pc, #112]	; (80029ac <vTaskStartScheduler+0x88>)
 800293a:	f7ff fdf7 	bl	800252c <xTaskCreate>
 800293e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002946:	f000 fd19 	bl	800337c <xTimerCreateTimerTask>
 800294a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d115      	bne.n	800297e <vTaskStartScheduler+0x5a>
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <vTaskStartScheduler+0x8c>)
 8002966:	f04f 32ff 	mov.w	r2, #4294967295
 800296a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <vTaskStartScheduler+0x90>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <vTaskStartScheduler+0x94>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002978:	f7fe ff0e 	bl	8001798 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800297c:	e00d      	b.n	800299a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d109      	bne.n	800299a <vTaskStartScheduler+0x76>
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	e7fe      	b.n	8002998 <vTaskStartScheduler+0x74>
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20001dc0 	.word	0x20001dc0
 80029a8:	0800a0d0 	.word	0x0800a0d0
 80029ac:	08003001 	.word	0x08003001
 80029b0:	20001dbc 	.word	0x20001dbc
 80029b4:	20001da8 	.word	0x20001da8
 80029b8:	20001da0 	.word	0x20001da0

080029bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <vTaskSuspendAll+0x18>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	4a03      	ldr	r2, [pc, #12]	; (80029d4 <vTaskSuspendAll+0x18>)
 80029c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20001dc4 	.word	0x20001dc4

080029d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <xTaskResumeAll+0x114>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <xTaskResumeAll+0x2a>
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	e7fe      	b.n	8002a00 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a02:	f7fe ff39 	bl	8001878 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <xTaskResumeAll+0x114>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	4a37      	ldr	r2, [pc, #220]	; (8002aec <xTaskResumeAll+0x114>)
 8002a0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a10:	4b36      	ldr	r3, [pc, #216]	; (8002aec <xTaskResumeAll+0x114>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d161      	bne.n	8002adc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a18:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <xTaskResumeAll+0x118>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d05d      	beq.n	8002adc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a20:	e02e      	b.n	8002a80 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a22:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <xTaskResumeAll+0x11c>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3318      	adds	r3, #24
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fe0c 	bl	800164c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fe07 	bl	800164c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2201      	movs	r2, #1
 8002a44:	409a      	lsls	r2, r3
 8002a46:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <xTaskResumeAll+0x120>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <xTaskResumeAll+0x120>)
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4a27      	ldr	r2, [pc, #156]	; (8002afc <xTaskResumeAll+0x124>)
 8002a5e:	441a      	add	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f7fe fd95 	bl	8001596 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <xTaskResumeAll+0x128>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <xTaskResumeAll+0x12c>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <xTaskResumeAll+0x11c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1cc      	bne.n	8002a22 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a8e:	f000 fb4d 	bl	800312c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <xTaskResumeAll+0x130>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d010      	beq.n	8002ac0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a9e:	f000 f845 	bl	8002b2c <xTaskIncrementTick>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002aa8:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <xTaskResumeAll+0x12c>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f1      	bne.n	8002a9e <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <xTaskResumeAll+0x130>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <xTaskResumeAll+0x12c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <xTaskResumeAll+0x134>)
 8002ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002adc:	f7fe fefa 	bl	80018d4 <vPortExitCritical>

	return xAlreadyYielded;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20001dc4 	.word	0x20001dc4
 8002af0:	20001d9c 	.word	0x20001d9c
 8002af4:	20001d5c 	.word	0x20001d5c
 8002af8:	20001da4 	.word	0x20001da4
 8002afc:	20001cc8 	.word	0x20001cc8
 8002b00:	20001cc4 	.word	0x20001cc4
 8002b04:	20001db0 	.word	0x20001db0
 8002b08:	20001dac 	.word	0x20001dac
 8002b0c:	e000ed04 	.word	0xe000ed04

08002b10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <xTaskGetTickCount+0x18>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b1c:	687b      	ldr	r3, [r7, #4]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	20001da0 	.word	0x20001da0

08002b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b36:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <xTaskIncrementTick+0x144>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 808d 	bne.w	8002c5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b40:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <xTaskIncrementTick+0x148>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b48:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <xTaskIncrementTick+0x148>)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11f      	bne.n	8002b94 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b54:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <xTaskIncrementTick+0x14c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <xTaskIncrementTick+0x46>
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	e7fe      	b.n	8002b70 <xTaskIncrementTick+0x44>
 8002b72:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <xTaskIncrementTick+0x14c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <xTaskIncrementTick+0x150>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3e      	ldr	r2, [pc, #248]	; (8002c78 <xTaskIncrementTick+0x14c>)
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4a3e      	ldr	r2, [pc, #248]	; (8002c7c <xTaskIncrementTick+0x150>)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b3e      	ldr	r3, [pc, #248]	; (8002c80 <xTaskIncrementTick+0x154>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	4a3c      	ldr	r2, [pc, #240]	; (8002c80 <xTaskIncrementTick+0x154>)
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	f000 facc 	bl	800312c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b94:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <xTaskIncrementTick+0x158>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d348      	bcc.n	8002c30 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <xTaskIncrementTick+0x14c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ba8:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <xTaskIncrementTick+0x158>)
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bae:	601a      	str	r2, [r3, #0]
					break;
 8002bb0:	e03e      	b.n	8002c30 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <xTaskIncrementTick+0x14c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d203      	bcs.n	8002bd2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002bca:	4a2e      	ldr	r2, [pc, #184]	; (8002c84 <xTaskIncrementTick+0x158>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002bd0:	e02e      	b.n	8002c30 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fd38 	bl	800164c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3318      	adds	r3, #24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe fd2f 	bl	800164c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <xTaskIncrementTick+0x15c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <xTaskIncrementTick+0x15c>)
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <xTaskIncrementTick+0x160>)
 8002c0e:	441a      	add	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f7fe fcbd 	bl	8001596 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <xTaskIncrementTick+0x164>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d3b9      	bcc.n	8002b9e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c2e:	e7b6      	b.n	8002b9e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <xTaskIncrementTick+0x164>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c36:	4915      	ldr	r1, [pc, #84]	; (8002c8c <xTaskIncrementTick+0x160>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d901      	bls.n	8002c4c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <xTaskIncrementTick+0x168>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e004      	b.n	8002c64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <xTaskIncrementTick+0x16c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <xTaskIncrementTick+0x16c>)
 8002c62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002c64:	697b      	ldr	r3, [r7, #20]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20001dc4 	.word	0x20001dc4
 8002c74:	20001da0 	.word	0x20001da0
 8002c78:	20001d54 	.word	0x20001d54
 8002c7c:	20001d58 	.word	0x20001d58
 8002c80:	20001db4 	.word	0x20001db4
 8002c84:	20001dbc 	.word	0x20001dbc
 8002c88:	20001da4 	.word	0x20001da4
 8002c8c:	20001cc8 	.word	0x20001cc8
 8002c90:	20001cc4 	.word	0x20001cc4
 8002c94:	20001db0 	.word	0x20001db0
 8002c98:	20001dac 	.word	0x20001dac

08002c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <vTaskSwitchContext+0xec>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <vTaskSwitchContext+0xf0>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002cb0:	e065      	b.n	8002d7e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8002cb2:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <vTaskSwitchContext+0xf0>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002cb8:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <vTaskSwitchContext+0xf4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d111      	bne.n	8002cf4 <vTaskSwitchContext+0x58>
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d10b      	bne.n	8002cf4 <vTaskSwitchContext+0x58>
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d105      	bne.n	8002cf4 <vTaskSwitchContext+0x58>
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	330c      	adds	r3, #12
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d008      	beq.n	8002d06 <vTaskSwitchContext+0x6a>
 8002cf4:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <vTaskSwitchContext+0xf4>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <vTaskSwitchContext+0xf4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3334      	adds	r3, #52	; 0x34
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f002 ff42 	bl	8005b8a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <vTaskSwitchContext+0xf8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f1c3 031f 	rsb	r3, r3, #31
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	491e      	ldr	r1, [pc, #120]	; (8002d98 <vTaskSwitchContext+0xfc>)
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <vTaskSwitchContext+0xa8>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	e7fe      	b.n	8002d42 <vTaskSwitchContext+0xa6>
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4a12      	ldr	r2, [pc, #72]	; (8002d98 <vTaskSwitchContext+0xfc>)
 8002d50:	4413      	add	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	3308      	adds	r3, #8
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d104      	bne.n	8002d74 <vTaskSwitchContext+0xd8>
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <vTaskSwitchContext+0xf4>)
 8002d7c:	6013      	str	r3, [r2, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20001dc4 	.word	0x20001dc4
 8002d8c:	20001db0 	.word	0x20001db0
 8002d90:	20001cc4 	.word	0x20001cc4
 8002d94:	20001da4 	.word	0x20001da4
 8002d98:	20001cc8 	.word	0x20001cc8

08002d9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <vTaskPlaceOnEventList+0x24>
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e7fe      	b.n	8002dbe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <vTaskPlaceOnEventList+0x44>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3318      	adds	r3, #24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fe fc07 	bl	80015dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002dce:	2101      	movs	r1, #1
 8002dd0:	6838      	ldr	r0, [r7, #0]
 8002dd2:	f000 fa6d 	bl	80032b0 <prvAddCurrentTaskToDelayedList>
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20001cc4 	.word	0x20001cc4

08002de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <vTaskPlaceOnEventListRestricted+0x26>
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e7fe      	b.n	8002e08 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <vTaskPlaceOnEventListRestricted+0x50>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3318      	adds	r3, #24
 8002e10:	4619      	mov	r1, r3
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7fe fbbf 	bl	8001596 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68b8      	ldr	r0, [r7, #8]
 8002e28:	f000 fa42 	bl	80032b0 <prvAddCurrentTaskToDelayedList>
	}
 8002e2c:	bf00      	nop
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20001cc4 	.word	0x20001cc4

08002e38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <xTaskRemoveFromEventList+0x2a>
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e7fe      	b.n	8002e60 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	3318      	adds	r3, #24
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fbf0 	bl	800164c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <xTaskRemoveFromEventList+0xac>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11c      	bne.n	8002eae <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	3304      	adds	r3, #4
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe fbe7 	bl	800164c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	2201      	movs	r2, #1
 8002e84:	409a      	lsls	r2, r3
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <xTaskRemoveFromEventList+0xb0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <xTaskRemoveFromEventList+0xb0>)
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4a13      	ldr	r2, [pc, #76]	; (8002eec <xTaskRemoveFromEventList+0xb4>)
 8002e9e:	441a      	add	r2, r3
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f7fe fb75 	bl	8001596 <vListInsertEnd>
 8002eac:	e005      	b.n	8002eba <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3318      	adds	r3, #24
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480e      	ldr	r0, [pc, #56]	; (8002ef0 <xTaskRemoveFromEventList+0xb8>)
 8002eb6:	f7fe fb6e 	bl	8001596 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <xTaskRemoveFromEventList+0xbc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d905      	bls.n	8002ed4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <xTaskRemoveFromEventList+0xc0>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e001      	b.n	8002ed8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002ed8:	697b      	ldr	r3, [r7, #20]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20001dc4 	.word	0x20001dc4
 8002ee8:	20001da4 	.word	0x20001da4
 8002eec:	20001cc8 	.word	0x20001cc8
 8002ef0:	20001d5c 	.word	0x20001d5c
 8002ef4:	20001cc4 	.word	0x20001cc4
 8002ef8:	20001db0 	.word	0x20001db0

08002efc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <vTaskInternalSetTimeOutState+0x24>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <vTaskInternalSetTimeOutState+0x28>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	605a      	str	r2, [r3, #4]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20001db4 	.word	0x20001db4
 8002f24:	20001da0 	.word	0x20001da0

08002f28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <xTaskCheckForTimeOut+0x24>
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	e7fe      	b.n	8002f4a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <xTaskCheckForTimeOut+0x3e>
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e7fe      	b.n	8002f64 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002f66:	f7fe fc87 	bl	8001878 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <xTaskCheckForTimeOut+0xb8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d102      	bne.n	8002f8a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	e023      	b.n	8002fd2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <xTaskCheckForTimeOut+0xbc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d007      	beq.n	8002fa6 <xTaskCheckForTimeOut+0x7e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d802      	bhi.n	8002fa6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	e015      	b.n	8002fd2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d90b      	bls.n	8002fc8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	1ad2      	subs	r2, r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff9d 	bl	8002efc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e004      	b.n	8002fd2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002fd2:	f7fe fc7f 	bl	80018d4 <vPortExitCritical>

	return xReturn;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20001da0 	.word	0x20001da0
 8002fe4:	20001db4 	.word	0x20001db4

08002fe8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <vTaskMissedYield+0x14>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20001db0 	.word	0x20001db0

08003000 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003008:	f000 f854 	bl	80030b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <prvIdleTask+0x2c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d907      	bls.n	8003024 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <prvIdleTask+0x30>)
 8003016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003024:	f002 fdb7 	bl	8005b96 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003028:	e7ee      	b.n	8003008 <prvIdleTask+0x8>
 800302a:	bf00      	nop
 800302c:	20001cc8 	.word	0x20001cc8
 8003030:	e000ed04 	.word	0xe000ed04

08003034 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	e00c      	b.n	800305a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <prvInitialiseTaskLists+0x60>)
 800304c:	4413      	add	r3, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fa76 	bl	8001540 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3301      	adds	r3, #1
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d9ef      	bls.n	8003040 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003060:	480d      	ldr	r0, [pc, #52]	; (8003098 <prvInitialiseTaskLists+0x64>)
 8003062:	f7fe fa6d 	bl	8001540 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003066:	480d      	ldr	r0, [pc, #52]	; (800309c <prvInitialiseTaskLists+0x68>)
 8003068:	f7fe fa6a 	bl	8001540 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800306c:	480c      	ldr	r0, [pc, #48]	; (80030a0 <prvInitialiseTaskLists+0x6c>)
 800306e:	f7fe fa67 	bl	8001540 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003072:	480c      	ldr	r0, [pc, #48]	; (80030a4 <prvInitialiseTaskLists+0x70>)
 8003074:	f7fe fa64 	bl	8001540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003078:	480b      	ldr	r0, [pc, #44]	; (80030a8 <prvInitialiseTaskLists+0x74>)
 800307a:	f7fe fa61 	bl	8001540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <prvInitialiseTaskLists+0x78>)
 8003080:	4a05      	ldr	r2, [pc, #20]	; (8003098 <prvInitialiseTaskLists+0x64>)
 8003082:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <prvInitialiseTaskLists+0x7c>)
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <prvInitialiseTaskLists+0x68>)
 8003088:	601a      	str	r2, [r3, #0]
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20001cc8 	.word	0x20001cc8
 8003098:	20001d2c 	.word	0x20001d2c
 800309c:	20001d40 	.word	0x20001d40
 80030a0:	20001d5c 	.word	0x20001d5c
 80030a4:	20001d70 	.word	0x20001d70
 80030a8:	20001d88 	.word	0x20001d88
 80030ac:	20001d54 	.word	0x20001d54
 80030b0:	20001d58 	.word	0x20001d58

080030b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030ba:	e019      	b.n	80030f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80030bc:	f7fe fbdc 	bl	8001878 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <prvCheckTasksWaitingTermination+0x4c>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fabd 	bl	800164c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <prvCheckTasksWaitingTermination+0x50>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <prvCheckTasksWaitingTermination+0x50>)
 80030da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <prvCheckTasksWaitingTermination+0x54>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <prvCheckTasksWaitingTermination+0x54>)
 80030e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80030e6:	f7fe fbf5 	bl	80018d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f80e 	bl	800310c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <prvCheckTasksWaitingTermination+0x54>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e1      	bne.n	80030bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20001d70 	.word	0x20001d70
 8003104:	20001d9c 	.word	0x20001d9c
 8003108:	20001d84 	.word	0x20001d84

0800310c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe fd2d 	bl	8001b78 <vPortFree>
			vPortFree( pxTCB );
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe fd2a 	bl	8001b78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <prvResetNextTaskUnblockTime+0x38>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <prvResetNextTaskUnblockTime+0x3c>)
 800313e:	f04f 32ff 	mov.w	r2, #4294967295
 8003142:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003144:	e008      	b.n	8003158 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003146:	4b07      	ldr	r3, [pc, #28]	; (8003164 <prvResetNextTaskUnblockTime+0x38>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <prvResetNextTaskUnblockTime+0x3c>)
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20001d54 	.word	0x20001d54
 8003168:	20001dbc 	.word	0x20001dbc

0800316c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <xTaskGetSchedulerState+0x34>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800317a:	2301      	movs	r3, #1
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	e008      	b.n	8003192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <xTaskGetSchedulerState+0x38>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003188:	2302      	movs	r3, #2
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	e001      	b.n	8003192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003192:	687b      	ldr	r3, [r7, #4]
	}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20001da8 	.word	0x20001da8
 80031a4:	20001dc4 	.word	0x20001dc4

080031a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d06c      	beq.n	8003298 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80031be:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <xTaskPriorityDisinherit+0xfc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d009      	beq.n	80031dc <xTaskPriorityDisinherit+0x34>
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e7fe      	b.n	80031da <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <xTaskPriorityDisinherit+0x50>
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	e7fe      	b.n	80031f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	1e5a      	subs	r2, r3, #1
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	429a      	cmp	r2, r3
 800320c:	d044      	beq.n	8003298 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	2b00      	cmp	r3, #0
 8003214:	d140      	bne.n	8003298 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	3304      	adds	r3, #4
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fa16 	bl	800164c <uxListRemove>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d115      	bne.n	8003252 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322a:	491f      	ldr	r1, [pc, #124]	; (80032a8 <xTaskPriorityDisinherit+0x100>)
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xTaskPriorityDisinherit+0xaa>
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	2201      	movs	r2, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	4b18      	ldr	r3, [pc, #96]	; (80032ac <xTaskPriorityDisinherit+0x104>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4013      	ands	r3, r2
 800324e:	4a17      	ldr	r2, [pc, #92]	; (80032ac <xTaskPriorityDisinherit+0x104>)
 8003250:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	f1c3 0205 	rsb	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	2201      	movs	r2, #1
 800326c:	409a      	lsls	r2, r3
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <xTaskPriorityDisinherit+0x104>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <xTaskPriorityDisinherit+0x104>)
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4a08      	ldr	r2, [pc, #32]	; (80032a8 <xTaskPriorityDisinherit+0x100>)
 8003286:	441a      	add	r2, r3
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f7fe f981 	bl	8001596 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003294:	2301      	movs	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003298:	697b      	ldr	r3, [r7, #20]
	}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20001cc4 	.word	0x20001cc4
 80032a8:	20001cc8 	.word	0x20001cc8
 80032ac:	20001da4 	.word	0x20001da4

080032b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <prvAddCurrentTaskToDelayedList+0xb0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe f9c0 	bl	800164c <uxListRemove>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10b      	bne.n	80032ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	2201      	movs	r2, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4013      	ands	r3, r2
 80032e6:	4a20      	ldr	r2, [pc, #128]	; (8003368 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d10a      	bne.n	8003308 <prvAddCurrentTaskToDelayedList+0x58>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	481a      	ldr	r0, [pc, #104]	; (800336c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003302:	f7fe f948 	bl	8001596 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003306:	e026      	b.n	8003356 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d209      	bcs.n	8003334 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003320:	4b13      	ldr	r3, [pc, #76]	; (8003370 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3304      	adds	r3, #4
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f7fe f955 	bl	80015dc <vListInsert>
}
 8003332:	e010      	b.n	8003356 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <prvAddCurrentTaskToDelayedList+0xb4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3304      	adds	r3, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7fe f94b 	bl	80015dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003346:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	d202      	bcs.n	8003356 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003350:	4a09      	ldr	r2, [pc, #36]	; (8003378 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6013      	str	r3, [r2, #0]
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20001da0 	.word	0x20001da0
 8003364:	20001cc4 	.word	0x20001cc4
 8003368:	20001da4 	.word	0x20001da4
 800336c:	20001d88 	.word	0x20001d88
 8003370:	20001d58 	.word	0x20001d58
 8003374:	20001d54 	.word	0x20001d54
 8003378:	20001dbc 	.word	0x20001dbc

0800337c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003386:	f000 facd 	bl	8003924 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <xTimerCreateTimerTask+0x50>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <xTimerCreateTimerTask+0x54>)
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	2303      	movs	r3, #3
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	2300      	movs	r3, #0
 800339c:	2246      	movs	r2, #70	; 0x46
 800339e:	490d      	ldr	r1, [pc, #52]	; (80033d4 <xTimerCreateTimerTask+0x58>)
 80033a0:	480d      	ldr	r0, [pc, #52]	; (80033d8 <xTimerCreateTimerTask+0x5c>)
 80033a2:	f7ff f8c3 	bl	800252c <xTaskCreate>
 80033a6:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <xTimerCreateTimerTask+0x46>
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	e7fe      	b.n	80033c0 <xTimerCreateTimerTask+0x44>
	return xReturn;
 80033c2:	687b      	ldr	r3, [r7, #4]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20001df8 	.word	0x20001df8
 80033d0:	20001dfc 	.word	0x20001dfc
 80033d4:	0800a0d8 	.word	0x0800a0d8
 80033d8:	0800350d 	.word	0x0800350d

080033dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <xTimerGenericCommand+0x2c>
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	e7fe      	b.n	8003406 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <xTimerGenericCommand+0x94>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02a      	beq.n	8003466 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b05      	cmp	r3, #5
 8003420:	dc18      	bgt.n	8003454 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003422:	f7ff fea3 	bl	800316c <xTaskGetSchedulerState>
 8003426:	4603      	mov	r3, r0
 8003428:	2b02      	cmp	r3, #2
 800342a:	d109      	bne.n	8003440 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800342c:	4b10      	ldr	r3, [pc, #64]	; (8003470 <xTimerGenericCommand+0x94>)
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	f107 0114 	add.w	r1, r7, #20
 8003434:	2300      	movs	r3, #0
 8003436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003438:	f7fe fcc6 	bl	8001dc8 <xQueueGenericSend>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24
 800343e:	e012      	b.n	8003466 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <xTimerGenericCommand+0x94>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	f107 0114 	add.w	r1, r7, #20
 8003448:	2300      	movs	r3, #0
 800344a:	2200      	movs	r2, #0
 800344c:	f7fe fcbc 	bl	8001dc8 <xQueueGenericSend>
 8003450:	6278      	str	r0, [r7, #36]	; 0x24
 8003452:	e008      	b.n	8003466 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <xTimerGenericCommand+0x94>)
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	f107 0114 	add.w	r1, r7, #20
 800345c:	2300      	movs	r3, #0
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	f7fe fdac 	bl	8001fbc <xQueueGenericSendFromISR>
 8003464:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003468:	4618      	mov	r0, r3
 800346a:	3728      	adds	r7, #40	; 0x28
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20001df8 	.word	0x20001df8

08003474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <prvProcessExpiredTimer+0x94>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3304      	adds	r3, #4
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe f8dd 	bl	800164c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d021      	beq.n	80034e4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	699a      	ldr	r2, [r3, #24]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	18d1      	adds	r1, r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	6978      	ldr	r0, [r7, #20]
 80034ae:	f000 f8cf 	bl	8003650 <prvInsertTimerInActiveList>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01e      	beq.n	80034f6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034b8:	2300      	movs	r3, #0
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	2100      	movs	r1, #0
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff ff8a 	bl	80033dc <xTimerGenericCommand>
 80034c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d112      	bne.n	80034f6 <prvProcessExpiredTimer+0x82>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e7fe      	b.n	80034e2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	6978      	ldr	r0, [r7, #20]
 80034fc:	4798      	blx	r3
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20001df0 	.word	0x20001df0

0800350c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003514:	f107 0308 	add.w	r3, r7, #8
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f857 	bl	80035cc <prvGetNextExpireTime>
 800351e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4619      	mov	r1, r3
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f803 	bl	8003530 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800352a:	f000 f8d3 	bl	80036d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800352e:	e7f1      	b.n	8003514 <prvTimerTask+0x8>

08003530 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800353a:	f7ff fa3f 	bl	80029bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800353e:	f107 0308 	add.w	r3, r7, #8
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f864 	bl	8003610 <prvSampleTimeNow>
 8003548:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d130      	bne.n	80035b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <prvProcessTimerOrBlockTask+0x3c>
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	429a      	cmp	r2, r3
 800355c:	d806      	bhi.n	800356c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800355e:	f7ff fa3b 	bl	80029d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff85 	bl	8003474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800356a:	e024      	b.n	80035b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <prvProcessTimerOrBlockTask+0x90>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <prvProcessTimerOrBlockTask+0x50>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <prvProcessTimerOrBlockTask+0x52>
 8003580:	2300      	movs	r3, #0
 8003582:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <prvProcessTimerOrBlockTask+0x94>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	f7fe ff97 	bl	80024c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003596:	f7ff fa1f 	bl	80029d8 <xTaskResumeAll>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <prvProcessTimerOrBlockTask+0x98>)
 80035a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	f3bf 8f6f 	isb	sy
}
 80035b0:	e001      	b.n	80035b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80035b2:	f7ff fa11 	bl	80029d8 <xTaskResumeAll>
}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20001df4 	.word	0x20001df4
 80035c4:	20001df8 	.word	0x20001df8
 80035c8:	e000ed04 	.word	0xe000ed04

080035cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80035d4:	4b0d      	ldr	r3, [pc, #52]	; (800360c <prvGetNextExpireTime+0x40>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <prvGetNextExpireTime+0x16>
 80035de:	2201      	movs	r2, #1
 80035e0:	e000      	b.n	80035e4 <prvGetNextExpireTime+0x18>
 80035e2:	2200      	movs	r2, #0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <prvGetNextExpireTime+0x40>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	e001      	b.n	8003600 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003600:	68fb      	ldr	r3, [r7, #12]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	20001df0 	.word	0x20001df0

08003610 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003618:	f7ff fa7a 	bl	8002b10 <xTaskGetTickCount>
 800361c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <prvSampleTimeNow+0x3c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	429a      	cmp	r2, r3
 8003626:	d205      	bcs.n	8003634 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003628:	f000 f918 	bl	800385c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e002      	b.n	800363a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800363a:	4a04      	ldr	r2, [pc, #16]	; (800364c <prvSampleTimeNow+0x3c>)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003640:	68fb      	ldr	r3, [r7, #12]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20001e00 	.word	0x20001e00

08003650 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	d812      	bhi.n	800369c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	1ad2      	subs	r2, r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	429a      	cmp	r2, r3
 8003682:	d302      	bcc.n	800368a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003684:	2301      	movs	r3, #1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e01b      	b.n	80036c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <prvInsertTimerInActiveList+0x7c>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3304      	adds	r3, #4
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f7fd ffa1 	bl	80015dc <vListInsert>
 800369a:	e012      	b.n	80036c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d206      	bcs.n	80036b2 <prvInsertTimerInActiveList+0x62>
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e007      	b.n	80036c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <prvInsertTimerInActiveList+0x80>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3304      	adds	r3, #4
 80036ba:	4619      	mov	r1, r3
 80036bc:	4610      	mov	r0, r2
 80036be:	f7fd ff8d 	bl	80015dc <vListInsert>
		}
	}

	return xProcessTimerNow;
 80036c2:	697b      	ldr	r3, [r7, #20]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20001df4 	.word	0x20001df4
 80036d0:	20001df0 	.word	0x20001df0

080036d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	; 0x30
 80036d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036da:	e0ac      	b.n	8003836 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f2c0 80a9 	blt.w	8003836 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	3304      	adds	r3, #4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd ffa9 	bl	800164c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff87 	bl	8003610 <prvSampleTimeNow>
 8003702:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b09      	cmp	r3, #9
 8003708:	f200 8094 	bhi.w	8003834 <prvProcessReceivedCommands+0x160>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <prvProcessReceivedCommands+0x40>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	0800373d 	.word	0x0800373d
 8003718:	0800373d 	.word	0x0800373d
 800371c:	0800373d 	.word	0x0800373d
 8003720:	080037af 	.word	0x080037af
 8003724:	080037c3 	.word	0x080037c3
 8003728:	0800380b 	.word	0x0800380b
 800372c:	0800373d 	.word	0x0800373d
 8003730:	0800373d 	.word	0x0800373d
 8003734:	080037af 	.word	0x080037af
 8003738:	080037c3 	.word	0x080037c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	b2da      	uxtb	r2, r3
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	18d1      	adds	r1, r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a3a      	ldr	r2, [r7, #32]
 800375a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800375c:	f7ff ff78 	bl	8003650 <prvInsertTimerInActiveList>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d067      	beq.n	8003836 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800376c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05c      	beq.n	8003836 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	441a      	add	r2, r3
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	2100      	movs	r1, #0
 800378c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800378e:	f7ff fe25 	bl	80033dc <xTimerGenericCommand>
 8003792:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d14d      	bne.n	8003836 <prvProcessReceivedCommands+0x162>
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	e7fe      	b.n	80037ac <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80037c0:	e039      	b.n	8003836 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <prvProcessReceivedCommands+0x122>
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e7fe      	b.n	80037f4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	18d1      	adds	r1, r2, r3
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003804:	f7ff ff24 	bl	8003650 <prvInsertTimerInActiveList>
					break;
 8003808:	e015      	b.n	8003836 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8003818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800381a:	f7fe f9ad 	bl	8001b78 <vPortFree>
 800381e:	e00a      	b.n	8003836 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003832:	e000      	b.n	8003836 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8003834:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <prvProcessReceivedCommands+0x184>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f107 0108 	add.w	r1, r7, #8
 800383e:	2200      	movs	r2, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fc53 	bl	80020ec <xQueueReceive>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	f47f af47 	bne.w	80036dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800384e:	bf00      	nop
 8003850:	3728      	adds	r7, #40	; 0x28
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20001df8 	.word	0x20001df8

0800385c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003862:	e047      	b.n	80038f4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003864:	4b2d      	ldr	r3, [pc, #180]	; (800391c <prvSwitchTimerLists+0xc0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386e:	4b2b      	ldr	r3, [pc, #172]	; (800391c <prvSwitchTimerLists+0xc0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	3304      	adds	r3, #4
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fee5 	bl	800164c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	6938      	ldr	r0, [r7, #16]
 8003888:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02d      	beq.n	80038f4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4413      	add	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d90e      	bls.n	80038c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038b6:	4b19      	ldr	r3, [pc, #100]	; (800391c <prvSwitchTimerLists+0xc0>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3304      	adds	r3, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fd fe8b 	bl	80015dc <vListInsert>
 80038c6:	e015      	b.n	80038f4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038c8:	2300      	movs	r3, #0
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2300      	movs	r3, #0
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	2100      	movs	r1, #0
 80038d2:	6938      	ldr	r0, [r7, #16]
 80038d4:	f7ff fd82 	bl	80033dc <xTimerGenericCommand>
 80038d8:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <prvSwitchTimerLists+0x98>
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	e7fe      	b.n	80038f2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <prvSwitchTimerLists+0xc0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1b2      	bne.n	8003864 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <prvSwitchTimerLists+0xc0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <prvSwitchTimerLists+0xc4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <prvSwitchTimerLists+0xc0>)
 800390a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <prvSwitchTimerLists+0xc4>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6013      	str	r3, [r2, #0]
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20001df0 	.word	0x20001df0
 8003920:	20001df4 	.word	0x20001df4

08003924 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003928:	f7fd ffa6 	bl	8001878 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800392c:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <prvCheckForValidListAndQueue+0x40>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d113      	bne.n	800395c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <prvCheckForValidListAndQueue+0x44>)
 8003936:	f7fd fe03 	bl	8001540 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800393a:	480c      	ldr	r0, [pc, #48]	; (800396c <prvCheckForValidListAndQueue+0x48>)
 800393c:	f7fd fe00 	bl	8001540 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <prvCheckForValidListAndQueue+0x4c>)
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <prvCheckForValidListAndQueue+0x44>)
 8003944:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <prvCheckForValidListAndQueue+0x50>)
 8003948:	4a08      	ldr	r2, [pc, #32]	; (800396c <prvCheckForValidListAndQueue+0x48>)
 800394a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800394c:	2200      	movs	r2, #0
 800394e:	210c      	movs	r1, #12
 8003950:	2005      	movs	r0, #5
 8003952:	f7fe f9e5 	bl	8001d20 <xQueueGenericCreate>
 8003956:	4602      	mov	r2, r0
 8003958:	4b02      	ldr	r3, [pc, #8]	; (8003964 <prvCheckForValidListAndQueue+0x40>)
 800395a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800395c:	f7fd ffba 	bl	80018d4 <vPortExitCritical>
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20001df8 	.word	0x20001df8
 8003968:	20001dc8 	.word	0x20001dc8
 800396c:	20001ddc 	.word	0x20001ddc
 8003970:	20001df0 	.word	0x20001df0
 8003974:	20001df4 	.word	0x20001df4

08003978 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	230f      	movs	r3, #15
 800398a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	78db      	ldrb	r3, [r3, #3]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d03a      	beq.n	8003a0a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003994:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <NVIC_Init+0xbc>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f1c3 0304 	rsb	r3, r3, #4
 80039a8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	461a      	mov	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	789b      	ldrb	r3, [r3, #2]
 80039c6:	461a      	mov	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80039d8:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <NVIC_Init+0xc0>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	6979      	ldr	r1, [r7, #20]
 80039e0:	b2c9      	uxtb	r1, r1
 80039e2:	4413      	add	r3, r2
 80039e4:	460a      	mov	r2, r1
 80039e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80039ea:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <NVIC_Init+0xc0>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003a04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003a08:	e00f      	b.n	8003a2a <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003a0a:	490b      	ldr	r1, [pc, #44]	; (8003a38 <NVIC_Init+0xc0>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2201      	movs	r2, #1
 8003a20:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003a22:	f100 0320 	add.w	r3, r0, #32
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	e000ed00 	.word	0xe000ed00
 8003a38:	e000e100 	.word	0xe000e100

08003a3c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	78db      	ldrb	r3, [r3, #3]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	78db      	ldrb	r3, [r3, #3]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	789b      	ldrb	r3, [r3, #2]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d044      	beq.n	8003b14 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e038      	b.n	8003b08 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8003a96:	2201      	movs	r2, #1
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d126      	bne.n	8003b02 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003aba:	220f      	movs	r2, #15
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4013      	ands	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	78db      	ldrb	r3, [r3, #3]
 8003ae0:	2b28      	cmp	r3, #40	; 0x28
 8003ae2:	d105      	bne.n	8003af0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	615a      	str	r2, [r3, #20]
 8003aee:	e008      	b.n	8003b02 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	78db      	ldrb	r3, [r3, #3]
 8003af4:	2b48      	cmp	r3, #72	; 0x48
 8003af6:	d104      	bne.n	8003b02 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8003af8:	2201      	movs	r2, #1
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	409a      	lsls	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b07      	cmp	r3, #7
 8003b0c:	d9c3      	bls.n	8003a96 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	2bff      	cmp	r3, #255	; 0xff
 8003b1a:	d946      	bls.n	8003baa <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	e03a      	b.n	8003b9e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d127      	bne.n	8003b98 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003b4e:	220f      	movs	r2, #15
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	78db      	ldrb	r3, [r3, #3]
 8003b74:	2b28      	cmp	r3, #40	; 0x28
 8003b76:	d105      	bne.n	8003b84 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	78db      	ldrb	r3, [r3, #3]
 8003b88:	2b48      	cmp	r3, #72	; 0x48
 8003b8a:	d105      	bne.n	8003b98 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b07      	cmp	r3, #7
 8003ba2:	d9c1      	bls.n	8003b28 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	605a      	str	r2, [r3, #4]
  }
}
 8003baa:	bf00      	nop
 8003bac:	3724      	adds	r7, #36	; 0x24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8003bca:	4b57      	ldr	r3, [pc, #348]	; (8003d28 <I2C_Init+0x174>)
 8003bcc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	889b      	ldrh	r3, [r3, #4]
 8003bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8003bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bda:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f98d 	bl	8003f00 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4a4f      	ldr	r2, [pc, #316]	; (8003d2c <I2C_Init+0x178>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0c9b      	lsrs	r3, r3, #18
 8003bf4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8003bf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c02:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a44      	ldr	r2, [pc, #272]	; (8003d30 <I2C_Init+0x17c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d815      	bhi.n	8003c4e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8003c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d801      	bhi.n	8003c3a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8003c36:	2304      	movs	r3, #4
 8003c38:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8003c3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003c42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c44:	3301      	adds	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	841a      	strh	r2, [r3, #32]
 8003c4c:	e040      	b.n	8003cd0 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	88db      	ldrh	r3, [r3, #6]
 8003c52:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d109      	bne.n	8003c6e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c6c:	e00e      	b.n	8003c8c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	009a      	lsls	r2, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8003c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c8a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8003c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8003c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8003c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cae:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003cb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <I2C_Init+0x180>)
 8003cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8003cc0:	1192      	asrs	r2, r2, #6
 8003cc2:	17db      	asrs	r3, r3, #31
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003cd4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8003cec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cee:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8003cf2:	f023 0302 	bic.w	r3, r3, #2
 8003cf6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	889a      	ldrh	r2, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	895b      	ldrh	r3, [r3, #10]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d06:	4313      	orrs	r3, r2
 8003d08:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d0e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	899a      	ldrh	r2, [r3, #12]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	891b      	ldrh	r3, [r3, #8]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	811a      	strh	r2, [r3, #8]
}
 8003d20:	bf00      	nop
 8003d22:	3728      	adds	r7, #40	; 0x28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	007a1200 	.word	0x007a1200
 8003d2c:	431bde83 	.word	0x431bde83
 8003d30:	000186a0 	.word	0x000186a0
 8003d34:	10624dd3 	.word	0x10624dd3

08003d38 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8003d5a:	e007      	b.n	8003d6c <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	801a      	strh	r2, [r3, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8003d98:	e007      	b.n	8003daa <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	801a      	strh	r2, [r3, #0]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8003dd6:	e007      	b.n	8003de8 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	801a      	strh	r2, [r3, #0]
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8003e14:	e007      	b.n	8003e26 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	801a      	strh	r2, [r3, #0]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	821a      	strh	r2, [r3, #16]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8a1b      	ldrh	r3, [r3, #16]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
 8003e74:	4613      	mov	r3, r2
 8003e76:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8003e78:	78bb      	ldrb	r3, [r7, #2]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	70fb      	strb	r3, [r7, #3]
 8003e86:	e003      	b.n	8003e90 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	821a      	strh	r2, [r3, #16]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr

08003ea2 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b087      	sub	sp, #28
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8a9b      	ldrh	r3, [r3, #20]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8b1b      	ldrh	r3, [r3, #24]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003edc:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d102      	bne.n	8003ef0 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
 8003eee:	e001      	b.n	8003ef4 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	; 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8003f1c:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <RCC_GetClocksFreq+0x148>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d007      	beq.n	8003f3c <RCC_GetClocksFreq+0x3c>
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d009      	beq.n	8003f44 <RCC_GetClocksFreq+0x44>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d12f      	bne.n	8003f94 <RCC_GetClocksFreq+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a45      	ldr	r2, [pc, #276]	; (800404c <RCC_GetClocksFreq+0x14c>)
 8003f38:	601a      	str	r2, [r3, #0]
      break;
 8003f3a:	e02f      	b.n	8003f9c <RCC_GetClocksFreq+0x9c>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a43      	ldr	r2, [pc, #268]	; (800404c <RCC_GetClocksFreq+0x14c>)
 8003f40:	601a      	str	r2, [r3, #0]
      break;
 8003f42:	e02b      	b.n	8003f9c <RCC_GetClocksFreq+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8003f44:	4b40      	ldr	r3, [pc, #256]	; (8004048 <RCC_GetClocksFreq+0x148>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f4c:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8003f4e:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <RCC_GetClocksFreq+0x148>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	0c9b      	lsrs	r3, r3, #18
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <RCC_GetClocksFreq+0x74>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	4a39      	ldr	r2, [pc, #228]	; (8004050 <RCC_GetClocksFreq+0x150>)
 8003f6a:	fb02 f203 	mul.w	r2, r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8003f72:	e013      	b.n	8003f9c <RCC_GetClocksFreq+0x9c>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8003f74:	4b34      	ldr	r3, [pc, #208]	; (8004048 <RCC_GetClocksFreq+0x148>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8003f80:	4a32      	ldr	r2, [pc, #200]	; (800404c <RCC_GetClocksFreq+0x14c>)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	fb02 f203 	mul.w	r2, r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
      break;
 8003f92:	e003      	b.n	8003f9c <RCC_GetClocksFreq+0x9c>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a2d      	ldr	r2, [pc, #180]	; (800404c <RCC_GetClocksFreq+0x14c>)
 8003f98:	601a      	str	r2, [r3, #0]
      break;
 8003f9a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <RCC_GetClocksFreq+0x148>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003fac:	4a29      	ldr	r2, [pc, #164]	; (8004054 <RCC_GetClocksFreq+0x154>)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	40da      	lsrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <RCC_GetClocksFreq+0x148>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fcc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <RCC_GetClocksFreq+0x154>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	40da      	lsrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <RCC_GetClocksFreq+0x148>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ff4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	0adb      	lsrs	r3, r3, #11
 8003ffa:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8003ffc:	4a15      	ldr	r2, [pc, #84]	; (8004054 <RCC_GetClocksFreq+0x154>)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	40da      	lsrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <RCC_GetClocksFreq+0x148>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800401c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	0b9b      	lsrs	r3, r3, #14
 8004022:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 8004024:	4a0c      	ldr	r2, [pc, #48]	; (8004058 <RCC_GetClocksFreq+0x158>)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	fbb2 f2f3 	udiv	r2, r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	611a      	str	r2, [r3, #16]
}
 800403e:	bf00      	nop
 8004040:	3724      	adds	r7, #36	; 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	40021000 	.word	0x40021000
 800404c:	007a1200 	.word	0x007a1200
 8004050:	003d0900 	.word	0x003d0900
 8004054:	20000008 	.word	0x20000008
 8004058:	20000018 	.word	0x20000018

0800405c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d006      	beq.n	800407c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800406e:	4909      	ldr	r1, [pc, #36]	; (8004094 <RCC_APB2PeriphClockCmd+0x38>)
 8004070:	4b08      	ldr	r3, [pc, #32]	; (8004094 <RCC_APB2PeriphClockCmd+0x38>)
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4313      	orrs	r3, r2
 8004078:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800407a:	e006      	b.n	800408a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800407c:	4905      	ldr	r1, [pc, #20]	; (8004094 <RCC_APB2PeriphClockCmd+0x38>)
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <RCC_APB2PeriphClockCmd+0x38>)
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	43db      	mvns	r3, r3
 8004086:	4013      	ands	r3, r2
 8004088:	618b      	str	r3, [r1, #24]
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	40021000 	.word	0x40021000

08004098 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80040aa:	4909      	ldr	r1, [pc, #36]	; (80040d0 <RCC_APB1PeriphClockCmd+0x38>)
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <RCC_APB1PeriphClockCmd+0x38>)
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80040b6:	e006      	b.n	80040c6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80040b8:	4905      	ldr	r1, [pc, #20]	; (80040d0 <RCC_APB1PeriphClockCmd+0x38>)
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <RCC_APB1PeriphClockCmd+0x38>)
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	4013      	ands	r3, r2
 80040c4:	61cb      	str	r3, [r1, #28]
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	40021000 	.word	0x40021000

080040d4 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a2e      	ldr	r2, [pc, #184]	; (80041a4 <TIM_TimeBaseInit+0xd0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <TIM_TimeBaseInit+0x44>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a2d      	ldr	r2, [pc, #180]	; (80041a8 <TIM_TimeBaseInit+0xd4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00f      	beq.n	8004118 <TIM_TimeBaseInit+0x44>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fe:	d00b      	beq.n	8004118 <TIM_TimeBaseInit+0x44>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a2a      	ldr	r2, [pc, #168]	; (80041ac <TIM_TimeBaseInit+0xd8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <TIM_TimeBaseInit+0x44>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <TIM_TimeBaseInit+0xdc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a28      	ldr	r2, [pc, #160]	; (80041b4 <TIM_TimeBaseInit+0xe0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d108      	bne.n	800412a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8004118:	89fb      	ldrh	r3, [r7, #14]
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	885a      	ldrh	r2, [r3, #2]
 8004124:	89fb      	ldrh	r3, [r7, #14]
 8004126:	4313      	orrs	r3, r2
 8004128:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <TIM_TimeBaseInit+0xe4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00c      	beq.n	800414c <TIM_TimeBaseInit+0x78>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a21      	ldr	r2, [pc, #132]	; (80041bc <TIM_TimeBaseInit+0xe8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d008      	beq.n	800414c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800413a:	89fb      	ldrh	r3, [r7, #14]
 800413c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004140:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	88da      	ldrh	r2, [r3, #6]
 8004146:	89fb      	ldrh	r3, [r7, #14]
 8004148:	4313      	orrs	r3, r2
 800414a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	89fa      	ldrh	r2, [r7, #14]
 8004150:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	889a      	ldrh	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a0f      	ldr	r2, [pc, #60]	; (80041a4 <TIM_TimeBaseInit+0xd0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00f      	beq.n	800418a <TIM_TimeBaseInit+0xb6>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <TIM_TimeBaseInit+0xd4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00b      	beq.n	800418a <TIM_TimeBaseInit+0xb6>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <TIM_TimeBaseInit+0xec>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d007      	beq.n	800418a <TIM_TimeBaseInit+0xb6>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <TIM_TimeBaseInit+0xf0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_TimeBaseInit+0xb6>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <TIM_TimeBaseInit+0xf4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d104      	bne.n	8004194 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	7a1b      	ldrb	r3, [r3, #8]
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	829a      	strh	r2, [r3, #20]
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40013400 	.word	0x40013400
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800
 80041b4:	40000c00 	.word	0x40000c00
 80041b8:	40001000 	.word	0x40001000
 80041bc:	40001400 	.word	0x40001400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800

080041cc <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	817b      	strh	r3, [r7, #10]
 80041da:	2300      	movs	r3, #0
 80041dc:	81fb      	strh	r3, [r7, #14]
 80041de:	2300      	movs	r3, #0
 80041e0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8c1b      	ldrh	r3, [r3, #32]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8c1b      	ldrh	r3, [r3, #32]
 80041f6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	889b      	ldrh	r3, [r3, #4]
 80041fc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8b1b      	ldrh	r3, [r3, #24]
 8004202:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8004204:	897b      	ldrh	r3, [r7, #10]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800420c:	897b      	ldrh	r3, [r7, #10]
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	881a      	ldrh	r2, [r3, #0]
 8004218:	897b      	ldrh	r3, [r7, #10]
 800421a:	4313      	orrs	r3, r2
 800421c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800421e:	89fb      	ldrh	r3, [r7, #14]
 8004220:	f023 0302 	bic.w	r3, r3, #2
 8004224:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	891a      	ldrh	r2, [r3, #8]
 800422a:	89fb      	ldrh	r3, [r7, #14]
 800422c:	4313      	orrs	r3, r2
 800422e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	885a      	ldrh	r2, [r3, #2]
 8004234:	89fb      	ldrh	r3, [r7, #14]
 8004236:	4313      	orrs	r3, r2
 8004238:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <TIM_OC1Init+0x104>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00f      	beq.n	8004262 <TIM_OC1Init+0x96>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <TIM_OC1Init+0x108>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00b      	beq.n	8004262 <TIM_OC1Init+0x96>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a22      	ldr	r2, [pc, #136]	; (80042d8 <TIM_OC1Init+0x10c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <TIM_OC1Init+0x96>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a21      	ldr	r2, [pc, #132]	; (80042dc <TIM_OC1Init+0x110>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <TIM_OC1Init+0x114>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d123      	bne.n	80042aa <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8004262:	89fb      	ldrh	r3, [r7, #14]
 8004264:	f023 0308 	bic.w	r3, r3, #8
 8004268:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	895a      	ldrh	r2, [r3, #10]
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	4313      	orrs	r3, r2
 8004272:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	f023 0304 	bic.w	r3, r3, #4
 800427a:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	889a      	ldrh	r2, [r3, #4]
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	4313      	orrs	r3, r2
 8004284:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8004286:	89bb      	ldrh	r3, [r7, #12]
 8004288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800428e:	89bb      	ldrh	r3, [r7, #12]
 8004290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004294:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	899a      	ldrh	r2, [r3, #12]
 800429a:	89bb      	ldrh	r3, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	89da      	ldrh	r2, [r3, #14]
 80042a4:	89bb      	ldrh	r3, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	89ba      	ldrh	r2, [r7, #12]
 80042ae:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	897a      	ldrh	r2, [r7, #10]
 80042b4:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	88da      	ldrh	r2, [r3, #6]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	89fa      	ldrh	r2, [r7, #14]
 80042c2:	841a      	strh	r2, [r3, #32]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40013400 	.word	0x40013400
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40014400 	.word	0x40014400
 80042e0:	40014800 	.word	0x40014800

080042e4 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	817b      	strh	r3, [r7, #10]
 80042f2:	2300      	movs	r3, #0
 80042f4:	81fb      	strh	r3, [r7, #14]
 80042f6:	2300      	movs	r3, #0
 80042f8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8c1b      	ldrh	r3, [r3, #32]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f023 0310 	bic.w	r3, r3, #16
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8c1b      	ldrh	r3, [r3, #32]
 800430e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	889b      	ldrh	r3, [r3, #4]
 8004314:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8b1b      	ldrh	r3, [r3, #24]
 800431a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 800431c:	897b      	ldrh	r3, [r7, #10]
 800431e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004322:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8004324:	897b      	ldrh	r3, [r7, #10]
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	b29a      	uxth	r2, r3
 8004334:	897b      	ldrh	r3, [r7, #10]
 8004336:	4313      	orrs	r3, r2
 8004338:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 800433a:	89fb      	ldrh	r3, [r7, #14]
 800433c:	f023 0320 	bic.w	r3, r3, #32
 8004340:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	891b      	ldrh	r3, [r3, #8]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	b29a      	uxth	r2, r3
 800434a:	89fb      	ldrh	r3, [r7, #14]
 800434c:	4313      	orrs	r3, r2
 800434e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	885b      	ldrh	r3, [r3, #2]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	b29a      	uxth	r2, r3
 8004358:	89fb      	ldrh	r3, [r7, #14]
 800435a:	4313      	orrs	r3, r2
 800435c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a22      	ldr	r2, [pc, #136]	; (80043ec <TIM_OC2Init+0x108>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d003      	beq.n	800436e <TIM_OC2Init+0x8a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <TIM_OC2Init+0x10c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d12b      	bne.n	80043c6 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 800436e:	89fb      	ldrh	r3, [r7, #14]
 8004370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004374:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	895b      	ldrh	r3, [r3, #10]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	b29a      	uxth	r2, r3
 800437e:	89fb      	ldrh	r3, [r7, #14]
 8004380:	4313      	orrs	r3, r2
 8004382:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8004384:	89fb      	ldrh	r3, [r7, #14]
 8004386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438a:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	889b      	ldrh	r3, [r3, #4]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	b29a      	uxth	r2, r3
 8004394:	89fb      	ldrh	r3, [r7, #14]
 8004396:	4313      	orrs	r3, r2
 8004398:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 800439a:	89bb      	ldrh	r3, [r7, #12]
 800439c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 80043a2:	89bb      	ldrh	r3, [r7, #12]
 80043a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a8:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	899b      	ldrh	r3, [r3, #12]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	89bb      	ldrh	r3, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	89db      	ldrh	r3, [r3, #14]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	b29a      	uxth	r2, r3
 80043c0:	89bb      	ldrh	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	89ba      	ldrh	r2, [r7, #12]
 80043ca:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	897a      	ldrh	r2, [r7, #10]
 80043d0:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	88da      	ldrh	r2, [r3, #6]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	89fa      	ldrh	r2, [r7, #14]
 80043de:	841a      	strh	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40013400 	.word	0x40013400

080043f4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	2300      	movs	r3, #0
 8004404:	81fb      	strh	r3, [r7, #14]
 8004406:	2300      	movs	r3, #0
 8004408:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8c1b      	ldrh	r3, [r3, #32]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8c1b      	ldrh	r3, [r3, #32]
 800441e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	889b      	ldrh	r3, [r3, #4]
 8004424:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8b9b      	ldrh	r3, [r3, #28]
 800442a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 800442c:	897b      	ldrh	r3, [r7, #10]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8004434:	897b      	ldrh	r3, [r7, #10]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	881a      	ldrh	r2, [r3, #0]
 8004440:	897b      	ldrh	r3, [r7, #10]
 8004442:	4313      	orrs	r3, r2
 8004444:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8004446:	89fb      	ldrh	r3, [r7, #14]
 8004448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800444c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	891b      	ldrh	r3, [r3, #8]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	b29a      	uxth	r2, r3
 8004456:	89fb      	ldrh	r3, [r7, #14]
 8004458:	4313      	orrs	r3, r2
 800445a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	885b      	ldrh	r3, [r3, #2]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	b29a      	uxth	r2, r3
 8004464:	89fb      	ldrh	r3, [r7, #14]
 8004466:	4313      	orrs	r3, r2
 8004468:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <TIM_OC3Init+0x104>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_OC3Init+0x86>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a21      	ldr	r2, [pc, #132]	; (80044fc <TIM_OC3Init+0x108>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d12b      	bne.n	80044d2 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 800447a:	89fb      	ldrh	r3, [r7, #14]
 800447c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004480:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	895b      	ldrh	r3, [r3, #10]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	b29a      	uxth	r2, r3
 800448a:	89fb      	ldrh	r3, [r7, #14]
 800448c:	4313      	orrs	r3, r2
 800448e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8004490:	89fb      	ldrh	r3, [r7, #14]
 8004492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004496:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	889b      	ldrh	r3, [r3, #4]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	b29a      	uxth	r2, r3
 80044a0:	89fb      	ldrh	r3, [r7, #14]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 80044a6:	89bb      	ldrh	r3, [r7, #12]
 80044a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ac:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 80044ae:	89bb      	ldrh	r3, [r7, #12]
 80044b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	899b      	ldrh	r3, [r3, #12]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	b29a      	uxth	r2, r3
 80044be:	89bb      	ldrh	r3, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	89db      	ldrh	r3, [r3, #14]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	89bb      	ldrh	r3, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	89ba      	ldrh	r2, [r7, #12]
 80044d6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	897a      	ldrh	r2, [r7, #10]
 80044dc:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	88da      	ldrh	r2, [r3, #6]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	89fa      	ldrh	r2, [r7, #14]
 80044ea:	841a      	strh	r2, [r3, #32]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40013400 	.word	0x40013400

08004500 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	81bb      	strh	r3, [r7, #12]
 800450e:	2300      	movs	r3, #0
 8004510:	817b      	strh	r3, [r7, #10]
 8004512:	2300      	movs	r3, #0
 8004514:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8c1b      	ldrh	r3, [r3, #32]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8c1b      	ldrh	r3, [r3, #32]
 800452a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	889b      	ldrh	r3, [r3, #4]
 8004530:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8b9b      	ldrh	r3, [r3, #28]
 8004536:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8004538:	89bb      	ldrh	r3, [r7, #12]
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8004540:	89bb      	ldrh	r3, [r7, #12]
 8004542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004546:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	b29a      	uxth	r2, r3
 8004550:	89bb      	ldrh	r3, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800455c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	891b      	ldrh	r3, [r3, #8]
 8004562:	031b      	lsls	r3, r3, #12
 8004564:	b29a      	uxth	r2, r3
 8004566:	897b      	ldrh	r3, [r7, #10]
 8004568:	4313      	orrs	r3, r2
 800456a:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	885b      	ldrh	r3, [r3, #2]
 8004570:	031b      	lsls	r3, r3, #12
 8004572:	b29a      	uxth	r2, r3
 8004574:	897b      	ldrh	r3, [r7, #10]
 8004576:	4313      	orrs	r3, r2
 8004578:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <TIM_OC4Init+0xc8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_OC4Init+0x8a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a11      	ldr	r2, [pc, #68]	; (80045cc <TIM_OC4Init+0xcc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d10a      	bne.n	80045a0 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 800458a:	89fb      	ldrh	r3, [r7, #14]
 800458c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004590:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	899b      	ldrh	r3, [r3, #12]
 8004596:	019b      	lsls	r3, r3, #6
 8004598:	b29a      	uxth	r2, r3
 800459a:	89fb      	ldrh	r3, [r7, #14]
 800459c:	4313      	orrs	r3, r2
 800459e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	89fa      	ldrh	r2, [r7, #14]
 80045a4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	89ba      	ldrh	r2, [r7, #12]
 80045aa:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	88da      	ldrh	r2, [r3, #6]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	897a      	ldrh	r2, [r7, #10]
 80045ba:	841a      	strh	r2, [r3, #32]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40013400 	.word	0x40013400

080045d0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80045f2:	e007      	b.n	8004604 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	801a      	strh	r2, [r3, #0]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	807b      	strh	r3, [r7, #2]
 800461a:	4613      	mov	r3, r2
 800461c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800461e:	787b      	ldrb	r3, [r7, #1]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	899b      	ldrh	r3, [r3, #12]
 8004628:	b29a      	uxth	r2, r3
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	4313      	orrs	r3, r2
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8004634:	e009      	b.n	800464a <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	899b      	ldrh	r3, [r3, #12]
 800463a:	b29a      	uxth	r2, r3
 800463c:	887b      	ldrh	r3, [r7, #2]
 800463e:	43db      	mvns	r3, r3
 8004640:	b29b      	uxth	r3, r3
 8004642:	4013      	ands	r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	819a      	strh	r2, [r3, #12]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	b29a      	uxth	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8004676:	e007      	b.n	8004688 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004682:	b29a      	uxth	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	801a      	strh	r2, [r3, #0]
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8b1b      	ldrh	r3, [r3, #24]
 80046a6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80046a8:	89fb      	ldrh	r3, [r7, #14]
 80046aa:	f023 0308 	bic.w	r3, r3, #8
 80046ae:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80046b0:	89fa      	ldrh	r2, [r7, #14]
 80046b2:	887b      	ldrh	r3, [r7, #2]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	89fa      	ldrh	r2, [r7, #14]
 80046bc:	831a      	strh	r2, [r3, #24]
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8b1b      	ldrh	r3, [r3, #24]
 80046dc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 80046de:	89fb      	ldrh	r3, [r7, #14]
 80046e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	89fb      	ldrh	r3, [r7, #14]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	89fa      	ldrh	r2, [r7, #14]
 80046f6:	831a      	strh	r2, [r3, #24]
}
 80046f8:	bf00      	nop
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8b9b      	ldrh	r3, [r3, #28]
 8004716:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	f023 0308 	bic.w	r3, r3, #8
 800471e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8004720:	89fa      	ldrh	r2, [r7, #14]
 8004722:	887b      	ldrh	r3, [r7, #2]
 8004724:	4313      	orrs	r3, r2
 8004726:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	89fa      	ldrh	r2, [r7, #14]
 800472c:	839a      	strh	r2, [r3, #28]
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr

08004738 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8b9b      	ldrh	r3, [r3, #28]
 800474c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 800474e:	89fb      	ldrh	r3, [r7, #14]
 8004750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004754:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	b29a      	uxth	r2, r3
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	4313      	orrs	r3, r2
 8004760:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	89fa      	ldrh	r2, [r7, #14]
 8004766:	839a      	strh	r2, [r3, #28]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	460b      	mov	r3, r1
 800477c:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8004782:	2300      	movs	r3, #0
 8004784:	81bb      	strh	r3, [r7, #12]
 8004786:	2300      	movs	r3, #0
 8004788:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8a1b      	ldrh	r3, [r3, #16]
 800478e:	b29a      	uxth	r2, r3
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	4013      	ands	r3, r2
 8004794:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	899b      	ldrh	r3, [r3, #12]
 800479a:	b29a      	uxth	r2, r3
 800479c:	887b      	ldrh	r3, [r7, #2]
 800479e:	4013      	ands	r3, r2
 80047a0:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80047a2:	89bb      	ldrh	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <TIM_GetITStatus+0x42>
 80047a8:	897b      	ldrh	r3, [r7, #10]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e001      	b.n	80047b8 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	821a      	strh	r2, [r3, #16]
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08c      	sub	sp, #48	; 0x30
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80047ee:	2300      	movs	r3, #0
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f2:	2300      	movs	r3, #0
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80047fa:	2300      	movs	r3, #0
 80047fc:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8a1b      	ldrh	r3, [r3, #16]
 800480a:	b29b      	uxth	r3, r3
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800480e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004810:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8004814:	4013      	ands	r3, r2
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	88db      	ldrh	r3, [r3, #6]
 800481c:	461a      	mov	r2, r3
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	4313      	orrs	r3, r2
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	899b      	ldrh	r3, [r3, #12]
 8004830:	b29b      	uxth	r3, r3
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8004834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004836:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800483a:	4013      	ands	r3, r2
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	889a      	ldrh	r2, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	891b      	ldrh	r3, [r3, #8]
 8004846:	4313      	orrs	r3, r2
 8004848:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800484e:	4313      	orrs	r3, r2
 8004850:	b29b      	uxth	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004856:	4313      	orrs	r3, r2
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8a9b      	ldrh	r3, [r3, #20]
 8004866:	b29b      	uxth	r3, r3
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800486a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800486c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8004870:	4013      	ands	r3, r2
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	899b      	ldrh	r3, [r3, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	4313      	orrs	r3, r2
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8004888:	f107 0308 	add.w	r3, r7, #8
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fb37 	bl	8003f00 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4a2e      	ldr	r2, [pc, #184]	; (8004950 <USART_Init+0x16c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d102      	bne.n	80048a0 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
 800489e:	e001      	b.n	80048a4 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	899b      	ldrh	r3, [r3, #12]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	b21b      	sxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	da0c      	bge.n	80048ca <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80048b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009a      	lsls	r2, r3, #2
 80048ba:	441a      	add	r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
 80048c8:	e00b      	b.n	80048e2 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80048ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	009a      	lsls	r2, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	4a1b      	ldr	r2, [pc, #108]	; (8004954 <USART_Init+0x170>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	2264      	movs	r2, #100	; 0x64
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	899b      	ldrh	r3, [r3, #12]
 8004904:	b29b      	uxth	r3, r3
 8004906:	b21b      	sxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	da0c      	bge.n	8004926 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	3332      	adds	r3, #50	; 0x32
 8004912:	4a10      	ldr	r2, [pc, #64]	; (8004954 <USART_Init+0x170>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004920:	4313      	orrs	r3, r2
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004924:	e00b      	b.n	800493e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	3332      	adds	r3, #50	; 0x32
 800492c:	4a09      	ldr	r2, [pc, #36]	; (8004954 <USART_Init+0x170>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493a:	4313      	orrs	r3, r2
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	811a      	strh	r2, [r3, #8]
}
 8004946:	bf00      	nop
 8004948:	3730      	adds	r7, #48	; 0x30
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40013800 	.word	0x40013800
 8004954:	51eb851f 	.word	0x51eb851f

08004958 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	899b      	ldrh	r3, [r3, #12]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800497a:	e007      	b.n	800498c <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	899b      	ldrh	r3, [r3, #12]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	819a      	strh	r2, [r3, #12]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr

08004996 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	460b      	mov	r3, r1
 80049a0:	807b      	strh	r3, [r7, #2]
 80049a2:	4613      	mov	r3, r2
 80049a4:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80049c4:	887b      	ldrh	r3, [r7, #2]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80049cc:	2201      	movs	r2, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d103      	bne.n	80049e4 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	330c      	adds	r3, #12
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	e009      	b.n	80049f8 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d103      	bne.n	80049f2 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	3310      	adds	r3, #16
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	e002      	b.n	80049f8 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	3314      	adds	r3, #20
 80049f6:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80049f8:	787b      	ldrb	r3, [r7, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d006      	beq.n	8004a0c <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	6811      	ldr	r1, [r2, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8004a0a:	e006      	b.n	8004a1a <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	6811      	ldr	r1, [r2, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	43d2      	mvns	r2, r2
 8004a16:	400a      	ands	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8004a30:	887b      	ldrh	r3, [r7, #2]
 8004a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	809a      	strh	r2, [r3, #4]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	889b      	ldrh	r3, [r3, #4]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a58:	b29b      	uxth	r3, r3
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004a70:	2300      	movs	r3, #0
 8004a72:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	887b      	ldrh	r3, [r7, #2]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
 8004a88:	e001      	b.n	8004a8e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b087      	sub	sp, #28
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8004ac0:	887b      	ldrh	r3, [r7, #2]
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8004ac8:	2201      	movs	r2, #1
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	899b      	ldrh	r3, [r3, #12]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e011      	b.n	8004b0c <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d107      	bne.n	8004afe <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8a1b      	ldrh	r3, [r3, #16]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	4013      	ands	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e006      	b.n	8004b0c <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8a9b      	ldrh	r3, [r3, #20]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8004b0c:	887b      	ldrh	r3, [r7, #2]
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8004b14:	2201      	movs	r2, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <USART_GetITStatus+0xa4>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	74fb      	strb	r3, [r7, #19]
 8004b3c:	e001      	b.n	8004b42 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
	...

08004b50 <debug_led_init>:
 * initilizes the debug led gpio.
 *
 * @return none.
 **************************************************************************/
void debug_led_init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable GPIO clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8004b56:	2101      	movs	r1, #1
 8004b58:	2001      	movs	r0, #1
 8004b5a:	f7ff fa7f 	bl	800405c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8004b5e:	2101      	movs	r1, #1
 8004b60:	2010      	movs	r0, #16
 8004b62:	f7ff fa7b 	bl	800405c <RCC_APB2PeriphClockCmd>

	// Configure pin as output push-pull (LED)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8004b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b6a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b70:	2303      	movs	r3, #3
 8004b72:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4803      	ldr	r0, [pc, #12]	; (8004b88 <debug_led_init+0x38>)
 8004b7a:	f7fe ff5f 	bl	8003a3c <GPIO_Init>
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40011000 	.word	0x40011000

08004b8c <mpu6050_init>:
 * 0x10: 1000 degrees/second, error: 26
 * 0x18: 2000 degrees/second, error: 13
 *
 **************************************************************************/
int8_t mpu6050_init(uint8_t gyroFullScaleRange, uint8_t accelFullScaleRange)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	460a      	mov	r2, r1
 8004b96:	71fb      	strb	r3, [r7, #7]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	71bb      	strb	r3, [r7, #6]
	int8_t returnCode=0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	73fb      	strb	r3, [r7, #15]

	/* turn off sleep mode */
	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x6B, 0);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	216b      	movs	r1, #107	; 0x6b
 8004ba4:	2068      	movs	r0, #104	; 0x68
 8004ba6:	f000 fd41 	bl	800562c <i2c_slave_mem_write>
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 8004bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	d102      	bne.n	8004bbe <mpu6050_init+0x32>
		return -1;
 8004bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbc:	e020      	b.n	8004c00 <mpu6050_init+0x74>

	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1B, gyroFullScaleRange);
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	211b      	movs	r1, #27
 8004bc4:	2068      	movs	r0, #104	; 0x68
 8004bc6:	f000 fd31 	bl	800562c <i2c_slave_mem_write>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 8004bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d102      	bne.n	8004bde <mpu6050_init+0x52>
		return -1;
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bdc:	e010      	b.n	8004c00 <mpu6050_init+0x74>

	returnCode = i2c_slave_mem_write(MPU6050_ID, 0x1C, accelFullScaleRange);
 8004bde:	79bb      	ldrb	r3, [r7, #6]
 8004be0:	461a      	mov	r2, r3
 8004be2:	211c      	movs	r1, #28
 8004be4:	2068      	movs	r0, #104	; 0x68
 8004be6:	f000 fd21 	bl	800562c <i2c_slave_mem_write>
 8004bea:	4603      	mov	r3, r0
 8004bec:	73fb      	strb	r3, [r7, #15]
	if(returnCode == -1)
 8004bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d102      	bne.n	8004bfe <mpu6050_init+0x72>
		return -1;
 8004bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfc:	e000      	b.n	8004c00 <mpu6050_init+0x74>

	return 0;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <mpu6050_aux_i2c_bus_host_access>:
 * MPU6050_HOST_AUX_BUS_CONNECT or MPU6050_HOST_AUX_BUS_DISCONNECT
 * @retval 0 on success, -1 on timeout.
 *
 **************************************************************************/
int8_t mpu6050_aux_i2c_bus_host_access(uint8_t aux_i2c_bus_status)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
	int8_t returnCode=0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]

	if(aux_i2c_bus_status == 1)
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d11d      	bne.n	8004c58 <mpu6050_aux_i2c_bus_host_access+0x50>
	{
		/*disable mpu6050 master*/
		returnCode = i2c_slave_mem_write(MPU6050_ID, 0x6A, 0x00);
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	216a      	movs	r1, #106	; 0x6a
 8004c20:	2068      	movs	r0, #104	; 0x68
 8004c22:	f000 fd03 	bl	800562c <i2c_slave_mem_write>
 8004c26:	4603      	mov	r3, r0
 8004c28:	73fb      	strb	r3, [r7, #15]
		if(returnCode == -1)
 8004c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d102      	bne.n	8004c3a <mpu6050_aux_i2c_bus_host_access+0x32>
			return -1;
 8004c34:	f04f 33ff 	mov.w	r3, #4294967295
 8004c38:	e030      	b.n	8004c9c <mpu6050_aux_i2c_bus_host_access+0x94>

		/*enable auxiliary i2c bus access*/
		returnCode = i2c_slave_mem_write(MPU6050_ID, 0x37, 0x02);
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	2137      	movs	r1, #55	; 0x37
 8004c3e:	2068      	movs	r0, #104	; 0x68
 8004c40:	f000 fcf4 	bl	800562c <i2c_slave_mem_write>
 8004c44:	4603      	mov	r3, r0
 8004c46:	73fb      	strb	r3, [r7, #15]
		if(returnCode == -1)
 8004c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d123      	bne.n	8004c9a <mpu6050_aux_i2c_bus_host_access+0x92>
			return -1;
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295
 8004c56:	e021      	b.n	8004c9c <mpu6050_aux_i2c_bus_host_access+0x94>
	}

	else if(aux_i2c_bus_status == 0)
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d11d      	bne.n	8004c9a <mpu6050_aux_i2c_bus_host_access+0x92>
	{
		/*disable mpu6050 master*/
		returnCode = i2c_slave_mem_write(MPU6050_ID, 0x6A, 0x20);
 8004c5e:	2220      	movs	r2, #32
 8004c60:	216a      	movs	r1, #106	; 0x6a
 8004c62:	2068      	movs	r0, #104	; 0x68
 8004c64:	f000 fce2 	bl	800562c <i2c_slave_mem_write>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]
		if(returnCode == -1)
 8004c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d102      	bne.n	8004c7c <mpu6050_aux_i2c_bus_host_access+0x74>
			return -1;
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7a:	e00f      	b.n	8004c9c <mpu6050_aux_i2c_bus_host_access+0x94>

		/*enable auxiliary i2c bus access*/
		returnCode = i2c_slave_mem_write(MPU6050_ID, 0x37, 0x00);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2137      	movs	r1, #55	; 0x37
 8004c80:	2068      	movs	r0, #104	; 0x68
 8004c82:	f000 fcd3 	bl	800562c <i2c_slave_mem_write>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]
		if(returnCode == -1)
 8004c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d102      	bne.n	8004c9a <mpu6050_aux_i2c_bus_host_access+0x92>
			return -1;
 8004c94:	f04f 33ff 	mov.w	r3, #4294967295
 8004c98:	e000      	b.n	8004c9c <mpu6050_aux_i2c_bus_host_access+0x94>
	}
	return 0;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <hmc5883l_init>:
/************************************************************************//*
 * initializes the HMC5883L magnetometer sensor
 * @retval 0 on success, -1 on timeout.
 **************************************************************************/
int8_t hmc5883l_init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
	int8_t returnCode=0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	71fb      	strb	r3, [r7, #7]

	returnCode = i2c_slave_mem_write(HMC5883L_ID, 0x00, 0x78);
 8004cae:	2278      	movs	r2, #120	; 0x78
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	201e      	movs	r0, #30
 8004cb4:	f000 fcba 	bl	800562c <i2c_slave_mem_write>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	71fb      	strb	r3, [r7, #7]
	if(returnCode == -1)
 8004cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d102      	bne.n	8004ccc <hmc5883l_init+0x28>
		return -1;
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	e01e      	b.n	8004d0a <hmc5883l_init+0x66>

	returnCode = i2c_slave_mem_write(HMC5883L_ID, 0x01, 0xA0);
 8004ccc:	22a0      	movs	r2, #160	; 0xa0
 8004cce:	2101      	movs	r1, #1
 8004cd0:	201e      	movs	r0, #30
 8004cd2:	f000 fcab 	bl	800562c <i2c_slave_mem_write>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
	if(returnCode == -1)
 8004cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d102      	bne.n	8004cea <hmc5883l_init+0x46>
		return -1;
 8004ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce8:	e00f      	b.n	8004d0a <hmc5883l_init+0x66>

	returnCode = i2c_slave_mem_write(HMC5883L_ID, 0x02, 0x00);
 8004cea:	2200      	movs	r2, #0
 8004cec:	2102      	movs	r1, #2
 8004cee:	201e      	movs	r0, #30
 8004cf0:	f000 fc9c 	bl	800562c <i2c_slave_mem_write>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	71fb      	strb	r3, [r7, #7]
	if(returnCode == -1)
 8004cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d102      	bne.n	8004d08 <hmc5883l_init+0x64>
		return -1;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295
 8004d06:	e000      	b.n	8004d0a <hmc5883l_init+0x66>

	return 0;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <gyro_measurement_read>:
 *
 * @param gyroBuffer: buffer for the read data to be stored.
 * @retval 0 on success, -1 on timeout.
 **************************************************************************/
int8_t gyro_measurement_read(int16_t* gyroBuffer)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
	uint8_t gyroReadValues[6];
	int8_t errorValue;

	errorValue = i2c_slave_mem_read(MPU6050_ID, 0x43, gyroReadValues, 6);
 8004d1a:	f107 0208 	add.w	r2, r7, #8
 8004d1e:	2306      	movs	r3, #6
 8004d20:	2143      	movs	r1, #67	; 0x43
 8004d22:	2068      	movs	r0, #104	; 0x68
 8004d24:	f000 fbbe 	bl	80054a4 <i2c_slave_mem_read>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	73fb      	strb	r3, [r7, #15]

	if(errorValue == 0)
 8004d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11e      	bne.n	8004d72 <gyro_measurement_read+0x60>
	{
		gyroBuffer[0] = (gyroReadValues[0]<<8)|gyroReadValues[1];//x_out
 8004d34:	7a3b      	ldrb	r3, [r7, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	b21a      	sxth	r2, r3
 8004d3a:	7a7b      	ldrb	r3, [r7, #9]
 8004d3c:	b21b      	sxth	r3, r3
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	b21a      	sxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	801a      	strh	r2, [r3, #0]
		gyroBuffer[1] = (gyroReadValues[2]<<8)|gyroReadValues[3];//y_out
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3302      	adds	r3, #2
 8004d4a:	7aba      	ldrb	r2, [r7, #10]
 8004d4c:	0212      	lsls	r2, r2, #8
 8004d4e:	b211      	sxth	r1, r2
 8004d50:	7afa      	ldrb	r2, [r7, #11]
 8004d52:	b212      	sxth	r2, r2
 8004d54:	430a      	orrs	r2, r1
 8004d56:	b212      	sxth	r2, r2
 8004d58:	801a      	strh	r2, [r3, #0]
		gyroBuffer[2] = (gyroReadValues[4]<<8)|gyroReadValues[5];//z_out
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	7b3a      	ldrb	r2, [r7, #12]
 8004d60:	0212      	lsls	r2, r2, #8
 8004d62:	b211      	sxth	r1, r2
 8004d64:	7b7a      	ldrb	r2, [r7, #13]
 8004d66:	b212      	sxth	r2, r2
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	b212      	sxth	r2, r2
 8004d6c:	801a      	strh	r2, [r3, #0]
		return 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e001      	b.n	8004d76 <gyro_measurement_read+0x64>
	}
	else
		return -1;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <accel_measurement_read>:
 *
 * @param accelBuffer: buffer for the read data to be stored.
 * @retval 0 on success, -1 on timeout.
 **************************************************************************/
int8_t accel_measurement_read(int16_t* accelBuffer)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
	uint8_t accelReadValues[6];
	int8_t errorValue;

	errorValue = i2c_slave_mem_read(MPU6050_ID, 0x3B, accelReadValues, 6);
 8004d86:	f107 0208 	add.w	r2, r7, #8
 8004d8a:	2306      	movs	r3, #6
 8004d8c:	213b      	movs	r1, #59	; 0x3b
 8004d8e:	2068      	movs	r0, #104	; 0x68
 8004d90:	f000 fb88 	bl	80054a4 <i2c_slave_mem_read>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]

	if(errorValue == 0)
 8004d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d11e      	bne.n	8004dde <accel_measurement_read+0x60>
	{
		accelBuffer[0] = (accelReadValues[0]<<8)|accelReadValues[1];//x_out
 8004da0:	7a3b      	ldrb	r3, [r7, #8]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	b21a      	sxth	r2, r3
 8004da6:	7a7b      	ldrb	r3, [r7, #9]
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	4313      	orrs	r3, r2
 8004dac:	b21a      	sxth	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	801a      	strh	r2, [r3, #0]
		accelBuffer[1] = (accelReadValues[2]<<8)|accelReadValues[3];//y_out
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3302      	adds	r3, #2
 8004db6:	7aba      	ldrb	r2, [r7, #10]
 8004db8:	0212      	lsls	r2, r2, #8
 8004dba:	b211      	sxth	r1, r2
 8004dbc:	7afa      	ldrb	r2, [r7, #11]
 8004dbe:	b212      	sxth	r2, r2
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	b212      	sxth	r2, r2
 8004dc4:	801a      	strh	r2, [r3, #0]
		accelBuffer[2] = (accelReadValues[4]<<8)|accelReadValues[5];//z_out
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	7b3a      	ldrb	r2, [r7, #12]
 8004dcc:	0212      	lsls	r2, r2, #8
 8004dce:	b211      	sxth	r1, r2
 8004dd0:	7b7a      	ldrb	r2, [r7, #13]
 8004dd2:	b212      	sxth	r2, r2
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	b212      	sxth	r2, r2
 8004dd8:	801a      	strh	r2, [r3, #0]
		return 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e001      	b.n	8004de2 <accel_measurement_read+0x64>
	}
	else
		return -1;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <magneto_measurement_read>:
 *
 * @param magnetoBuffer: buffer for the read data to be stored.
 * @retval 0 on success, -1 on timeout.
 **************************************************************************/
int8_t magneto_measurement_read(int16_t* magnetoBuffer)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
	uint8_t magnetoReadValues[6];
	int8_t errorValue;

	errorValue = i2c_slave_mem_read(HMC5883L_ID, 0x03, magnetoReadValues, 6);
 8004df2:	f107 0208 	add.w	r2, r7, #8
 8004df6:	2306      	movs	r3, #6
 8004df8:	2103      	movs	r1, #3
 8004dfa:	201e      	movs	r0, #30
 8004dfc:	f000 fb52 	bl	80054a4 <i2c_slave_mem_read>
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]

	if(errorValue == 0)
 8004e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d11e      	bne.n	8004e4a <magneto_measurement_read+0x60>
	{
		/* in HMC5883L data registers are in the order X, Z, Y */
		magnetoBuffer[0] = (magnetoReadValues[0]<<8)|magnetoReadValues[1];//x_out
 8004e0c:	7a3b      	ldrb	r3, [r7, #8]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	b21a      	sxth	r2, r3
 8004e12:	7a7b      	ldrb	r3, [r7, #9]
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b21a      	sxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	801a      	strh	r2, [r3, #0]
		magnetoBuffer[2] = (magnetoReadValues[2]<<8)|magnetoReadValues[3];//z_out
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3304      	adds	r3, #4
 8004e22:	7aba      	ldrb	r2, [r7, #10]
 8004e24:	0212      	lsls	r2, r2, #8
 8004e26:	b211      	sxth	r1, r2
 8004e28:	7afa      	ldrb	r2, [r7, #11]
 8004e2a:	b212      	sxth	r2, r2
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	b212      	sxth	r2, r2
 8004e30:	801a      	strh	r2, [r3, #0]
		magnetoBuffer[1] = (magnetoReadValues[4]<<8)|magnetoReadValues[5];//y_out
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3302      	adds	r3, #2
 8004e36:	7b3a      	ldrb	r2, [r7, #12]
 8004e38:	0212      	lsls	r2, r2, #8
 8004e3a:	b211      	sxth	r1, r2
 8004e3c:	7b7a      	ldrb	r2, [r7, #13]
 8004e3e:	b212      	sxth	r2, r2
 8004e40:	430a      	orrs	r2, r1
 8004e42:	b212      	sxth	r2, r2
 8004e44:	801a      	strh	r2, [r3, #0]
		return 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e001      	b.n	8004e4e <magneto_measurement_read+0x64>
	}
	else
		return -1;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <imu_raw_measurement_read>:
 *
 * @param returnBuffer: buffer for the read data to be stored.
 * @retval 0 on success, -1 on timeout.
 **************************************************************************/
int8_t imu_raw_measurement_read(int16_t* accelBuffer, int16_t* gyroBuffer)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b086      	sub	sp, #24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
	uint8_t ReadValues[14];
	int8_t errorValue;

	errorValue = i2c_slave_mem_read(MPU6050_ID, 0x3B, ReadValues, 14);
 8004e60:	f107 0208 	add.w	r2, r7, #8
 8004e64:	230e      	movs	r3, #14
 8004e66:	213b      	movs	r1, #59	; 0x3b
 8004e68:	2068      	movs	r0, #104	; 0x68
 8004e6a:	f000 fb1b 	bl	80054a4 <i2c_slave_mem_read>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	75fb      	strb	r3, [r7, #23]

	if(errorValue == 0)
 8004e72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d13b      	bne.n	8004ef2 <imu_raw_measurement_read+0x9c>
	{
		accelBuffer[0] = (ReadValues[0]<<8)|ReadValues[1];//x_out
 8004e7a:	7a3b      	ldrb	r3, [r7, #8]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	b21a      	sxth	r2, r3
 8004e80:	7a7b      	ldrb	r3, [r7, #9]
 8004e82:	b21b      	sxth	r3, r3
 8004e84:	4313      	orrs	r3, r2
 8004e86:	b21a      	sxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	801a      	strh	r2, [r3, #0]
		accelBuffer[1] = (ReadValues[2]<<8)|ReadValues[3];//y_out
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3302      	adds	r3, #2
 8004e90:	7aba      	ldrb	r2, [r7, #10]
 8004e92:	0212      	lsls	r2, r2, #8
 8004e94:	b211      	sxth	r1, r2
 8004e96:	7afa      	ldrb	r2, [r7, #11]
 8004e98:	b212      	sxth	r2, r2
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	b212      	sxth	r2, r2
 8004e9e:	801a      	strh	r2, [r3, #0]
		accelBuffer[2] = (ReadValues[4]<<8)|ReadValues[5];//z_out
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	7b3a      	ldrb	r2, [r7, #12]
 8004ea6:	0212      	lsls	r2, r2, #8
 8004ea8:	b211      	sxth	r1, r2
 8004eaa:	7b7a      	ldrb	r2, [r7, #13]
 8004eac:	b212      	sxth	r2, r2
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	b212      	sxth	r2, r2
 8004eb2:	801a      	strh	r2, [r3, #0]

		gyroBuffer[0] = (ReadValues[8]<<8)|ReadValues[9];//x_out
 8004eb4:	7c3b      	ldrb	r3, [r7, #16]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	b21a      	sxth	r2, r3
 8004eba:	7c7b      	ldrb	r3, [r7, #17]
 8004ebc:	b21b      	sxth	r3, r3
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	b21a      	sxth	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	801a      	strh	r2, [r3, #0]
		gyroBuffer[1] = (ReadValues[10]<<8)|ReadValues[11];//y_out
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	3302      	adds	r3, #2
 8004eca:	7cba      	ldrb	r2, [r7, #18]
 8004ecc:	0212      	lsls	r2, r2, #8
 8004ece:	b211      	sxth	r1, r2
 8004ed0:	7cfa      	ldrb	r2, [r7, #19]
 8004ed2:	b212      	sxth	r2, r2
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	b212      	sxth	r2, r2
 8004ed8:	801a      	strh	r2, [r3, #0]
		gyroBuffer[2] = (ReadValues[12]<<8)|ReadValues[13];//z_out
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	3304      	adds	r3, #4
 8004ede:	7d3a      	ldrb	r2, [r7, #20]
 8004ee0:	0212      	lsls	r2, r2, #8
 8004ee2:	b211      	sxth	r1, r2
 8004ee4:	7d7a      	ldrb	r2, [r7, #21]
 8004ee6:	b212      	sxth	r2, r2
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	b212      	sxth	r2, r2
 8004eec:	801a      	strh	r2, [r3, #0]
		return 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e001      	b.n	8004ef6 <imu_raw_measurement_read+0xa0>
	}
	else
		return -1;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <gyro_calc_bias>:
 * @param gyroCalibData: gyro axis calibration values return buffer.
 * @retval 0 if success, -1 on failure.
 *
 **************************************************************************/
int8_t gyro_calc_bias(float* gyroCalibData)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	uint32_t sampleCount=0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
	int16_t gyroRawData[3];

	gyroCalibData[X_AXIS_INDEX]=0;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
	gyroCalibData[Y_AXIS_INDEX]=0;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
	gyroCalibData[Z_AXIS_INDEX]=0;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3308      	adds	r3, #8
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

	while(sampleCount<200)
 8004f28:	e043      	b.n	8004fb2 <gyro_calc_bias+0xb2>
	{
		if(gyro_measurement_read(gyroRawData)<0)
 8004f2a:	f107 030c 	add.w	r3, r7, #12
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff feef 	bl	8004d12 <gyro_measurement_read>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da02      	bge.n	8004f40 <gyro_calc_bias+0x40>
			return -1;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	e05d      	b.n	8004ffc <gyro_calc_bias+0xfc>

		gyroCalibData[X_AXIS_INDEX] = (gyroRawData[X_AXIS_INDEX]+gyroCalibData[X_AXIS_INDEX]);
 8004f40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb ff1d 	bl	8000d84 <__aeabi_i2f>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7fb fe62 	bl	8000c1c <__addsf3>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]
		gyroCalibData[Y_AXIS_INDEX] = (gyroRawData[Y_AXIS_INDEX]+gyroCalibData[Y_AXIS_INDEX]);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	1d1c      	adds	r4, r3, #4
 8004f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fb ff0b 	bl	8000d84 <__aeabi_i2f>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7fb fe4f 	bl	8000c1c <__addsf3>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6023      	str	r3, [r4, #0]
		gyroCalibData[Z_AXIS_INDEX] = (gyroRawData[Z_AXIS_INDEX]+gyroCalibData[Z_AXIS_INDEX]);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f103 0408 	add.w	r4, r3, #8
 8004f88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fb fef9 	bl	8000d84 <__aeabi_i2f>
 8004f92:	4602      	mov	r2, r0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3308      	adds	r3, #8
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f7fb fe3d 	bl	8000c1c <__addsf3>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	6023      	str	r3, [r4, #0]
		sampleCount++;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
		delay_ms(15);
 8004fac:	200f      	movs	r0, #15
 8004fae:	f004 fafd 	bl	80095ac <delay_ms>
	while(sampleCount<200)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2bc7      	cmp	r3, #199	; 0xc7
 8004fb6:	d9b8      	bls.n	8004f2a <gyro_calc_bias+0x2a>
	}

	gyroCalibData[X_AXIS_INDEX] = gyroCalibData[X_AXIS_INDEX]/200;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4911      	ldr	r1, [pc, #68]	; (8005004 <gyro_calc_bias+0x104>)
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb ffe8 	bl	8000f94 <__aeabi_fdiv>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	601a      	str	r2, [r3, #0]
	gyroCalibData[Y_AXIS_INDEX] = gyroCalibData[Y_AXIS_INDEX]/200;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	1d1c      	adds	r4, r3, #4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	490b      	ldr	r1, [pc, #44]	; (8005004 <gyro_calc_bias+0x104>)
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fb ffdb 	bl	8000f94 <__aeabi_fdiv>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	6023      	str	r3, [r4, #0]
	gyroCalibData[Z_AXIS_INDEX] = gyroCalibData[Z_AXIS_INDEX]/200;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f103 0408 	add.w	r4, r3, #8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3308      	adds	r3, #8
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4905      	ldr	r1, [pc, #20]	; (8005004 <gyro_calc_bias+0x104>)
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fb ffcf 	bl	8000f94 <__aeabi_fdiv>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	6023      	str	r3, [r4, #0]

	return 0;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	bd90      	pop	{r4, r7, pc}
 8005004:	43480000 	.word	0x43480000

08005008 <accel_calc_bias>:
 * buffer.
 * @retval 0 if success, -1 on failure.
 *
 **************************************************************************/
int8_t accel_calc_bias(float* accelCalibData)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	uint32_t sampleCount=0;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
	int16_t accelRawData[3];

	accelCalibData[X_AXIS_INDEX]=0;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
	accelCalibData[Y_AXIS_INDEX]=0;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
	accelCalibData[Z_AXIS_INDEX]=0;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3308      	adds	r3, #8
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

	while(sampleCount<200)
 8005030:	e043      	b.n	80050ba <accel_calc_bias+0xb2>
	{
		if(accel_measurement_read(accelRawData)<0)
 8005032:	f107 030c 	add.w	r3, r7, #12
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fea1 	bl	8004d7e <accel_measurement_read>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	da02      	bge.n	8005048 <accel_calc_bias+0x40>
			return -1;
 8005042:	f04f 33ff 	mov.w	r3, #4294967295
 8005046:	e06f      	b.n	8005128 <accel_calc_bias+0x120>

		accelCalibData[X_AXIS_INDEX] = (accelRawData[X_AXIS_INDEX]+accelCalibData[X_AXIS_INDEX]);
 8005048:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fb fe99 	bl	8000d84 <__aeabi_i2f>
 8005052:	4602      	mov	r2, r0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7fb fdde 	bl	8000c1c <__addsf3>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	601a      	str	r2, [r3, #0]
		accelCalibData[Y_AXIS_INDEX] = (accelRawData[Y_AXIS_INDEX]+accelCalibData[Y_AXIS_INDEX]);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	1d1c      	adds	r4, r3, #4
 800506c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005070:	4618      	mov	r0, r3
 8005072:	f7fb fe87 	bl	8000d84 <__aeabi_i2f>
 8005076:	4602      	mov	r2, r0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f7fb fdcb 	bl	8000c1c <__addsf3>
 8005086:	4603      	mov	r3, r0
 8005088:	6023      	str	r3, [r4, #0]
		accelCalibData[Z_AXIS_INDEX] = (accelRawData[Z_AXIS_INDEX]+accelCalibData[Z_AXIS_INDEX]);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f103 0408 	add.w	r4, r3, #8
 8005090:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005094:	4618      	mov	r0, r3
 8005096:	f7fb fe75 	bl	8000d84 <__aeabi_i2f>
 800509a:	4602      	mov	r2, r0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3308      	adds	r3, #8
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fb fdb9 	bl	8000c1c <__addsf3>
 80050aa:	4603      	mov	r3, r0
 80050ac:	6023      	str	r3, [r4, #0]
		sampleCount++;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	3301      	adds	r3, #1
 80050b2:	617b      	str	r3, [r7, #20]
		delay_ms(15);
 80050b4:	200f      	movs	r0, #15
 80050b6:	f004 fa79 	bl	80095ac <delay_ms>
	while(sampleCount<200)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2bc7      	cmp	r3, #199	; 0xc7
 80050be:	d9b8      	bls.n	8005032 <accel_calc_bias+0x2a>
	}

	accelCalibData[X_AXIS_INDEX] = 0-(accelCalibData[X_AXIS_INDEX]/200);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	491a      	ldr	r1, [pc, #104]	; (8005130 <accel_calc_bias+0x128>)
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fb ff64 	bl	8000f94 <__aeabi_fdiv>
 80050cc:	4603      	mov	r3, r0
 80050ce:	4619      	mov	r1, r3
 80050d0:	f04f 0000 	mov.w	r0, #0
 80050d4:	f7fb fda0 	bl	8000c18 <__aeabi_fsub>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
	accelCalibData[Y_AXIS_INDEX] = 0-(accelCalibData[Y_AXIS_INDEX]/200);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	1d1c      	adds	r4, r3, #4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4911      	ldr	r1, [pc, #68]	; (8005130 <accel_calc_bias+0x128>)
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb ff51 	bl	8000f94 <__aeabi_fdiv>
 80050f2:	4603      	mov	r3, r0
 80050f4:	4619      	mov	r1, r3
 80050f6:	f04f 0000 	mov.w	r0, #0
 80050fa:	f7fb fd8d 	bl	8000c18 <__aeabi_fsub>
 80050fe:	4603      	mov	r3, r0
 8005100:	6023      	str	r3, [r4, #0]
	accelCalibData[Z_AXIS_INDEX] = 8192-(accelCalibData[Z_AXIS_INDEX]/200);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f103 0408 	add.w	r4, r3, #8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3308      	adds	r3, #8
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4908      	ldr	r1, [pc, #32]	; (8005130 <accel_calc_bias+0x128>)
 8005110:	4618      	mov	r0, r3
 8005112:	f7fb ff3f 	bl	8000f94 <__aeabi_fdiv>
 8005116:	4603      	mov	r3, r0
 8005118:	4619      	mov	r1, r3
 800511a:	f04f 408c 	mov.w	r0, #1174405120	; 0x46000000
 800511e:	f7fb fd7b 	bl	8000c18 <__aeabi_fsub>
 8005122:	4603      	mov	r3, r0
 8005124:	6023      	str	r3, [r4, #0]

	return 0;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd90      	pop	{r4, r7, pc}
 8005130:	43480000 	.word	0x43480000

08005134 <gyro_caliberate>:
 * @param calibValue: array of previously calculated gyro bias
 *
 * @retval none.
 **************************************************************************/
void gyro_caliberate(int16_t* gyroData, float* calibValue)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
	gyroData[0] = (gyroData[0])-calibValue[0];
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005144:	4618      	mov	r0, r3
 8005146:	f7fb fe1d 	bl	8000d84 <__aeabi_i2f>
 800514a:	4602      	mov	r2, r0
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f7fb fd60 	bl	8000c18 <__aeabi_fsub>
 8005158:	4603      	mov	r3, r0
 800515a:	4618      	mov	r0, r3
 800515c:	f7fc f842 	bl	80011e4 <__aeabi_f2iz>
 8005160:	4603      	mov	r3, r0
 8005162:	b21a      	sxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	801a      	strh	r2, [r3, #0]
	gyroData[1] = (gyroData[1])-calibValue[1];
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	1c9c      	adds	r4, r3, #2
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3302      	adds	r3, #2
 8005170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005174:	4618      	mov	r0, r3
 8005176:	f7fb fe05 	bl	8000d84 <__aeabi_i2f>
 800517a:	4602      	mov	r2, r0
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	3304      	adds	r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f7fb fd47 	bl	8000c18 <__aeabi_fsub>
 800518a:	4603      	mov	r3, r0
 800518c:	4618      	mov	r0, r3
 800518e:	f7fc f829 	bl	80011e4 <__aeabi_f2iz>
 8005192:	4603      	mov	r3, r0
 8005194:	b21b      	sxth	r3, r3
 8005196:	8023      	strh	r3, [r4, #0]
	gyroData[2] = (gyroData[2])-calibValue[2];
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	1d1c      	adds	r4, r3, #4
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fb fded 	bl	8000d84 <__aeabi_i2f>
 80051aa:	4602      	mov	r2, r0
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	3308      	adds	r3, #8
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fb fd2f 	bl	8000c18 <__aeabi_fsub>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fc f811 	bl	80011e4 <__aeabi_f2iz>
 80051c2:	4603      	mov	r3, r0
 80051c4:	b21b      	sxth	r3, r3
 80051c6:	8023      	strh	r3, [r4, #0]
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd90      	pop	{r4, r7, pc}

080051d0 <accel_caliberate>:
 * @param calibValue: array of previously calculated acceleromter bias
 *
 * @retval none.
 **************************************************************************/
void accel_caliberate(int16_t* accelData, float* calibValue)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
	accelData[0] = accelData[0]+calibValue[0];
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fb fdcf 	bl	8000d84 <__aeabi_i2f>
 80051e6:	4602      	mov	r2, r0
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f7fb fd14 	bl	8000c1c <__addsf3>
 80051f4:	4603      	mov	r3, r0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fb fff4 	bl	80011e4 <__aeabi_f2iz>
 80051fc:	4603      	mov	r3, r0
 80051fe:	b21a      	sxth	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	801a      	strh	r2, [r3, #0]
	accelData[1] = accelData[1]+calibValue[1];
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	1c9c      	adds	r4, r3, #2
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3302      	adds	r3, #2
 800520c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005210:	4618      	mov	r0, r3
 8005212:	f7fb fdb7 	bl	8000d84 <__aeabi_i2f>
 8005216:	4602      	mov	r2, r0
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	3304      	adds	r3, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7fb fcfb 	bl	8000c1c <__addsf3>
 8005226:	4603      	mov	r3, r0
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb ffdb 	bl	80011e4 <__aeabi_f2iz>
 800522e:	4603      	mov	r3, r0
 8005230:	b21b      	sxth	r3, r3
 8005232:	8023      	strh	r3, [r4, #0]
	accelData[2] = accelData[2]+calibValue[2];
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	1d1c      	adds	r4, r3, #4
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005240:	4618      	mov	r0, r3
 8005242:	f7fb fd9f 	bl	8000d84 <__aeabi_i2f>
 8005246:	4602      	mov	r2, r0
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	3308      	adds	r3, #8
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f7fb fce3 	bl	8000c1c <__addsf3>
 8005256:	4603      	mov	r3, r0
 8005258:	4618      	mov	r0, r3
 800525a:	f7fb ffc3 	bl	80011e4 <__aeabi_f2iz>
 800525e:	4603      	mov	r3, r0
 8005260:	b21b      	sxth	r3, r3
 8005262:	8023      	strh	r3, [r4, #0]
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bd90      	pop	{r4, r7, pc}

0800526c <magnetometer_caliberate>:
 * each axis is to be stored.
 *
 * @retval none.
 **************************************************************************/
void magnetometer_caliberate(int16_t* magData, int16_t* magMax, int16_t* magMin)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b08d      	sub	sp, #52	; 0x34
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
	/*
	 * calculate magnetometer offset. useful for calculating soft
	 * and hard iron distortion.
	 * refer: https://appelsiini.net/2018/calibrate-magnetometer
	 */
	offset[X_AXIS_INDEX] = (magMax[X_AXIS_INDEX] + magMin[X_AXIS_INDEX])/2;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005286:	4413      	add	r3, r2
 8005288:	0fda      	lsrs	r2, r3, #31
 800528a:	4413      	add	r3, r2
 800528c:	105b      	asrs	r3, r3, #1
 800528e:	b21b      	sxth	r3, r3
 8005290:	84bb      	strh	r3, [r7, #36]	; 0x24
	offset[Y_AXIS_INDEX] = (magMax[Y_AXIS_INDEX] + magMin[Y_AXIS_INDEX])/2;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3302      	adds	r3, #2
 8005296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800529a:	461a      	mov	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3302      	adds	r3, #2
 80052a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052a4:	4413      	add	r3, r2
 80052a6:	0fda      	lsrs	r2, r3, #31
 80052a8:	4413      	add	r3, r2
 80052aa:	105b      	asrs	r3, r3, #1
 80052ac:	b21b      	sxth	r3, r3
 80052ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	offset[Z_AXIS_INDEX] = (magMax[Z_AXIS_INDEX] + magMin[Z_AXIS_INDEX])/2;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	3304      	adds	r3, #4
 80052b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052b8:	461a      	mov	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052c2:	4413      	add	r3, r2
 80052c4:	0fda      	lsrs	r2, r3, #31
 80052c6:	4413      	add	r3, r2
 80052c8:	105b      	asrs	r3, r3, #1
 80052ca:	b21b      	sxth	r3, r3
 80052cc:	853b      	strh	r3, [r7, #40]	; 0x28

	/* below lines are for calculating soft iron distortion*/
	avgDelta[X_AXIS_INDEX] = (magMax[X_AXIS_INDEX] - magMin[X_AXIS_INDEX])/2;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	0fda      	lsrs	r2, r3, #31
 80052e0:	4413      	add	r3, r2
 80052e2:	105b      	asrs	r3, r3, #1
 80052e4:	b21b      	sxth	r3, r3
 80052e6:	83bb      	strh	r3, [r7, #28]
	avgDelta[Y_AXIS_INDEX] = (magMax[Y_AXIS_INDEX] - magMin[Y_AXIS_INDEX])/2;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	3302      	adds	r3, #2
 80052ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052f0:	461a      	mov	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3302      	adds	r3, #2
 80052f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	0fda      	lsrs	r2, r3, #31
 80052fe:	4413      	add	r3, r2
 8005300:	105b      	asrs	r3, r3, #1
 8005302:	b21b      	sxth	r3, r3
 8005304:	83fb      	strh	r3, [r7, #30]
	avgDelta[Z_AXIS_INDEX] = (magMax[Z_AXIS_INDEX] - magMin[Z_AXIS_INDEX])/2;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	3304      	adds	r3, #4
 800530a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	0fda      	lsrs	r2, r3, #31
 800531c:	4413      	add	r3, r2
 800531e:	105b      	asrs	r3, r3, #1
 8005320:	b21b      	sxth	r3, r3
 8005322:	843b      	strh	r3, [r7, #32]

	totalAvgDelta = avgDelta[X_AXIS_INDEX] + avgDelta[Y_AXIS_INDEX] + avgDelta[Z_AXIS_INDEX];
 8005324:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005328:	461a      	mov	r2, r3
 800532a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800532e:	4413      	add	r3, r2
 8005330:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005334:	4413      	add	r3, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f7fb fd24 	bl	8000d84 <__aeabi_i2f>
 800533c:	4603      	mov	r3, r0
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c

	scaleVal[X_AXIS_INDEX] = totalAvgDelta / avgDelta[X_AXIS_INDEX];
 8005340:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005344:	4618      	mov	r0, r3
 8005346:	f7fb fd1d 	bl	8000d84 <__aeabi_i2f>
 800534a:	4603      	mov	r3, r0
 800534c:	4619      	mov	r1, r3
 800534e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005350:	f7fb fe20 	bl	8000f94 <__aeabi_fdiv>
 8005354:	4603      	mov	r3, r0
 8005356:	613b      	str	r3, [r7, #16]
	scaleVal[Y_AXIS_INDEX] = totalAvgDelta / avgDelta[Y_AXIS_INDEX];
 8005358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800535c:	4618      	mov	r0, r3
 800535e:	f7fb fd11 	bl	8000d84 <__aeabi_i2f>
 8005362:	4603      	mov	r3, r0
 8005364:	4619      	mov	r1, r3
 8005366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005368:	f7fb fe14 	bl	8000f94 <__aeabi_fdiv>
 800536c:	4603      	mov	r3, r0
 800536e:	617b      	str	r3, [r7, #20]
	scaleVal[Z_AXIS_INDEX] = totalAvgDelta / avgDelta[Z_AXIS_INDEX];
 8005370:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005374:	4618      	mov	r0, r3
 8005376:	f7fb fd05 	bl	8000d84 <__aeabi_i2f>
 800537a:	4603      	mov	r3, r0
 800537c:	4619      	mov	r1, r3
 800537e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005380:	f7fb fe08 	bl	8000f94 <__aeabi_fdiv>
 8005384:	4603      	mov	r3, r0
 8005386:	61bb      	str	r3, [r7, #24]

	/* correct the raw magnetometer readings */
	magData[X_AXIS_INDEX] = (magData[X_AXIS_INDEX] - offset[X_AXIS_INDEX]) * scaleVal[X_AXIS_INDEX];
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800538e:	461a      	mov	r2, r3
 8005390:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	4618      	mov	r0, r3
 8005398:	f7fb fcf4 	bl	8000d84 <__aeabi_i2f>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f7fb fd42 	bl	8000e2c <__aeabi_fmul>
 80053a8:	4603      	mov	r3, r0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fb ff1a 	bl	80011e4 <__aeabi_f2iz>
 80053b0:	4603      	mov	r3, r0
 80053b2:	b21a      	sxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	801a      	strh	r2, [r3, #0]
	magData[Y_AXIS_INDEX] = (magData[Y_AXIS_INDEX] - offset[Y_AXIS_INDEX]) * scaleVal[Y_AXIS_INDEX];
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1c9c      	adds	r4, r3, #2
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3302      	adds	r3, #2
 80053c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053c4:	461a      	mov	r2, r3
 80053c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fb fcd9 	bl	8000d84 <__aeabi_i2f>
 80053d2:	4602      	mov	r2, r0
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fb fd27 	bl	8000e2c <__aeabi_fmul>
 80053de:	4603      	mov	r3, r0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fb feff 	bl	80011e4 <__aeabi_f2iz>
 80053e6:	4603      	mov	r3, r0
 80053e8:	b21b      	sxth	r3, r3
 80053ea:	8023      	strh	r3, [r4, #0]
	magData[Z_AXIS_INDEX] = (magData[Z_AXIS_INDEX] - offset[Z_AXIS_INDEX]) * scaleVal[Z_AXIS_INDEX];
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1d1c      	adds	r4, r3, #4
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3304      	adds	r3, #4
 80053f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053f8:	461a      	mov	r2, r3
 80053fa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	4618      	mov	r0, r3
 8005402:	f7fb fcbf 	bl	8000d84 <__aeabi_i2f>
 8005406:	4602      	mov	r2, r0
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f7fb fd0d 	bl	8000e2c <__aeabi_fmul>
 8005412:	4603      	mov	r3, r0
 8005414:	4618      	mov	r0, r3
 8005416:	f7fb fee5 	bl	80011e4 <__aeabi_f2iz>
 800541a:	4603      	mov	r3, r0
 800541c:	b21b      	sxth	r3, r3
 800541e:	8023      	strh	r3, [r4, #0]
}
 8005420:	bf00      	nop
 8005422:	3734      	adds	r7, #52	; 0x34
 8005424:	46bd      	mov	sp, r7
 8005426:	bd90      	pop	{r4, r7, pc}

08005428 <I2C_LowLevel_Init>:
 * @param ClockSpeed Bus communication frequency in Hz
 * @param OwnAddress MCU I2C address
 * @return none.
 **************************************************************************/
void I2C_LowLevel_Init(uint32_t ClockSpeed, uint8_t OwnAddress)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
	I2C_InitTypeDef  I2C_InitStructure;
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8005434:	2101      	movs	r1, #1
 8005436:	2008      	movs	r0, #8
 8005438:	f7fe fe10 	bl	800405c <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800543c:	2101      	movs	r1, #1
 800543e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005442:	f7fe fe29 	bl	8004098 <RCC_APB1PeriphClockCmd>


	/* Configure I2C_EE pins: SCL and SDA */
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
 8005446:	23c0      	movs	r3, #192	; 0xc0
 8005448:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800544a:	2303      	movs	r3, #3
 800544c:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800544e:	231c      	movs	r3, #28
 8005450:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	4619      	mov	r1, r3
 8005458:	4810      	ldr	r0, [pc, #64]	; (800549c <I2C_LowLevel_Init+0x74>)
 800545a:	f7fe faef 	bl	8003a3c <GPIO_Init>

	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800545e:	2300      	movs	r3, #0
 8005460:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8005462:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8005466:	82fb      	strh	r3, [r7, #22]
	I2C_InitStructure.I2C_OwnAddress1 = OwnAddress;
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	b29b      	uxth	r3, r3
 800546c:	833b      	strh	r3, [r7, #24]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800546e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005472:	837b      	strh	r3, [r7, #26]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8005474:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005478:	83bb      	strh	r3, [r7, #28]
	I2C_InitStructure.I2C_ClockSpeed = ClockSpeed;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	613b      	str	r3, [r7, #16]

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 800547e:	2101      	movs	r1, #1
 8005480:	4807      	ldr	r0, [pc, #28]	; (80054a0 <I2C_LowLevel_Init+0x78>)
 8005482:	f7fe fc59 	bl	8003d38 <I2C_Cmd>
	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8005486:	f107 0310 	add.w	r3, r7, #16
 800548a:	4619      	mov	r1, r3
 800548c:	4804      	ldr	r0, [pc, #16]	; (80054a0 <I2C_LowLevel_Init+0x78>)
 800548e:	f7fe fb91 	bl	8003bb4 <I2C_Init>
}
 8005492:	bf00      	nop
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40010c00 	.word	0x40010c00
 80054a0:	40005400 	.word	0x40005400

080054a4 <i2c_slave_mem_read>:
 * @param writeBuffer pointer to the buffer to hold the read data.
 * @param bytesNum number of bytes to read from slave.
 * @return 0 on success, -1 on timeout.
 **************************************************************************/
int8_t i2c_slave_mem_read(uint8_t slaveAddr, uint8_t registerAddr, uint8_t* writeBuffer, uint8_t bytesNum)
{
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	603a      	str	r2, [r7, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	4603      	mov	r3, r0
 80054b0:	71fb      	strb	r3, [r7, #7]
 80054b2:	460b      	mov	r3, r1
 80054b4:	71bb      	strb	r3, [r7, #6]
 80054b6:	4613      	mov	r3, r2
 80054b8:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	i = bytesNum;
 80054ba:	797b      	ldrb	r3, [r7, #5]
 80054bc:	73fb      	strb	r3, [r7, #15]
	timeout_alarm_set(5*bytesNum);
 80054be:	797a      	ldrb	r2, [r7, #5]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f004 f886 	bl	80095d8 <timeout_alarm_set>

	I2C_AcknowledgeConfig(I2C1,ENABLE);
 80054cc:	2101      	movs	r1, #1
 80054ce:	4851      	ldr	r0, [pc, #324]	; (8005614 <i2c_slave_mem_read+0x170>)
 80054d0:	f7fe fc8f 	bl	8003df2 <I2C_AcknowledgeConfig>

	I2C_GenerateSTART(I2C1,ENABLE);
 80054d4:	2101      	movs	r1, #1
 80054d6:	484f      	ldr	r0, [pc, #316]	; (8005614 <i2c_slave_mem_read+0x170>)
 80054d8:	f7fe fc4d 	bl	8003d76 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80054dc:	e007      	b.n	80054ee <i2c_slave_mem_read+0x4a>
	{
		if(timeout_alarm_status_check() == 1)
 80054de:	f004 f899 	bl	8009614 <timeout_alarm_status_check>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d102      	bne.n	80054ee <i2c_slave_mem_read+0x4a>
			return -1;
 80054e8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ec:	e08e      	b.n	800560c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 80054ee:	494a      	ldr	r1, [pc, #296]	; (8005618 <i2c_slave_mem_read+0x174>)
 80054f0:	4848      	ldr	r0, [pc, #288]	; (8005614 <i2c_slave_mem_read+0x170>)
 80054f2:	f7fe fcd6 	bl	8003ea2 <I2C_CheckEvent>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <i2c_slave_mem_read+0x3a>
	}

	I2C_Send7bitAddress(I2C1, (slaveAddr<<1), I2C_Direction_Transmitter);
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2200      	movs	r2, #0
 8005504:	4619      	mov	r1, r3
 8005506:	4843      	ldr	r0, [pc, #268]	; (8005614 <i2c_slave_mem_read+0x170>)
 8005508:	f7fe fcae 	bl	8003e68 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800550c:	e007      	b.n	800551e <i2c_slave_mem_read+0x7a>
	{
		if(timeout_alarm_status_check() == 1)
 800550e:	f004 f881 	bl	8009614 <timeout_alarm_status_check>
 8005512:	4603      	mov	r3, r0
 8005514:	2b01      	cmp	r3, #1
 8005516:	d102      	bne.n	800551e <i2c_slave_mem_read+0x7a>
			return -1;
 8005518:	f04f 33ff 	mov.w	r3, #4294967295
 800551c:	e076      	b.n	800560c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800551e:	493f      	ldr	r1, [pc, #252]	; (800561c <i2c_slave_mem_read+0x178>)
 8005520:	483c      	ldr	r0, [pc, #240]	; (8005614 <i2c_slave_mem_read+0x170>)
 8005522:	f7fe fcbe 	bl	8003ea2 <I2C_CheckEvent>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <i2c_slave_mem_read+0x6a>
	}

	I2C_SendData(I2C1, registerAddr);
 800552c:	79bb      	ldrb	r3, [r7, #6]
 800552e:	4619      	mov	r1, r3
 8005530:	4838      	ldr	r0, [pc, #224]	; (8005614 <i2c_slave_mem_read+0x170>)
 8005532:	f7fe fc7d 	bl	8003e30 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8005536:	e007      	b.n	8005548 <i2c_slave_mem_read+0xa4>
	{
		if(timeout_alarm_status_check() == 1)
 8005538:	f004 f86c 	bl	8009614 <timeout_alarm_status_check>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	d102      	bne.n	8005548 <i2c_slave_mem_read+0xa4>
			return -1;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295
 8005546:	e061      	b.n	800560c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8005548:	4935      	ldr	r1, [pc, #212]	; (8005620 <i2c_slave_mem_read+0x17c>)
 800554a:	4832      	ldr	r0, [pc, #200]	; (8005614 <i2c_slave_mem_read+0x170>)
 800554c:	f7fe fca9 	bl	8003ea2 <I2C_CheckEvent>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <i2c_slave_mem_read+0x94>
	}

	I2C_GenerateSTART(I2C1,ENABLE);
 8005556:	2101      	movs	r1, #1
 8005558:	482e      	ldr	r0, [pc, #184]	; (8005614 <i2c_slave_mem_read+0x170>)
 800555a:	f7fe fc0c 	bl	8003d76 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800555e:	e007      	b.n	8005570 <i2c_slave_mem_read+0xcc>
	{
		if(timeout_alarm_status_check() == 1)
 8005560:	f004 f858 	bl	8009614 <timeout_alarm_status_check>
 8005564:	4603      	mov	r3, r0
 8005566:	2b01      	cmp	r3, #1
 8005568:	d102      	bne.n	8005570 <i2c_slave_mem_read+0xcc>
			return -1;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	e04d      	b.n	800560c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 8005570:	4929      	ldr	r1, [pc, #164]	; (8005618 <i2c_slave_mem_read+0x174>)
 8005572:	4828      	ldr	r0, [pc, #160]	; (8005614 <i2c_slave_mem_read+0x170>)
 8005574:	f7fe fc95 	bl	8003ea2 <I2C_CheckEvent>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <i2c_slave_mem_read+0xbc>
	}

	I2C_Send7bitAddress(I2C1, slaveAddr<<1, I2C_Direction_Receiver);
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2201      	movs	r2, #1
 8005586:	4619      	mov	r1, r3
 8005588:	4822      	ldr	r0, [pc, #136]	; (8005614 <i2c_slave_mem_read+0x170>)
 800558a:	f7fe fc6d 	bl	8003e68 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 800558e:	e007      	b.n	80055a0 <i2c_slave_mem_read+0xfc>
	{
		if(timeout_alarm_status_check() == 1)
 8005590:	f004 f840 	bl	8009614 <timeout_alarm_status_check>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d102      	bne.n	80055a0 <i2c_slave_mem_read+0xfc>
			return -1;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	e035      	b.n	800560c <i2c_slave_mem_read+0x168>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 80055a0:	4920      	ldr	r1, [pc, #128]	; (8005624 <i2c_slave_mem_read+0x180>)
 80055a2:	481c      	ldr	r0, [pc, #112]	; (8005614 <i2c_slave_mem_read+0x170>)
 80055a4:	f7fe fc7d 	bl	8003ea2 <I2C_CheckEvent>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <i2c_slave_mem_read+0xec>
	}

	while(i>0)
 80055ae:	e023      	b.n	80055f8 <i2c_slave_mem_read+0x154>
	{
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
		{
			if(timeout_alarm_status_check() == 1)
 80055b0:	f004 f830 	bl	8009614 <timeout_alarm_status_check>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d102      	bne.n	80055c0 <i2c_slave_mem_read+0x11c>
				return -1;
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	e025      	b.n	800560c <i2c_slave_mem_read+0x168>
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
 80055c0:	4919      	ldr	r1, [pc, #100]	; (8005628 <i2c_slave_mem_read+0x184>)
 80055c2:	4814      	ldr	r0, [pc, #80]	; (8005614 <i2c_slave_mem_read+0x170>)
 80055c4:	f7fe fc6d 	bl	8003ea2 <I2C_CheckEvent>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <i2c_slave_mem_read+0x10c>
		}
		if(i==1)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d103      	bne.n	80055dc <i2c_slave_mem_read+0x138>
			I2C_AcknowledgeConfig(I2C1,DISABLE);
 80055d4:	2100      	movs	r1, #0
 80055d6:	480f      	ldr	r0, [pc, #60]	; (8005614 <i2c_slave_mem_read+0x170>)
 80055d8:	f7fe fc0b 	bl	8003df2 <I2C_AcknowledgeConfig>
		writeBuffer[bytesNum-i] = I2C_ReceiveData(I2C1);
 80055dc:	797a      	ldrb	r2, [r7, #5]
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	189c      	adds	r4, r3, r2
 80055e8:	480a      	ldr	r0, [pc, #40]	; (8005614 <i2c_slave_mem_read+0x170>)
 80055ea:	f7fe fc30 	bl	8003e4e <I2C_ReceiveData>
 80055ee:	4603      	mov	r3, r0
 80055f0:	7023      	strb	r3, [r4, #0]
		i--;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
	while(i>0)
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e0      	bne.n	80055c0 <i2c_slave_mem_read+0x11c>
	}
	I2C_GenerateSTOP(I2C1,ENABLE);
 80055fe:	2101      	movs	r1, #1
 8005600:	4804      	ldr	r0, [pc, #16]	; (8005614 <i2c_slave_mem_read+0x170>)
 8005602:	f7fe fbd7 	bl	8003db4 <I2C_GenerateSTOP>
	timeout_alarm_off();
 8005606:	f004 f811 	bl	800962c <timeout_alarm_off>
	return 0;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	bd90      	pop	{r4, r7, pc}
 8005614:	40005400 	.word	0x40005400
 8005618:	00030001 	.word	0x00030001
 800561c:	00070082 	.word	0x00070082
 8005620:	00070084 	.word	0x00070084
 8005624:	00030002 	.word	0x00030002
 8005628:	00030040 	.word	0x00030040

0800562c <i2c_slave_mem_write>:
 * @param registerAddr starting memory location of slave to start writing to.
 * @param writedata data to be written to the slave register.
 * @return 0 on success, -1 on timeout.
 **************************************************************************/
int8_t i2c_slave_mem_write(uint8_t slaveAddr, uint8_t registerAddr, uint8_t writeData)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	71fb      	strb	r3, [r7, #7]
 8005636:	460b      	mov	r3, r1
 8005638:	71bb      	strb	r3, [r7, #6]
 800563a:	4613      	mov	r3, r2
 800563c:	717b      	strb	r3, [r7, #5]
	timeout_alarm_set(20);
 800563e:	2014      	movs	r0, #20
 8005640:	f003 ffca 	bl	80095d8 <timeout_alarm_set>

	I2C_GenerateSTART(I2C1,ENABLE);
 8005644:	2101      	movs	r1, #1
 8005646:	482f      	ldr	r0, [pc, #188]	; (8005704 <i2c_slave_mem_write+0xd8>)
 8005648:	f7fe fb95 	bl	8003d76 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800564c:	e007      	b.n	800565e <i2c_slave_mem_write+0x32>
	{
			if(timeout_alarm_status_check() == 1)
 800564e:	f003 ffe1 	bl	8009614 <timeout_alarm_status_check>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d102      	bne.n	800565e <i2c_slave_mem_write+0x32>
				return -1;
 8005658:	f04f 33ff 	mov.w	r3, #4294967295
 800565c:	e04d      	b.n	80056fa <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))
 800565e:	492a      	ldr	r1, [pc, #168]	; (8005708 <i2c_slave_mem_write+0xdc>)
 8005660:	4828      	ldr	r0, [pc, #160]	; (8005704 <i2c_slave_mem_write+0xd8>)
 8005662:	f7fe fc1e 	bl	8003ea2 <I2C_CheckEvent>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <i2c_slave_mem_write+0x22>
	}

	I2C_Send7bitAddress(I2C1, (slaveAddr<<1), I2C_Direction_Transmitter);
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2200      	movs	r2, #0
 8005674:	4619      	mov	r1, r3
 8005676:	4823      	ldr	r0, [pc, #140]	; (8005704 <i2c_slave_mem_write+0xd8>)
 8005678:	f7fe fbf6 	bl	8003e68 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800567c:	e007      	b.n	800568e <i2c_slave_mem_write+0x62>
	{
			if(timeout_alarm_status_check() == 1)
 800567e:	f003 ffc9 	bl	8009614 <timeout_alarm_status_check>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <i2c_slave_mem_write+0x62>
				return -1;
 8005688:	f04f 33ff 	mov.w	r3, #4294967295
 800568c:	e035      	b.n	80056fa <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800568e:	491f      	ldr	r1, [pc, #124]	; (800570c <i2c_slave_mem_write+0xe0>)
 8005690:	481c      	ldr	r0, [pc, #112]	; (8005704 <i2c_slave_mem_write+0xd8>)
 8005692:	f7fe fc06 	bl	8003ea2 <I2C_CheckEvent>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <i2c_slave_mem_write+0x52>
	}

	I2C_SendData(I2C1,registerAddr);
 800569c:	79bb      	ldrb	r3, [r7, #6]
 800569e:	4619      	mov	r1, r3
 80056a0:	4818      	ldr	r0, [pc, #96]	; (8005704 <i2c_slave_mem_write+0xd8>)
 80056a2:	f7fe fbc5 	bl	8003e30 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80056a6:	e007      	b.n	80056b8 <i2c_slave_mem_write+0x8c>
	{
			if(timeout_alarm_status_check() == 1)
 80056a8:	f003 ffb4 	bl	8009614 <timeout_alarm_status_check>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d102      	bne.n	80056b8 <i2c_slave_mem_write+0x8c>
				return -1;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295
 80056b6:	e020      	b.n	80056fa <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80056b8:	4915      	ldr	r1, [pc, #84]	; (8005710 <i2c_slave_mem_write+0xe4>)
 80056ba:	4812      	ldr	r0, [pc, #72]	; (8005704 <i2c_slave_mem_write+0xd8>)
 80056bc:	f7fe fbf1 	bl	8003ea2 <I2C_CheckEvent>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <i2c_slave_mem_write+0x7c>
	}

	I2C_SendData(I2C1,writeData);
 80056c6:	797b      	ldrb	r3, [r7, #5]
 80056c8:	4619      	mov	r1, r3
 80056ca:	480e      	ldr	r0, [pc, #56]	; (8005704 <i2c_slave_mem_write+0xd8>)
 80056cc:	f7fe fbb0 	bl	8003e30 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80056d0:	e007      	b.n	80056e2 <i2c_slave_mem_write+0xb6>
	{
			if(timeout_alarm_status_check() == 1)
 80056d2:	f003 ff9f 	bl	8009614 <timeout_alarm_status_check>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d102      	bne.n	80056e2 <i2c_slave_mem_write+0xb6>
				return -1;
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295
 80056e0:	e00b      	b.n	80056fa <i2c_slave_mem_write+0xce>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80056e2:	490b      	ldr	r1, [pc, #44]	; (8005710 <i2c_slave_mem_write+0xe4>)
 80056e4:	4807      	ldr	r0, [pc, #28]	; (8005704 <i2c_slave_mem_write+0xd8>)
 80056e6:	f7fe fbdc 	bl	8003ea2 <I2C_CheckEvent>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <i2c_slave_mem_write+0xa6>
	}

	I2C_GenerateSTOP(I2C1,ENABLE);
 80056f0:	2101      	movs	r1, #1
 80056f2:	4804      	ldr	r0, [pc, #16]	; (8005704 <i2c_slave_mem_write+0xd8>)
 80056f4:	f7fe fb5e 	bl	8003db4 <I2C_GenerateSTOP>

	return 0;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40005400 	.word	0x40005400
 8005708:	00030001 	.word	0x00030001
 800570c:	00070082 	.word	0x00070082
 8005710:	00070084 	.word	0x00070084

08005714 <bluetooth_cmd_task>:
int16_t gyroRawData[3];
int16_t accelRawData[3];
int16_t magRawData[3];

void bluetooth_cmd_task(void *pvParameters)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
	uint16_t data=0;
 800571c:	2300      	movs	r3, #0
 800571e:	81fb      	strh	r3, [r7, #14]

	uart_printf("listening for uart...\n");
 8005720:	480a      	ldr	r0, [pc, #40]	; (800574c <bluetooth_cmd_task+0x38>)
 8005722:	f003 fd55 	bl	80091d0 <printf_>
	while(1)
	{
		while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == 0);
 8005726:	bf00      	nop
 8005728:	2120      	movs	r1, #32
 800572a:	4809      	ldr	r0, [pc, #36]	; (8005750 <bluetooth_cmd_task+0x3c>)
 800572c:	f7ff f99a 	bl	8004a64 <USART_GetFlagStatus>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f8      	beq.n	8005728 <bluetooth_cmd_task+0x14>
		data = USART_ReceiveData(USART1);
 8005736:	4806      	ldr	r0, [pc, #24]	; (8005750 <bluetooth_cmd_task+0x3c>)
 8005738:	f7ff f985 	bl	8004a46 <USART_ReceiveData>
 800573c:	4603      	mov	r3, r0
 800573e:	81fb      	strh	r3, [r7, #14]
		uart_printf("data: %c\n", data);
 8005740:	89fb      	ldrh	r3, [r7, #14]
 8005742:	4619      	mov	r1, r3
 8005744:	4803      	ldr	r0, [pc, #12]	; (8005754 <bluetooth_cmd_task+0x40>)
 8005746:	f003 fd43 	bl	80091d0 <printf_>
		while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == 0);
 800574a:	e7ec      	b.n	8005726 <bluetooth_cmd_task+0x12>
 800574c:	0800a0e0 	.word	0x0800a0e0
 8005750:	40013800 	.word	0x40013800
 8005754:	0800a0f8 	.word	0x0800a0f8

08005758 <test_task>:

	}
}

void test_task(void *pvParameters)
{
 8005758:	b590      	push	{r4, r7, lr}
 800575a:	b089      	sub	sp, #36	; 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

	int16_t magMax[3];
	int16_t magMin[3];
	extern volatile float roll, pitch, yaw;

	vTaskDelay(8000/portTICK_PERIOD_MS);
 8005760:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005764:	f7fd f8aa 	bl	80028bc <vTaskDelay>
//		servo_set_position(PWM_CHANNEL4, 0);
//		delay_ms(1000);
//		servo_set_position(PWM_CHANNEL4, 180);
//		delay_ms(1000);

		pidOutput = pid_compute(roll, 0);
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <test_task+0x3c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f04f 0100 	mov.w	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f002 f869 	bl	8007848 <pid_compute>
 8005776:	61f8      	str	r0, [r7, #28]
		uart_printf("%.1f\n", pidOutput);
 8005778:	69f8      	ldr	r0, [r7, #28]
 800577a:	f7fa fead 	bl	80004d8 <__aeabi_f2d>
 800577e:	4603      	mov	r3, r0
 8005780:	460c      	mov	r4, r1
 8005782:	461a      	mov	r2, r3
 8005784:	4623      	mov	r3, r4
 8005786:	4804      	ldr	r0, [pc, #16]	; (8005798 <test_task+0x40>)
 8005788:	f003 fd22 	bl	80091d0 <printf_>
		vTaskDelay(100/portTICK_PERIOD_MS);
 800578c:	2064      	movs	r0, #100	; 0x64
 800578e:	f7fd f895 	bl	80028bc <vTaskDelay>
		pidOutput = pid_compute(roll, 0);
 8005792:	e7e9      	b.n	8005768 <test_task+0x10>
 8005794:	20001e10 	.word	0x20001e10
 8005798:	0800a104 	.word	0x0800a104

0800579c <motion_control_task>:

	}
}

void motion_control_task(void *pvParameters)
{
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	b09f      	sub	sp, #124	; 0x7c
 80057a2:	af06      	add	r7, sp, #24
 80057a4:	6078      	str	r0, [r7, #4]

#if CALC_WORK_TIME
uint8_t workCount=0;
#endif

	uint8_t accelCalibCompleteFlag=0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t gyroCalibCompleteFlag=0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t magCalibCompleteFlag=0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	float accelCalibVal[3]={0};
 80057b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	609a      	str	r2, [r3, #8]
	float gyroCalibVal[3]={0};
 80057c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	609a      	str	r2, [r3, #8]
	int16_t magnetometerMax[3]={94, 199, 156};
 80057d0:	4a92      	ldr	r2, [pc, #584]	; (8005a1c <motion_control_task+0x280>)
 80057d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057da:	6018      	str	r0, [r3, #0]
 80057dc:	3304      	adds	r3, #4
 80057de:	8019      	strh	r1, [r3, #0]
	int16_t magnetometerMin[3]={-255, -200, -174};
 80057e0:	4a8f      	ldr	r2, [pc, #572]	; (8005a20 <motion_control_task+0x284>)
 80057e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057ea:	6018      	str	r0, [r3, #0]
 80057ec:	3304      	adds	r3, #4
 80057ee:	8019      	strh	r1, [r3, #0]

	float accelFiltered[3]={0};
 80057f0:	f107 0318 	add.w	r3, r7, #24
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	605a      	str	r2, [r3, #4]
 80057fa:	609a      	str	r2, [r3, #8]
	float gyroRawRadPerSec[3] = {0};
 80057fc:	f107 030c 	add.w	r3, r7, #12
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	609a      	str	r2, [r3, #8]

	extern volatile float roll, pitch, yaw;
	const float accelFilterAlpha = 0.05;
 8005808:	4b86      	ldr	r3, [pc, #536]	; (8005a24 <motion_control_task+0x288>)
 800580a:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint32_t i=0,j=0;
 800580c:	2300      	movs	r3, #0
 800580e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005810:	2300      	movs	r3, #0
 8005812:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t magReadCount=0;
 8005814:	2300      	movs	r3, #0
 8005816:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


	if(!gyroCalibCompleteFlag)
 800581a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800581e:	2b00      	cmp	r3, #0
 8005820:	d114      	bne.n	800584c <motion_control_task+0xb0>
	{
		uart_printf("gyro calibration started\n");
 8005822:	4881      	ldr	r0, [pc, #516]	; (8005a28 <motion_control_task+0x28c>)
 8005824:	f003 fcd4 	bl	80091d0 <printf_>
		if(gyro_calc_bias(gyroCalibVal)<0)
 8005828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fb67 	bl	8004f00 <gyro_calc_bias>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	da03      	bge.n	8005840 <motion_control_task+0xa4>
		{
			uart_printf("gyro calibration fail\n");
 8005838:	487c      	ldr	r0, [pc, #496]	; (8005a2c <motion_control_task+0x290>)
 800583a:	f003 fcc9 	bl	80091d0 <printf_>
			while(1);
 800583e:	e7fe      	b.n	800583e <motion_control_task+0xa2>
		}
		gyroCalibCompleteFlag = 1;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		vTaskDelay(10/portTICK_PERIOD_MS);
 8005846:	200a      	movs	r0, #10
 8005848:	f7fd f838 	bl	80028bc <vTaskDelay>
	}

	if(!accelCalibCompleteFlag)
 800584c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005850:	2b00      	cmp	r3, #0
 8005852:	d114      	bne.n	800587e <motion_control_task+0xe2>
	{
		uart_printf("accel calibration started\n");
 8005854:	4876      	ldr	r0, [pc, #472]	; (8005a30 <motion_control_task+0x294>)
 8005856:	f003 fcbb 	bl	80091d0 <printf_>
		if(accel_calc_bias(accelCalibVal)<0)
 800585a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff fbd2 	bl	8005008 <accel_calc_bias>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	da03      	bge.n	8005872 <motion_control_task+0xd6>
		{
			uart_printf("accel calibration fail\n");
 800586a:	4872      	ldr	r0, [pc, #456]	; (8005a34 <motion_control_task+0x298>)
 800586c:	f003 fcb0 	bl	80091d0 <printf_>
			while(1);
 8005870:	e7fe      	b.n	8005870 <motion_control_task+0xd4>
		}
		vTaskDelay(10/portTICK_PERIOD_MS);
 8005872:	200a      	movs	r0, #10
 8005874:	f7fd f822 	bl	80028bc <vTaskDelay>
		accelCalibCompleteFlag = 1;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uart_printf("magnetometer calibration complete\n");
		vTaskDelay(10/portTICK_PERIOD_MS);
		magCalibCompleteFlag = 1;
	}
#else
	magCalibCompleteFlag = 1;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
#endif

	while(1)
	{
    	if((gyroCalibCompleteFlag == 1)&&(accelCalibCompleteFlag == 1)&&
 8005884:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8005888:	2b01      	cmp	r3, #1
 800588a:	d1fb      	bne.n	8005884 <motion_control_task+0xe8>
 800588c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005890:	2b01      	cmp	r3, #1
 8005892:	d1f7      	bne.n	8005884 <motion_control_task+0xe8>
 8005894:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005898:	2b01      	cmp	r3, #1
 800589a:	d1f3      	bne.n	8005884 <motion_control_task+0xe8>
#if CALC_WORK_TIME
if(workCount==0)
	uart_printf("*%d\n",millis());
#endif

    		if(magReadCount>=2)
 800589c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d90e      	bls.n	80058c2 <motion_control_task+0x126>
			{
				if(magneto_measurement_read(magRawData)<0)
 80058a4:	4864      	ldr	r0, [pc, #400]	; (8005a38 <motion_control_task+0x29c>)
 80058a6:	f7ff faa0 	bl	8004dea <magneto_measurement_read>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da02      	bge.n	80058b6 <motion_control_task+0x11a>
					uart_printf("magnetometer read fail\n");
 80058b0:	4862      	ldr	r0, [pc, #392]	; (8005a3c <motion_control_task+0x2a0>)
 80058b2:	f003 fc8d 	bl	80091d0 <printf_>
				magReadCount=0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				vTaskDelay(1/portTICK_PERIOD_MS);
 80058bc:	2001      	movs	r0, #1
 80058be:	f7fc fffd 	bl	80028bc <vTaskDelay>

			}
			magReadCount++;
 80058c2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80058c6:	3301      	adds	r3, #1
 80058c8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    		if(imu_raw_measurement_read(accelRawData, gyroRawData)<0)
 80058cc:	495c      	ldr	r1, [pc, #368]	; (8005a40 <motion_control_task+0x2a4>)
 80058ce:	485d      	ldr	r0, [pc, #372]	; (8005a44 <motion_control_task+0x2a8>)
 80058d0:	f7ff fac1 	bl	8004e56 <imu_raw_measurement_read>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	da02      	bge.n	80058e0 <motion_control_task+0x144>
    			uart_printf("imu read fail\n");
 80058da:	485b      	ldr	r0, [pc, #364]	; (8005a48 <motion_control_task+0x2ac>)
 80058dc:	f003 fc78 	bl	80091d0 <printf_>

    		accel_caliberate(accelRawData, accelCalibVal);
 80058e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058e4:	4619      	mov	r1, r3
 80058e6:	4857      	ldr	r0, [pc, #348]	; (8005a44 <motion_control_task+0x2a8>)
 80058e8:	f7ff fc72 	bl	80051d0 <accel_caliberate>

    		low_pass_filter(accelRawData[X_AXIS_INDEX], &accelFiltered[X_AXIS_INDEX], accelFilterAlpha);
 80058ec:	4b55      	ldr	r3, [pc, #340]	; (8005a44 <motion_control_task+0x2a8>)
 80058ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fb fa46 	bl	8000d84 <__aeabi_i2f>
 80058f8:	f107 0318 	add.w	r3, r7, #24
 80058fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058fe:	4619      	mov	r1, r3
 8005900:	f001 ff60 	bl	80077c4 <low_pass_filter>
    		low_pass_filter(accelRawData[Y_AXIS_INDEX], &accelFiltered[Y_AXIS_INDEX], accelFilterAlpha);
 8005904:	4b4f      	ldr	r3, [pc, #316]	; (8005a44 <motion_control_task+0x2a8>)
 8005906:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800590a:	4618      	mov	r0, r3
 800590c:	f7fb fa3a 	bl	8000d84 <__aeabi_i2f>
 8005910:	f107 0318 	add.w	r3, r7, #24
 8005914:	3304      	adds	r3, #4
 8005916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005918:	4619      	mov	r1, r3
 800591a:	f001 ff53 	bl	80077c4 <low_pass_filter>
    		low_pass_filter(accelRawData[Z_AXIS_INDEX], &accelFiltered[Z_AXIS_INDEX], accelFilterAlpha);
 800591e:	4b49      	ldr	r3, [pc, #292]	; (8005a44 <motion_control_task+0x2a8>)
 8005920:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005924:	4618      	mov	r0, r3
 8005926:	f7fb fa2d 	bl	8000d84 <__aeabi_i2f>
 800592a:	f107 0318 	add.w	r3, r7, #24
 800592e:	3308      	adds	r3, #8
 8005930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005932:	4619      	mov	r1, r3
 8005934:	f001 ff46 	bl	80077c4 <low_pass_filter>

    		gyro_caliberate(gyroRawData, gyroCalibVal);
 8005938:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800593c:	4619      	mov	r1, r3
 800593e:	4840      	ldr	r0, [pc, #256]	; (8005a40 <motion_control_task+0x2a4>)
 8005940:	f7ff fbf8 	bl	8005134 <gyro_caliberate>

			//convert to radians/second
    		gyroRawRadPerSec[X_AXIS_INDEX] = convert_degrees_to_radians((float)gyroRawData[X_AXIS_INDEX]);
 8005944:	4b3e      	ldr	r3, [pc, #248]	; (8005a40 <motion_control_task+0x2a4>)
 8005946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fb fa1a 	bl	8000d84 <__aeabi_i2f>
 8005950:	4603      	mov	r3, r0
 8005952:	4618      	mov	r0, r3
 8005954:	f001 ff5c 	bl	8007810 <convert_degrees_to_radians>
 8005958:	4603      	mov	r3, r0
 800595a:	60fb      	str	r3, [r7, #12]
    		gyroRawRadPerSec[Y_AXIS_INDEX] = convert_degrees_to_radians((float)gyroRawData[Y_AXIS_INDEX]);
 800595c:	4b38      	ldr	r3, [pc, #224]	; (8005a40 <motion_control_task+0x2a4>)
 800595e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fb fa0e 	bl	8000d84 <__aeabi_i2f>
 8005968:	4603      	mov	r3, r0
 800596a:	4618      	mov	r0, r3
 800596c:	f001 ff50 	bl	8007810 <convert_degrees_to_radians>
 8005970:	4603      	mov	r3, r0
 8005972:	613b      	str	r3, [r7, #16]
    		gyroRawRadPerSec[Z_AXIS_INDEX] = convert_degrees_to_radians((float)gyroRawData[Z_AXIS_INDEX]);
 8005974:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <motion_control_task+0x2a4>)
 8005976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800597a:	4618      	mov	r0, r3
 800597c:	f7fb fa02 	bl	8000d84 <__aeabi_i2f>
 8005980:	4603      	mov	r3, r0
 8005982:	4618      	mov	r0, r3
 8005984:	f001 ff44 	bl	8007810 <convert_degrees_to_radians>
 8005988:	4603      	mov	r3, r0
 800598a:	617b      	str	r3, [r7, #20]

    		magnetometer_caliberate(magRawData, magnetometerMax, magnetometerMin);
 800598c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005994:	4619      	mov	r1, r3
 8005996:	4828      	ldr	r0, [pc, #160]	; (8005a38 <motion_control_task+0x29c>)
 8005998:	f7ff fc68 	bl	800526c <magnetometer_caliberate>

			for(j=0;j<5;j++)
 800599c:	2300      	movs	r3, #0
 800599e:	657b      	str	r3, [r7, #84]	; 0x54
 80059a0:	e02d      	b.n	80059fe <motion_control_task+0x262>
			{
				MadgwickAHRSupdate(gyroRawRadPerSec[X_AXIS_INDEX], gyroRawRadPerSec[Y_AXIS_INDEX], gyroRawRadPerSec[Z_AXIS_INDEX],
 80059a2:	68fe      	ldr	r6, [r7, #12]
 80059a4:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80059a8:	f8d7 9014 	ldr.w	r9, [r7, #20]
 80059ac:	f8d7 a018 	ldr.w	sl, [r7, #24]
 80059b0:	69fc      	ldr	r4, [r7, #28]
 80059b2:	6a3d      	ldr	r5, [r7, #32]
								   accelFiltered[X_AXIS_INDEX], accelFiltered[Y_AXIS_INDEX], accelFiltered[Z_AXIS_INDEX],
								   magRawData[X_AXIS_INDEX], magRawData[Y_AXIS_INDEX], magRawData[Z_AXIS_INDEX]);
 80059b4:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <motion_control_task+0x29c>)
 80059b6:	f9b3 3000 	ldrsh.w	r3, [r3]
				MadgwickAHRSupdate(gyroRawRadPerSec[X_AXIS_INDEX], gyroRawRadPerSec[Y_AXIS_INDEX], gyroRawRadPerSec[Z_AXIS_INDEX],
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fb f9e2 	bl	8000d84 <__aeabi_i2f>
 80059c0:	4683      	mov	fp, r0
								   magRawData[X_AXIS_INDEX], magRawData[Y_AXIS_INDEX], magRawData[Z_AXIS_INDEX]);
 80059c2:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <motion_control_task+0x29c>)
 80059c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
				MadgwickAHRSupdate(gyroRawRadPerSec[X_AXIS_INDEX], gyroRawRadPerSec[Y_AXIS_INDEX], gyroRawRadPerSec[Z_AXIS_INDEX],
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fb f9db 	bl	8000d84 <__aeabi_i2f>
 80059ce:	6038      	str	r0, [r7, #0]
								   magRawData[X_AXIS_INDEX], magRawData[Y_AXIS_INDEX], magRawData[Z_AXIS_INDEX]);
 80059d0:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <motion_control_task+0x29c>)
 80059d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
				MadgwickAHRSupdate(gyroRawRadPerSec[X_AXIS_INDEX], gyroRawRadPerSec[Y_AXIS_INDEX], gyroRawRadPerSec[Z_AXIS_INDEX],
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fb f9d4 	bl	8000d84 <__aeabi_i2f>
 80059dc:	4603      	mov	r3, r0
 80059de:	9304      	str	r3, [sp, #16]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	9303      	str	r3, [sp, #12]
 80059e4:	f8cd b008 	str.w	fp, [sp, #8]
 80059e8:	9501      	str	r5, [sp, #4]
 80059ea:	9400      	str	r4, [sp, #0]
 80059ec:	4653      	mov	r3, sl
 80059ee:	464a      	mov	r2, r9
 80059f0:	4641      	mov	r1, r8
 80059f2:	4630      	mov	r0, r6
 80059f4:	f000 f8dc 	bl	8005bb0 <MadgwickAHRSupdate>
			for(j=0;j<5;j++)
 80059f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fa:	3301      	adds	r3, #1
 80059fc:	657b      	str	r3, [r7, #84]	; 0x54
 80059fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d9ce      	bls.n	80059a2 <motion_control_task+0x206>
			}
			Madgwick_computeAngles();
 8005a04:	f001 fdf0 	bl	80075e8 <Madgwick_computeAngles>
	uart_printf("#%d\n",millis());
	workCount=0;
}
#endif

			i++;
 8005a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	65bb      	str	r3, [r7, #88]	; 0x58
			if(i==20)
 8005a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a10:	2b14      	cmp	r3, #20
 8005a12:	f47f af37 	bne.w	8005884 <motion_control_task+0xe8>
			{
//				uart_printf("%.1f\n", convert_radians_to_degrees(yaw));
				i=0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	65bb      	str	r3, [r7, #88]	; 0x58
    	if((gyroCalibCompleteFlag == 1)&&(accelCalibCompleteFlag == 1)&&
 8005a1a:	e733      	b.n	8005884 <motion_control_task+0xe8>
 8005a1c:	0800a19c 	.word	0x0800a19c
 8005a20:	0800a1a4 	.word	0x0800a1a4
 8005a24:	3d4ccccd 	.word	0x3d4ccccd
 8005a28:	0800a10c 	.word	0x0800a10c
 8005a2c:	0800a128 	.word	0x0800a128
 8005a30:	0800a140 	.word	0x0800a140
 8005a34:	0800a15c 	.word	0x0800a15c
 8005a38:	20001e3c 	.word	0x20001e3c
 8005a3c:	0800a174 	.word	0x0800a174
 8005a40:	20001e4c 	.word	0x20001e4c
 8005a44:	20001e44 	.word	0x20001e44
 8005a48:	0800a18c 	.word	0x0800a18c

08005a4c <drone_init_task>:
	}
}


void drone_init_task(void *pvParameters)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	6078      	str	r0, [r7, #4]
	int32_t errorCode=0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

	timer3_init();
 8005a58:	f003 fcf2 	bl	8009440 <timer3_init>
	motors_pwm_init();
 8005a5c:	f003 fd24 	bl	80094a8 <motors_pwm_init>
	I2C_LowLevel_Init(400000, 0x38);
 8005a60:	2138      	movs	r1, #56	; 0x38
 8005a62:	482c      	ldr	r0, [pc, #176]	; (8005b14 <drone_init_task+0xc8>)
 8005a64:	f7ff fce0 	bl	8005428 <I2C_LowLevel_Init>
	debug_led_init();
 8005a68:	f7ff f872 	bl	8004b50 <debug_led_init>
	uart_console_init(9600);
 8005a6c:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8005a70:	f003 fdfe 	bl	8009670 <uart_console_init>
	/*safety delay for mpu6050 to powerup*/
	vTaskDelay(500/portTICK_PERIOD_MS);
 8005a74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a78:	f7fc ff20 	bl	80028bc <vTaskDelay>
	if(mpu6050_init(FS_SEL3, FS_SEL1)<0)
 8005a7c:	2108      	movs	r1, #8
 8005a7e:	2018      	movs	r0, #24
 8005a80:	f7ff f884 	bl	8004b8c <mpu6050_init>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	da03      	bge.n	8005a92 <drone_init_task+0x46>
	{
		uart_printf("mpu6050 init failed.\n");
 8005a8a:	4823      	ldr	r0, [pc, #140]	; (8005b18 <drone_init_task+0xcc>)
 8005a8c:	f003 fba0 	bl	80091d0 <printf_>
		while(1);
 8005a90:	e7fe      	b.n	8005a90 <drone_init_task+0x44>
	}

	if(mpu6050_aux_i2c_bus_host_access(MPU6050_HOST_AUX_BUS_CONNECT)<0)
 8005a92:	2001      	movs	r0, #1
 8005a94:	f7ff f8b8 	bl	8004c08 <mpu6050_aux_i2c_bus_host_access>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	da03      	bge.n	8005aa6 <drone_init_task+0x5a>
	{
		uart_printf("aux bus connect failed.\n");
 8005a9e:	481f      	ldr	r0, [pc, #124]	; (8005b1c <drone_init_task+0xd0>)
 8005aa0:	f003 fb96 	bl	80091d0 <printf_>
		while(1);
 8005aa4:	e7fe      	b.n	8005aa4 <drone_init_task+0x58>
	}

	if(hmc5883l_init()<0)
 8005aa6:	f7ff f8fd 	bl	8004ca4 <hmc5883l_init>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	da03      	bge.n	8005ab8 <drone_init_task+0x6c>
	{
		uart_printf("magnetometer init failed.\n");
 8005ab0:	481b      	ldr	r0, [pc, #108]	; (8005b20 <drone_init_task+0xd4>)
 8005ab2:	f003 fb8d 	bl	80091d0 <printf_>
		while(1);
 8005ab6:	e7fe      	b.n	8005ab6 <drone_init_task+0x6a>
	}

	else
	{
		uart_printf("drone init complete.\n");
 8005ab8:	481a      	ldr	r0, [pc, #104]	; (8005b24 <drone_init_task+0xd8>)
 8005aba:	f003 fb89 	bl	80091d0 <printf_>
		vTaskDelay(2000/portTICK_PERIOD_MS);
 8005abe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005ac2:	f7fc fefb 	bl	80028bc <vTaskDelay>
		errorCode = xTaskCreate(test_task, "test_task", 200, NULL, 1, NULL );
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	2301      	movs	r3, #1
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	22c8      	movs	r2, #200	; 0xc8
 8005ad2:	4915      	ldr	r1, [pc, #84]	; (8005b28 <drone_init_task+0xdc>)
 8005ad4:	4815      	ldr	r0, [pc, #84]	; (8005b2c <drone_init_task+0xe0>)
 8005ad6:	f7fc fd29 	bl	800252c <xTaskCreate>
 8005ada:	60f8      	str	r0, [r7, #12]
		uart_printf("task1:%d\n", errorCode);
 8005adc:	68f9      	ldr	r1, [r7, #12]
 8005ade:	4814      	ldr	r0, [pc, #80]	; (8005b30 <drone_init_task+0xe4>)
 8005ae0:	f003 fb76 	bl	80091d0 <printf_>
		errorCode = xTaskCreate(motion_control_task, "motion_control_task", 500, NULL, 1, NULL );
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	2301      	movs	r3, #1
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005af2:	4910      	ldr	r1, [pc, #64]	; (8005b34 <drone_init_task+0xe8>)
 8005af4:	4810      	ldr	r0, [pc, #64]	; (8005b38 <drone_init_task+0xec>)
 8005af6:	f7fc fd19 	bl	800252c <xTaskCreate>
 8005afa:	60f8      	str	r0, [r7, #12]
		uart_printf("task2:%d\n", errorCode);
 8005afc:	68f9      	ldr	r1, [r7, #12]
 8005afe:	480f      	ldr	r0, [pc, #60]	; (8005b3c <drone_init_task+0xf0>)
 8005b00:	f003 fb66 	bl	80091d0 <printf_>

		vTaskDelete(NULL);
 8005b04:	2000      	movs	r0, #0
 8005b06:	f7fc fe4b 	bl	80027a0 <vTaskDelete>
	}
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	00061a80 	.word	0x00061a80
 8005b18:	0800a1ac 	.word	0x0800a1ac
 8005b1c:	0800a1c4 	.word	0x0800a1c4
 8005b20:	0800a1e0 	.word	0x0800a1e0
 8005b24:	0800a1fc 	.word	0x0800a1fc
 8005b28:	0800a214 	.word	0x0800a214
 8005b2c:	08005759 	.word	0x08005759
 8005b30:	0800a220 	.word	0x0800a220
 8005b34:	0800a22c 	.word	0x0800a22c
 8005b38:	0800579d 	.word	0x0800579d
 8005b3c:	0800a240 	.word	0x0800a240

08005b40 <main>:

int main(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af02      	add	r7, sp, #8
  	xTaskCreate(drone_init_task, "drone_init_task", 200, NULL, 0, NULL );
 8005b46:	2300      	movs	r3, #0
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	22c8      	movs	r2, #200	; 0xc8
 8005b52:	4908      	ldr	r1, [pc, #32]	; (8005b74 <main+0x34>)
 8005b54:	4808      	ldr	r0, [pc, #32]	; (8005b78 <main+0x38>)
 8005b56:	f7fc fce9 	bl	800252c <xTaskCreate>
  	xTaskCreate(bluetooth_cmd_task, "bluetooth command task", 200, NULL, 0, NULL );
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	2300      	movs	r3, #0
 8005b64:	22c8      	movs	r2, #200	; 0xc8
 8005b66:	4905      	ldr	r1, [pc, #20]	; (8005b7c <main+0x3c>)
 8005b68:	4805      	ldr	r0, [pc, #20]	; (8005b80 <main+0x40>)
 8005b6a:	f7fc fcdf 	bl	800252c <xTaskCreate>
	vTaskStartScheduler();
 8005b6e:	f7fc fed9 	bl	8002924 <vTaskStartScheduler>
	while(1);
 8005b72:	e7fe      	b.n	8005b72 <main+0x32>
 8005b74:	0800a24c 	.word	0x0800a24c
 8005b78:	08005a4d 	.word	0x08005a4d
 8005b7c:	0800a25c 	.word	0x0800a25c
 8005b80:	08005715 	.word	0x08005715

08005b84 <vApplicationMallocFailedHook>:

    }
}

void vApplicationMallocFailedHook( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8005b88:	e7fe      	b.n	8005b88 <vApplicationMallocFailedHook+0x4>

08005b8a <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	for( ;; );
 8005b94:	e7fe      	b.n	8005b94 <vApplicationStackOverflowHook+0xa>

08005b96 <vApplicationIdleHook>:
}

void vApplicationIdleHook( void )
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
	volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8005b9c:	f7fc f826 	bl	8001bec <xPortGetFreeHeapSize>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8005ba4:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	b0ab      	sub	sp, #172	; 0xac
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8005bbe:	f04f 0100 	mov.w	r1, #0
 8005bc2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8005bc6:	f7fb fac5 	bl	8001154 <__aeabi_fcmpeq>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01f      	beq.n	8005c10 <MadgwickAHRSupdate+0x60>
 8005bd0:	f04f 0100 	mov.w	r1, #0
 8005bd4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005bd8:	f7fb fabc 	bl	8001154 <__aeabi_fcmpeq>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d016      	beq.n	8005c10 <MadgwickAHRSupdate+0x60>
 8005be2:	f04f 0100 	mov.w	r1, #0
 8005be6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005bea:	f7fb fab3 	bl	8001154 <__aeabi_fcmpeq>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <MadgwickAHRSupdate+0x60>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8005bf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f001 f93e 	bl	8006e88 <MadgwickAHRSupdateIMU>
		return;
 8005c0c:	f001 b92c 	b.w	8006e68 <MadgwickAHRSupdate+0x12b8>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8005c10:	4bb0      	ldr	r3, [pc, #704]	; (8005ed4 <MadgwickAHRSupdate+0x324>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c18:	68f9      	ldr	r1, [r7, #12]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fb f906 	bl	8000e2c <__aeabi_fmul>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461c      	mov	r4, r3
 8005c24:	4bac      	ldr	r3, [pc, #688]	; (8005ed8 <MadgwickAHRSupdate+0x328>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fb f8fe 	bl	8000e2c <__aeabi_fmul>
 8005c30:	4603      	mov	r3, r0
 8005c32:	4619      	mov	r1, r3
 8005c34:	4620      	mov	r0, r4
 8005c36:	f7fa ffef 	bl	8000c18 <__aeabi_fsub>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461c      	mov	r4, r3
 8005c3e:	4ba7      	ldr	r3, [pc, #668]	; (8005edc <MadgwickAHRSupdate+0x32c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fb f8f1 	bl	8000e2c <__aeabi_fmul>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f7fa ffe2 	bl	8000c18 <__aeabi_fsub>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fb f8e6 	bl	8000e2c <__aeabi_fmul>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8005c66:	4b9e      	ldr	r3, [pc, #632]	; (8005ee0 <MadgwickAHRSupdate+0x330>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fb f8dd 	bl	8000e2c <__aeabi_fmul>
 8005c72:	4603      	mov	r3, r0
 8005c74:	461c      	mov	r4, r3
 8005c76:	4b98      	ldr	r3, [pc, #608]	; (8005ed8 <MadgwickAHRSupdate+0x328>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fb f8d5 	bl	8000e2c <__aeabi_fmul>
 8005c82:	4603      	mov	r3, r0
 8005c84:	4619      	mov	r1, r3
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7fa ffc8 	bl	8000c1c <__addsf3>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	461c      	mov	r4, r3
 8005c90:	4b92      	ldr	r3, [pc, #584]	; (8005edc <MadgwickAHRSupdate+0x32c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fb f8c8 	bl	8000e2c <__aeabi_fmul>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f7fa ffb9 	bl	8000c18 <__aeabi_fsub>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fb f8bd 	bl	8000e2c <__aeabi_fmul>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8005cb8:	4b89      	ldr	r3, [pc, #548]	; (8005ee0 <MadgwickAHRSupdate+0x330>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fb f8b4 	bl	8000e2c <__aeabi_fmul>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	461c      	mov	r4, r3
 8005cc8:	4b82      	ldr	r3, [pc, #520]	; (8005ed4 <MadgwickAHRSupdate+0x324>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fb f8ac 	bl	8000e2c <__aeabi_fmul>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f7fa ff9d 	bl	8000c18 <__aeabi_fsub>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461c      	mov	r4, r3
 8005ce2:	4b7e      	ldr	r3, [pc, #504]	; (8005edc <MadgwickAHRSupdate+0x32c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fb f89f 	bl	8000e2c <__aeabi_fmul>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7fa ff92 	bl	8000c1c <__addsf3>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fb f894 	bl	8000e2c <__aeabi_fmul>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8005d0a:	4b75      	ldr	r3, [pc, #468]	; (8005ee0 <MadgwickAHRSupdate+0x330>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fb f88b 	bl	8000e2c <__aeabi_fmul>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461c      	mov	r4, r3
 8005d1a:	4b6e      	ldr	r3, [pc, #440]	; (8005ed4 <MadgwickAHRSupdate+0x324>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fb f883 	bl	8000e2c <__aeabi_fmul>
 8005d26:	4603      	mov	r3, r0
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f7fa ff76 	bl	8000c1c <__addsf3>
 8005d30:	4603      	mov	r3, r0
 8005d32:	461c      	mov	r4, r3
 8005d34:	4b68      	ldr	r3, [pc, #416]	; (8005ed8 <MadgwickAHRSupdate+0x328>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68f9      	ldr	r1, [r7, #12]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fb f876 	bl	8000e2c <__aeabi_fmul>
 8005d40:	4603      	mov	r3, r0
 8005d42:	4619      	mov	r1, r3
 8005d44:	4620      	mov	r0, r4
 8005d46:	f7fa ff67 	bl	8000c18 <__aeabi_fsub>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fb f86b 	bl	8000e2c <__aeabi_fmul>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8005d5c:	f04f 0100 	mov.w	r1, #0
 8005d60:	6838      	ldr	r0, [r7, #0]
 8005d62:	f7fb f9f7 	bl	8001154 <__aeabi_fcmpeq>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d012      	beq.n	8005d92 <MadgwickAHRSupdate+0x1e2>
 8005d6c:	f04f 0100 	mov.w	r1, #0
 8005d70:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005d74:	f7fb f9ee 	bl	8001154 <__aeabi_fcmpeq>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <MadgwickAHRSupdate+0x1e2>
 8005d7e:	f04f 0100 	mov.w	r1, #0
 8005d82:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8005d86:	f7fb f9e5 	bl	8001154 <__aeabi_fcmpeq>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 87c0 	bne.w	8006d12 <MadgwickAHRSupdate+0x1162>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6838      	ldr	r0, [r7, #0]
 8005d96:	f7fb f849 	bl	8000e2c <__aeabi_fmul>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461c      	mov	r4, r3
 8005d9e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005da2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005da6:	f7fb f841 	bl	8000e2c <__aeabi_fmul>
 8005daa:	4603      	mov	r3, r0
 8005dac:	4619      	mov	r1, r3
 8005dae:	4620      	mov	r0, r4
 8005db0:	f7fa ff34 	bl	8000c1c <__addsf3>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461c      	mov	r4, r3
 8005db8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8005dbc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8005dc0:	f7fb f834 	bl	8000e2c <__aeabi_fmul>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f7fa ff27 	bl	8000c1c <__addsf3>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fcbb 	bl	800774c <invSqrt>
 8005dd6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		ax *= recipNorm;
 8005dda:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005dde:	6838      	ldr	r0, [r7, #0]
 8005de0:	f7fb f824 	bl	8000e2c <__aeabi_fmul>
 8005de4:	4603      	mov	r3, r0
 8005de6:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8005de8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005dec:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005df0:	f7fb f81c 	bl	8000e2c <__aeabi_fmul>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		az *= recipNorm;   
 8005dfa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005dfe:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8005e02:	f7fb f813 	bl	8000e2c <__aeabi_fmul>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8005e0c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8005e10:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8005e14:	f7fb f80a 	bl	8000e2c <__aeabi_fmul>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	461c      	mov	r4, r3
 8005e1c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8005e20:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005e24:	f7fb f802 	bl	8000e2c <__aeabi_fmul>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f7fa fef5 	bl	8000c1c <__addsf3>
 8005e32:	4603      	mov	r3, r0
 8005e34:	461c      	mov	r4, r3
 8005e36:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8005e3a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005e3e:	f7fa fff5 	bl	8000e2c <__aeabi_fmul>
 8005e42:	4603      	mov	r3, r0
 8005e44:	4619      	mov	r1, r3
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7fa fee8 	bl	8000c1c <__addsf3>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 fc7c 	bl	800774c <invSqrt>
 8005e54:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		mx *= recipNorm;
 8005e58:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005e5c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8005e60:	f7fa ffe4 	bl	8000e2c <__aeabi_fmul>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		my *= recipNorm;
 8005e6a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005e6e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005e72:	f7fa ffdb 	bl	8000e2c <__aeabi_fmul>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		mz *= recipNorm;
 8005e7c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005e80:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005e84:	f7fa ffd2 	bl	8000e2c <__aeabi_fmul>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8005e8e:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <MadgwickAHRSupdate+0x330>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fa fec1 	bl	8000c1c <__addsf3>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fa ffc3 	bl	8000e2c <__aeabi_fmul>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		_2q0my = 2.0f * q0 * my;
 8005eac:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <MadgwickAHRSupdate+0x330>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fa feb2 	bl	8000c1c <__addsf3>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fa ffb4 	bl	8000e2c <__aeabi_fmul>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		_2q0mz = 2.0f * q0 * mz;
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <MadgwickAHRSupdate+0x330>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	e007      	b.n	8005ee4 <MadgwickAHRSupdate+0x334>
 8005ed4:	20001e04 	.word	0x20001e04
 8005ed8:	20001e08 	.word	0x20001e08
 8005edc:	20001e0c 	.word	0x20001e0c
 8005ee0:	20000020 	.word	0x20000020
 8005ee4:	f7fa fe9a 	bl	8000c1c <__addsf3>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fa ff9c 	bl	8000e2c <__aeabi_fmul>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		_2q1mx = 2.0f * q1 * mx;
 8005efa:	4b98      	ldr	r3, [pc, #608]	; (800615c <MadgwickAHRSupdate+0x5ac>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4619      	mov	r1, r3
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fa fe8b 	bl	8000c1c <__addsf3>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fa ff8d 	bl	8000e2c <__aeabi_fmul>
 8005f12:	4603      	mov	r3, r0
 8005f14:	67fb      	str	r3, [r7, #124]	; 0x7c
		_2q0 = 2.0f * q0;
 8005f16:	4b92      	ldr	r3, [pc, #584]	; (8006160 <MadgwickAHRSupdate+0x5b0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fa fe7d 	bl	8000c1c <__addsf3>
 8005f22:	4603      	mov	r3, r0
 8005f24:	67bb      	str	r3, [r7, #120]	; 0x78
		_2q1 = 2.0f * q1;
 8005f26:	4b8d      	ldr	r3, [pc, #564]	; (800615c <MadgwickAHRSupdate+0x5ac>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa fe75 	bl	8000c1c <__addsf3>
 8005f32:	4603      	mov	r3, r0
 8005f34:	677b      	str	r3, [r7, #116]	; 0x74
		_2q2 = 2.0f * q2;
 8005f36:	4b8b      	ldr	r3, [pc, #556]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fa fe6d 	bl	8000c1c <__addsf3>
 8005f42:	4603      	mov	r3, r0
 8005f44:	673b      	str	r3, [r7, #112]	; 0x70
		_2q3 = 2.0f * q3;
 8005f46:	4b88      	ldr	r3, [pc, #544]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fa fe65 	bl	8000c1c <__addsf3>
 8005f52:	4603      	mov	r3, r0
 8005f54:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0q2 = 2.0f * q0 * q2;
 8005f56:	4b82      	ldr	r3, [pc, #520]	; (8006160 <MadgwickAHRSupdate+0x5b0>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fa fe5d 	bl	8000c1c <__addsf3>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	4b7f      	ldr	r3, [pc, #508]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f7fa ff5d 	bl	8000e2c <__aeabi_fmul>
 8005f72:	4603      	mov	r3, r0
 8005f74:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q2q3 = 2.0f * q2 * q3;
 8005f76:	4b7b      	ldr	r3, [pc, #492]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fa fe4d 	bl	8000c1c <__addsf3>
 8005f82:	4603      	mov	r3, r0
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b78      	ldr	r3, [pc, #480]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fa ff4d 	bl	8000e2c <__aeabi_fmul>
 8005f92:	4603      	mov	r3, r0
 8005f94:	667b      	str	r3, [r7, #100]	; 0x64
		q0q0 = q0 * q0;
 8005f96:	4b72      	ldr	r3, [pc, #456]	; (8006160 <MadgwickAHRSupdate+0x5b0>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b71      	ldr	r3, [pc, #452]	; (8006160 <MadgwickAHRSupdate+0x5b0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f7fa ff43 	bl	8000e2c <__aeabi_fmul>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	663b      	str	r3, [r7, #96]	; 0x60
		q0q1 = q0 * q1;
 8005faa:	4b6d      	ldr	r3, [pc, #436]	; (8006160 <MadgwickAHRSupdate+0x5b0>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4b6b      	ldr	r3, [pc, #428]	; (800615c <MadgwickAHRSupdate+0x5ac>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f7fa ff39 	bl	8000e2c <__aeabi_fmul>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
		q0q2 = q0 * q2;
 8005fbe:	4b68      	ldr	r3, [pc, #416]	; (8006160 <MadgwickAHRSupdate+0x5b0>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b68      	ldr	r3, [pc, #416]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fa ff2f 	bl	8000e2c <__aeabi_fmul>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	65bb      	str	r3, [r7, #88]	; 0x58
		q0q3 = q0 * q3;
 8005fd2:	4b63      	ldr	r3, [pc, #396]	; (8006160 <MadgwickAHRSupdate+0x5b0>)
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4b64      	ldr	r3, [pc, #400]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f7fa ff25 	bl	8000e2c <__aeabi_fmul>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	657b      	str	r3, [r7, #84]	; 0x54
		q1q1 = q1 * q1;
 8005fe6:	4b5d      	ldr	r3, [pc, #372]	; (800615c <MadgwickAHRSupdate+0x5ac>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b5c      	ldr	r3, [pc, #368]	; (800615c <MadgwickAHRSupdate+0x5ac>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7fa ff1b 	bl	8000e2c <__aeabi_fmul>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	653b      	str	r3, [r7, #80]	; 0x50
		q1q2 = q1 * q2;
 8005ffa:	4b58      	ldr	r3, [pc, #352]	; (800615c <MadgwickAHRSupdate+0x5ac>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b59      	ldr	r3, [pc, #356]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f7fa ff11 	bl	8000e2c <__aeabi_fmul>
 800600a:	4603      	mov	r3, r0
 800600c:	64fb      	str	r3, [r7, #76]	; 0x4c
		q1q3 = q1 * q3;
 800600e:	4b53      	ldr	r3, [pc, #332]	; (800615c <MadgwickAHRSupdate+0x5ac>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4b55      	ldr	r3, [pc, #340]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7fa ff07 	bl	8000e2c <__aeabi_fmul>
 800601e:	4603      	mov	r3, r0
 8006020:	64bb      	str	r3, [r7, #72]	; 0x48
		q2q2 = q2 * q2;
 8006022:	4b50      	ldr	r3, [pc, #320]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b4f      	ldr	r3, [pc, #316]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f7fa fefd 	bl	8000e2c <__aeabi_fmul>
 8006032:	4603      	mov	r3, r0
 8006034:	647b      	str	r3, [r7, #68]	; 0x44
		q2q3 = q2 * q3;
 8006036:	4b4b      	ldr	r3, [pc, #300]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b4b      	ldr	r3, [pc, #300]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f7fa fef3 	bl	8000e2c <__aeabi_fmul>
 8006046:	4603      	mov	r3, r0
 8006048:	643b      	str	r3, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 800604a:	4b47      	ldr	r3, [pc, #284]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b46      	ldr	r3, [pc, #280]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7fa fee9 	bl	8000e2c <__aeabi_fmul>
 800605a:	4603      	mov	r3, r0
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800605e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006060:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8006064:	f7fa fee2 	bl	8000e2c <__aeabi_fmul>
 8006068:	4603      	mov	r3, r0
 800606a:	461c      	mov	r4, r3
 800606c:	4b3e      	ldr	r3, [pc, #248]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006074:	4618      	mov	r0, r3
 8006076:	f7fa fed9 	bl	8000e2c <__aeabi_fmul>
 800607a:	4603      	mov	r3, r0
 800607c:	4619      	mov	r1, r3
 800607e:	4620      	mov	r0, r4
 8006080:	f7fa fdca 	bl	8000c18 <__aeabi_fsub>
 8006084:	4603      	mov	r3, r0
 8006086:	461c      	mov	r4, r3
 8006088:	4b36      	ldr	r3, [pc, #216]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006090:	4618      	mov	r0, r3
 8006092:	f7fa fecb 	bl	8000e2c <__aeabi_fmul>
 8006096:	4603      	mov	r3, r0
 8006098:	4619      	mov	r1, r3
 800609a:	4620      	mov	r0, r4
 800609c:	f7fa fdbe 	bl	8000c1c <__addsf3>
 80060a0:	4603      	mov	r3, r0
 80060a2:	461c      	mov	r4, r3
 80060a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80060aa:	f7fa febf 	bl	8000e2c <__aeabi_fmul>
 80060ae:	4603      	mov	r3, r0
 80060b0:	4619      	mov	r1, r3
 80060b2:	4620      	mov	r0, r4
 80060b4:	f7fa fdb2 	bl	8000c1c <__addsf3>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461c      	mov	r4, r3
 80060bc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80060c0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80060c2:	f7fa feb3 	bl	8000e2c <__aeabi_fmul>
 80060c6:	4603      	mov	r3, r0
 80060c8:	461a      	mov	r2, r3
 80060ca:	4b26      	ldr	r3, [pc, #152]	; (8006164 <MadgwickAHRSupdate+0x5b4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f7fa feab 	bl	8000e2c <__aeabi_fmul>
 80060d6:	4603      	mov	r3, r0
 80060d8:	4619      	mov	r1, r3
 80060da:	4620      	mov	r0, r4
 80060dc:	f7fa fd9e 	bl	8000c1c <__addsf3>
 80060e0:	4603      	mov	r3, r0
 80060e2:	461c      	mov	r4, r3
 80060e4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80060e8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80060ea:	f7fa fe9f 	bl	8000e2c <__aeabi_fmul>
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f7fa fe97 	bl	8000e2c <__aeabi_fmul>
 80060fe:	4603      	mov	r3, r0
 8006100:	4619      	mov	r1, r3
 8006102:	4620      	mov	r0, r4
 8006104:	f7fa fd8a 	bl	8000c1c <__addsf3>
 8006108:	4603      	mov	r3, r0
 800610a:	461c      	mov	r4, r3
 800610c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800610e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8006112:	f7fa fe8b 	bl	8000e2c <__aeabi_fmul>
 8006116:	4603      	mov	r3, r0
 8006118:	4619      	mov	r1, r3
 800611a:	4620      	mov	r0, r4
 800611c:	f7fa fd7c 	bl	8000c18 <__aeabi_fsub>
 8006120:	4603      	mov	r3, r0
 8006122:	461c      	mov	r4, r3
 8006124:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006126:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800612a:	f7fa fe7f 	bl	8000e2c <__aeabi_fmul>
 800612e:	4603      	mov	r3, r0
 8006130:	4619      	mov	r1, r3
 8006132:	4620      	mov	r0, r4
 8006134:	f7fa fd70 	bl	8000c18 <__aeabi_fsub>
 8006138:	4603      	mov	r3, r0
 800613a:	63bb      	str	r3, [r7, #56]	; 0x38
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <MadgwickAHRSupdate+0x5b8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006144:	4618      	mov	r0, r3
 8006146:	f7fa fe71 	bl	8000e2c <__aeabi_fmul>
 800614a:	4603      	mov	r3, r0
 800614c:	461c      	mov	r4, r3
 800614e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006150:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8006154:	f7fa fe6a 	bl	8000e2c <__aeabi_fmul>
 8006158:	4603      	mov	r3, r0
 800615a:	e007      	b.n	800616c <MadgwickAHRSupdate+0x5bc>
 800615c:	20001e04 	.word	0x20001e04
 8006160:	20000020 	.word	0x20000020
 8006164:	20001e08 	.word	0x20001e08
 8006168:	20001e0c 	.word	0x20001e0c
 800616c:	4619      	mov	r1, r3
 800616e:	4620      	mov	r0, r4
 8006170:	f7fa fd54 	bl	8000c1c <__addsf3>
 8006174:	4603      	mov	r3, r0
 8006176:	461c      	mov	r4, r3
 8006178:	4ba3      	ldr	r3, [pc, #652]	; (8006408 <MadgwickAHRSupdate+0x858>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006180:	4618      	mov	r0, r3
 8006182:	f7fa fe53 	bl	8000e2c <__aeabi_fmul>
 8006186:	4603      	mov	r3, r0
 8006188:	4619      	mov	r1, r3
 800618a:	4620      	mov	r0, r4
 800618c:	f7fa fd44 	bl	8000c18 <__aeabi_fsub>
 8006190:	4603      	mov	r3, r0
 8006192:	461c      	mov	r4, r3
 8006194:	4b9d      	ldr	r3, [pc, #628]	; (800640c <MadgwickAHRSupdate+0x85c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa fe46 	bl	8000e2c <__aeabi_fmul>
 80061a0:	4603      	mov	r3, r0
 80061a2:	4619      	mov	r1, r3
 80061a4:	4620      	mov	r0, r4
 80061a6:	f7fa fd39 	bl	8000c1c <__addsf3>
 80061aa:	4603      	mov	r3, r0
 80061ac:	461c      	mov	r4, r3
 80061ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061b0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80061b4:	f7fa fe3a 	bl	8000e2c <__aeabi_fmul>
 80061b8:	4603      	mov	r3, r0
 80061ba:	4619      	mov	r1, r3
 80061bc:	4620      	mov	r0, r4
 80061be:	f7fa fd2b 	bl	8000c18 <__aeabi_fsub>
 80061c2:	4603      	mov	r3, r0
 80061c4:	461c      	mov	r4, r3
 80061c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061c8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80061cc:	f7fa fe2e 	bl	8000e2c <__aeabi_fmul>
 80061d0:	4603      	mov	r3, r0
 80061d2:	4619      	mov	r1, r3
 80061d4:	4620      	mov	r0, r4
 80061d6:	f7fa fd21 	bl	8000c1c <__addsf3>
 80061da:	4603      	mov	r3, r0
 80061dc:	461c      	mov	r4, r3
 80061de:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80061e2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80061e4:	f7fa fe22 	bl	8000e2c <__aeabi_fmul>
 80061e8:	4603      	mov	r3, r0
 80061ea:	461a      	mov	r2, r3
 80061ec:	4b88      	ldr	r3, [pc, #544]	; (8006410 <MadgwickAHRSupdate+0x860>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f7fa fe1a 	bl	8000e2c <__aeabi_fmul>
 80061f8:	4603      	mov	r3, r0
 80061fa:	4619      	mov	r1, r3
 80061fc:	4620      	mov	r0, r4
 80061fe:	f7fa fd0d 	bl	8000c1c <__addsf3>
 8006202:	4603      	mov	r3, r0
 8006204:	461c      	mov	r4, r3
 8006206:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006208:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800620c:	f7fa fe0e 	bl	8000e2c <__aeabi_fmul>
 8006210:	4603      	mov	r3, r0
 8006212:	4619      	mov	r1, r3
 8006214:	4620      	mov	r0, r4
 8006216:	f7fa fcff 	bl	8000c18 <__aeabi_fsub>
 800621a:	4603      	mov	r3, r0
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
		_2bx = sqrt(hx * hx + hy * hy);
 800621e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006222:	f7fa fe03 	bl	8000e2c <__aeabi_fmul>
 8006226:	4603      	mov	r3, r0
 8006228:	461c      	mov	r4, r3
 800622a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800622c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800622e:	f7fa fdfd 	bl	8000e2c <__aeabi_fmul>
 8006232:	4603      	mov	r3, r0
 8006234:	4619      	mov	r1, r3
 8006236:	4620      	mov	r0, r4
 8006238:	f7fa fcf0 	bl	8000c1c <__addsf3>
 800623c:	4603      	mov	r3, r0
 800623e:	4618      	mov	r0, r3
 8006240:	f7fa f94a 	bl	80004d8 <__aeabi_f2d>
 8006244:	4603      	mov	r3, r0
 8006246:	460c      	mov	r4, r1
 8006248:	4618      	mov	r0, r3
 800624a:	4621      	mov	r1, r4
 800624c:	f003 fa9a 	bl	8009784 <sqrt>
 8006250:	4603      	mov	r3, r0
 8006252:	460c      	mov	r4, r1
 8006254:	4618      	mov	r0, r3
 8006256:	4621      	mov	r1, r4
 8006258:	f7fa fc8a 	bl	8000b70 <__aeabi_d2f>
 800625c:	4603      	mov	r3, r0
 800625e:	633b      	str	r3, [r7, #48]	; 0x30
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8006260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006264:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8006268:	4b68      	ldr	r3, [pc, #416]	; (800640c <MadgwickAHRSupdate+0x85c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f7fa fddc 	bl	8000e2c <__aeabi_fmul>
 8006274:	4603      	mov	r3, r0
 8006276:	461c      	mov	r4, r3
 8006278:	4b63      	ldr	r3, [pc, #396]	; (8006408 <MadgwickAHRSupdate+0x858>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa fdd3 	bl	8000e2c <__aeabi_fmul>
 8006286:	4603      	mov	r3, r0
 8006288:	4619      	mov	r1, r3
 800628a:	4620      	mov	r0, r4
 800628c:	f7fa fcc6 	bl	8000c1c <__addsf3>
 8006290:	4603      	mov	r3, r0
 8006292:	461c      	mov	r4, r3
 8006294:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006296:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800629a:	f7fa fdc7 	bl	8000e2c <__aeabi_fmul>
 800629e:	4603      	mov	r3, r0
 80062a0:	4619      	mov	r1, r3
 80062a2:	4620      	mov	r0, r4
 80062a4:	f7fa fcba 	bl	8000c1c <__addsf3>
 80062a8:	4603      	mov	r3, r0
 80062aa:	461c      	mov	r4, r3
 80062ac:	4b58      	ldr	r3, [pc, #352]	; (8006410 <MadgwickAHRSupdate+0x860>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fa fdba 	bl	8000e2c <__aeabi_fmul>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4619      	mov	r1, r3
 80062bc:	4620      	mov	r0, r4
 80062be:	f7fa fcad 	bl	8000c1c <__addsf3>
 80062c2:	4603      	mov	r3, r0
 80062c4:	461c      	mov	r4, r3
 80062c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062c8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80062cc:	f7fa fdae 	bl	8000e2c <__aeabi_fmul>
 80062d0:	4603      	mov	r3, r0
 80062d2:	4619      	mov	r1, r3
 80062d4:	4620      	mov	r0, r4
 80062d6:	f7fa fc9f 	bl	8000c18 <__aeabi_fsub>
 80062da:	4603      	mov	r3, r0
 80062dc:	461c      	mov	r4, r3
 80062de:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80062e2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80062e4:	f7fa fda2 	bl	8000e2c <__aeabi_fmul>
 80062e8:	4603      	mov	r3, r0
 80062ea:	461a      	mov	r2, r3
 80062ec:	4b48      	ldr	r3, [pc, #288]	; (8006410 <MadgwickAHRSupdate+0x860>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fa fd9a 	bl	8000e2c <__aeabi_fmul>
 80062f8:	4603      	mov	r3, r0
 80062fa:	4619      	mov	r1, r3
 80062fc:	4620      	mov	r0, r4
 80062fe:	f7fa fc8d 	bl	8000c1c <__addsf3>
 8006302:	4603      	mov	r3, r0
 8006304:	461c      	mov	r4, r3
 8006306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006308:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800630c:	f7fa fd8e 	bl	8000e2c <__aeabi_fmul>
 8006310:	4603      	mov	r3, r0
 8006312:	4619      	mov	r1, r3
 8006314:	4620      	mov	r0, r4
 8006316:	f7fa fc7f 	bl	8000c18 <__aeabi_fsub>
 800631a:	4603      	mov	r3, r0
 800631c:	461c      	mov	r4, r3
 800631e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006320:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006324:	f7fa fd82 	bl	8000e2c <__aeabi_fmul>
 8006328:	4603      	mov	r3, r0
 800632a:	4619      	mov	r1, r3
 800632c:	4620      	mov	r0, r4
 800632e:	f7fa fc75 	bl	8000c1c <__addsf3>
 8006332:	4603      	mov	r3, r0
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
		_4bx = 2.0f * _2bx;
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	4619      	mov	r1, r3
 800633a:	4618      	mov	r0, r3
 800633c:	f7fa fc6e 	bl	8000c1c <__addsf3>
 8006340:	4603      	mov	r3, r0
 8006342:	62bb      	str	r3, [r7, #40]	; 0x28
		_4bz = 2.0f * _2bz;
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	4619      	mov	r1, r3
 8006348:	4618      	mov	r0, r3
 800634a:	f7fa fc67 	bl	8000c1c <__addsf3>
 800634e:	4603      	mov	r3, r0
 8006350:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8006352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006354:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8006358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800635a:	4619      	mov	r1, r3
 800635c:	4618      	mov	r0, r3
 800635e:	f7fa fc5d 	bl	8000c1c <__addsf3>
 8006362:	4603      	mov	r3, r0
 8006364:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006366:	4618      	mov	r0, r3
 8006368:	f7fa fc56 	bl	8000c18 <__aeabi_fsub>
 800636c:	4603      	mov	r3, r0
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	4618      	mov	r0, r3
 8006372:	f7fa fc51 	bl	8000c18 <__aeabi_fsub>
 8006376:	4603      	mov	r3, r0
 8006378:	4619      	mov	r1, r3
 800637a:	4620      	mov	r0, r4
 800637c:	f7fa fd56 	bl	8000e2c <__aeabi_fmul>
 8006380:	4603      	mov	r3, r0
 8006382:	461c      	mov	r4, r3
 8006384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006386:	4619      	mov	r1, r3
 8006388:	4618      	mov	r0, r3
 800638a:	f7fa fc47 	bl	8000c1c <__addsf3>
 800638e:	4603      	mov	r3, r0
 8006390:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006392:	4618      	mov	r0, r3
 8006394:	f7fa fc42 	bl	8000c1c <__addsf3>
 8006398:	4603      	mov	r3, r0
 800639a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fa fc3a 	bl	8000c18 <__aeabi_fsub>
 80063a4:	4603      	mov	r3, r0
 80063a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fa fd3f 	bl	8000e2c <__aeabi_fmul>
 80063ae:	4603      	mov	r3, r0
 80063b0:	4619      	mov	r1, r3
 80063b2:	4620      	mov	r0, r4
 80063b4:	f7fa fc32 	bl	8000c1c <__addsf3>
 80063b8:	4603      	mov	r3, r0
 80063ba:	461c      	mov	r4, r3
 80063bc:	4b13      	ldr	r3, [pc, #76]	; (800640c <MadgwickAHRSupdate+0x85c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fa fd32 	bl	8000e2c <__aeabi_fmul>
 80063c8:	4603      	mov	r3, r0
 80063ca:	461d      	mov	r5, r3
 80063cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063ce:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80063d2:	f7fa fc21 	bl	8000c18 <__aeabi_fsub>
 80063d6:	4603      	mov	r3, r0
 80063d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fa fc1c 	bl	8000c18 <__aeabi_fsub>
 80063e0:	4603      	mov	r3, r0
 80063e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fa fd21 	bl	8000e2c <__aeabi_fmul>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461e      	mov	r6, r3
 80063ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80063f2:	f7fa fc11 	bl	8000c18 <__aeabi_fsub>
 80063f6:	4603      	mov	r3, r0
 80063f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fa fd16 	bl	8000e2c <__aeabi_fmul>
 8006400:	4603      	mov	r3, r0
 8006402:	4619      	mov	r1, r3
 8006404:	e006      	b.n	8006414 <MadgwickAHRSupdate+0x864>
 8006406:	bf00      	nop
 8006408:	20001e04 	.word	0x20001e04
 800640c:	20001e08 	.word	0x20001e08
 8006410:	20001e0c 	.word	0x20001e0c
 8006414:	4630      	mov	r0, r6
 8006416:	f7fa fc01 	bl	8000c1c <__addsf3>
 800641a:	4603      	mov	r3, r0
 800641c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8006420:	4618      	mov	r0, r3
 8006422:	f7fa fbf9 	bl	8000c18 <__aeabi_fsub>
 8006426:	4603      	mov	r3, r0
 8006428:	4619      	mov	r1, r3
 800642a:	4628      	mov	r0, r5
 800642c:	f7fa fcfe 	bl	8000e2c <__aeabi_fmul>
 8006430:	4603      	mov	r3, r0
 8006432:	4619      	mov	r1, r3
 8006434:	4620      	mov	r0, r4
 8006436:	f7fa fbef 	bl	8000c18 <__aeabi_fsub>
 800643a:	4603      	mov	r3, r0
 800643c:	461c      	mov	r4, r3
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8006444:	4b9e      	ldr	r3, [pc, #632]	; (80066c0 <MadgwickAHRSupdate+0xb10>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f7fa fcee 	bl	8000e2c <__aeabi_fmul>
 8006450:	4603      	mov	r3, r0
 8006452:	461d      	mov	r5, r3
 8006454:	4b9b      	ldr	r3, [pc, #620]	; (80066c4 <MadgwickAHRSupdate+0xb14>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800645a:	4618      	mov	r0, r3
 800645c:	f7fa fce6 	bl	8000e2c <__aeabi_fmul>
 8006460:	4603      	mov	r3, r0
 8006462:	4619      	mov	r1, r3
 8006464:	4628      	mov	r0, r5
 8006466:	f7fa fbd9 	bl	8000c1c <__addsf3>
 800646a:	4603      	mov	r3, r0
 800646c:	461d      	mov	r5, r3
 800646e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006470:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006472:	f7fa fbd1 	bl	8000c18 <__aeabi_fsub>
 8006476:	4603      	mov	r3, r0
 8006478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800647a:	4618      	mov	r0, r3
 800647c:	f7fa fcd6 	bl	8000e2c <__aeabi_fmul>
 8006480:	4603      	mov	r3, r0
 8006482:	461e      	mov	r6, r3
 8006484:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006486:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006488:	f7fa fbc8 	bl	8000c1c <__addsf3>
 800648c:	4603      	mov	r3, r0
 800648e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006490:	4618      	mov	r0, r3
 8006492:	f7fa fccb 	bl	8000e2c <__aeabi_fmul>
 8006496:	4603      	mov	r3, r0
 8006498:	4619      	mov	r1, r3
 800649a:	4630      	mov	r0, r6
 800649c:	f7fa fbbe 	bl	8000c1c <__addsf3>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fa fbb6 	bl	8000c18 <__aeabi_fsub>
 80064ac:	4603      	mov	r3, r0
 80064ae:	4619      	mov	r1, r3
 80064b0:	4628      	mov	r0, r5
 80064b2:	f7fa fcbb 	bl	8000e2c <__aeabi_fmul>
 80064b6:	4603      	mov	r3, r0
 80064b8:	4619      	mov	r1, r3
 80064ba:	4620      	mov	r0, r4
 80064bc:	f7fa fbae 	bl	8000c1c <__addsf3>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461c      	mov	r4, r3
 80064c4:	4b80      	ldr	r3, [pc, #512]	; (80066c8 <MadgwickAHRSupdate+0xb18>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fa fcae 	bl	8000e2c <__aeabi_fmul>
 80064d0:	4603      	mov	r3, r0
 80064d2:	461d      	mov	r5, r3
 80064d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064d6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80064d8:	f7fa fba0 	bl	8000c1c <__addsf3>
 80064dc:	4603      	mov	r3, r0
 80064de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fa fca3 	bl	8000e2c <__aeabi_fmul>
 80064e6:	4603      	mov	r3, r0
 80064e8:	461e      	mov	r6, r3
 80064ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064ec:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80064f0:	f7fa fb92 	bl	8000c18 <__aeabi_fsub>
 80064f4:	4603      	mov	r3, r0
 80064f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fa fb8d 	bl	8000c18 <__aeabi_fsub>
 80064fe:	4603      	mov	r3, r0
 8006500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006502:	4618      	mov	r0, r3
 8006504:	f7fa fc92 	bl	8000e2c <__aeabi_fmul>
 8006508:	4603      	mov	r3, r0
 800650a:	4619      	mov	r1, r3
 800650c:	4630      	mov	r0, r6
 800650e:	f7fa fb85 	bl	8000c1c <__addsf3>
 8006512:	4603      	mov	r3, r0
 8006514:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006518:	4618      	mov	r0, r3
 800651a:	f7fa fb7d 	bl	8000c18 <__aeabi_fsub>
 800651e:	4603      	mov	r3, r0
 8006520:	4619      	mov	r1, r3
 8006522:	4628      	mov	r0, r5
 8006524:	f7fa fc82 	bl	8000e2c <__aeabi_fmul>
 8006528:	4603      	mov	r3, r0
 800652a:	4619      	mov	r1, r3
 800652c:	4620      	mov	r0, r4
 800652e:	f7fa fb75 	bl	8000c1c <__addsf3>
 8006532:	4603      	mov	r3, r0
 8006534:	623b      	str	r3, [r7, #32]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8006536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006538:	4619      	mov	r1, r3
 800653a:	4618      	mov	r0, r3
 800653c:	f7fa fb6e 	bl	8000c1c <__addsf3>
 8006540:	4603      	mov	r3, r0
 8006542:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006544:	4618      	mov	r0, r3
 8006546:	f7fa fb67 	bl	8000c18 <__aeabi_fsub>
 800654a:	4603      	mov	r3, r0
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7fa fb62 	bl	8000c18 <__aeabi_fsub>
 8006554:	4603      	mov	r3, r0
 8006556:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006558:	4618      	mov	r0, r3
 800655a:	f7fa fc67 	bl	8000e2c <__aeabi_fmul>
 800655e:	4603      	mov	r3, r0
 8006560:	461c      	mov	r4, r3
 8006562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006564:	4619      	mov	r1, r3
 8006566:	4618      	mov	r0, r3
 8006568:	f7fa fb58 	bl	8000c1c <__addsf3>
 800656c:	4603      	mov	r3, r0
 800656e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006570:	4618      	mov	r0, r3
 8006572:	f7fa fb53 	bl	8000c1c <__addsf3>
 8006576:	4603      	mov	r3, r0
 8006578:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800657c:	4618      	mov	r0, r3
 800657e:	f7fa fb4b 	bl	8000c18 <__aeabi_fsub>
 8006582:	4603      	mov	r3, r0
 8006584:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006586:	4618      	mov	r0, r3
 8006588:	f7fa fc50 	bl	8000e2c <__aeabi_fmul>
 800658c:	4603      	mov	r3, r0
 800658e:	4619      	mov	r1, r3
 8006590:	4620      	mov	r0, r4
 8006592:	f7fa fb43 	bl	8000c1c <__addsf3>
 8006596:	4603      	mov	r3, r0
 8006598:	461c      	mov	r4, r3
 800659a:	4b4a      	ldr	r3, [pc, #296]	; (80066c4 <MadgwickAHRSupdate+0xb14>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fa fc42 	bl	8000e2c <__aeabi_fmul>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461d      	mov	r5, r3
 80065ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ae:	4619      	mov	r1, r3
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fa fb33 	bl	8000c1c <__addsf3>
 80065b6:	4603      	mov	r3, r0
 80065b8:	4619      	mov	r1, r3
 80065ba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80065be:	f7fa fb2b 	bl	8000c18 <__aeabi_fsub>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461e      	mov	r6, r3
 80065c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c8:	4619      	mov	r1, r3
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fa fb26 	bl	8000c1c <__addsf3>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4619      	mov	r1, r3
 80065d4:	4630      	mov	r0, r6
 80065d6:	f7fa fb1f 	bl	8000c18 <__aeabi_fsub>
 80065da:	4603      	mov	r3, r0
 80065dc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fa fb19 	bl	8000c18 <__aeabi_fsub>
 80065e6:	4603      	mov	r3, r0
 80065e8:	4619      	mov	r1, r3
 80065ea:	4628      	mov	r0, r5
 80065ec:	f7fa fc1e 	bl	8000e2c <__aeabi_fmul>
 80065f0:	4603      	mov	r3, r0
 80065f2:	4619      	mov	r1, r3
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7fa fb0f 	bl	8000c18 <__aeabi_fsub>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461c      	mov	r4, r3
 80065fe:	4b30      	ldr	r3, [pc, #192]	; (80066c0 <MadgwickAHRSupdate+0xb10>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006604:	4618      	mov	r0, r3
 8006606:	f7fa fc11 	bl	8000e2c <__aeabi_fmul>
 800660a:	4603      	mov	r3, r0
 800660c:	461d      	mov	r5, r3
 800660e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006610:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006614:	f7fa fb00 	bl	8000c18 <__aeabi_fsub>
 8006618:	4603      	mov	r3, r0
 800661a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800661c:	4618      	mov	r0, r3
 800661e:	f7fa fafb 	bl	8000c18 <__aeabi_fsub>
 8006622:	4603      	mov	r3, r0
 8006624:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006626:	4618      	mov	r0, r3
 8006628:	f7fa fc00 	bl	8000e2c <__aeabi_fmul>
 800662c:	4603      	mov	r3, r0
 800662e:	461e      	mov	r6, r3
 8006630:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006632:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006634:	f7fa faf0 	bl	8000c18 <__aeabi_fsub>
 8006638:	4603      	mov	r3, r0
 800663a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800663c:	4618      	mov	r0, r3
 800663e:	f7fa fbf5 	bl	8000e2c <__aeabi_fmul>
 8006642:	4603      	mov	r3, r0
 8006644:	4619      	mov	r1, r3
 8006646:	4630      	mov	r0, r6
 8006648:	f7fa fae8 	bl	8000c1c <__addsf3>
 800664c:	4603      	mov	r3, r0
 800664e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8006652:	4618      	mov	r0, r3
 8006654:	f7fa fae0 	bl	8000c18 <__aeabi_fsub>
 8006658:	4603      	mov	r3, r0
 800665a:	4619      	mov	r1, r3
 800665c:	4628      	mov	r0, r5
 800665e:	f7fa fbe5 	bl	8000e2c <__aeabi_fmul>
 8006662:	4603      	mov	r3, r0
 8006664:	4619      	mov	r1, r3
 8006666:	4620      	mov	r0, r4
 8006668:	f7fa fad8 	bl	8000c1c <__addsf3>
 800666c:	4603      	mov	r3, r0
 800666e:	461c      	mov	r4, r3
 8006670:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <MadgwickAHRSupdate+0xb18>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006676:	4618      	mov	r0, r3
 8006678:	f7fa fbd8 	bl	8000e2c <__aeabi_fmul>
 800667c:	4603      	mov	r3, r0
 800667e:	461d      	mov	r5, r3
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <MadgwickAHRSupdate+0xb1c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006686:	4618      	mov	r0, r3
 8006688:	f7fa fbd0 	bl	8000e2c <__aeabi_fmul>
 800668c:	4603      	mov	r3, r0
 800668e:	4619      	mov	r1, r3
 8006690:	4628      	mov	r0, r5
 8006692:	f7fa fac3 	bl	8000c1c <__addsf3>
 8006696:	4603      	mov	r3, r0
 8006698:	461d      	mov	r5, r3
 800669a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800669c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800669e:	f7fa fabb 	bl	8000c18 <__aeabi_fsub>
 80066a2:	4603      	mov	r3, r0
 80066a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fa fbc0 	bl	8000e2c <__aeabi_fmul>
 80066ac:	4603      	mov	r3, r0
 80066ae:	461e      	mov	r6, r3
 80066b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80066b4:	f7fa fab2 	bl	8000c1c <__addsf3>
 80066b8:	4603      	mov	r3, r0
 80066ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066bc:	4618      	mov	r0, r3
 80066be:	e007      	b.n	80066d0 <MadgwickAHRSupdate+0xb20>
 80066c0:	20001e0c 	.word	0x20001e0c
 80066c4:	20001e04 	.word	0x20001e04
 80066c8:	20001e08 	.word	0x20001e08
 80066cc:	20000020 	.word	0x20000020
 80066d0:	f7fa fbac 	bl	8000e2c <__aeabi_fmul>
 80066d4:	4603      	mov	r3, r0
 80066d6:	4619      	mov	r1, r3
 80066d8:	4630      	mov	r0, r6
 80066da:	f7fa fa9f 	bl	8000c1c <__addsf3>
 80066de:	4603      	mov	r3, r0
 80066e0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fa fa97 	bl	8000c18 <__aeabi_fsub>
 80066ea:	4603      	mov	r3, r0
 80066ec:	4619      	mov	r1, r3
 80066ee:	4628      	mov	r0, r5
 80066f0:	f7fa fb9c 	bl	8000e2c <__aeabi_fmul>
 80066f4:	4603      	mov	r3, r0
 80066f6:	4619      	mov	r1, r3
 80066f8:	4620      	mov	r0, r4
 80066fa:	f7fa fa8f 	bl	8000c1c <__addsf3>
 80066fe:	4603      	mov	r3, r0
 8006700:	461c      	mov	r4, r3
 8006702:	4b9f      	ldr	r3, [pc, #636]	; (8006980 <MadgwickAHRSupdate+0xdd0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006708:	4618      	mov	r0, r3
 800670a:	f7fa fb8f 	bl	8000e2c <__aeabi_fmul>
 800670e:	4603      	mov	r3, r0
 8006710:	461d      	mov	r5, r3
 8006712:	4b9c      	ldr	r3, [pc, #624]	; (8006984 <MadgwickAHRSupdate+0xdd4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006718:	4618      	mov	r0, r3
 800671a:	f7fa fb87 	bl	8000e2c <__aeabi_fmul>
 800671e:	4603      	mov	r3, r0
 8006720:	4619      	mov	r1, r3
 8006722:	4628      	mov	r0, r5
 8006724:	f7fa fa78 	bl	8000c18 <__aeabi_fsub>
 8006728:	4603      	mov	r3, r0
 800672a:	461d      	mov	r5, r3
 800672c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800672e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006730:	f7fa fa74 	bl	8000c1c <__addsf3>
 8006734:	4603      	mov	r3, r0
 8006736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006738:	4618      	mov	r0, r3
 800673a:	f7fa fb77 	bl	8000e2c <__aeabi_fmul>
 800673e:	4603      	mov	r3, r0
 8006740:	461e      	mov	r6, r3
 8006742:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006744:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006748:	f7fa fa66 	bl	8000c18 <__aeabi_fsub>
 800674c:	4603      	mov	r3, r0
 800674e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006750:	4618      	mov	r0, r3
 8006752:	f7fa fa61 	bl	8000c18 <__aeabi_fsub>
 8006756:	4603      	mov	r3, r0
 8006758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800675a:	4618      	mov	r0, r3
 800675c:	f7fa fb66 	bl	8000e2c <__aeabi_fmul>
 8006760:	4603      	mov	r3, r0
 8006762:	4619      	mov	r1, r3
 8006764:	4630      	mov	r0, r6
 8006766:	f7fa fa59 	bl	8000c1c <__addsf3>
 800676a:	4603      	mov	r3, r0
 800676c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006770:	4618      	mov	r0, r3
 8006772:	f7fa fa51 	bl	8000c18 <__aeabi_fsub>
 8006776:	4603      	mov	r3, r0
 8006778:	4619      	mov	r1, r3
 800677a:	4628      	mov	r0, r5
 800677c:	f7fa fb56 	bl	8000e2c <__aeabi_fmul>
 8006780:	4603      	mov	r3, r0
 8006782:	4619      	mov	r1, r3
 8006784:	4620      	mov	r0, r4
 8006786:	f7fa fa49 	bl	8000c1c <__addsf3>
 800678a:	4603      	mov	r3, r0
 800678c:	61fb      	str	r3, [r7, #28]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800678e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006790:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8006794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006796:	4619      	mov	r1, r3
 8006798:	4618      	mov	r0, r3
 800679a:	f7fa fa3f 	bl	8000c1c <__addsf3>
 800679e:	4603      	mov	r3, r0
 80067a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fa fa38 	bl	8000c18 <__aeabi_fsub>
 80067a8:	4603      	mov	r3, r0
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fa fa33 	bl	8000c18 <__aeabi_fsub>
 80067b2:	4603      	mov	r3, r0
 80067b4:	4619      	mov	r1, r3
 80067b6:	4620      	mov	r0, r4
 80067b8:	f7fa fb38 	bl	8000e2c <__aeabi_fmul>
 80067bc:	4603      	mov	r3, r0
 80067be:	461c      	mov	r4, r3
 80067c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c2:	4619      	mov	r1, r3
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fa fa29 	bl	8000c1c <__addsf3>
 80067ca:	4603      	mov	r3, r0
 80067cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fa fa24 	bl	8000c1c <__addsf3>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fa fa1c 	bl	8000c18 <__aeabi_fsub>
 80067e0:	4603      	mov	r3, r0
 80067e2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fa fb21 	bl	8000e2c <__aeabi_fmul>
 80067ea:	4603      	mov	r3, r0
 80067ec:	4619      	mov	r1, r3
 80067ee:	4620      	mov	r0, r4
 80067f0:	f7fa fa14 	bl	8000c1c <__addsf3>
 80067f4:	4603      	mov	r3, r0
 80067f6:	461c      	mov	r4, r3
 80067f8:	4b63      	ldr	r3, [pc, #396]	; (8006988 <MadgwickAHRSupdate+0xdd8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8006800:	4618      	mov	r0, r3
 8006802:	f7fa fb13 	bl	8000e2c <__aeabi_fmul>
 8006806:	4603      	mov	r3, r0
 8006808:	461d      	mov	r5, r3
 800680a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680c:	4619      	mov	r1, r3
 800680e:	4618      	mov	r0, r3
 8006810:	f7fa fa04 	bl	8000c1c <__addsf3>
 8006814:	4603      	mov	r3, r0
 8006816:	4619      	mov	r1, r3
 8006818:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800681c:	f7fa f9fc 	bl	8000c18 <__aeabi_fsub>
 8006820:	4603      	mov	r3, r0
 8006822:	461e      	mov	r6, r3
 8006824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006826:	4619      	mov	r1, r3
 8006828:	4618      	mov	r0, r3
 800682a:	f7fa f9f7 	bl	8000c1c <__addsf3>
 800682e:	4603      	mov	r3, r0
 8006830:	4619      	mov	r1, r3
 8006832:	4630      	mov	r0, r6
 8006834:	f7fa f9f0 	bl	8000c18 <__aeabi_fsub>
 8006838:	4603      	mov	r3, r0
 800683a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800683e:	4618      	mov	r0, r3
 8006840:	f7fa f9ea 	bl	8000c18 <__aeabi_fsub>
 8006844:	4603      	mov	r3, r0
 8006846:	4619      	mov	r1, r3
 8006848:	4628      	mov	r0, r5
 800684a:	f7fa faef 	bl	8000e2c <__aeabi_fmul>
 800684e:	4603      	mov	r3, r0
 8006850:	4619      	mov	r1, r3
 8006852:	4620      	mov	r0, r4
 8006854:	f7fa f9e0 	bl	8000c18 <__aeabi_fsub>
 8006858:	4603      	mov	r3, r0
 800685a:	461c      	mov	r4, r3
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8006862:	4b49      	ldr	r3, [pc, #292]	; (8006988 <MadgwickAHRSupdate+0xdd8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f7fa fadf 	bl	8000e2c <__aeabi_fmul>
 800686e:	4603      	mov	r3, r0
 8006870:	461d      	mov	r5, r3
 8006872:	4b46      	ldr	r3, [pc, #280]	; (800698c <MadgwickAHRSupdate+0xddc>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006878:	4618      	mov	r0, r3
 800687a:	f7fa fad7 	bl	8000e2c <__aeabi_fmul>
 800687e:	4603      	mov	r3, r0
 8006880:	4619      	mov	r1, r3
 8006882:	4628      	mov	r0, r5
 8006884:	f7fa f9c8 	bl	8000c18 <__aeabi_fsub>
 8006888:	4603      	mov	r3, r0
 800688a:	461d      	mov	r5, r3
 800688c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800688e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006892:	f7fa f9c1 	bl	8000c18 <__aeabi_fsub>
 8006896:	4603      	mov	r3, r0
 8006898:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800689a:	4618      	mov	r0, r3
 800689c:	f7fa f9bc 	bl	8000c18 <__aeabi_fsub>
 80068a0:	4603      	mov	r3, r0
 80068a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fa fac1 	bl	8000e2c <__aeabi_fmul>
 80068aa:	4603      	mov	r3, r0
 80068ac:	461e      	mov	r6, r3
 80068ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80068b2:	f7fa f9b1 	bl	8000c18 <__aeabi_fsub>
 80068b6:	4603      	mov	r3, r0
 80068b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fa fab6 	bl	8000e2c <__aeabi_fmul>
 80068c0:	4603      	mov	r3, r0
 80068c2:	4619      	mov	r1, r3
 80068c4:	4630      	mov	r0, r6
 80068c6:	f7fa f9a9 	bl	8000c1c <__addsf3>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fa f9a1 	bl	8000c18 <__aeabi_fsub>
 80068d6:	4603      	mov	r3, r0
 80068d8:	4619      	mov	r1, r3
 80068da:	4628      	mov	r0, r5
 80068dc:	f7fa faa6 	bl	8000e2c <__aeabi_fmul>
 80068e0:	4603      	mov	r3, r0
 80068e2:	4619      	mov	r1, r3
 80068e4:	4620      	mov	r0, r4
 80068e6:	f7fa f999 	bl	8000c1c <__addsf3>
 80068ea:	4603      	mov	r3, r0
 80068ec:	461c      	mov	r4, r3
 80068ee:	4b25      	ldr	r3, [pc, #148]	; (8006984 <MadgwickAHRSupdate+0xdd4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fa fa99 	bl	8000e2c <__aeabi_fmul>
 80068fa:	4603      	mov	r3, r0
 80068fc:	461d      	mov	r5, r3
 80068fe:	4b20      	ldr	r3, [pc, #128]	; (8006980 <MadgwickAHRSupdate+0xdd0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006904:	4618      	mov	r0, r3
 8006906:	f7fa fa91 	bl	8000e2c <__aeabi_fmul>
 800690a:	4603      	mov	r3, r0
 800690c:	4619      	mov	r1, r3
 800690e:	4628      	mov	r0, r5
 8006910:	f7fa f984 	bl	8000c1c <__addsf3>
 8006914:	4603      	mov	r3, r0
 8006916:	461d      	mov	r5, r3
 8006918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800691a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800691c:	f7fa f97c 	bl	8000c18 <__aeabi_fsub>
 8006920:	4603      	mov	r3, r0
 8006922:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006924:	4618      	mov	r0, r3
 8006926:	f7fa fa81 	bl	8000e2c <__aeabi_fmul>
 800692a:	4603      	mov	r3, r0
 800692c:	461e      	mov	r6, r3
 800692e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006930:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006932:	f7fa f973 	bl	8000c1c <__addsf3>
 8006936:	4603      	mov	r3, r0
 8006938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800693a:	4618      	mov	r0, r3
 800693c:	f7fa fa76 	bl	8000e2c <__aeabi_fmul>
 8006940:	4603      	mov	r3, r0
 8006942:	4619      	mov	r1, r3
 8006944:	4630      	mov	r0, r6
 8006946:	f7fa f969 	bl	8000c1c <__addsf3>
 800694a:	4603      	mov	r3, r0
 800694c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8006950:	4618      	mov	r0, r3
 8006952:	f7fa f961 	bl	8000c18 <__aeabi_fsub>
 8006956:	4603      	mov	r3, r0
 8006958:	4619      	mov	r1, r3
 800695a:	4628      	mov	r0, r5
 800695c:	f7fa fa66 	bl	8000e2c <__aeabi_fmul>
 8006960:	4603      	mov	r3, r0
 8006962:	4619      	mov	r1, r3
 8006964:	4620      	mov	r0, r4
 8006966:	f7fa f959 	bl	8000c1c <__addsf3>
 800696a:	4603      	mov	r3, r0
 800696c:	461c      	mov	r4, r3
 800696e:	4b07      	ldr	r3, [pc, #28]	; (800698c <MadgwickAHRSupdate+0xddc>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006974:	4618      	mov	r0, r3
 8006976:	f7fa fa59 	bl	8000e2c <__aeabi_fmul>
 800697a:	4603      	mov	r3, r0
 800697c:	461d      	mov	r5, r3
 800697e:	e007      	b.n	8006990 <MadgwickAHRSupdate+0xde0>
 8006980:	20001e0c 	.word	0x20001e0c
 8006984:	20001e04 	.word	0x20001e04
 8006988:	20001e08 	.word	0x20001e08
 800698c:	20000020 	.word	0x20000020
 8006990:	4b9f      	ldr	r3, [pc, #636]	; (8006c10 <MadgwickAHRSupdate+0x1060>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006996:	4618      	mov	r0, r3
 8006998:	f7fa fa48 	bl	8000e2c <__aeabi_fmul>
 800699c:	4603      	mov	r3, r0
 800699e:	4619      	mov	r1, r3
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7fa f939 	bl	8000c18 <__aeabi_fsub>
 80069a6:	4603      	mov	r3, r0
 80069a8:	461d      	mov	r5, r3
 80069aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80069ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80069ae:	f7fa f935 	bl	8000c1c <__addsf3>
 80069b2:	4603      	mov	r3, r0
 80069b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fa fa38 	bl	8000e2c <__aeabi_fmul>
 80069bc:	4603      	mov	r3, r0
 80069be:	461e      	mov	r6, r3
 80069c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069c2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80069c6:	f7fa f927 	bl	8000c18 <__aeabi_fsub>
 80069ca:	4603      	mov	r3, r0
 80069cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fa f922 	bl	8000c18 <__aeabi_fsub>
 80069d4:	4603      	mov	r3, r0
 80069d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fa fa27 	bl	8000e2c <__aeabi_fmul>
 80069de:	4603      	mov	r3, r0
 80069e0:	4619      	mov	r1, r3
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7fa f91a 	bl	8000c1c <__addsf3>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fa f912 	bl	8000c18 <__aeabi_fsub>
 80069f4:	4603      	mov	r3, r0
 80069f6:	4619      	mov	r1, r3
 80069f8:	4628      	mov	r0, r5
 80069fa:	f7fa fa17 	bl	8000e2c <__aeabi_fmul>
 80069fe:	4603      	mov	r3, r0
 8006a00:	4619      	mov	r1, r3
 8006a02:	4620      	mov	r0, r4
 8006a04:	f7fa f90a 	bl	8000c1c <__addsf3>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	61bb      	str	r3, [r7, #24]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8006a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fa f903 	bl	8000c1c <__addsf3>
 8006a16:	4603      	mov	r3, r0
 8006a18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fa f8fc 	bl	8000c18 <__aeabi_fsub>
 8006a20:	4603      	mov	r3, r0
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fa f8f7 	bl	8000c18 <__aeabi_fsub>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fa f9fc 	bl	8000e2c <__aeabi_fmul>
 8006a34:	4603      	mov	r3, r0
 8006a36:	461c      	mov	r4, r3
 8006a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fa f8ed 	bl	8000c1c <__addsf3>
 8006a42:	4603      	mov	r3, r0
 8006a44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fa f8e8 	bl	8000c1c <__addsf3>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fa f8e0 	bl	8000c18 <__aeabi_fsub>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fa f9e5 	bl	8000e2c <__aeabi_fmul>
 8006a62:	4603      	mov	r3, r0
 8006a64:	4619      	mov	r1, r3
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7fa f8d8 	bl	8000c1c <__addsf3>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	461c      	mov	r4, r3
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8006a76:	4b67      	ldr	r3, [pc, #412]	; (8006c14 <MadgwickAHRSupdate+0x1064>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f7fa f9d5 	bl	8000e2c <__aeabi_fmul>
 8006a82:	4603      	mov	r3, r0
 8006a84:	461d      	mov	r5, r3
 8006a86:	4b64      	ldr	r3, [pc, #400]	; (8006c18 <MadgwickAHRSupdate+0x1068>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fa f9cd 	bl	8000e2c <__aeabi_fmul>
 8006a92:	4603      	mov	r3, r0
 8006a94:	4619      	mov	r1, r3
 8006a96:	4628      	mov	r0, r5
 8006a98:	f7fa f8c0 	bl	8000c1c <__addsf3>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	461d      	mov	r5, r3
 8006aa0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aa2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006aa6:	f7fa f8b7 	bl	8000c18 <__aeabi_fsub>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fa f8b2 	bl	8000c18 <__aeabi_fsub>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fa f9b7 	bl	8000e2c <__aeabi_fmul>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	461e      	mov	r6, r3
 8006ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ac4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006ac6:	f7fa f8a7 	bl	8000c18 <__aeabi_fsub>
 8006aca:	4603      	mov	r3, r0
 8006acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fa f9ac 	bl	8000e2c <__aeabi_fmul>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f7fa f89f 	bl	8000c1c <__addsf3>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fa f897 	bl	8000c18 <__aeabi_fsub>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4619      	mov	r1, r3
 8006aee:	4628      	mov	r0, r5
 8006af0:	f7fa f99c 	bl	8000e2c <__aeabi_fmul>
 8006af4:	4603      	mov	r3, r0
 8006af6:	4619      	mov	r1, r3
 8006af8:	4620      	mov	r0, r4
 8006afa:	f7fa f88f 	bl	8000c1c <__addsf3>
 8006afe:	4603      	mov	r3, r0
 8006b00:	461c      	mov	r4, r3
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8006b08:	4b44      	ldr	r3, [pc, #272]	; (8006c1c <MadgwickAHRSupdate+0x106c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f7fa f98c 	bl	8000e2c <__aeabi_fmul>
 8006b14:	4603      	mov	r3, r0
 8006b16:	461d      	mov	r5, r3
 8006b18:	4b3d      	ldr	r3, [pc, #244]	; (8006c10 <MadgwickAHRSupdate+0x1060>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fa f984 	bl	8000e2c <__aeabi_fmul>
 8006b24:	4603      	mov	r3, r0
 8006b26:	4619      	mov	r1, r3
 8006b28:	4628      	mov	r0, r5
 8006b2a:	f7fa f877 	bl	8000c1c <__addsf3>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	461d      	mov	r5, r3
 8006b32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006b36:	f7fa f86f 	bl	8000c18 <__aeabi_fsub>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fa f974 	bl	8000e2c <__aeabi_fmul>
 8006b44:	4603      	mov	r3, r0
 8006b46:	461e      	mov	r6, r3
 8006b48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b4a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006b4c:	f7fa f866 	bl	8000c1c <__addsf3>
 8006b50:	4603      	mov	r3, r0
 8006b52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fa f969 	bl	8000e2c <__aeabi_fmul>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7fa f85c 	bl	8000c1c <__addsf3>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fa f854 	bl	8000c18 <__aeabi_fsub>
 8006b70:	4603      	mov	r3, r0
 8006b72:	4619      	mov	r1, r3
 8006b74:	4628      	mov	r0, r5
 8006b76:	f7fa f959 	bl	8000e2c <__aeabi_fmul>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f7fa f84c 	bl	8000c1c <__addsf3>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461c      	mov	r4, r3
 8006b88:	4b23      	ldr	r3, [pc, #140]	; (8006c18 <MadgwickAHRSupdate+0x1068>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fa f94c 	bl	8000e2c <__aeabi_fmul>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461d      	mov	r5, r3
 8006b98:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006b9a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006b9c:	f7fa f83e 	bl	8000c1c <__addsf3>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fa f941 	bl	8000e2c <__aeabi_fmul>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461e      	mov	r6, r3
 8006bae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bb0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006bb4:	f7fa f830 	bl	8000c18 <__aeabi_fsub>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fa f82b 	bl	8000c18 <__aeabi_fsub>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fa f930 	bl	8000e2c <__aeabi_fmul>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f7fa f823 	bl	8000c1c <__addsf3>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fa f81b 	bl	8000c18 <__aeabi_fsub>
 8006be2:	4603      	mov	r3, r0
 8006be4:	4619      	mov	r1, r3
 8006be6:	4628      	mov	r0, r5
 8006be8:	f7fa f920 	bl	8000e2c <__aeabi_fmul>
 8006bec:	4603      	mov	r3, r0
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7fa f813 	bl	8000c1c <__addsf3>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8006bfa:	6a39      	ldr	r1, [r7, #32]
 8006bfc:	6a38      	ldr	r0, [r7, #32]
 8006bfe:	f7fa f915 	bl	8000e2c <__aeabi_fmul>
 8006c02:	4603      	mov	r3, r0
 8006c04:	461c      	mov	r4, r3
 8006c06:	69f9      	ldr	r1, [r7, #28]
 8006c08:	69f8      	ldr	r0, [r7, #28]
 8006c0a:	f7fa f90f 	bl	8000e2c <__aeabi_fmul>
 8006c0e:	e007      	b.n	8006c20 <MadgwickAHRSupdate+0x1070>
 8006c10:	20001e08 	.word	0x20001e08
 8006c14:	20001e0c 	.word	0x20001e0c
 8006c18:	20001e04 	.word	0x20001e04
 8006c1c:	20000020 	.word	0x20000020
 8006c20:	4603      	mov	r3, r0
 8006c22:	4619      	mov	r1, r3
 8006c24:	4620      	mov	r0, r4
 8006c26:	f7f9 fff9 	bl	8000c1c <__addsf3>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	461c      	mov	r4, r3
 8006c2e:	69b9      	ldr	r1, [r7, #24]
 8006c30:	69b8      	ldr	r0, [r7, #24]
 8006c32:	f7fa f8fb 	bl	8000e2c <__aeabi_fmul>
 8006c36:	4603      	mov	r3, r0
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f7f9 ffee 	bl	8000c1c <__addsf3>
 8006c40:	4603      	mov	r3, r0
 8006c42:	461c      	mov	r4, r3
 8006c44:	6979      	ldr	r1, [r7, #20]
 8006c46:	6978      	ldr	r0, [r7, #20]
 8006c48:	f7fa f8f0 	bl	8000e2c <__aeabi_fmul>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7f9 ffe3 	bl	8000c1c <__addsf3>
 8006c56:	4603      	mov	r3, r0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fd77 	bl	800774c <invSqrt>
 8006c5e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		s0 *= recipNorm;
 8006c62:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006c66:	6a38      	ldr	r0, [r7, #32]
 8006c68:	f7fa f8e0 	bl	8000e2c <__aeabi_fmul>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 8006c70:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006c74:	69f8      	ldr	r0, [r7, #28]
 8006c76:	f7fa f8d9 	bl	8000e2c <__aeabi_fmul>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 8006c7e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006c82:	69b8      	ldr	r0, [r7, #24]
 8006c84:	f7fa f8d2 	bl	8000e2c <__aeabi_fmul>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 8006c8c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006c90:	6978      	ldr	r0, [r7, #20]
 8006c92:	f7fa f8cb 	bl	8000e2c <__aeabi_fmul>
 8006c96:	4603      	mov	r3, r0
 8006c98:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 8006c9a:	4b75      	ldr	r3, [pc, #468]	; (8006e70 <MadgwickAHRSupdate+0x12c0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6a39      	ldr	r1, [r7, #32]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fa f8c3 	bl	8000e2c <__aeabi_fmul>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8006cae:	f7f9 ffb3 	bl	8000c18 <__aeabi_fsub>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 8006cb8:	4b6d      	ldr	r3, [pc, #436]	; (8006e70 <MadgwickAHRSupdate+0x12c0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69f9      	ldr	r1, [r7, #28]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fa f8b4 	bl	8000e2c <__aeabi_fmul>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006ccc:	f7f9 ffa4 	bl	8000c18 <__aeabi_fsub>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 8006cd6:	4b66      	ldr	r3, [pc, #408]	; (8006e70 <MadgwickAHRSupdate+0x12c0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69b9      	ldr	r1, [r7, #24]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fa f8a5 	bl	8000e2c <__aeabi_fmul>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006cea:	f7f9 ff95 	bl	8000c18 <__aeabi_fsub>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 8006cf4:	4b5e      	ldr	r3, [pc, #376]	; (8006e70 <MadgwickAHRSupdate+0x12c0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6979      	ldr	r1, [r7, #20]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fa f896 	bl	8000e2c <__aeabi_fmul>
 8006d00:	4603      	mov	r3, r0
 8006d02:	4619      	mov	r1, r3
 8006d04:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006d08:	f7f9 ff86 	bl	8000c18 <__aeabi_fsub>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8006d12:	4958      	ldr	r1, [pc, #352]	; (8006e74 <MadgwickAHRSupdate+0x12c4>)
 8006d14:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8006d18:	f7fa f888 	bl	8000e2c <__aeabi_fmul>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4b55      	ldr	r3, [pc, #340]	; (8006e78 <MadgwickAHRSupdate+0x12c8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f7f9 ff78 	bl	8000c1c <__addsf3>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	461a      	mov	r2, r3
 8006d30:	4b51      	ldr	r3, [pc, #324]	; (8006e78 <MadgwickAHRSupdate+0x12c8>)
 8006d32:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8006d34:	494f      	ldr	r1, [pc, #316]	; (8006e74 <MadgwickAHRSupdate+0x12c4>)
 8006d36:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006d3a:	f7fa f877 	bl	8000e2c <__aeabi_fmul>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	461a      	mov	r2, r3
 8006d42:	4b4e      	ldr	r3, [pc, #312]	; (8006e7c <MadgwickAHRSupdate+0x12cc>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7f9 ff67 	bl	8000c1c <__addsf3>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	461a      	mov	r2, r3
 8006d52:	4b4a      	ldr	r3, [pc, #296]	; (8006e7c <MadgwickAHRSupdate+0x12cc>)
 8006d54:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8006d56:	4947      	ldr	r1, [pc, #284]	; (8006e74 <MadgwickAHRSupdate+0x12c4>)
 8006d58:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006d5c:	f7fa f866 	bl	8000e2c <__aeabi_fmul>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	4b46      	ldr	r3, [pc, #280]	; (8006e80 <MadgwickAHRSupdate+0x12d0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	f7f9 ff56 	bl	8000c1c <__addsf3>
 8006d70:	4603      	mov	r3, r0
 8006d72:	461a      	mov	r2, r3
 8006d74:	4b42      	ldr	r3, [pc, #264]	; (8006e80 <MadgwickAHRSupdate+0x12d0>)
 8006d76:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8006d78:	493e      	ldr	r1, [pc, #248]	; (8006e74 <MadgwickAHRSupdate+0x12c4>)
 8006d7a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006d7e:	f7fa f855 	bl	8000e2c <__aeabi_fmul>
 8006d82:	4603      	mov	r3, r0
 8006d84:	461a      	mov	r2, r3
 8006d86:	4b3f      	ldr	r3, [pc, #252]	; (8006e84 <MadgwickAHRSupdate+0x12d4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7f9 ff45 	bl	8000c1c <__addsf3>
 8006d92:	4603      	mov	r3, r0
 8006d94:	461a      	mov	r2, r3
 8006d96:	4b3b      	ldr	r3, [pc, #236]	; (8006e84 <MadgwickAHRSupdate+0x12d4>)
 8006d98:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8006d9a:	4b37      	ldr	r3, [pc, #220]	; (8006e78 <MadgwickAHRSupdate+0x12c8>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4b36      	ldr	r3, [pc, #216]	; (8006e78 <MadgwickAHRSupdate+0x12c8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fa f841 	bl	8000e2c <__aeabi_fmul>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461c      	mov	r4, r3
 8006dae:	4b33      	ldr	r3, [pc, #204]	; (8006e7c <MadgwickAHRSupdate+0x12cc>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4b32      	ldr	r3, [pc, #200]	; (8006e7c <MadgwickAHRSupdate+0x12cc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f7fa f837 	bl	8000e2c <__aeabi_fmul>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7f9 ff2a 	bl	8000c1c <__addsf3>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461c      	mov	r4, r3
 8006dcc:	4b2c      	ldr	r3, [pc, #176]	; (8006e80 <MadgwickAHRSupdate+0x12d0>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <MadgwickAHRSupdate+0x12d0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	f7fa f828 	bl	8000e2c <__aeabi_fmul>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4619      	mov	r1, r3
 8006de0:	4620      	mov	r0, r4
 8006de2:	f7f9 ff1b 	bl	8000c1c <__addsf3>
 8006de6:	4603      	mov	r3, r0
 8006de8:	461c      	mov	r4, r3
 8006dea:	4b26      	ldr	r3, [pc, #152]	; (8006e84 <MadgwickAHRSupdate+0x12d4>)
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	4b25      	ldr	r3, [pc, #148]	; (8006e84 <MadgwickAHRSupdate+0x12d4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fa f819 	bl	8000e2c <__aeabi_fmul>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f7f9 ff0c 	bl	8000c1c <__addsf3>
 8006e04:	4603      	mov	r3, r0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fca0 	bl	800774c <invSqrt>
 8006e0c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	q0 *= recipNorm;
 8006e10:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <MadgwickAHRSupdate+0x12c8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fa f807 	bl	8000e2c <__aeabi_fmul>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	461a      	mov	r2, r3
 8006e22:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <MadgwickAHRSupdate+0x12c8>)
 8006e24:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8006e26:	4b15      	ldr	r3, [pc, #84]	; (8006e7c <MadgwickAHRSupdate+0x12cc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7f9 fffc 	bl	8000e2c <__aeabi_fmul>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	4b10      	ldr	r3, [pc, #64]	; (8006e7c <MadgwickAHRSupdate+0x12cc>)
 8006e3a:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8006e3c:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <MadgwickAHRSupdate+0x12d0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7f9 fff1 	bl	8000e2c <__aeabi_fmul>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <MadgwickAHRSupdate+0x12d0>)
 8006e50:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8006e52:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <MadgwickAHRSupdate+0x12d4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7f9 ffe6 	bl	8000e2c <__aeabi_fmul>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <MadgwickAHRSupdate+0x12d4>)
 8006e66:	601a      	str	r2, [r3, #0]
}
 8006e68:	37a4      	adds	r7, #164	; 0xa4
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	2000001c 	.word	0x2000001c
 8006e74:	3a9aaa96 	.word	0x3a9aaa96
 8006e78:	20000020 	.word	0x20000020
 8006e7c:	20001e04 	.word	0x20001e04
 8006e80:	20001e08 	.word	0x20001e08
 8006e84:	20001e0c 	.word	0x20001e0c

08006e88 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8006e88:	b590      	push	{r4, r7, lr}
 8006e8a:	b09b      	sub	sp, #108	; 0x6c
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8006e96:	4b9e      	ldr	r3, [pc, #632]	; (8007110 <MadgwickAHRSupdateIMU+0x288>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7f9 ffc3 	bl	8000e2c <__aeabi_fmul>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	461c      	mov	r4, r3
 8006eaa:	4b9a      	ldr	r3, [pc, #616]	; (8007114 <MadgwickAHRSupdateIMU+0x28c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7f9 ffbb 	bl	8000e2c <__aeabi_fmul>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f7f9 feac 	bl	8000c18 <__aeabi_fsub>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	461c      	mov	r4, r3
 8006ec4:	4b94      	ldr	r3, [pc, #592]	; (8007118 <MadgwickAHRSupdateIMU+0x290>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7f9 ffae 	bl	8000e2c <__aeabi_fmul>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7f9 fe9f 	bl	8000c18 <__aeabi_fsub>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7f9 ffa3 	bl	8000e2c <__aeabi_fmul>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8006eea:	4b8c      	ldr	r3, [pc, #560]	; (800711c <MadgwickAHRSupdateIMU+0x294>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7f9 ff9b 	bl	8000e2c <__aeabi_fmul>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	461c      	mov	r4, r3
 8006efa:	4b86      	ldr	r3, [pc, #536]	; (8007114 <MadgwickAHRSupdateIMU+0x28c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7f9 ff93 	bl	8000e2c <__aeabi_fmul>
 8006f06:	4603      	mov	r3, r0
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7f9 fe86 	bl	8000c1c <__addsf3>
 8006f10:	4603      	mov	r3, r0
 8006f12:	461c      	mov	r4, r3
 8006f14:	4b80      	ldr	r3, [pc, #512]	; (8007118 <MadgwickAHRSupdateIMU+0x290>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7f9 ff86 	bl	8000e2c <__aeabi_fmul>
 8006f20:	4603      	mov	r3, r0
 8006f22:	4619      	mov	r1, r3
 8006f24:	4620      	mov	r0, r4
 8006f26:	f7f9 fe77 	bl	8000c18 <__aeabi_fsub>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7f9 ff7b 	bl	8000e2c <__aeabi_fmul>
 8006f36:	4603      	mov	r3, r0
 8006f38:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8006f3a:	4b78      	ldr	r3, [pc, #480]	; (800711c <MadgwickAHRSupdateIMU+0x294>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7f9 ff73 	bl	8000e2c <__aeabi_fmul>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461c      	mov	r4, r3
 8006f4a:	4b71      	ldr	r3, [pc, #452]	; (8007110 <MadgwickAHRSupdateIMU+0x288>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7f9 ff6b 	bl	8000e2c <__aeabi_fmul>
 8006f56:	4603      	mov	r3, r0
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f7f9 fe5c 	bl	8000c18 <__aeabi_fsub>
 8006f60:	4603      	mov	r3, r0
 8006f62:	461c      	mov	r4, r3
 8006f64:	4b6c      	ldr	r3, [pc, #432]	; (8007118 <MadgwickAHRSupdateIMU+0x290>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68f9      	ldr	r1, [r7, #12]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7f9 ff5e 	bl	8000e2c <__aeabi_fmul>
 8006f70:	4603      	mov	r3, r0
 8006f72:	4619      	mov	r1, r3
 8006f74:	4620      	mov	r0, r4
 8006f76:	f7f9 fe51 	bl	8000c1c <__addsf3>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7f9 ff53 	bl	8000e2c <__aeabi_fmul>
 8006f86:	4603      	mov	r3, r0
 8006f88:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8006f8a:	4b64      	ldr	r3, [pc, #400]	; (800711c <MadgwickAHRSupdateIMU+0x294>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 ff4b 	bl	8000e2c <__aeabi_fmul>
 8006f96:	4603      	mov	r3, r0
 8006f98:	461c      	mov	r4, r3
 8006f9a:	4b5d      	ldr	r3, [pc, #372]	; (8007110 <MadgwickAHRSupdateIMU+0x288>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7f9 ff43 	bl	8000e2c <__aeabi_fmul>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4620      	mov	r0, r4
 8006fac:	f7f9 fe36 	bl	8000c1c <__addsf3>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	461c      	mov	r4, r3
 8006fb4:	4b57      	ldr	r3, [pc, #348]	; (8007114 <MadgwickAHRSupdateIMU+0x28c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68f9      	ldr	r1, [r7, #12]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7f9 ff36 	bl	8000e2c <__aeabi_fmul>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7f9 fe27 	bl	8000c18 <__aeabi_fsub>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7f9 ff2b 	bl	8000e2c <__aeabi_fmul>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8006fda:	f04f 0100 	mov.w	r1, #0
 8006fde:	6838      	ldr	r0, [r7, #0]
 8006fe0:	f7fa f8b8 	bl	8001154 <__aeabi_fcmpeq>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d010      	beq.n	800700c <MadgwickAHRSupdateIMU+0x184>
 8006fea:	f04f 0100 	mov.w	r1, #0
 8006fee:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8006ff0:	f7fa f8b0 	bl	8001154 <__aeabi_fcmpeq>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d008      	beq.n	800700c <MadgwickAHRSupdateIMU+0x184>
 8006ffa:	f04f 0100 	mov.w	r1, #0
 8006ffe:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007000:	f7fa f8a8 	bl	8001154 <__aeabi_fcmpeq>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	f040 823c 	bne.w	8007484 <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6838      	ldr	r0, [r7, #0]
 8007010:	f7f9 ff0c 	bl	8000e2c <__aeabi_fmul>
 8007014:	4603      	mov	r3, r0
 8007016:	461c      	mov	r4, r3
 8007018:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800701a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800701c:	f7f9 ff06 	bl	8000e2c <__aeabi_fmul>
 8007020:	4603      	mov	r3, r0
 8007022:	4619      	mov	r1, r3
 8007024:	4620      	mov	r0, r4
 8007026:	f7f9 fdf9 	bl	8000c1c <__addsf3>
 800702a:	4603      	mov	r3, r0
 800702c:	461c      	mov	r4, r3
 800702e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007030:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007032:	f7f9 fefb 	bl	8000e2c <__aeabi_fmul>
 8007036:	4603      	mov	r3, r0
 8007038:	4619      	mov	r1, r3
 800703a:	4620      	mov	r0, r4
 800703c:	f7f9 fdee 	bl	8000c1c <__addsf3>
 8007040:	4603      	mov	r3, r0
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fb82 	bl	800774c <invSqrt>
 8007048:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 800704a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800704c:	6838      	ldr	r0, [r7, #0]
 800704e:	f7f9 feed 	bl	8000e2c <__aeabi_fmul>
 8007052:	4603      	mov	r3, r0
 8007054:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8007056:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007058:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800705a:	f7f9 fee7 	bl	8000e2c <__aeabi_fmul>
 800705e:	4603      	mov	r3, r0
 8007060:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;   
 8007062:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007064:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007066:	f7f9 fee1 	bl	8000e2c <__aeabi_fmul>
 800706a:	4603      	mov	r3, r0
 800706c:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800706e:	4b2b      	ldr	r3, [pc, #172]	; (800711c <MadgwickAHRSupdateIMU+0x294>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4619      	mov	r1, r3
 8007074:	4618      	mov	r0, r3
 8007076:	f7f9 fdd1 	bl	8000c1c <__addsf3>
 800707a:	4603      	mov	r3, r0
 800707c:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 800707e:	4b24      	ldr	r3, [pc, #144]	; (8007110 <MadgwickAHRSupdateIMU+0x288>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4619      	mov	r1, r3
 8007084:	4618      	mov	r0, r3
 8007086:	f7f9 fdc9 	bl	8000c1c <__addsf3>
 800708a:	4603      	mov	r3, r0
 800708c:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 800708e:	4b21      	ldr	r3, [pc, #132]	; (8007114 <MadgwickAHRSupdateIMU+0x28c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4619      	mov	r1, r3
 8007094:	4618      	mov	r0, r3
 8007096:	f7f9 fdc1 	bl	8000c1c <__addsf3>
 800709a:	4603      	mov	r3, r0
 800709c:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 800709e:	4b1e      	ldr	r3, [pc, #120]	; (8007118 <MadgwickAHRSupdateIMU+0x290>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4619      	mov	r1, r3
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7f9 fdb9 	bl	8000c1c <__addsf3>
 80070aa:	4603      	mov	r3, r0
 80070ac:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 80070ae:	4b1b      	ldr	r3, [pc, #108]	; (800711c <MadgwickAHRSupdateIMU+0x294>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7f9 feb8 	bl	8000e2c <__aeabi_fmul>
 80070bc:	4603      	mov	r3, r0
 80070be:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 80070c0:	4b13      	ldr	r3, [pc, #76]	; (8007110 <MadgwickAHRSupdateIMU+0x288>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7f9 feaf 	bl	8000e2c <__aeabi_fmul>
 80070ce:	4603      	mov	r3, r0
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <MadgwickAHRSupdateIMU+0x28c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80070da:	4618      	mov	r0, r3
 80070dc:	f7f9 fea6 	bl	8000e2c <__aeabi_fmul>
 80070e0:	4603      	mov	r3, r0
 80070e2:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 80070e4:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <MadgwickAHRSupdateIMU+0x288>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7f9 fe9d 	bl	8000e2c <__aeabi_fmul>
 80070f2:	4603      	mov	r3, r0
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <MadgwickAHRSupdateIMU+0x28c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80070fe:	4618      	mov	r0, r3
 8007100:	f7f9 fe94 	bl	8000e2c <__aeabi_fmul>
 8007104:	4603      	mov	r3, r0
 8007106:	633b      	str	r3, [r7, #48]	; 0x30
		q0q0 = q0 * q0;
 8007108:	4b04      	ldr	r3, [pc, #16]	; (800711c <MadgwickAHRSupdateIMU+0x294>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	e008      	b.n	8007120 <MadgwickAHRSupdateIMU+0x298>
 800710e:	bf00      	nop
 8007110:	20001e04 	.word	0x20001e04
 8007114:	20001e08 	.word	0x20001e08
 8007118:	20001e0c 	.word	0x20001e0c
 800711c:	20000020 	.word	0x20000020
 8007120:	4b9a      	ldr	r3, [pc, #616]	; (800738c <MadgwickAHRSupdateIMU+0x504>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f7f9 fe80 	bl	8000e2c <__aeabi_fmul>
 800712c:	4603      	mov	r3, r0
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8007130:	4b97      	ldr	r3, [pc, #604]	; (8007390 <MadgwickAHRSupdateIMU+0x508>)
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	4b96      	ldr	r3, [pc, #600]	; (8007390 <MadgwickAHRSupdateIMU+0x508>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f7f9 fe76 	bl	8000e2c <__aeabi_fmul>
 8007140:	4603      	mov	r3, r0
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 8007144:	4b93      	ldr	r3, [pc, #588]	; (8007394 <MadgwickAHRSupdateIMU+0x50c>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b92      	ldr	r3, [pc, #584]	; (8007394 <MadgwickAHRSupdateIMU+0x50c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7f9 fe6c 	bl	8000e2c <__aeabi_fmul>
 8007154:	4603      	mov	r3, r0
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8007158:	4b8f      	ldr	r3, [pc, #572]	; (8007398 <MadgwickAHRSupdateIMU+0x510>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	4b8e      	ldr	r3, [pc, #568]	; (8007398 <MadgwickAHRSupdateIMU+0x510>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f7f9 fe62 	bl	8000e2c <__aeabi_fmul>
 8007168:	4603      	mov	r3, r0
 800716a:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800716c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800716e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007170:	f7f9 fe5c 	bl	8000e2c <__aeabi_fmul>
 8007174:	4603      	mov	r3, r0
 8007176:	461c      	mov	r4, r3
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800717c:	f7f9 fe56 	bl	8000e2c <__aeabi_fmul>
 8007180:	4603      	mov	r3, r0
 8007182:	4619      	mov	r1, r3
 8007184:	4620      	mov	r0, r4
 8007186:	f7f9 fd49 	bl	8000c1c <__addsf3>
 800718a:	4603      	mov	r3, r0
 800718c:	461c      	mov	r4, r3
 800718e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007190:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007192:	f7f9 fe4b 	bl	8000e2c <__aeabi_fmul>
 8007196:	4603      	mov	r3, r0
 8007198:	4619      	mov	r1, r3
 800719a:	4620      	mov	r0, r4
 800719c:	f7f9 fd3e 	bl	8000c1c <__addsf3>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461c      	mov	r4, r3
 80071a4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80071a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80071a8:	f7f9 fe40 	bl	8000e2c <__aeabi_fmul>
 80071ac:	4603      	mov	r3, r0
 80071ae:	4619      	mov	r1, r3
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7f9 fd31 	bl	8000c18 <__aeabi_fsub>
 80071b6:	4603      	mov	r3, r0
 80071b8:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80071ba:	6a39      	ldr	r1, [r7, #32]
 80071bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80071be:	f7f9 fe35 	bl	8000e2c <__aeabi_fmul>
 80071c2:	4603      	mov	r3, r0
 80071c4:	461c      	mov	r4, r3
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80071ca:	f7f9 fe2f 	bl	8000e2c <__aeabi_fmul>
 80071ce:	4603      	mov	r3, r0
 80071d0:	4619      	mov	r1, r3
 80071d2:	4620      	mov	r0, r4
 80071d4:	f7f9 fd20 	bl	8000c18 <__aeabi_fsub>
 80071d8:	4603      	mov	r3, r0
 80071da:	461c      	mov	r4, r3
 80071dc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80071e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071e2:	f7f9 fe23 	bl	8000e2c <__aeabi_fmul>
 80071e6:	4603      	mov	r3, r0
 80071e8:	461a      	mov	r2, r3
 80071ea:	4b69      	ldr	r3, [pc, #420]	; (8007390 <MadgwickAHRSupdateIMU+0x508>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7f9 fe1b 	bl	8000e2c <__aeabi_fmul>
 80071f6:	4603      	mov	r3, r0
 80071f8:	4619      	mov	r1, r3
 80071fa:	4620      	mov	r0, r4
 80071fc:	f7f9 fd0e 	bl	8000c1c <__addsf3>
 8007200:	4603      	mov	r3, r0
 8007202:	461c      	mov	r4, r3
 8007204:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007206:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007208:	f7f9 fe10 	bl	8000e2c <__aeabi_fmul>
 800720c:	4603      	mov	r3, r0
 800720e:	4619      	mov	r1, r3
 8007210:	4620      	mov	r0, r4
 8007212:	f7f9 fd01 	bl	8000c18 <__aeabi_fsub>
 8007216:	4603      	mov	r3, r0
 8007218:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800721a:	4618      	mov	r0, r3
 800721c:	f7f9 fcfc 	bl	8000c18 <__aeabi_fsub>
 8007220:	4603      	mov	r3, r0
 8007222:	461c      	mov	r4, r3
 8007224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007226:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007228:	f7f9 fe00 	bl	8000e2c <__aeabi_fmul>
 800722c:	4603      	mov	r3, r0
 800722e:	4619      	mov	r1, r3
 8007230:	4620      	mov	r0, r4
 8007232:	f7f9 fcf3 	bl	8000c1c <__addsf3>
 8007236:	4603      	mov	r3, r0
 8007238:	461c      	mov	r4, r3
 800723a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800723c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800723e:	f7f9 fdf5 	bl	8000e2c <__aeabi_fmul>
 8007242:	4603      	mov	r3, r0
 8007244:	4619      	mov	r1, r3
 8007246:	4620      	mov	r0, r4
 8007248:	f7f9 fce8 	bl	8000c1c <__addsf3>
 800724c:	4603      	mov	r3, r0
 800724e:	461c      	mov	r4, r3
 8007250:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007252:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007254:	f7f9 fdea 	bl	8000e2c <__aeabi_fmul>
 8007258:	4603      	mov	r3, r0
 800725a:	4619      	mov	r1, r3
 800725c:	4620      	mov	r0, r4
 800725e:	f7f9 fcdd 	bl	8000c1c <__addsf3>
 8007262:	4603      	mov	r3, r0
 8007264:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8007266:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800726a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800726c:	f7f9 fdde 	bl	8000e2c <__aeabi_fmul>
 8007270:	4603      	mov	r3, r0
 8007272:	461a      	mov	r2, r3
 8007274:	4b47      	ldr	r3, [pc, #284]	; (8007394 <MadgwickAHRSupdateIMU+0x50c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f7f9 fdd6 	bl	8000e2c <__aeabi_fmul>
 8007280:	4603      	mov	r3, r0
 8007282:	461c      	mov	r4, r3
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007288:	f7f9 fdd0 	bl	8000e2c <__aeabi_fmul>
 800728c:	4603      	mov	r3, r0
 800728e:	4619      	mov	r1, r3
 8007290:	4620      	mov	r0, r4
 8007292:	f7f9 fcc3 	bl	8000c1c <__addsf3>
 8007296:	4603      	mov	r3, r0
 8007298:	461c      	mov	r4, r3
 800729a:	6a39      	ldr	r1, [r7, #32]
 800729c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800729e:	f7f9 fdc5 	bl	8000e2c <__aeabi_fmul>
 80072a2:	4603      	mov	r3, r0
 80072a4:	4619      	mov	r1, r3
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7f9 fcb8 	bl	8000c1c <__addsf3>
 80072ac:	4603      	mov	r3, r0
 80072ae:	461c      	mov	r4, r3
 80072b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80072b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80072b4:	f7f9 fdba 	bl	8000e2c <__aeabi_fmul>
 80072b8:	4603      	mov	r3, r0
 80072ba:	4619      	mov	r1, r3
 80072bc:	4620      	mov	r0, r4
 80072be:	f7f9 fcab 	bl	8000c18 <__aeabi_fsub>
 80072c2:	4603      	mov	r3, r0
 80072c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7f9 fca6 	bl	8000c18 <__aeabi_fsub>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461c      	mov	r4, r3
 80072d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d4:	f7f9 fdaa 	bl	8000e2c <__aeabi_fmul>
 80072d8:	4603      	mov	r3, r0
 80072da:	4619      	mov	r1, r3
 80072dc:	4620      	mov	r0, r4
 80072de:	f7f9 fc9d 	bl	8000c1c <__addsf3>
 80072e2:	4603      	mov	r3, r0
 80072e4:	461c      	mov	r4, r3
 80072e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ea:	f7f9 fd9f 	bl	8000e2c <__aeabi_fmul>
 80072ee:	4603      	mov	r3, r0
 80072f0:	4619      	mov	r1, r3
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7f9 fc92 	bl	8000c1c <__addsf3>
 80072f8:	4603      	mov	r3, r0
 80072fa:	461c      	mov	r4, r3
 80072fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007300:	f7f9 fd94 	bl	8000e2c <__aeabi_fmul>
 8007304:	4603      	mov	r3, r0
 8007306:	4619      	mov	r1, r3
 8007308:	4620      	mov	r0, r4
 800730a:	f7f9 fc87 	bl	8000c1c <__addsf3>
 800730e:	4603      	mov	r3, r0
 8007310:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8007312:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8007316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007318:	f7f9 fd88 	bl	8000e2c <__aeabi_fmul>
 800731c:	4603      	mov	r3, r0
 800731e:	461a      	mov	r2, r3
 8007320:	4b1d      	ldr	r3, [pc, #116]	; (8007398 <MadgwickAHRSupdateIMU+0x510>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4619      	mov	r1, r3
 8007326:	4610      	mov	r0, r2
 8007328:	f7f9 fd80 	bl	8000e2c <__aeabi_fmul>
 800732c:	4603      	mov	r3, r0
 800732e:	461c      	mov	r4, r3
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007334:	f7f9 fd7a 	bl	8000e2c <__aeabi_fmul>
 8007338:	4603      	mov	r3, r0
 800733a:	4619      	mov	r1, r3
 800733c:	4620      	mov	r0, r4
 800733e:	f7f9 fc6b 	bl	8000c18 <__aeabi_fsub>
 8007342:	4603      	mov	r3, r0
 8007344:	461c      	mov	r4, r3
 8007346:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800734a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800734c:	f7f9 fd6e 	bl	8000e2c <__aeabi_fmul>
 8007350:	4603      	mov	r3, r0
 8007352:	461a      	mov	r2, r3
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <MadgwickAHRSupdateIMU+0x510>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f7f9 fd66 	bl	8000e2c <__aeabi_fmul>
 8007360:	4603      	mov	r3, r0
 8007362:	4619      	mov	r1, r3
 8007364:	4620      	mov	r0, r4
 8007366:	f7f9 fc59 	bl	8000c1c <__addsf3>
 800736a:	4603      	mov	r3, r0
 800736c:	461c      	mov	r4, r3
 800736e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007370:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007372:	f7f9 fd5b 	bl	8000e2c <__aeabi_fmul>
 8007376:	4603      	mov	r3, r0
 8007378:	4619      	mov	r1, r3
 800737a:	4620      	mov	r0, r4
 800737c:	f7f9 fc4c 	bl	8000c18 <__aeabi_fsub>
 8007380:	4603      	mov	r3, r0
 8007382:	613b      	str	r3, [r7, #16]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8007384:	69f9      	ldr	r1, [r7, #28]
 8007386:	69f8      	ldr	r0, [r7, #28]
 8007388:	e008      	b.n	800739c <MadgwickAHRSupdateIMU+0x514>
 800738a:	bf00      	nop
 800738c:	20000020 	.word	0x20000020
 8007390:	20001e04 	.word	0x20001e04
 8007394:	20001e08 	.word	0x20001e08
 8007398:	20001e0c 	.word	0x20001e0c
 800739c:	f7f9 fd46 	bl	8000e2c <__aeabi_fmul>
 80073a0:	4603      	mov	r3, r0
 80073a2:	461c      	mov	r4, r3
 80073a4:	69b9      	ldr	r1, [r7, #24]
 80073a6:	69b8      	ldr	r0, [r7, #24]
 80073a8:	f7f9 fd40 	bl	8000e2c <__aeabi_fmul>
 80073ac:	4603      	mov	r3, r0
 80073ae:	4619      	mov	r1, r3
 80073b0:	4620      	mov	r0, r4
 80073b2:	f7f9 fc33 	bl	8000c1c <__addsf3>
 80073b6:	4603      	mov	r3, r0
 80073b8:	461c      	mov	r4, r3
 80073ba:	6979      	ldr	r1, [r7, #20]
 80073bc:	6978      	ldr	r0, [r7, #20]
 80073be:	f7f9 fd35 	bl	8000e2c <__aeabi_fmul>
 80073c2:	4603      	mov	r3, r0
 80073c4:	4619      	mov	r1, r3
 80073c6:	4620      	mov	r0, r4
 80073c8:	f7f9 fc28 	bl	8000c1c <__addsf3>
 80073cc:	4603      	mov	r3, r0
 80073ce:	461c      	mov	r4, r3
 80073d0:	6939      	ldr	r1, [r7, #16]
 80073d2:	6938      	ldr	r0, [r7, #16]
 80073d4:	f7f9 fd2a 	bl	8000e2c <__aeabi_fmul>
 80073d8:	4603      	mov	r3, r0
 80073da:	4619      	mov	r1, r3
 80073dc:	4620      	mov	r0, r4
 80073de:	f7f9 fc1d 	bl	8000c1c <__addsf3>
 80073e2:	4603      	mov	r3, r0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 f9b1 	bl	800774c <invSqrt>
 80073ea:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 80073ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073ee:	69f8      	ldr	r0, [r7, #28]
 80073f0:	f7f9 fd1c 	bl	8000e2c <__aeabi_fmul>
 80073f4:	4603      	mov	r3, r0
 80073f6:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 80073f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073fa:	69b8      	ldr	r0, [r7, #24]
 80073fc:	f7f9 fd16 	bl	8000e2c <__aeabi_fmul>
 8007400:	4603      	mov	r3, r0
 8007402:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8007404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007406:	6978      	ldr	r0, [r7, #20]
 8007408:	f7f9 fd10 	bl	8000e2c <__aeabi_fmul>
 800740c:	4603      	mov	r3, r0
 800740e:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8007410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007412:	6938      	ldr	r0, [r7, #16]
 8007414:	f7f9 fd0a 	bl	8000e2c <__aeabi_fmul>
 8007418:	4603      	mov	r3, r0
 800741a:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 800741c:	4b6c      	ldr	r3, [pc, #432]	; (80075d0 <MadgwickAHRSupdateIMU+0x748>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	69f9      	ldr	r1, [r7, #28]
 8007422:	4618      	mov	r0, r3
 8007424:	f7f9 fd02 	bl	8000e2c <__aeabi_fmul>
 8007428:	4603      	mov	r3, r0
 800742a:	4619      	mov	r1, r3
 800742c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800742e:	f7f9 fbf3 	bl	8000c18 <__aeabi_fsub>
 8007432:	4603      	mov	r3, r0
 8007434:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8007436:	4b66      	ldr	r3, [pc, #408]	; (80075d0 <MadgwickAHRSupdateIMU+0x748>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69b9      	ldr	r1, [r7, #24]
 800743c:	4618      	mov	r0, r3
 800743e:	f7f9 fcf5 	bl	8000e2c <__aeabi_fmul>
 8007442:	4603      	mov	r3, r0
 8007444:	4619      	mov	r1, r3
 8007446:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007448:	f7f9 fbe6 	bl	8000c18 <__aeabi_fsub>
 800744c:	4603      	mov	r3, r0
 800744e:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8007450:	4b5f      	ldr	r3, [pc, #380]	; (80075d0 <MadgwickAHRSupdateIMU+0x748>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6979      	ldr	r1, [r7, #20]
 8007456:	4618      	mov	r0, r3
 8007458:	f7f9 fce8 	bl	8000e2c <__aeabi_fmul>
 800745c:	4603      	mov	r3, r0
 800745e:	4619      	mov	r1, r3
 8007460:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007462:	f7f9 fbd9 	bl	8000c18 <__aeabi_fsub>
 8007466:	4603      	mov	r3, r0
 8007468:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 800746a:	4b59      	ldr	r3, [pc, #356]	; (80075d0 <MadgwickAHRSupdateIMU+0x748>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6939      	ldr	r1, [r7, #16]
 8007470:	4618      	mov	r0, r3
 8007472:	f7f9 fcdb 	bl	8000e2c <__aeabi_fmul>
 8007476:	4603      	mov	r3, r0
 8007478:	4619      	mov	r1, r3
 800747a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800747c:	f7f9 fbcc 	bl	8000c18 <__aeabi_fsub>
 8007480:	4603      	mov	r3, r0
 8007482:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8007484:	4953      	ldr	r1, [pc, #332]	; (80075d4 <MadgwickAHRSupdateIMU+0x74c>)
 8007486:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007488:	f7f9 fcd0 	bl	8000e2c <__aeabi_fmul>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	4b51      	ldr	r3, [pc, #324]	; (80075d8 <MadgwickAHRSupdateIMU+0x750>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7f9 fbc0 	bl	8000c1c <__addsf3>
 800749c:	4603      	mov	r3, r0
 800749e:	461a      	mov	r2, r3
 80074a0:	4b4d      	ldr	r3, [pc, #308]	; (80075d8 <MadgwickAHRSupdateIMU+0x750>)
 80074a2:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 80074a4:	494b      	ldr	r1, [pc, #300]	; (80075d4 <MadgwickAHRSupdateIMU+0x74c>)
 80074a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80074a8:	f7f9 fcc0 	bl	8000e2c <__aeabi_fmul>
 80074ac:	4603      	mov	r3, r0
 80074ae:	461a      	mov	r2, r3
 80074b0:	4b4a      	ldr	r3, [pc, #296]	; (80075dc <MadgwickAHRSupdateIMU+0x754>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4619      	mov	r1, r3
 80074b6:	4610      	mov	r0, r2
 80074b8:	f7f9 fbb0 	bl	8000c1c <__addsf3>
 80074bc:	4603      	mov	r3, r0
 80074be:	461a      	mov	r2, r3
 80074c0:	4b46      	ldr	r3, [pc, #280]	; (80075dc <MadgwickAHRSupdateIMU+0x754>)
 80074c2:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 80074c4:	4943      	ldr	r1, [pc, #268]	; (80075d4 <MadgwickAHRSupdateIMU+0x74c>)
 80074c6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80074c8:	f7f9 fcb0 	bl	8000e2c <__aeabi_fmul>
 80074cc:	4603      	mov	r3, r0
 80074ce:	461a      	mov	r2, r3
 80074d0:	4b43      	ldr	r3, [pc, #268]	; (80075e0 <MadgwickAHRSupdateIMU+0x758>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f7f9 fba0 	bl	8000c1c <__addsf3>
 80074dc:	4603      	mov	r3, r0
 80074de:	461a      	mov	r2, r3
 80074e0:	4b3f      	ldr	r3, [pc, #252]	; (80075e0 <MadgwickAHRSupdateIMU+0x758>)
 80074e2:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 80074e4:	493b      	ldr	r1, [pc, #236]	; (80075d4 <MadgwickAHRSupdateIMU+0x74c>)
 80074e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80074e8:	f7f9 fca0 	bl	8000e2c <__aeabi_fmul>
 80074ec:	4603      	mov	r3, r0
 80074ee:	461a      	mov	r2, r3
 80074f0:	4b3c      	ldr	r3, [pc, #240]	; (80075e4 <MadgwickAHRSupdateIMU+0x75c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4619      	mov	r1, r3
 80074f6:	4610      	mov	r0, r2
 80074f8:	f7f9 fb90 	bl	8000c1c <__addsf3>
 80074fc:	4603      	mov	r3, r0
 80074fe:	461a      	mov	r2, r3
 8007500:	4b38      	ldr	r3, [pc, #224]	; (80075e4 <MadgwickAHRSupdateIMU+0x75c>)
 8007502:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8007504:	4b34      	ldr	r3, [pc, #208]	; (80075d8 <MadgwickAHRSupdateIMU+0x750>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	4b33      	ldr	r3, [pc, #204]	; (80075d8 <MadgwickAHRSupdateIMU+0x750>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4619      	mov	r1, r3
 800750e:	4610      	mov	r0, r2
 8007510:	f7f9 fc8c 	bl	8000e2c <__aeabi_fmul>
 8007514:	4603      	mov	r3, r0
 8007516:	461c      	mov	r4, r3
 8007518:	4b30      	ldr	r3, [pc, #192]	; (80075dc <MadgwickAHRSupdateIMU+0x754>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4b2f      	ldr	r3, [pc, #188]	; (80075dc <MadgwickAHRSupdateIMU+0x754>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4619      	mov	r1, r3
 8007522:	4610      	mov	r0, r2
 8007524:	f7f9 fc82 	bl	8000e2c <__aeabi_fmul>
 8007528:	4603      	mov	r3, r0
 800752a:	4619      	mov	r1, r3
 800752c:	4620      	mov	r0, r4
 800752e:	f7f9 fb75 	bl	8000c1c <__addsf3>
 8007532:	4603      	mov	r3, r0
 8007534:	461c      	mov	r4, r3
 8007536:	4b2a      	ldr	r3, [pc, #168]	; (80075e0 <MadgwickAHRSupdateIMU+0x758>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	4b29      	ldr	r3, [pc, #164]	; (80075e0 <MadgwickAHRSupdateIMU+0x758>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4619      	mov	r1, r3
 8007540:	4610      	mov	r0, r2
 8007542:	f7f9 fc73 	bl	8000e2c <__aeabi_fmul>
 8007546:	4603      	mov	r3, r0
 8007548:	4619      	mov	r1, r3
 800754a:	4620      	mov	r0, r4
 800754c:	f7f9 fb66 	bl	8000c1c <__addsf3>
 8007550:	4603      	mov	r3, r0
 8007552:	461c      	mov	r4, r3
 8007554:	4b23      	ldr	r3, [pc, #140]	; (80075e4 <MadgwickAHRSupdateIMU+0x75c>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4b22      	ldr	r3, [pc, #136]	; (80075e4 <MadgwickAHRSupdateIMU+0x75c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4619      	mov	r1, r3
 800755e:	4610      	mov	r0, r2
 8007560:	f7f9 fc64 	bl	8000e2c <__aeabi_fmul>
 8007564:	4603      	mov	r3, r0
 8007566:	4619      	mov	r1, r3
 8007568:	4620      	mov	r0, r4
 800756a:	f7f9 fb57 	bl	8000c1c <__addsf3>
 800756e:	4603      	mov	r3, r0
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f8eb 	bl	800774c <invSqrt>
 8007576:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8007578:	4b17      	ldr	r3, [pc, #92]	; (80075d8 <MadgwickAHRSupdateIMU+0x750>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800757e:	4618      	mov	r0, r3
 8007580:	f7f9 fc54 	bl	8000e2c <__aeabi_fmul>
 8007584:	4603      	mov	r3, r0
 8007586:	461a      	mov	r2, r3
 8007588:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <MadgwickAHRSupdateIMU+0x750>)
 800758a:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 800758c:	4b13      	ldr	r3, [pc, #76]	; (80075dc <MadgwickAHRSupdateIMU+0x754>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007592:	4618      	mov	r0, r3
 8007594:	f7f9 fc4a 	bl	8000e2c <__aeabi_fmul>
 8007598:	4603      	mov	r3, r0
 800759a:	461a      	mov	r2, r3
 800759c:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <MadgwickAHRSupdateIMU+0x754>)
 800759e:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 80075a0:	4b0f      	ldr	r3, [pc, #60]	; (80075e0 <MadgwickAHRSupdateIMU+0x758>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7f9 fc40 	bl	8000e2c <__aeabi_fmul>
 80075ac:	4603      	mov	r3, r0
 80075ae:	461a      	mov	r2, r3
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <MadgwickAHRSupdateIMU+0x758>)
 80075b2:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <MadgwickAHRSupdateIMU+0x75c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7f9 fc36 	bl	8000e2c <__aeabi_fmul>
 80075c0:	4603      	mov	r3, r0
 80075c2:	461a      	mov	r2, r3
 80075c4:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <MadgwickAHRSupdateIMU+0x75c>)
 80075c6:	601a      	str	r2, [r3, #0]
}
 80075c8:	bf00      	nop
 80075ca:	376c      	adds	r7, #108	; 0x6c
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd90      	pop	{r4, r7, pc}
 80075d0:	2000001c 	.word	0x2000001c
 80075d4:	3a9aaa96 	.word	0x3a9aaa96
 80075d8:	20000020 	.word	0x20000020
 80075dc:	20001e04 	.word	0x20001e04
 80075e0:	20001e08 	.word	0x20001e08
 80075e4:	20001e0c 	.word	0x20001e0c

080075e8 <Madgwick_computeAngles>:

void Madgwick_computeAngles(void)
{
 80075e8:	b5b0      	push	{r4, r5, r7, lr}
 80075ea:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80075ec:	4b50      	ldr	r3, [pc, #320]	; (8007730 <Madgwick_computeAngles+0x148>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4b50      	ldr	r3, [pc, #320]	; (8007734 <Madgwick_computeAngles+0x14c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7f9 fc18 	bl	8000e2c <__aeabi_fmul>
 80075fc:	4603      	mov	r3, r0
 80075fe:	461c      	mov	r4, r3
 8007600:	4b4d      	ldr	r3, [pc, #308]	; (8007738 <Madgwick_computeAngles+0x150>)
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	4b4d      	ldr	r3, [pc, #308]	; (800773c <Madgwick_computeAngles+0x154>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f7f9 fc0e 	bl	8000e2c <__aeabi_fmul>
 8007610:	4603      	mov	r3, r0
 8007612:	4619      	mov	r1, r3
 8007614:	4620      	mov	r0, r4
 8007616:	f7f9 fb01 	bl	8000c1c <__addsf3>
 800761a:	4603      	mov	r3, r0
 800761c:	461c      	mov	r4, r3
 800761e:	4b45      	ldr	r3, [pc, #276]	; (8007734 <Madgwick_computeAngles+0x14c>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b44      	ldr	r3, [pc, #272]	; (8007734 <Madgwick_computeAngles+0x14c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f7f9 fbff 	bl	8000e2c <__aeabi_fmul>
 800762e:	4603      	mov	r3, r0
 8007630:	4619      	mov	r1, r3
 8007632:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007636:	f7f9 faef 	bl	8000c18 <__aeabi_fsub>
 800763a:	4603      	mov	r3, r0
 800763c:	461d      	mov	r5, r3
 800763e:	4b3e      	ldr	r3, [pc, #248]	; (8007738 <Madgwick_computeAngles+0x150>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b3d      	ldr	r3, [pc, #244]	; (8007738 <Madgwick_computeAngles+0x150>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f7f9 fbef 	bl	8000e2c <__aeabi_fmul>
 800764e:	4603      	mov	r3, r0
 8007650:	4619      	mov	r1, r3
 8007652:	4628      	mov	r0, r5
 8007654:	f7f9 fae0 	bl	8000c18 <__aeabi_fsub>
 8007658:	4603      	mov	r3, r0
 800765a:	4619      	mov	r1, r3
 800765c:	4620      	mov	r0, r4
 800765e:	f002 f933 	bl	80098c8 <atan2f>
 8007662:	4602      	mov	r2, r0
 8007664:	4b36      	ldr	r3, [pc, #216]	; (8007740 <Madgwick_computeAngles+0x158>)
 8007666:	601a      	str	r2, [r3, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8007668:	4b32      	ldr	r3, [pc, #200]	; (8007734 <Madgwick_computeAngles+0x14c>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4b33      	ldr	r3, [pc, #204]	; (800773c <Madgwick_computeAngles+0x154>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7f9 fbda 	bl	8000e2c <__aeabi_fmul>
 8007678:	4603      	mov	r3, r0
 800767a:	461c      	mov	r4, r3
 800767c:	4b2c      	ldr	r3, [pc, #176]	; (8007730 <Madgwick_computeAngles+0x148>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4b2d      	ldr	r3, [pc, #180]	; (8007738 <Madgwick_computeAngles+0x150>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f7f9 fbd0 	bl	8000e2c <__aeabi_fmul>
 800768c:	4603      	mov	r3, r0
 800768e:	4619      	mov	r1, r3
 8007690:	4620      	mov	r0, r4
 8007692:	f7f9 fac1 	bl	8000c18 <__aeabi_fsub>
 8007696:	4603      	mov	r3, r0
 8007698:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800769c:	4618      	mov	r0, r3
 800769e:	f7f9 fbc5 	bl	8000e2c <__aeabi_fmul>
 80076a2:	4603      	mov	r3, r0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f002 f8c1 	bl	800982c <asinf>
 80076aa:	4602      	mov	r2, r0
 80076ac:	4b25      	ldr	r3, [pc, #148]	; (8007744 <Madgwick_computeAngles+0x15c>)
 80076ae:	601a      	str	r2, [r3, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 80076b0:	4b20      	ldr	r3, [pc, #128]	; (8007734 <Madgwick_computeAngles+0x14c>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	4b20      	ldr	r3, [pc, #128]	; (8007738 <Madgwick_computeAngles+0x150>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f7f9 fbb6 	bl	8000e2c <__aeabi_fmul>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461c      	mov	r4, r3
 80076c4:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <Madgwick_computeAngles+0x148>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	4b1c      	ldr	r3, [pc, #112]	; (800773c <Madgwick_computeAngles+0x154>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7f9 fbac 	bl	8000e2c <__aeabi_fmul>
 80076d4:	4603      	mov	r3, r0
 80076d6:	4619      	mov	r1, r3
 80076d8:	4620      	mov	r0, r4
 80076da:	f7f9 fa9f 	bl	8000c1c <__addsf3>
 80076de:	4603      	mov	r3, r0
 80076e0:	461c      	mov	r4, r3
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <Madgwick_computeAngles+0x150>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	4b14      	ldr	r3, [pc, #80]	; (8007738 <Madgwick_computeAngles+0x150>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4619      	mov	r1, r3
 80076ec:	4610      	mov	r0, r2
 80076ee:	f7f9 fb9d 	bl	8000e2c <__aeabi_fmul>
 80076f2:	4603      	mov	r3, r0
 80076f4:	4619      	mov	r1, r3
 80076f6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80076fa:	f7f9 fa8d 	bl	8000c18 <__aeabi_fsub>
 80076fe:	4603      	mov	r3, r0
 8007700:	461d      	mov	r5, r3
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <Madgwick_computeAngles+0x154>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b0d      	ldr	r3, [pc, #52]	; (800773c <Madgwick_computeAngles+0x154>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4619      	mov	r1, r3
 800770c:	4610      	mov	r0, r2
 800770e:	f7f9 fb8d 	bl	8000e2c <__aeabi_fmul>
 8007712:	4603      	mov	r3, r0
 8007714:	4619      	mov	r1, r3
 8007716:	4628      	mov	r0, r5
 8007718:	f7f9 fa7e 	bl	8000c18 <__aeabi_fsub>
 800771c:	4603      	mov	r3, r0
 800771e:	4619      	mov	r1, r3
 8007720:	4620      	mov	r0, r4
 8007722:	f002 f8d1 	bl	80098c8 <atan2f>
 8007726:	4602      	mov	r2, r0
 8007728:	4b07      	ldr	r3, [pc, #28]	; (8007748 <Madgwick_computeAngles+0x160>)
 800772a:	601a      	str	r2, [r3, #0]
}
 800772c:	bf00      	nop
 800772e:	bdb0      	pop	{r4, r5, r7, pc}
 8007730:	20000020 	.word	0x20000020
 8007734:	20001e04 	.word	0x20001e04
 8007738:	20001e08 	.word	0x20001e08
 800773c:	20001e0c 	.word	0x20001e0c
 8007740:	20001e10 	.word	0x20001e10
 8007744:	20001e14 	.word	0x20001e14
 8007748:	20001e18 	.word	0x20001e18

0800774c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8007754:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7f9 fb67 	bl	8000e2c <__aeabi_fmul>
 800775e:	4603      	mov	r3, r0
 8007760:	617b      	str	r3, [r7, #20]
	float y = x;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8007766:	f107 0310 	add.w	r3, r7, #16
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	105a      	asrs	r2, r3, #1
 8007772:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <invSqrt+0x74>)
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8007778:	f107 030c 	add.w	r3, r7, #12
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	6979      	ldr	r1, [r7, #20]
 8007784:	4618      	mov	r0, r3
 8007786:	f7f9 fb51 	bl	8000e2c <__aeabi_fmul>
 800778a:	4603      	mov	r3, r0
 800778c:	461a      	mov	r2, r3
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	4619      	mov	r1, r3
 8007792:	4610      	mov	r0, r2
 8007794:	f7f9 fb4a 	bl	8000e2c <__aeabi_fmul>
 8007798:	4603      	mov	r3, r0
 800779a:	4619      	mov	r1, r3
 800779c:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80077a0:	f7f9 fa3a 	bl	8000c18 <__aeabi_fsub>
 80077a4:	4603      	mov	r3, r0
 80077a6:	461a      	mov	r2, r3
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f7f9 fb3d 	bl	8000e2c <__aeabi_fmul>
 80077b2:	4603      	mov	r3, r0
 80077b4:	613b      	str	r3, [r7, #16]
	return y;
 80077b6:	693b      	ldr	r3, [r7, #16]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	5f3759df 	.word	0x5f3759df

080077c4 <low_pass_filter>:
 * the filter)
 *
 * @retval none.
 **************************************************************************/
void low_pass_filter(float CurrentData, float* filteredData, float filterCoeff)
{
 80077c4:	b590      	push	{r4, r7, lr}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
	(*filteredData) = (filterCoeff*CurrentData)+((1-filterCoeff)*(*filteredData));
 80077d0:	68f9      	ldr	r1, [r7, #12]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7f9 fb2a 	bl	8000e2c <__aeabi_fmul>
 80077d8:	4603      	mov	r3, r0
 80077da:	461c      	mov	r4, r3
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80077e2:	f7f9 fa19 	bl	8000c18 <__aeabi_fsub>
 80077e6:	4603      	mov	r3, r0
 80077e8:	461a      	mov	r2, r3
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4619      	mov	r1, r3
 80077f0:	4610      	mov	r0, r2
 80077f2:	f7f9 fb1b 	bl	8000e2c <__aeabi_fmul>
 80077f6:	4603      	mov	r3, r0
 80077f8:	4619      	mov	r1, r3
 80077fa:	4620      	mov	r0, r4
 80077fc:	f7f9 fa0e 	bl	8000c1c <__addsf3>
 8007800:	4603      	mov	r3, r0
 8007802:	461a      	mov	r2, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	601a      	str	r2, [r3, #0]
}
 8007808:	bf00      	nop
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	bd90      	pop	{r4, r7, pc}

08007810 <convert_degrees_to_radians>:
 * @param degrees: value to be converted in degrees
 *
 * @retval value in radians.
 **************************************************************************/
float convert_degrees_to_radians(float degrees)
{
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
	/* radians = (degrees*PI)/180 */
	//return (degrees*M_PI)/180;
	return (degrees*0.01745);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7f8 fe5d 	bl	80004d8 <__aeabi_f2d>
 800781e:	a308      	add	r3, pc, #32	; (adr r3, 8007840 <convert_degrees_to_radians+0x30>)
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f7f8 feac 	bl	8000580 <__aeabi_dmul>
 8007828:	4603      	mov	r3, r0
 800782a:	460c      	mov	r4, r1
 800782c:	4618      	mov	r0, r3
 800782e:	4621      	mov	r1, r4
 8007830:	f7f9 f99e 	bl	8000b70 <__aeabi_d2f>
 8007834:	4603      	mov	r3, r0
}
 8007836:	4618      	mov	r0, r3
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	bd90      	pop	{r4, r7, pc}
 800783e:	bf00      	nop
 8007840:	ad42c3ca 	.word	0xad42c3ca
 8007844:	3f91de69 	.word	0x3f91de69

08007848 <pid_compute>:

}


float pid_compute(float input, float setPoint)
{
 8007848:	b590      	push	{r4, r7, lr}
 800784a:	b08d      	sub	sp, #52	; 0x34
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]

	uint32_t currentTime;
	static uint32_t previousTime;
	float timeDifference;

	const float kp=10, ki=0.1, kd=0.1;
 8007852:	4b40      	ldr	r3, [pc, #256]	; (8007954 <pid_compute+0x10c>)
 8007854:	62bb      	str	r3, [r7, #40]	; 0x28
 8007856:	4b40      	ldr	r3, [pc, #256]	; (8007958 <pid_compute+0x110>)
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
 800785a:	4b3f      	ldr	r3, [pc, #252]	; (8007958 <pid_compute+0x110>)
 800785c:	623b      	str	r3, [r7, #32]
	const float maxOutput = 180;
 800785e:	4b3f      	ldr	r3, [pc, #252]	; (800795c <pid_compute+0x114>)
 8007860:	61fb      	str	r3, [r7, #28]
	const float minOutput = 0;
 8007862:	f04f 0300 	mov.w	r3, #0
 8007866:	61bb      	str	r3, [r7, #24]

	float output;
	static float integralErr=0;
	float differentialErr=0;
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	617b      	str	r3, [r7, #20]

	currentTime = millis();
 800786e:	f001 fe93 	bl	8009598 <millis>
 8007872:	6138      	str	r0, [r7, #16]
	timeDifference = currentTime-previousTime;
 8007874:	4b3a      	ldr	r3, [pc, #232]	; (8007960 <pid_compute+0x118>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	4618      	mov	r0, r3
 800787e:	f7f9 fa7d 	bl	8000d7c <__aeabi_ui2f>
 8007882:	4603      	mov	r3, r0
 8007884:	60fb      	str	r3, [r7, #12]
	previousTime = currentTime;
 8007886:	4a36      	ldr	r2, [pc, #216]	; (8007960 <pid_compute+0x118>)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6013      	str	r3, [r2, #0]

	currentErr = setPoint-input;
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	6838      	ldr	r0, [r7, #0]
 8007890:	f7f9 f9c2 	bl	8000c18 <__aeabi_fsub>
 8007894:	4603      	mov	r3, r0
 8007896:	60bb      	str	r3, [r7, #8]

	integralErr = integralErr+currentErr;
 8007898:	4b32      	ldr	r3, [pc, #200]	; (8007964 <pid_compute+0x11c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7f9 f9bc 	bl	8000c1c <__addsf3>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	4b2e      	ldr	r3, [pc, #184]	; (8007964 <pid_compute+0x11c>)
 80078aa:	601a      	str	r2, [r3, #0]
	differentialErr = currentErr-previousErr;
 80078ac:	4b2e      	ldr	r3, [pc, #184]	; (8007968 <pid_compute+0x120>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4619      	mov	r1, r3
 80078b2:	68b8      	ldr	r0, [r7, #8]
 80078b4:	f7f9 f9b0 	bl	8000c18 <__aeabi_fsub>
 80078b8:	4603      	mov	r3, r0
 80078ba:	617b      	str	r3, [r7, #20]
	previousErr = currentErr;
 80078bc:	4a2a      	ldr	r2, [pc, #168]	; (8007968 <pid_compute+0x120>)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6013      	str	r3, [r2, #0]

	if(timeDifference>0)
 80078c2:	f04f 0100 	mov.w	r1, #0
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f7f9 fc6c 	bl	80011a4 <__aeabi_fcmpgt>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d03a      	beq.n	8007948 <pid_compute+0x100>
	{
		output = (kp*currentErr) + (ki*integralErr*timeDifference) + ((kd*differentialErr)/timeDifference);
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d6:	f7f9 faa9 	bl	8000e2c <__aeabi_fmul>
 80078da:	4603      	mov	r3, r0
 80078dc:	461c      	mov	r4, r3
 80078de:	4b21      	ldr	r3, [pc, #132]	; (8007964 <pid_compute+0x11c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7f9 faa1 	bl	8000e2c <__aeabi_fmul>
 80078ea:	4603      	mov	r3, r0
 80078ec:	68f9      	ldr	r1, [r7, #12]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f9 fa9c 	bl	8000e2c <__aeabi_fmul>
 80078f4:	4603      	mov	r3, r0
 80078f6:	4619      	mov	r1, r3
 80078f8:	4620      	mov	r0, r4
 80078fa:	f7f9 f98f 	bl	8000c1c <__addsf3>
 80078fe:	4603      	mov	r3, r0
 8007900:	461c      	mov	r4, r3
 8007902:	6979      	ldr	r1, [r7, #20]
 8007904:	6a38      	ldr	r0, [r7, #32]
 8007906:	f7f9 fa91 	bl	8000e2c <__aeabi_fmul>
 800790a:	4603      	mov	r3, r0
 800790c:	68f9      	ldr	r1, [r7, #12]
 800790e:	4618      	mov	r0, r3
 8007910:	f7f9 fb40 	bl	8000f94 <__aeabi_fdiv>
 8007914:	4603      	mov	r3, r0
 8007916:	4619      	mov	r1, r3
 8007918:	4620      	mov	r0, r4
 800791a:	f7f9 f97f 	bl	8000c1c <__addsf3>
 800791e:	4603      	mov	r3, r0
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(output>maxOutput)
 8007922:	69f9      	ldr	r1, [r7, #28]
 8007924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007926:	f7f9 fc3d 	bl	80011a4 <__aeabi_fcmpgt>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <pid_compute+0xee>
			output = maxOutput;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007934:	e008      	b.n	8007948 <pid_compute+0x100>

		else if(output<minOutput)
 8007936:	69b9      	ldr	r1, [r7, #24]
 8007938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800793a:	f7f9 fc15 	bl	8001168 <__aeabi_fcmplt>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <pid_compute+0x100>
			output = minOutput;
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return output;
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800794a:	4618      	mov	r0, r3
 800794c:	3734      	adds	r7, #52	; 0x34
 800794e:	46bd      	mov	sp, r7
 8007950:	bd90      	pop	{r4, r7, pc}
 8007952:	bf00      	nop
 8007954:	41200000 	.word	0x41200000
 8007958:	3dcccccd 	.word	0x3dcccccd
 800795c:	43340000 	.word	0x43340000
 8007960:	20001e1c 	.word	0x20001e1c
 8007964:	20001e20 	.word	0x20001e20
 8007968:	20001e24 	.word	0x20001e24

0800796c <_putchar>:
  void* arg;
} out_fct_wrap_type;

// custom function
void _putchar(char character)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	71fb      	strb	r3, [r7, #7]
	USART_SendData(PRINTF_USART, character);
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	b29b      	uxth	r3, r3
 800797a:	4619      	mov	r1, r3
 800797c:	4807      	ldr	r0, [pc, #28]	; (800799c <_putchar+0x30>)
 800797e:	f7fd f851 	bl	8004a24 <USART_SendData>
	while(USART_GetFlagStatus(PRINTF_USART, USART_FLAG_TC) == 0);
 8007982:	bf00      	nop
 8007984:	2140      	movs	r1, #64	; 0x40
 8007986:	4805      	ldr	r0, [pc, #20]	; (800799c <_putchar+0x30>)
 8007988:	f7fd f86c 	bl	8004a64 <USART_GetFlagStatus>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0f8      	beq.n	8007984 <_putchar+0x18>
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40013800 	.word	0x40013800

080079a0 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	607a      	str	r2, [r7, #4]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr

080079ba <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <_out_char+0x1e>
    _putchar(character);
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff ffca 	bl	800796c <_putchar>
  }
}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	e002      	b.n	80079f6 <_strnlen_s+0x16>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d004      	beq.n	8007a08 <_strnlen_s+0x28>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	1e5a      	subs	r2, r3, #1
 8007a02:	603a      	str	r2, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f3      	bne.n	80079f0 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	1ad3      	subs	r3, r2, r3
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	2b2f      	cmp	r3, #47	; 0x2f
 8007a26:	d904      	bls.n	8007a32 <_is_digit+0x1a>
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	2b39      	cmp	r3, #57	; 0x39
 8007a2c:	d801      	bhi.n	8007a32 <_is_digit+0x1a>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e000      	b.n	8007a34 <_is_digit+0x1c>
 8007a32:	2300      	movs	r3, #0
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	b2db      	uxtb	r3, r3
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr

08007a44 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8007a50:	e00e      	b.n	8007a70 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	1c59      	adds	r1, r3, #1
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6011      	str	r1, [r2, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	4403      	add	r3, r0
 8007a6c:	3b30      	subs	r3, #48	; 0x30
 8007a6e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff ffce 	bl	8007a18 <_is_digit>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e7      	bne.n	8007a52 <_atoi+0xe>
  }
  return i;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8007a8c:	b590      	push	{r4, r7, lr}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d125      	bne.n	8007af4 <_out_rev+0x68>
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d120      	bne.n	8007af4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	e00a      	b.n	8007ace <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	1c53      	adds	r3, r2, #1
 8007abc:	607b      	str	r3, [r7, #4]
 8007abe:	68fc      	ldr	r4, [r7, #12]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	2020      	movs	r0, #32
 8007ac6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	3301      	adds	r3, #1
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d3f0      	bcc.n	8007ab8 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8007ad6:	e00d      	b.n	8007af4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	3b01      	subs	r3, #1
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	4413      	add	r3, r2
 8007ae4:	7818      	ldrb	r0, [r3, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	1c53      	adds	r3, r2, #1
 8007aea:	607b      	str	r3, [r7, #4]
 8007aec:	68fc      	ldr	r4, [r7, #12]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68b9      	ldr	r1, [r7, #8]
 8007af2:	47a0      	blx	r4
  while (len) {
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1ee      	bne.n	8007ad8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00e      	beq.n	8007b22 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8007b04:	e007      	b.n	8007b16 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	1c53      	adds	r3, r2, #1
 8007b0a:	607b      	str	r3, [r7, #4]
 8007b0c:	68fc      	ldr	r4, [r7, #12]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	2020      	movs	r0, #32
 8007b14:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad2      	subs	r2, r2, r3
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d3f1      	bcc.n	8007b06 <_out_rev+0x7a>
    }
  }

  return idx;
 8007b22:	687b      	ldr	r3, [r7, #4]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd90      	pop	{r4, r7, pc}

08007b2c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af04      	add	r7, sp, #16
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d136      	bne.n	8007bb2 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d018      	beq.n	8007b7c <_ntoa_format+0x50>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d013      	beq.n	8007b7c <_ntoa_format+0x50>
 8007b54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d104      	bne.n	8007b66 <_ntoa_format+0x3a>
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	f003 030c 	and.w	r3, r3, #12
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <_ntoa_format+0x50>
      width--;
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007b6c:	e006      	b.n	8007b7c <_ntoa_format+0x50>
      buf[len++] = '0';
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	61fa      	str	r2, [r7, #28]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	4413      	add	r3, r2
 8007b78:	2230      	movs	r2, #48	; 0x30
 8007b7a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d20a      	bcs.n	8007b9a <_ntoa_format+0x6e>
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b1f      	cmp	r3, #31
 8007b88:	d9f1      	bls.n	8007b6e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007b8a:	e006      	b.n	8007b9a <_ntoa_format+0x6e>
      buf[len++] = '0';
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	61fa      	str	r2, [r7, #28]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	4413      	add	r3, r2
 8007b96:	2230      	movs	r2, #48	; 0x30
 8007b98:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <_ntoa_format+0x86>
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d202      	bcs.n	8007bb2 <_ntoa_format+0x86>
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	2b1f      	cmp	r3, #31
 8007bb0:	d9ec      	bls.n	8007b8c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d058      	beq.n	8007c6e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d116      	bne.n	8007bf4 <_ntoa_format+0xc8>
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d013      	beq.n	8007bf4 <_ntoa_format+0xc8>
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d003      	beq.n	8007bdc <_ntoa_format+0xb0>
 8007bd4:	69fa      	ldr	r2, [r7, #28]
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d10b      	bne.n	8007bf4 <_ntoa_format+0xc8>
      len--;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <_ntoa_format+0xc8>
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	2b10      	cmp	r3, #16
 8007bec:	d102      	bne.n	8007bf4 <_ntoa_format+0xc8>
        len--;
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	2b10      	cmp	r3, #16
 8007bf8:	d10f      	bne.n	8007c1a <_ntoa_format+0xee>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <_ntoa_format+0xee>
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	2b1f      	cmp	r3, #31
 8007c08:	d807      	bhi.n	8007c1a <_ntoa_format+0xee>
      buf[len++] = 'x';
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	61fa      	str	r2, [r7, #28]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4413      	add	r3, r2
 8007c14:	2278      	movs	r2, #120	; 0x78
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	e01f      	b.n	8007c5a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2b10      	cmp	r3, #16
 8007c1e:	d10f      	bne.n	8007c40 <_ntoa_format+0x114>
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <_ntoa_format+0x114>
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	2b1f      	cmp	r3, #31
 8007c2e:	d807      	bhi.n	8007c40 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	61fa      	str	r2, [r7, #28]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	4413      	add	r3, r2
 8007c3a:	2258      	movs	r2, #88	; 0x58
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	e00c      	b.n	8007c5a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d109      	bne.n	8007c5a <_ntoa_format+0x12e>
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	2b1f      	cmp	r3, #31
 8007c4a:	d806      	bhi.n	8007c5a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	61fa      	str	r2, [r7, #28]
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4413      	add	r3, r2
 8007c56:	2262      	movs	r2, #98	; 0x62
 8007c58:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2b1f      	cmp	r3, #31
 8007c5e:	d806      	bhi.n	8007c6e <_ntoa_format+0x142>
      buf[len++] = '0';
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	61fa      	str	r2, [r7, #28]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	4413      	add	r3, r2
 8007c6a:	2230      	movs	r2, #48	; 0x30
 8007c6c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	2b1f      	cmp	r3, #31
 8007c72:	d824      	bhi.n	8007cbe <_ntoa_format+0x192>
    if (negative) {
 8007c74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <_ntoa_format+0x160>
      buf[len++] = '-';
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	61fa      	str	r2, [r7, #28]
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	4413      	add	r3, r2
 8007c86:	222d      	movs	r2, #45	; 0x2d
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	e018      	b.n	8007cbe <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	61fa      	str	r2, [r7, #28]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	222b      	movs	r2, #43	; 0x2b
 8007ca2:	701a      	strb	r2, [r3, #0]
 8007ca4:	e00b      	b.n	8007cbe <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d006      	beq.n	8007cbe <_ntoa_format+0x192>
      buf[len++] = ' ';
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	61fa      	str	r2, [r7, #28]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	4413      	add	r3, r2
 8007cba:	2220      	movs	r2, #32
 8007cbc:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	9302      	str	r3, [sp, #8]
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff fed9 	bl	8007a8c <_out_rev>
 8007cda:	4603      	mov	r3, r0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b096      	sub	sp, #88	; 0x58
 8007ce8:	af08      	add	r7, sp, #32
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8007cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d103      	bne.n	8007d04 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8007cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cfe:	f023 0310 	bic.w	r3, r3, #16
 8007d02:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8007d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <_ntoa_long+0x30>
 8007d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d033      	beq.n	8007d7c <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8007d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d18:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007d1e:	fb01 f202 	mul.w	r2, r1, r2
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	637a      	str	r2, [r7, #52]	; 0x34
 8007d2e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007d32:	2a09      	cmp	r2, #9
 8007d34:	d804      	bhi.n	8007d40 <_ntoa_long+0x5c>
 8007d36:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007d3a:	3230      	adds	r2, #48	; 0x30
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	e00d      	b.n	8007d5c <_ntoa_long+0x78>
 8007d40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d42:	f002 0220 	and.w	r2, r2, #32
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	d001      	beq.n	8007d4e <_ntoa_long+0x6a>
 8007d4a:	2141      	movs	r1, #65	; 0x41
 8007d4c:	e000      	b.n	8007d50 <_ntoa_long+0x6c>
 8007d4e:	2161      	movs	r1, #97	; 0x61
 8007d50:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007d54:	440a      	add	r2, r1
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	3a0a      	subs	r2, #10
 8007d5a:	b2d2      	uxtb	r2, r2
 8007d5c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007d60:	440b      	add	r3, r1
 8007d62:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8007d66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8007d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <_ntoa_long+0x98>
 8007d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d78:	2b1f      	cmp	r3, #31
 8007d7a:	d9cb      	bls.n	8007d14 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8007d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d7e:	9306      	str	r3, [sp, #24]
 8007d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d82:	9305      	str	r3, [sp, #20]
 8007d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8a:	9303      	str	r3, [sp, #12]
 8007d8c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007d90:	9302      	str	r3, [sp, #8]
 8007d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	f107 0310 	add.w	r3, r7, #16
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff fec2 	bl	8007b2c <_ntoa_format>
 8007da8:	4603      	mov	r3, r0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3738      	adds	r7, #56	; 0x38
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8007db2:	b590      	push	{r4, r7, lr}
 8007db4:	b097      	sub	sp, #92	; 0x5c
 8007db6:	af08      	add	r7, sp, #32
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8007dc4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007dc8:	4323      	orrs	r3, r4
 8007dca:	d103      	bne.n	8007dd4 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8007dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dce:	f023 0310 	bic.w	r3, r3, #16
 8007dd2:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8007dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <_ntoa_long_long+0x34>
 8007dde:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007de2:	4323      	orrs	r3, r4
 8007de4:	d039      	beq.n	8007e5a <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8007de6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007dee:	f7f9 fa1f 	bl	8001230 <__aeabi_uldivmod>
 8007df2:	461c      	mov	r4, r3
 8007df4:	4613      	mov	r3, r2
 8007df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	637a      	str	r2, [r7, #52]	; 0x34
 8007e00:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007e04:	2a09      	cmp	r2, #9
 8007e06:	d804      	bhi.n	8007e12 <_ntoa_long_long+0x60>
 8007e08:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007e0c:	3230      	adds	r2, #48	; 0x30
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	e00d      	b.n	8007e2e <_ntoa_long_long+0x7c>
 8007e12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e14:	f002 0220 	and.w	r2, r2, #32
 8007e18:	2a00      	cmp	r2, #0
 8007e1a:	d001      	beq.n	8007e20 <_ntoa_long_long+0x6e>
 8007e1c:	2141      	movs	r1, #65	; 0x41
 8007e1e:	e000      	b.n	8007e22 <_ntoa_long_long+0x70>
 8007e20:	2161      	movs	r1, #97	; 0x61
 8007e22:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007e26:	440a      	add	r2, r1
 8007e28:	b2d2      	uxtb	r2, r2
 8007e2a:	3a0a      	subs	r2, #10
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007e32:	440b      	add	r3, r1
 8007e34:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8007e38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e3c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e40:	f7f9 f9f6 	bl	8001230 <__aeabi_uldivmod>
 8007e44:	4603      	mov	r3, r0
 8007e46:	460c      	mov	r4, r1
 8007e48:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8007e4c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007e50:	4323      	orrs	r3, r4
 8007e52:	d002      	beq.n	8007e5a <_ntoa_long_long+0xa8>
 8007e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e56:	2b1f      	cmp	r3, #31
 8007e58:	d9c5      	bls.n	8007de6 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8007e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e5e:	9206      	str	r2, [sp, #24]
 8007e60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e62:	9205      	str	r2, [sp, #20]
 8007e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e66:	9204      	str	r2, [sp, #16]
 8007e68:	9303      	str	r3, [sp, #12]
 8007e6a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8007e6e:	9302      	str	r3, [sp, #8]
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	f107 0310 	add.w	r3, r7, #16
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7ff fe53 	bl	8007b2c <_ntoa_format>
 8007e86:	4603      	mov	r3, r0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	373c      	adds	r7, #60	; 0x3c
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd90      	pop	{r4, r7, pc}

08007e90 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8007e90:	b590      	push	{r4, r7, lr}
 8007e92:	b09d      	sub	sp, #116	; 0x74
 8007e94:	af06      	add	r7, sp, #24
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	f04f 0400 	mov.w	r4, #0
 8007eaa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8007eae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007eb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007eb6:	f7f8 fdcb 	bl	8000a50 <__aeabi_dcmpeq>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10f      	bne.n	8007ee0 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8007ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ec2:	9303      	str	r3, [sp, #12]
 8007ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec6:	9302      	str	r3, [sp, #8]
 8007ec8:	2303      	movs	r3, #3
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	4bac      	ldr	r3, [pc, #688]	; (8008180 <_ftoa+0x2f0>)
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7ff fdd8 	bl	8007a8c <_out_rev>
 8007edc:	4603      	mov	r3, r0
 8007ede:	e234      	b.n	800834a <_ftoa+0x4ba>
  if (value < -DBL_MAX)
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee4:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8007ee8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007eec:	f7f8 fdba 	bl	8000a64 <__aeabi_dcmplt>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00f      	beq.n	8007f16 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8007ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007efc:	9302      	str	r3, [sp, #8]
 8007efe:	2304      	movs	r3, #4
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	4ba0      	ldr	r3, [pc, #640]	; (8008184 <_ftoa+0x2f4>)
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff fdbd 	bl	8007a8c <_out_rev>
 8007f12:	4603      	mov	r3, r0
 8007f14:	e219      	b.n	800834a <_ftoa+0x4ba>
  if (value > DBL_MAX)
 8007f16:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1a:	4b9b      	ldr	r3, [pc, #620]	; (8008188 <_ftoa+0x2f8>)
 8007f1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f20:	f7f8 fdbe 	bl	8000aa0 <__aeabi_dcmpgt>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01d      	beq.n	8007f66 <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8007f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <_ftoa+0xa8>
 8007f34:	4b95      	ldr	r3, [pc, #596]	; (800818c <_ftoa+0x2fc>)
 8007f36:	e000      	b.n	8007f3a <_ftoa+0xaa>
 8007f38:	4b95      	ldr	r3, [pc, #596]	; (8008190 <_ftoa+0x300>)
 8007f3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f3c:	f002 0204 	and.w	r2, r2, #4
 8007f40:	2a00      	cmp	r2, #0
 8007f42:	d001      	beq.n	8007f48 <_ftoa+0xb8>
 8007f44:	2204      	movs	r2, #4
 8007f46:	e000      	b.n	8007f4a <_ftoa+0xba>
 8007f48:	2203      	movs	r2, #3
 8007f4a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007f4c:	9103      	str	r1, [sp, #12]
 8007f4e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007f50:	9102      	str	r1, [sp, #8]
 8007f52:	9201      	str	r2, [sp, #4]
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff fd95 	bl	8007a8c <_out_rev>
 8007f62:	4603      	mov	r3, r0
 8007f64:	e1f1      	b.n	800834a <_ftoa+0x4ba>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8007f66:	a382      	add	r3, pc, #520	; (adr r3, 8008170 <_ftoa+0x2e0>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f70:	f7f8 fd96 	bl	8000aa0 <__aeabi_dcmpgt>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d109      	bne.n	8007f8e <_ftoa+0xfe>
 8007f7a:	a37f      	add	r3, pc, #508	; (adr r3, 8008178 <_ftoa+0x2e8>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f84:	f7f8 fd6e 	bl	8000a64 <__aeabi_dcmplt>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d011      	beq.n	8007fb2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8007f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f90:	9304      	str	r3, [sp, #16]
 8007f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f98:	9302      	str	r3, [sp, #8]
 8007f9a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8007f9e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 f9d9 	bl	8008360 <_etoa>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	e1cb      	b.n	800834a <_ftoa+0x4ba>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fc4:	f7f8 fd4e 	bl	8000a64 <__aeabi_dcmplt>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <_ftoa+0x15c>
    negative = true;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8007fd4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007fd8:	f04f 0000 	mov.w	r0, #0
 8007fdc:	f04f 0100 	mov.w	r1, #0
 8007fe0:	f7f8 f91a 	bl	8000218 <__aeabi_dsub>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8007fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10e      	bne.n	8008014 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8007ff6:	2306      	movs	r3, #6
 8007ff8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8007ffa:	e00b      	b.n	8008014 <_ftoa+0x184>
    buf[len++] = '0';
 8007ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	657a      	str	r2, [r7, #84]	; 0x54
 8008002:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008006:	4413      	add	r3, r2
 8008008:	2230      	movs	r2, #48	; 0x30
 800800a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800800e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008010:	3b01      	subs	r3, #1
 8008012:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8008014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008016:	2b1f      	cmp	r3, #31
 8008018:	d802      	bhi.n	8008020 <_ftoa+0x190>
 800801a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800801c:	2b09      	cmp	r3, #9
 800801e:	d8ed      	bhi.n	8007ffc <_ftoa+0x16c>
  }

  int whole = (int)value;
 8008020:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008024:	f7f8 fd5c 	bl	8000ae0 <__aeabi_d2iz>
 8008028:	4603      	mov	r3, r0
 800802a:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 800802c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800802e:	f7f8 fa41 	bl	80004b4 <__aeabi_i2d>
 8008032:	4603      	mov	r3, r0
 8008034:	460c      	mov	r4, r1
 8008036:	461a      	mov	r2, r3
 8008038:	4623      	mov	r3, r4
 800803a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800803e:	f7f8 f8eb 	bl	8000218 <__aeabi_dsub>
 8008042:	4603      	mov	r3, r0
 8008044:	460c      	mov	r4, r1
 8008046:	4618      	mov	r0, r3
 8008048:	4621      	mov	r1, r4
 800804a:	4a52      	ldr	r2, [pc, #328]	; (8008194 <_ftoa+0x304>)
 800804c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	4413      	add	r3, r2
 8008052:	cb18      	ldmia	r3, {r3, r4}
 8008054:	461a      	mov	r2, r3
 8008056:	4623      	mov	r3, r4
 8008058:	f7f8 fa92 	bl	8000580 <__aeabi_dmul>
 800805c:	4603      	mov	r3, r0
 800805e:	460c      	mov	r4, r1
 8008060:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8008064:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008068:	f7f8 fd62 	bl	8000b30 <__aeabi_d2uiz>
 800806c:	4603      	mov	r3, r0
 800806e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8008070:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008072:	f7f8 fa0f 	bl	8000494 <__aeabi_ui2d>
 8008076:	4603      	mov	r3, r0
 8008078:	460c      	mov	r4, r1
 800807a:	461a      	mov	r2, r3
 800807c:	4623      	mov	r3, r4
 800807e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008082:	f7f8 f8c9 	bl	8000218 <__aeabi_dsub>
 8008086:	4603      	mov	r3, r0
 8008088:	460c      	mov	r4, r1
 800808a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  if (diff > 0.5) {
 800808e:	f04f 0200 	mov.w	r2, #0
 8008092:	4b41      	ldr	r3, [pc, #260]	; (8008198 <_ftoa+0x308>)
 8008094:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008098:	f7f8 fd02 	bl	8000aa0 <__aeabi_dcmpgt>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d017      	beq.n	80080d2 <_ftoa+0x242>
    ++frac;
 80080a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080a4:	3301      	adds	r3, #1
 80080a6:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80080a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80080aa:	f7f8 f9f3 	bl	8000494 <__aeabi_ui2d>
 80080ae:	4a39      	ldr	r2, [pc, #228]	; (8008194 <_ftoa+0x304>)
 80080b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	4413      	add	r3, r2
 80080b6:	cb18      	ldmia	r3, {r3, r4}
 80080b8:	461a      	mov	r2, r3
 80080ba:	4623      	mov	r3, r4
 80080bc:	f7f8 fce6 	bl	8000a8c <__aeabi_dcmpge>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01a      	beq.n	80080fc <_ftoa+0x26c>
      frac = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 80080ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080cc:	3301      	adds	r3, #1
 80080ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d0:	e014      	b.n	80080fc <_ftoa+0x26c>
    }
  }
  else if (diff < 0.5) {
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	4b30      	ldr	r3, [pc, #192]	; (8008198 <_ftoa+0x308>)
 80080d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80080dc:	f7f8 fcc2 	bl	8000a64 <__aeabi_dcmplt>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <_ftoa+0x26c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80080e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d004      	beq.n	80080f6 <_ftoa+0x266>
 80080ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <_ftoa+0x26c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80080f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080f8:	3301      	adds	r3, #1
 80080fa:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 80080fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d14c      	bne.n	800819c <_ftoa+0x30c>
    diff = value - (double)whole;
 8008102:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008104:	f7f8 f9d6 	bl	80004b4 <__aeabi_i2d>
 8008108:	4603      	mov	r3, r0
 800810a:	460c      	mov	r4, r1
 800810c:	461a      	mov	r2, r3
 800810e:	4623      	mov	r3, r4
 8008110:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008114:	f7f8 f880 	bl	8000218 <__aeabi_dsub>
 8008118:	4603      	mov	r3, r0
 800811a:	460c      	mov	r4, r1
 800811c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8008120:	2301      	movs	r3, #1
 8008122:	461c      	mov	r4, r3
 8008124:	f04f 0200 	mov.w	r2, #0
 8008128:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <_ftoa+0x308>)
 800812a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800812e:	f7f8 fc99 	bl	8000a64 <__aeabi_dcmplt>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <_ftoa+0x2ac>
 8008138:	2300      	movs	r3, #0
 800813a:	461c      	mov	r4, r3
 800813c:	b2e3      	uxtb	r3, r4
 800813e:	f083 0301 	eor.w	r3, r3, #1
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d109      	bne.n	800815c <_ftoa+0x2cc>
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	4b12      	ldr	r3, [pc, #72]	; (8008198 <_ftoa+0x308>)
 800814e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008152:	f7f8 fca5 	bl	8000aa0 <__aeabi_dcmpgt>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d066      	beq.n	800822a <_ftoa+0x39a>
 800815c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8084 	beq.w	8008270 <_ftoa+0x3e0>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8008168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816a:	3301      	adds	r3, #1
 800816c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800816e:	e07f      	b.n	8008270 <_ftoa+0x3e0>
 8008170:	00000000 	.word	0x00000000
 8008174:	41cdcd65 	.word	0x41cdcd65
 8008178:	00000000 	.word	0x00000000
 800817c:	c1cdcd65 	.word	0xc1cdcd65
 8008180:	0800a274 	.word	0x0800a274
 8008184:	0800a278 	.word	0x0800a278
 8008188:	7fefffff 	.word	0x7fefffff
 800818c:	0800a280 	.word	0x0800a280
 8008190:	0800a288 	.word	0x0800a288
 8008194:	0800a290 	.word	0x0800a290
 8008198:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800819c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800819e:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80081a0:	e020      	b.n	80081e4 <_ftoa+0x354>
      --count;
 80081a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081a4:	3b01      	subs	r3, #1
 80081a6:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 80081a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081aa:	1c4b      	adds	r3, r1, #1
 80081ac:	657b      	str	r3, [r7, #84]	; 0x54
 80081ae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80081b0:	4b68      	ldr	r3, [pc, #416]	; (8008354 <_ftoa+0x4c4>)
 80081b2:	fba3 2300 	umull	r2, r3, r3, r0
 80081b6:	08da      	lsrs	r2, r3, #3
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	1ac2      	subs	r2, r0, r3
 80081c2:	b2d3      	uxtb	r3, r2
 80081c4:	3330      	adds	r3, #48	; 0x30
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081cc:	440b      	add	r3, r1
 80081ce:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80081d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d4:	4a5f      	ldr	r2, [pc, #380]	; (8008354 <_ftoa+0x4c4>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	08db      	lsrs	r3, r3, #3
 80081dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80081de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <_ftoa+0x35c>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80081e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e6:	2b1f      	cmp	r3, #31
 80081e8:	d9db      	bls.n	80081a2 <_ftoa+0x312>
 80081ea:	e00a      	b.n	8008202 <_ftoa+0x372>
        break;
 80081ec:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80081ee:	e008      	b.n	8008202 <_ftoa+0x372>
      buf[len++] = '0';
 80081f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	657a      	str	r2, [r7, #84]	; 0x54
 80081f6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80081fa:	4413      	add	r3, r2
 80081fc:	2230      	movs	r2, #48	; 0x30
 80081fe:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8008202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008204:	2b1f      	cmp	r3, #31
 8008206:	d804      	bhi.n	8008212 <_ftoa+0x382>
 8008208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820a:	1e5a      	subs	r2, r3, #1
 800820c:	647a      	str	r2, [r7, #68]	; 0x44
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1ee      	bne.n	80081f0 <_ftoa+0x360>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008214:	2b1f      	cmp	r3, #31
 8008216:	d82b      	bhi.n	8008270 <_ftoa+0x3e0>
      // add decimal
      buf[len++] = '.';
 8008218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	657a      	str	r2, [r7, #84]	; 0x54
 800821e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008222:	4413      	add	r3, r2
 8008224:	222e      	movs	r2, #46	; 0x2e
 8008226:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800822a:	e021      	b.n	8008270 <_ftoa+0x3e0>
    buf[len++] = (char)(48 + (whole % 10));
 800822c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	657b      	str	r3, [r7, #84]	; 0x54
 8008232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008234:	4b48      	ldr	r3, [pc, #288]	; (8008358 <_ftoa+0x4c8>)
 8008236:	fb83 1302 	smull	r1, r3, r3, r2
 800823a:	1099      	asrs	r1, r3, #2
 800823c:	17d3      	asrs	r3, r2, #31
 800823e:	1ac9      	subs	r1, r1, r3
 8008240:	460b      	mov	r3, r1
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	1ad1      	subs	r1, r2, r3
 800824a:	b2cb      	uxtb	r3, r1
 800824c:	3330      	adds	r3, #48	; 0x30
 800824e:	b2da      	uxtb	r2, r3
 8008250:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008254:	4403      	add	r3, r0
 8008256:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800825a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825c:	4a3e      	ldr	r2, [pc, #248]	; (8008358 <_ftoa+0x4c8>)
 800825e:	fb82 1203 	smull	r1, r2, r2, r3
 8008262:	1092      	asrs	r2, r2, #2
 8008264:	17db      	asrs	r3, r3, #31
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800826a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <_ftoa+0x3e8>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008272:	2b1f      	cmp	r3, #31
 8008274:	d9da      	bls.n	800822c <_ftoa+0x39c>
 8008276:	e000      	b.n	800827a <_ftoa+0x3ea>
      break;
 8008278:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800827a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d124      	bne.n	80082ce <_ftoa+0x43e>
 8008284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01f      	beq.n	80082ce <_ftoa+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800828e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008290:	2b00      	cmp	r3, #0
 8008292:	d015      	beq.n	80082c0 <_ftoa+0x430>
 8008294:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008298:	2b00      	cmp	r3, #0
 800829a:	d104      	bne.n	80082a6 <_ftoa+0x416>
 800829c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800829e:	f003 030c 	and.w	r3, r3, #12
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00c      	beq.n	80082c0 <_ftoa+0x430>
      width--;
 80082a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082a8:	3b01      	subs	r3, #1
 80082aa:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80082ac:	e008      	b.n	80082c0 <_ftoa+0x430>
      buf[len++] = '0';
 80082ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	657a      	str	r2, [r7, #84]	; 0x54
 80082b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80082b8:	4413      	add	r3, r2
 80082ba:	2230      	movs	r2, #48	; 0x30
 80082bc:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80082c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d202      	bcs.n	80082ce <_ftoa+0x43e>
 80082c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ca:	2b1f      	cmp	r3, #31
 80082cc:	d9ef      	bls.n	80082ae <_ftoa+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80082ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082d0:	2b1f      	cmp	r3, #31
 80082d2:	d82a      	bhi.n	800832a <_ftoa+0x49a>
    if (negative) {
 80082d4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <_ftoa+0x460>
      buf[len++] = '-';
 80082dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	657a      	str	r2, [r7, #84]	; 0x54
 80082e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80082e6:	4413      	add	r3, r2
 80082e8:	222d      	movs	r2, #45	; 0x2d
 80082ea:	f803 2c48 	strb.w	r2, [r3, #-72]
 80082ee:	e01c      	b.n	800832a <_ftoa+0x49a>
    }
    else if (flags & FLAGS_PLUS) {
 80082f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f2:	f003 0304 	and.w	r3, r3, #4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d009      	beq.n	800830e <_ftoa+0x47e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80082fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	657a      	str	r2, [r7, #84]	; 0x54
 8008300:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008304:	4413      	add	r3, r2
 8008306:	222b      	movs	r2, #43	; 0x2b
 8008308:	f803 2c48 	strb.w	r2, [r3, #-72]
 800830c:	e00d      	b.n	800832a <_ftoa+0x49a>
    }
    else if (flags & FLAGS_SPACE) {
 800830e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d008      	beq.n	800832a <_ftoa+0x49a>
      buf[len++] = ' ';
 8008318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	657a      	str	r2, [r7, #84]	; 0x54
 800831e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008322:	4413      	add	r3, r2
 8008324:	2220      	movs	r2, #32
 8008326:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800832a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800832c:	9303      	str	r3, [sp, #12]
 800832e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	f107 0310 	add.w	r3, r7, #16
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f7ff fba2 	bl	8007a8c <_out_rev>
 8008348:	4603      	mov	r3, r0
}
 800834a:	4618      	mov	r0, r3
 800834c:	375c      	adds	r7, #92	; 0x5c
 800834e:	46bd      	mov	sp, r7
 8008350:	bd90      	pop	{r4, r7, pc}
 8008352:	bf00      	nop
 8008354:	cccccccd 	.word	0xcccccccd
 8008358:	66666667 	.word	0x66666667
 800835c:	00000000 	.word	0x00000000

08008360 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	b09b      	sub	sp, #108	; 0x6c
 8008366:	af06      	add	r7, sp, #24
 8008368:	6178      	str	r0, [r7, #20]
 800836a:	6139      	str	r1, [r7, #16]
 800836c:	60fa      	str	r2, [r7, #12]
 800836e:	60bb      	str	r3, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8008370:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008374:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008378:	f7f8 fb6a 	bl	8000a50 <__aeabi_dcmpeq>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d014      	beq.n	80083ac <_etoa+0x4c>
 8008382:	f04f 32ff 	mov.w	r2, #4294967295
 8008386:	4bc0      	ldr	r3, [pc, #768]	; (8008688 <_etoa+0x328>)
 8008388:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800838c:	f7f8 fb88 	bl	8000aa0 <__aeabi_dcmpgt>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10a      	bne.n	80083ac <_etoa+0x4c>
 8008396:	f04f 32ff 	mov.w	r2, #4294967295
 800839a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800839e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80083a2:	f7f8 fb5f 	bl	8000a64 <__aeabi_dcmplt>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d014      	beq.n	80083d6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80083ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083b6:	9303      	str	r3, [sp, #12]
 80083b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083bc:	9302      	str	r3, [sp, #8]
 80083be:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80083c2:	e88d 0018 	stmia.w	sp, {r3, r4}
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	6939      	ldr	r1, [r7, #16]
 80083cc:	6978      	ldr	r0, [r7, #20]
 80083ce:	f7ff fd5f 	bl	8007e90 <_ftoa>
 80083d2:	4603      	mov	r3, r0
 80083d4:	e241      	b.n	800885a <_etoa+0x4fa>
  }

  // determine the sign
  const bool negative = value < 0;
 80083d6:	2301      	movs	r3, #1
 80083d8:	461e      	mov	r6, r3
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80083e6:	f7f8 fb3d 	bl	8000a64 <__aeabi_dcmplt>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <_etoa+0x94>
 80083f0:	2300      	movs	r3, #0
 80083f2:	461e      	mov	r6, r3
 80083f4:	f887 6043 	strb.w	r6, [r7, #67]	; 0x43
  if (negative) {
 80083f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <_etoa+0xac>
    value = -value;
 8008400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008402:	67bb      	str	r3, [r7, #120]	; 0x78
 8008404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008406:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800840a:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800840c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008414:	2b00      	cmp	r3, #0
 8008416:	d102      	bne.n	800841e <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8008418:	2306      	movs	r3, #6
 800841a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800841e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008422:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8008426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800842a:	ea4f 5813 	mov.w	r8, r3, lsr #20
 800842e:	f04f 0900 	mov.w	r9, #0
 8008432:	4643      	mov	r3, r8
 8008434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008438:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800843c:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800843e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008442:	f04f 30ff 	mov.w	r0, #4294967295
 8008446:	4991      	ldr	r1, [pc, #580]	; (800868c <_etoa+0x32c>)
 8008448:	ea02 0200 	and.w	r2, r2, r0
 800844c:	ea03 0301 	and.w	r3, r3, r1
 8008450:	f04f 0000 	mov.w	r0, #0
 8008454:	498e      	ldr	r1, [pc, #568]	; (8008690 <_etoa+0x330>)
 8008456:	ea42 0200 	orr.w	r2, r2, r0
 800845a:	ea43 0301 	orr.w	r3, r3, r1
 800845e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8008462:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008464:	f7f8 f826 	bl	80004b4 <__aeabi_i2d>
 8008468:	a37b      	add	r3, pc, #492	; (adr r3, 8008658 <_etoa+0x2f8>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f7f8 f887 	bl	8000580 <__aeabi_dmul>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4610      	mov	r0, r2
 8008478:	4619      	mov	r1, r3
 800847a:	a379      	add	r3, pc, #484	; (adr r3, 8008660 <_etoa+0x300>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f7f7 fecc 	bl	800021c <__adddf3>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4690      	mov	r8, r2
 800848a:	4699      	mov	r9, r3
 800848c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	4b7f      	ldr	r3, [pc, #508]	; (8008694 <_etoa+0x334>)
 8008496:	f7f7 febf 	bl	8000218 <__aeabi_dsub>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	a371      	add	r3, pc, #452	; (adr r3, 8008668 <_etoa+0x308>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f8 f86a 	bl	8000580 <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4640      	mov	r0, r8
 80084b2:	4649      	mov	r1, r9
 80084b4:	f7f7 feb2 	bl	800021c <__adddf3>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4610      	mov	r0, r2
 80084be:	4619      	mov	r1, r3
 80084c0:	f7f8 fb0e 	bl	8000ae0 <__aeabi_d2iz>
 80084c4:	4603      	mov	r3, r0
 80084c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80084c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084ca:	f7f7 fff3 	bl	80004b4 <__aeabi_i2d>
 80084ce:	a368      	add	r3, pc, #416	; (adr r3, 8008670 <_etoa+0x310>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	f7f8 f854 	bl	8000580 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4610      	mov	r0, r2
 80084de:	4619      	mov	r1, r3
 80084e0:	f04f 0200 	mov.w	r2, #0
 80084e4:	4b6c      	ldr	r3, [pc, #432]	; (8008698 <_etoa+0x338>)
 80084e6:	f7f7 fe99 	bl	800021c <__adddf3>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	4610      	mov	r0, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	f7f8 faf5 	bl	8000ae0 <__aeabi_d2iz>
 80084f6:	4603      	mov	r3, r0
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80084fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80084fc:	f7f7 ffda 	bl	80004b4 <__aeabi_i2d>
 8008500:	a35d      	add	r3, pc, #372	; (adr r3, 8008678 <_etoa+0x318>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f8 f83b 	bl	8000580 <__aeabi_dmul>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4690      	mov	r8, r2
 8008510:	4699      	mov	r9, r3
 8008512:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008514:	f7f7 ffce 	bl	80004b4 <__aeabi_i2d>
 8008518:	a359      	add	r3, pc, #356	; (adr r3, 8008680 <_etoa+0x320>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f7f8 f82f 	bl	8000580 <__aeabi_dmul>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4640      	mov	r0, r8
 8008528:	4649      	mov	r1, r9
 800852a:	f7f7 fe75 	bl	8000218 <__aeabi_dsub>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  const double z2 = z * z;
 8008536:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800853a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800853e:	f7f8 f81f 	bl	8000580 <__aeabi_dmul>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8008550:	461a      	mov	r2, r3
 8008552:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8008556:	0515      	lsls	r5, r2, #20
 8008558:	2400      	movs	r4, #0
 800855a:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800855e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8008562:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	f7f7 fe57 	bl	800021c <__adddf3>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4690      	mov	r8, r2
 8008574:	4699      	mov	r9, r3
 8008576:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800857a:	f04f 0000 	mov.w	r0, #0
 800857e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008582:	f7f7 fe49 	bl	8000218 <__aeabi_dsub>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4692      	mov	sl, r2
 800858c:	469b      	mov	fp, r3
 800858e:	f04f 0200 	mov.w	r2, #0
 8008592:	4b42      	ldr	r3, [pc, #264]	; (800869c <_etoa+0x33c>)
 8008594:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008598:	f7f8 f91c 	bl	80007d4 <__aeabi_ddiv>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4610      	mov	r0, r2
 80085a2:	4619      	mov	r1, r3
 80085a4:	f04f 0200 	mov.w	r2, #0
 80085a8:	4b3d      	ldr	r3, [pc, #244]	; (80086a0 <_etoa+0x340>)
 80085aa:	f7f7 fe37 	bl	800021c <__adddf3>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80085b6:	f7f8 f90d 	bl	80007d4 <__aeabi_ddiv>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4610      	mov	r0, r2
 80085c0:	4619      	mov	r1, r3
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	4b37      	ldr	r3, [pc, #220]	; (80086a4 <_etoa+0x344>)
 80085c8:	f7f7 fe28 	bl	800021c <__adddf3>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80085d4:	f7f8 f8fe 	bl	80007d4 <__aeabi_ddiv>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4650      	mov	r0, sl
 80085de:	4659      	mov	r1, fp
 80085e0:	f7f7 fe1c 	bl	800021c <__adddf3>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4640      	mov	r0, r8
 80085ea:	4649      	mov	r1, r9
 80085ec:	f7f8 f8f2 	bl	80007d4 <__aeabi_ddiv>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4610      	mov	r0, r2
 80085f6:	4619      	mov	r1, r3
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	4b24      	ldr	r3, [pc, #144]	; (8008690 <_etoa+0x330>)
 80085fe:	f7f7 fe0d 	bl	800021c <__adddf3>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4620      	mov	r0, r4
 8008608:	4629      	mov	r1, r5
 800860a:	f7f7 ffb9 	bl	8000580 <__aeabi_dmul>
 800860e:	4603      	mov	r3, r0
 8008610:	460c      	mov	r4, r1
 8008612:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8008616:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800861a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800861e:	f7f8 fa3f 	bl	8000aa0 <__aeabi_dcmpgt>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00d      	beq.n	8008644 <_etoa+0x2e4>
    expval--;
 8008628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862a:	3b01      	subs	r3, #1
 800862c:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800862e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008632:	f04f 0200 	mov.w	r2, #0
 8008636:	4b1a      	ldr	r3, [pc, #104]	; (80086a0 <_etoa+0x340>)
 8008638:	f7f8 f8cc 	bl	80007d4 <__aeabi_ddiv>
 800863c:	4603      	mov	r3, r0
 800863e:	460c      	mov	r4, r1
 8008640:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8008644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008646:	2b63      	cmp	r3, #99	; 0x63
 8008648:	dc2e      	bgt.n	80086a8 <_etoa+0x348>
 800864a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8008650:	db2a      	blt.n	80086a8 <_etoa+0x348>
 8008652:	2304      	movs	r3, #4
 8008654:	e029      	b.n	80086aa <_etoa+0x34a>
 8008656:	bf00      	nop
 8008658:	509f79fb 	.word	0x509f79fb
 800865c:	3fd34413 	.word	0x3fd34413
 8008660:	8b60c8b3 	.word	0x8b60c8b3
 8008664:	3fc68a28 	.word	0x3fc68a28
 8008668:	636f4361 	.word	0x636f4361
 800866c:	3fd287a7 	.word	0x3fd287a7
 8008670:	0979a371 	.word	0x0979a371
 8008674:	400a934f 	.word	0x400a934f
 8008678:	bbb55516 	.word	0xbbb55516
 800867c:	40026bb1 	.word	0x40026bb1
 8008680:	fefa39ef 	.word	0xfefa39ef
 8008684:	3fe62e42 	.word	0x3fe62e42
 8008688:	7fefffff 	.word	0x7fefffff
 800868c:	000fffff 	.word	0x000fffff
 8008690:	3ff00000 	.word	0x3ff00000
 8008694:	3ff80000 	.word	0x3ff80000
 8008698:	3fe00000 	.word	0x3fe00000
 800869c:	402c0000 	.word	0x402c0000
 80086a0:	40240000 	.word	0x40240000
 80086a4:	40180000 	.word	0x40180000
 80086a8:	2305      	movs	r3, #5
 80086aa:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80086ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d03d      	beq.n	8008734 <_etoa+0x3d4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80086b8:	a36b      	add	r3, pc, #428	; (adr r3, 8008868 <_etoa+0x508>)
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80086c2:	f7f8 f9e3 	bl	8000a8c <__aeabi_dcmpge>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d024      	beq.n	8008716 <_etoa+0x3b6>
 80086cc:	a368      	add	r3, pc, #416	; (adr r3, 8008870 <_etoa+0x510>)
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80086d6:	f7f8 f9c5 	bl	8000a64 <__aeabi_dcmplt>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d01a      	beq.n	8008716 <_etoa+0x3b6>
      if ((int)prec > expval) {
 80086e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e6:	429a      	cmp	r2, r3
 80086e8:	dd07      	ble.n	80086fa <_etoa+0x39a>
        prec = (unsigned)((int)prec - expval - 1);
 80086ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086f8:	e002      	b.n	8008700 <_etoa+0x3a0>
      }
      else {
        prec = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8008700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008714:	e00e      	b.n	8008734 <_etoa+0x3d4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8008716:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <_etoa+0x3d4>
 800871e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008726:	2b00      	cmp	r3, #0
 8008728:	d004      	beq.n	8008734 <_etoa+0x3d4>
        --prec;
 800872a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800872e:	3b01      	subs	r3, #1
 8008730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8008734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008738:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800873a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800873e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008740:	429a      	cmp	r2, r3
 8008742:	d904      	bls.n	800874e <_etoa+0x3ee>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8008744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	647b      	str	r3, [r7, #68]	; 0x44
 800874c:	e001      	b.n	8008752 <_etoa+0x3f2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8008752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d004      	beq.n	8008768 <_etoa+0x408>
 800875e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <_etoa+0x408>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 8008768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00b      	beq.n	8008786 <_etoa+0x426>
    value /= conv.F;
 800876e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008772:	461a      	mov	r2, r3
 8008774:	4623      	mov	r3, r4
 8008776:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800877a:	f7f8 f82b 	bl	80007d4 <__aeabi_ddiv>
 800877e:	4603      	mov	r3, r0
 8008780:	460c      	mov	r4, r1
 8008782:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
  }

  // output the floating part
  const size_t start_idx = idx;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800878a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800878e:	2b00      	cmp	r3, #0
 8008790:	d006      	beq.n	80087a0 <_etoa+0x440>
 8008792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008794:	603b      	str	r3, [r7, #0]
 8008796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008798:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800879c:	607b      	str	r3, [r7, #4]
 800879e:	e003      	b.n	80087a8 <_etoa+0x448>
 80087a0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80087a4:	e887 0018 	stmia.w	r7, {r3, r4}
 80087a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087b4:	9303      	str	r3, [sp, #12]
 80087b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087ba:	9302      	str	r3, [sp, #8]
 80087bc:	e897 0018 	ldmia.w	r7, {r3, r4}
 80087c0:	e88d 0018 	stmia.w	sp, {r3, r4}
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	6939      	ldr	r1, [r7, #16]
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	f7ff fb60 	bl	8007e90 <_ftoa>
 80087d0:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 80087d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d03f      	beq.n	8008858 <_etoa+0x4f8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80087d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <_etoa+0x488>
 80087e4:	2045      	movs	r0, #69	; 0x45
 80087e6:	e000      	b.n	80087ea <_etoa+0x48a>
 80087e8:	2065      	movs	r0, #101	; 0x65
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	1c53      	adds	r3, r2, #1
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	697c      	ldr	r4, [r7, #20]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	6939      	ldr	r1, [r7, #16]
 80087f6:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80087f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bfb8      	it	lt
 80087fe:	425b      	neglt	r3, r3
 8008800:	4618      	mov	r0, r3
 8008802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008804:	0fdb      	lsrs	r3, r3, #31
 8008806:	b2db      	uxtb	r3, r3
 8008808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800880a:	3a01      	subs	r2, #1
 800880c:	2105      	movs	r1, #5
 800880e:	9105      	str	r1, [sp, #20]
 8008810:	9204      	str	r2, [sp, #16]
 8008812:	2200      	movs	r2, #0
 8008814:	9203      	str	r2, [sp, #12]
 8008816:	220a      	movs	r2, #10
 8008818:	9202      	str	r2, [sp, #8]
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	9000      	str	r0, [sp, #0]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	6939      	ldr	r1, [r7, #16]
 8008824:	6978      	ldr	r0, [r7, #20]
 8008826:	f7ff fa5d 	bl	8007ce4 <_ntoa_long>
 800882a:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800882c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00f      	beq.n	8008858 <_etoa+0x4f8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8008838:	e007      	b.n	800884a <_etoa+0x4ea>
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	1c53      	adds	r3, r2, #1
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	697c      	ldr	r4, [r7, #20]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	6939      	ldr	r1, [r7, #16]
 8008846:	2020      	movs	r0, #32
 8008848:	47a0      	blx	r4
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008854:	429a      	cmp	r2, r3
 8008856:	d3f0      	bcc.n	800883a <_etoa+0x4da>
    }
  }
  return idx;
 8008858:	68fb      	ldr	r3, [r7, #12]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3754      	adds	r7, #84	; 0x54
 800885e:	46bd      	mov	sp, r7
 8008860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008864:	f3af 8000 	nop.w
 8008868:	eb1c432d 	.word	0xeb1c432d
 800886c:	3f1a36e2 	.word	0x3f1a36e2
 8008870:	00000000 	.word	0x00000000
 8008874:	412e8480 	.word	0x412e8480

08008878 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8008878:	b5b0      	push	{r4, r5, r7, lr}
 800887a:	b0a0      	sub	sp, #128	; 0x80
 800887c:	af0a      	add	r7, sp, #40	; 0x28
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f040 8488 	bne.w	80091a2 <_vsnprintf+0x92a>
    // use null output function
    out = _out_null;
 8008892:	4ba0      	ldr	r3, [pc, #640]	; (8008b14 <_vsnprintf+0x29c>)
 8008894:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8008896:	f000 bc84 	b.w	80091a2 <_vsnprintf+0x92a>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b25      	cmp	r3, #37	; 0x25
 80088a0:	d00d      	beq.n	80088be <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	7818      	ldrb	r0, [r3, #0]
 80088a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088a8:	1c53      	adds	r3, r2, #1
 80088aa:	647b      	str	r3, [r7, #68]	; 0x44
 80088ac:	68fc      	ldr	r4, [r7, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	47a0      	blx	r4
      format++;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	3301      	adds	r3, #1
 80088b8:	603b      	str	r3, [r7, #0]
      continue;
 80088ba:	f000 bc72 	b.w	80091a2 <_vsnprintf+0x92a>
    }
    else {
      // yes, evaluate it
      format++;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	3301      	adds	r3, #1
 80088c2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	3b20      	subs	r3, #32
 80088ce:	2b10      	cmp	r3, #16
 80088d0:	d856      	bhi.n	8008980 <_vsnprintf+0x108>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <_vsnprintf+0x60>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	08008959 	.word	0x08008959
 80088dc:	08008981 	.word	0x08008981
 80088e0:	08008981 	.word	0x08008981
 80088e4:	0800896d 	.word	0x0800896d
 80088e8:	08008981 	.word	0x08008981
 80088ec:	08008981 	.word	0x08008981
 80088f0:	08008981 	.word	0x08008981
 80088f4:	08008981 	.word	0x08008981
 80088f8:	08008981 	.word	0x08008981
 80088fc:	08008981 	.word	0x08008981
 8008900:	08008981 	.word	0x08008981
 8008904:	08008945 	.word	0x08008945
 8008908:	08008981 	.word	0x08008981
 800890c:	08008931 	.word	0x08008931
 8008910:	08008981 	.word	0x08008981
 8008914:	08008981 	.word	0x08008981
 8008918:	0800891d 	.word	0x0800891d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800891c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800891e:	f043 0301 	orr.w	r3, r3, #1
 8008922:	657b      	str	r3, [r7, #84]	; 0x54
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	3301      	adds	r3, #1
 8008928:	603b      	str	r3, [r7, #0]
 800892a:	2301      	movs	r3, #1
 800892c:	64bb      	str	r3, [r7, #72]	; 0x48
 800892e:	e02a      	b.n	8008986 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8008930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008932:	f043 0302 	orr.w	r3, r3, #2
 8008936:	657b      	str	r3, [r7, #84]	; 0x54
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	3301      	adds	r3, #1
 800893c:	603b      	str	r3, [r7, #0]
 800893e:	2301      	movs	r3, #1
 8008940:	64bb      	str	r3, [r7, #72]	; 0x48
 8008942:	e020      	b.n	8008986 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8008944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008946:	f043 0304 	orr.w	r3, r3, #4
 800894a:	657b      	str	r3, [r7, #84]	; 0x54
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	3301      	adds	r3, #1
 8008950:	603b      	str	r3, [r7, #0]
 8008952:	2301      	movs	r3, #1
 8008954:	64bb      	str	r3, [r7, #72]	; 0x48
 8008956:	e016      	b.n	8008986 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8008958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800895a:	f043 0308 	orr.w	r3, r3, #8
 800895e:	657b      	str	r3, [r7, #84]	; 0x54
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	3301      	adds	r3, #1
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	2301      	movs	r3, #1
 8008968:	64bb      	str	r3, [r7, #72]	; 0x48
 800896a:	e00c      	b.n	8008986 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800896c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800896e:	f043 0310 	orr.w	r3, r3, #16
 8008972:	657b      	str	r3, [r7, #84]	; 0x54
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	3301      	adds	r3, #1
 8008978:	603b      	str	r3, [r7, #0]
 800897a:	2301      	movs	r3, #1
 800897c:	64bb      	str	r3, [r7, #72]	; 0x48
 800897e:	e002      	b.n	8008986 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8008980:	2300      	movs	r3, #0
 8008982:	64bb      	str	r3, [r7, #72]	; 0x48
 8008984:	bf00      	nop
      }
    } while (n);
 8008986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008988:	2b00      	cmp	r3, #0
 800898a:	d19d      	bne.n	80088c8 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff f83f 	bl	8007a18 <_is_digit>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <_vsnprintf+0x134>
      width = _atoi(&format);
 80089a0:	463b      	mov	r3, r7
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7ff f84e 	bl	8007a44 <_atoi>
 80089a8:	6538      	str	r0, [r7, #80]	; 0x50
 80089aa:	e018      	b.n	80089de <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b2a      	cmp	r3, #42	; 0x2a
 80089b2:	d114      	bne.n	80089de <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 80089b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089b6:	1d1a      	adds	r2, r3, #4
 80089b8:	66ba      	str	r2, [r7, #104]	; 0x68
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	da07      	bge.n	80089d4 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 80089c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c6:	f043 0302 	orr.w	r3, r3, #2
 80089ca:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	425b      	negs	r3, r3
 80089d0:	653b      	str	r3, [r7, #80]	; 0x50
 80089d2:	e001      	b.n	80089d8 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	3301      	adds	r3, #1
 80089dc:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b2e      	cmp	r3, #46	; 0x2e
 80089e8:	d124      	bne.n	8008a34 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80089ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089f0:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff f80b 	bl	8007a18 <_is_digit>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8008a08:	463b      	mov	r3, r7
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff f81a 	bl	8007a44 <_atoi>
 8008a10:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008a12:	e00f      	b.n	8008a34 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2b2a      	cmp	r3, #42	; 0x2a
 8008a1a:	d10b      	bne.n	8008a34 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8008a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	66ba      	str	r2, [r7, #104]	; 0x68
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	3301      	adds	r3, #1
 8008a32:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	3b68      	subs	r3, #104	; 0x68
 8008a3a:	2b12      	cmp	r3, #18
 8008a3c:	d866      	bhi.n	8008b0c <_vsnprintf+0x294>
 8008a3e:	a201      	add	r2, pc, #4	; (adr r2, 8008a44 <_vsnprintf+0x1cc>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008ab7 	.word	0x08008ab7
 8008a48:	08008b0d 	.word	0x08008b0d
 8008a4c:	08008aed 	.word	0x08008aed
 8008a50:	08008b0d 	.word	0x08008b0d
 8008a54:	08008a91 	.word	0x08008a91
 8008a58:	08008b0d 	.word	0x08008b0d
 8008a5c:	08008b0d 	.word	0x08008b0d
 8008a60:	08008b0d 	.word	0x08008b0d
 8008a64:	08008b0d 	.word	0x08008b0d
 8008a68:	08008b0d 	.word	0x08008b0d
 8008a6c:	08008b0d 	.word	0x08008b0d
 8008a70:	08008b0d 	.word	0x08008b0d
 8008a74:	08008add 	.word	0x08008add
 8008a78:	08008b0d 	.word	0x08008b0d
 8008a7c:	08008b0d 	.word	0x08008b0d
 8008a80:	08008b0d 	.word	0x08008b0d
 8008a84:	08008b0d 	.word	0x08008b0d
 8008a88:	08008b0d 	.word	0x08008b0d
 8008a8c:	08008afd 	.word	0x08008afd
      case 'l' :
        flags |= FLAGS_LONG;
 8008a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a96:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	2b6c      	cmp	r3, #108	; 0x6c
 8008aa4:	d134      	bne.n	8008b10 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8008aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008aac:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	603b      	str	r3, [r7, #0]
        }
        break;
 8008ab4:	e02c      	b.n	8008b10 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8008ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b68      	cmp	r3, #104	; 0x68
 8008aca:	d125      	bne.n	8008b18 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8008acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad2:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	603b      	str	r3, [r7, #0]
        }
        break;
 8008ada:	e01d      	b.n	8008b18 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ae2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	603b      	str	r3, [r7, #0]
        break;
 8008aea:	e016      	b.n	8008b1a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008af2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	3301      	adds	r3, #1
 8008af8:	603b      	str	r3, [r7, #0]
        break;
 8008afa:	e00e      	b.n	8008b1a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b02:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	3301      	adds	r3, #1
 8008b08:	603b      	str	r3, [r7, #0]
        break;
 8008b0a:	e006      	b.n	8008b1a <_vsnprintf+0x2a2>
      default :
        break;
 8008b0c:	bf00      	nop
 8008b0e:	e004      	b.n	8008b1a <_vsnprintf+0x2a2>
        break;
 8008b10:	bf00      	nop
 8008b12:	e002      	b.n	8008b1a <_vsnprintf+0x2a2>
 8008b14:	080079a1 	.word	0x080079a1
        break;
 8008b18:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	3b25      	subs	r3, #37	; 0x25
 8008b20:	2b53      	cmp	r3, #83	; 0x53
 8008b22:	f200 8331 	bhi.w	8009188 <_vsnprintf+0x910>
 8008b26:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <_vsnprintf+0x2b4>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08009171 	.word	0x08009171
 8008b30:	08009189 	.word	0x08009189
 8008b34:	08009189 	.word	0x08009189
 8008b38:	08009189 	.word	0x08009189
 8008b3c:	08009189 	.word	0x08009189
 8008b40:	08009189 	.word	0x08009189
 8008b44:	08009189 	.word	0x08009189
 8008b48:	08009189 	.word	0x08009189
 8008b4c:	08009189 	.word	0x08009189
 8008b50:	08009189 	.word	0x08009189
 8008b54:	08009189 	.word	0x08009189
 8008b58:	08009189 	.word	0x08009189
 8008b5c:	08009189 	.word	0x08009189
 8008b60:	08009189 	.word	0x08009189
 8008b64:	08009189 	.word	0x08009189
 8008b68:	08009189 	.word	0x08009189
 8008b6c:	08009189 	.word	0x08009189
 8008b70:	08009189 	.word	0x08009189
 8008b74:	08009189 	.word	0x08009189
 8008b78:	08009189 	.word	0x08009189
 8008b7c:	08009189 	.word	0x08009189
 8008b80:	08009189 	.word	0x08009189
 8008b84:	08009189 	.word	0x08009189
 8008b88:	08009189 	.word	0x08009189
 8008b8c:	08009189 	.word	0x08009189
 8008b90:	08009189 	.word	0x08009189
 8008b94:	08009189 	.word	0x08009189
 8008b98:	08009189 	.word	0x08009189
 8008b9c:	08009189 	.word	0x08009189
 8008ba0:	08009189 	.word	0x08009189
 8008ba4:	08009189 	.word	0x08009189
 8008ba8:	08009189 	.word	0x08009189
 8008bac:	08008f4b 	.word	0x08008f4b
 8008bb0:	08008f05 	.word	0x08008f05
 8008bb4:	08008f4b 	.word	0x08008f4b
 8008bb8:	08009189 	.word	0x08009189
 8008bbc:	08009189 	.word	0x08009189
 8008bc0:	08009189 	.word	0x08009189
 8008bc4:	08009189 	.word	0x08009189
 8008bc8:	08009189 	.word	0x08009189
 8008bcc:	08009189 	.word	0x08009189
 8008bd0:	08009189 	.word	0x08009189
 8008bd4:	08009189 	.word	0x08009189
 8008bd8:	08009189 	.word	0x08009189
 8008bdc:	08009189 	.word	0x08009189
 8008be0:	08009189 	.word	0x08009189
 8008be4:	08009189 	.word	0x08009189
 8008be8:	08009189 	.word	0x08009189
 8008bec:	08009189 	.word	0x08009189
 8008bf0:	08009189 	.word	0x08009189
 8008bf4:	08009189 	.word	0x08009189
 8008bf8:	08008c7d 	.word	0x08008c7d
 8008bfc:	08009189 	.word	0x08009189
 8008c00:	08009189 	.word	0x08009189
 8008c04:	08009189 	.word	0x08009189
 8008c08:	08009189 	.word	0x08009189
 8008c0c:	08009189 	.word	0x08009189
 8008c10:	08009189 	.word	0x08009189
 8008c14:	08009189 	.word	0x08009189
 8008c18:	08009189 	.word	0x08009189
 8008c1c:	08009189 	.word	0x08009189
 8008c20:	08008c7d 	.word	0x08008c7d
 8008c24:	08008fb1 	.word	0x08008fb1
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008f4b 	.word	0x08008f4b
 8008c30:	08008f05 	.word	0x08008f05
 8008c34:	08008f4b 	.word	0x08008f4b
 8008c38:	08009189 	.word	0x08009189
 8008c3c:	08008c7d 	.word	0x08008c7d
 8008c40:	08009189 	.word	0x08009189
 8008c44:	08009189 	.word	0x08009189
 8008c48:	08009189 	.word	0x08009189
 8008c4c:	08009189 	.word	0x08009189
 8008c50:	08009189 	.word	0x08009189
 8008c54:	08008c7d 	.word	0x08008c7d
 8008c58:	080090e9 	.word	0x080090e9
 8008c5c:	08009189 	.word	0x08009189
 8008c60:	08009189 	.word	0x08009189
 8008c64:	08009025 	.word	0x08009025
 8008c68:	08009189 	.word	0x08009189
 8008c6c:	08008c7d 	.word	0x08008c7d
 8008c70:	08009189 	.word	0x08009189
 8008c74:	08009189 	.word	0x08009189
 8008c78:	08008c7d 	.word	0x08008c7d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b78      	cmp	r3, #120	; 0x78
 8008c82:	d003      	beq.n	8008c8c <_vsnprintf+0x414>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b58      	cmp	r3, #88	; 0x58
 8008c8a:	d102      	bne.n	8008c92 <_vsnprintf+0x41a>
          base = 16U;
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8008c90:	e013      	b.n	8008cba <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b6f      	cmp	r3, #111	; 0x6f
 8008c98:	d102      	bne.n	8008ca0 <_vsnprintf+0x428>
          base =  8U;
 8008c9a:	2308      	movs	r3, #8
 8008c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c9e:	e00c      	b.n	8008cba <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b62      	cmp	r3, #98	; 0x62
 8008ca6:	d102      	bne.n	8008cae <_vsnprintf+0x436>
          base =  2U;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	643b      	str	r3, [r7, #64]	; 0x40
 8008cac:	e005      	b.n	8008cba <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8008cae:	230a      	movs	r3, #10
 8008cb0:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8008cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cb4:	f023 0310 	bic.w	r3, r3, #16
 8008cb8:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b58      	cmp	r3, #88	; 0x58
 8008cc0:	d103      	bne.n	8008cca <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8008cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cc4:	f043 0320 	orr.w	r3, r3, #32
 8008cc8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b69      	cmp	r3, #105	; 0x69
 8008cd0:	d007      	beq.n	8008ce2 <_vsnprintf+0x46a>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b64      	cmp	r3, #100	; 0x64
 8008cd8:	d003      	beq.n	8008ce2 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8008cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cdc:	f023 030c 	bic.w	r3, r3, #12
 8008ce0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8008ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8008cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cee:	f023 0301 	bic.w	r3, r3, #1
 8008cf2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b69      	cmp	r3, #105	; 0x69
 8008cfa:	d004      	beq.n	8008d06 <_vsnprintf+0x48e>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b64      	cmp	r3, #100	; 0x64
 8008d02:	f040 808c 	bne.w	8008e1e <_vsnprintf+0x5a6>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8008d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d02d      	beq.n	8008d6c <_vsnprintf+0x4f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8008d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d12:	3307      	adds	r3, #7
 8008d14:	f023 0307 	bic.w	r3, r3, #7
 8008d18:	f103 0208 	add.w	r2, r3, #8
 8008d1c:	66ba      	str	r2, [r7, #104]	; 0x68
 8008d1e:	cb18      	ldmia	r3, {r3, r4}
 8008d20:	e9c7 3408 	strd	r3, r4, [r7, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8008d24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f174 0200 	sbcs.w	r2, r4, #0
 8008d2e:	da02      	bge.n	8008d36 <_vsnprintf+0x4be>
 8008d30:	425b      	negs	r3, r3
 8008d32:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8008d36:	4619      	mov	r1, r3
 8008d38:	4622      	mov	r2, r4
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	0fdb      	lsrs	r3, r3, #31
 8008d3e:	b2d8      	uxtb	r0, r3
 8008d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d42:	f04f 0400 	mov.w	r4, #0
 8008d46:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8008d48:	9508      	str	r5, [sp, #32]
 8008d4a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8008d4c:	9507      	str	r5, [sp, #28]
 8008d4e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8008d50:	9506      	str	r5, [sp, #24]
 8008d52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d56:	9002      	str	r0, [sp, #8]
 8008d58:	e88d 0006 	stmia.w	sp, {r1, r2}
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7ff f825 	bl	8007db2 <_ntoa_long_long>
 8008d68:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8008d6a:	e0c7      	b.n	8008efc <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8008d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d01e      	beq.n	8008db4 <_vsnprintf+0x53c>
            const long value = va_arg(va, long);
 8008d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d78:	1d1a      	adds	r2, r3, #4
 8008d7a:	66ba      	str	r2, [r7, #104]	; 0x68
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	bfb8      	it	lt
 8008d86:	425b      	neglt	r3, r3
 8008d88:	4619      	mov	r1, r3
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	0fdb      	lsrs	r3, r3, #31
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d92:	9205      	str	r2, [sp, #20]
 8008d94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d96:	9204      	str	r2, [sp, #16]
 8008d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d9a:	9203      	str	r2, [sp, #12]
 8008d9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d9e:	9202      	str	r2, [sp, #8]
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	9100      	str	r1, [sp, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7fe ff9a 	bl	8007ce4 <_ntoa_long>
 8008db0:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8008db2:	e0a3      	b.n	8008efc <_vsnprintf+0x684>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8008db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <_vsnprintf+0x552>
 8008dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dc0:	1d1a      	adds	r2, r3, #4
 8008dc2:	66ba      	str	r2, [r7, #104]	; 0x68
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	e00e      	b.n	8008de8 <_vsnprintf+0x570>
 8008dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <_vsnprintf+0x568>
 8008dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dd6:	1d1a      	adds	r2, r3, #4
 8008dd8:	66ba      	str	r2, [r7, #104]	; 0x68
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	b21b      	sxth	r3, r3
 8008dde:	e003      	b.n	8008de8 <_vsnprintf+0x570>
 8008de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008de2:	1d1a      	adds	r2, r3, #4
 8008de4:	66ba      	str	r2, [r7, #104]	; 0x68
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bfb8      	it	lt
 8008df0:	425b      	neglt	r3, r3
 8008df2:	4619      	mov	r1, r3
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	0fdb      	lsrs	r3, r3, #31
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dfc:	9205      	str	r2, [sp, #20]
 8008dfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e00:	9204      	str	r2, [sp, #16]
 8008e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e04:	9203      	str	r2, [sp, #12]
 8008e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e08:	9202      	str	r2, [sp, #8]
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	9100      	str	r1, [sp, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e12:	68b9      	ldr	r1, [r7, #8]
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f7fe ff65 	bl	8007ce4 <_ntoa_long>
 8008e1a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8008e1c:	e06e      	b.n	8008efc <_vsnprintf+0x684>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8008e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01f      	beq.n	8008e68 <_vsnprintf+0x5f0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8008e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e2a:	3307      	adds	r3, #7
 8008e2c:	f023 0307 	bic.w	r3, r3, #7
 8008e30:	f103 0208 	add.w	r2, r3, #8
 8008e34:	66ba      	str	r2, [r7, #104]	; 0x68
 8008e36:	cb18      	ldmia	r3, {r3, r4}
 8008e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e42:	9008      	str	r0, [sp, #32]
 8008e44:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e46:	9007      	str	r0, [sp, #28]
 8008e48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008e4a:	9006      	str	r0, [sp, #24]
 8008e4c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8008e50:	2200      	movs	r2, #0
 8008e52:	9202      	str	r2, [sp, #8]
 8008e54:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7fe ffa7 	bl	8007db2 <_ntoa_long_long>
 8008e64:	6478      	str	r0, [r7, #68]	; 0x44
 8008e66:	e049      	b.n	8008efc <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8008e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d016      	beq.n	8008ea0 <_vsnprintf+0x628>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8008e72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	66ba      	str	r2, [r7, #104]	; 0x68
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e7c:	9205      	str	r2, [sp, #20]
 8008e7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e80:	9204      	str	r2, [sp, #16]
 8008e82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e84:	9203      	str	r2, [sp, #12]
 8008e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e88:	9202      	str	r2, [sp, #8]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	9201      	str	r2, [sp, #4]
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7fe ff24 	bl	8007ce4 <_ntoa_long>
 8008e9c:	6478      	str	r0, [r7, #68]	; 0x44
 8008e9e:	e02d      	b.n	8008efc <_vsnprintf+0x684>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8008ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d005      	beq.n	8008eb6 <_vsnprintf+0x63e>
 8008eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008eac:	1d1a      	adds	r2, r3, #4
 8008eae:	66ba      	str	r2, [r7, #104]	; 0x68
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	e00e      	b.n	8008ed4 <_vsnprintf+0x65c>
 8008eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <_vsnprintf+0x654>
 8008ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ec2:	1d1a      	adds	r2, r3, #4
 8008ec4:	66ba      	str	r2, [r7, #104]	; 0x68
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	e003      	b.n	8008ed4 <_vsnprintf+0x65c>
 8008ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ece:	1d1a      	adds	r2, r3, #4
 8008ed0:	66ba      	str	r2, [r7, #104]	; 0x68
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8008ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ed8:	9305      	str	r3, [sp, #20]
 8008eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee0:	9303      	str	r3, [sp, #12]
 8008ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee4:	9302      	str	r3, [sp, #8]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7fe fef5 	bl	8007ce4 <_ntoa_long>
 8008efa:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	603b      	str	r3, [r7, #0]
        break;
 8008f02:	e14e      	b.n	80091a2 <_vsnprintf+0x92a>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b46      	cmp	r3, #70	; 0x46
 8008f0a:	d103      	bne.n	8008f14 <_vsnprintf+0x69c>
 8008f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f0e:	f043 0320 	orr.w	r3, r3, #32
 8008f12:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8008f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f16:	3307      	adds	r3, #7
 8008f18:	f023 0307 	bic.w	r3, r3, #7
 8008f1c:	f103 0208 	add.w	r2, r3, #8
 8008f20:	66ba      	str	r2, [r7, #104]	; 0x68
 8008f22:	cb18      	ldmia	r3, {r3, r4}
 8008f24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f26:	9204      	str	r2, [sp, #16]
 8008f28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f2a:	9203      	str	r2, [sp, #12]
 8008f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f2e:	9202      	str	r2, [sp, #8]
 8008f30:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f38:	68b9      	ldr	r1, [r7, #8]
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7fe ffa8 	bl	8007e90 <_ftoa>
 8008f40:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	3301      	adds	r3, #1
 8008f46:	603b      	str	r3, [r7, #0]
        break;
 8008f48:	e12b      	b.n	80091a2 <_vsnprintf+0x92a>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b67      	cmp	r3, #103	; 0x67
 8008f50:	d003      	beq.n	8008f5a <_vsnprintf+0x6e2>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b47      	cmp	r3, #71	; 0x47
 8008f58:	d103      	bne.n	8008f62 <_vsnprintf+0x6ea>
 8008f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f60:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b45      	cmp	r3, #69	; 0x45
 8008f68:	d003      	beq.n	8008f72 <_vsnprintf+0x6fa>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b47      	cmp	r3, #71	; 0x47
 8008f70:	d103      	bne.n	8008f7a <_vsnprintf+0x702>
 8008f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f74:	f043 0320 	orr.w	r3, r3, #32
 8008f78:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8008f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f7c:	3307      	adds	r3, #7
 8008f7e:	f023 0307 	bic.w	r3, r3, #7
 8008f82:	f103 0208 	add.w	r2, r3, #8
 8008f86:	66ba      	str	r2, [r7, #104]	; 0x68
 8008f88:	cb18      	ldmia	r3, {r3, r4}
 8008f8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f8c:	9204      	str	r2, [sp, #16]
 8008f8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f90:	9203      	str	r2, [sp, #12]
 8008f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f94:	9202      	str	r2, [sp, #8]
 8008f96:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff f9dd 	bl	8008360 <_etoa>
 8008fa6:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	3301      	adds	r3, #1
 8008fac:	603b      	str	r3, [r7, #0]
        break;
 8008fae:	e0f8      	b.n	80091a2 <_vsnprintf+0x92a>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8008fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10e      	bne.n	8008fdc <_vsnprintf+0x764>
          while (l++ < width) {
 8008fbe:	e007      	b.n	8008fd0 <_vsnprintf+0x758>
            out(' ', buffer, idx++, maxlen);
 8008fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fc2:	1c53      	adds	r3, r2, #1
 8008fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8008fc6:	68fc      	ldr	r4, [r7, #12]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68b9      	ldr	r1, [r7, #8]
 8008fcc:	2020      	movs	r0, #32
 8008fce:	47a0      	blx	r4
          while (l++ < width) {
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008fd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d3f1      	bcc.n	8008fc0 <_vsnprintf+0x748>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8008fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fde:	1d1a      	adds	r2, r3, #4
 8008fe0:	66ba      	str	r2, [r7, #104]	; 0x68
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	b2d8      	uxtb	r0, r3
 8008fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fe8:	1c53      	adds	r3, r2, #1
 8008fea:	647b      	str	r3, [r7, #68]	; 0x44
 8008fec:	68fc      	ldr	r4, [r7, #12]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68b9      	ldr	r1, [r7, #8]
 8008ff2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8008ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00e      	beq.n	800901c <_vsnprintf+0x7a4>
          while (l++ < width) {
 8008ffe:	e007      	b.n	8009010 <_vsnprintf+0x798>
            out(' ', buffer, idx++, maxlen);
 8009000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009002:	1c53      	adds	r3, r2, #1
 8009004:	647b      	str	r3, [r7, #68]	; 0x44
 8009006:	68fc      	ldr	r4, [r7, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68b9      	ldr	r1, [r7, #8]
 800900c:	2020      	movs	r0, #32
 800900e:	47a0      	blx	r4
          while (l++ < width) {
 8009010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009012:	1c5a      	adds	r2, r3, #1
 8009014:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009018:	4293      	cmp	r3, r2
 800901a:	d3f1      	bcc.n	8009000 <_vsnprintf+0x788>
          }
        }
        format++;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	603b      	str	r3, [r7, #0]
        break;
 8009022:	e0be      	b.n	80091a2 <_vsnprintf+0x92a>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8009024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009026:	1d1a      	adds	r2, r3, #4
 8009028:	66ba      	str	r2, [r7, #104]	; 0x68
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800902e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <_vsnprintf+0x7c0>
 8009034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009036:	e001      	b.n	800903c <_vsnprintf+0x7c4>
 8009038:	f04f 33ff 	mov.w	r3, #4294967295
 800903c:	4619      	mov	r1, r3
 800903e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009040:	f7fe fcce 	bl	80079e0 <_strnlen_s>
 8009044:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8009046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <_vsnprintf+0x7e4>
          l = (l < precision ? l : precision);
 8009050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009054:	4293      	cmp	r3, r2
 8009056:	bf28      	it	cs
 8009058:	4613      	movcs	r3, r2
 800905a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800905c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d11a      	bne.n	800909c <_vsnprintf+0x824>
          while (l++ < width) {
 8009066:	e007      	b.n	8009078 <_vsnprintf+0x800>
            out(' ', buffer, idx++, maxlen);
 8009068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800906a:	1c53      	adds	r3, r2, #1
 800906c:	647b      	str	r3, [r7, #68]	; 0x44
 800906e:	68fc      	ldr	r4, [r7, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68b9      	ldr	r1, [r7, #8]
 8009074:	2020      	movs	r0, #32
 8009076:	47a0      	blx	r4
          while (l++ < width) {
 8009078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	637a      	str	r2, [r7, #52]	; 0x34
 800907e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009080:	4293      	cmp	r3, r2
 8009082:	d3f1      	bcc.n	8009068 <_vsnprintf+0x7f0>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8009084:	e00a      	b.n	800909c <_vsnprintf+0x824>
          out(*(p++), buffer, idx++, maxlen);
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	63ba      	str	r2, [r7, #56]	; 0x38
 800908c:	7818      	ldrb	r0, [r3, #0]
 800908e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009090:	1c53      	adds	r3, r2, #1
 8009092:	647b      	str	r3, [r7, #68]	; 0x44
 8009094:	68fc      	ldr	r4, [r7, #12]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d009      	beq.n	80090b8 <_vsnprintf+0x840>
 80090a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0eb      	beq.n	8009086 <_vsnprintf+0x80e>
 80090ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b0:	1e5a      	subs	r2, r3, #1
 80090b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1e6      	bne.n	8009086 <_vsnprintf+0x80e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80090b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00e      	beq.n	80090e0 <_vsnprintf+0x868>
          while (l++ < width) {
 80090c2:	e007      	b.n	80090d4 <_vsnprintf+0x85c>
            out(' ', buffer, idx++, maxlen);
 80090c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090c6:	1c53      	adds	r3, r2, #1
 80090c8:	647b      	str	r3, [r7, #68]	; 0x44
 80090ca:	68fc      	ldr	r4, [r7, #12]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	2020      	movs	r0, #32
 80090d2:	47a0      	blx	r4
          while (l++ < width) {
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	637a      	str	r2, [r7, #52]	; 0x34
 80090da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090dc:	4293      	cmp	r3, r2
 80090de:	d3f1      	bcc.n	80090c4 <_vsnprintf+0x84c>
          }
        }
        format++;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	3301      	adds	r3, #1
 80090e4:	603b      	str	r3, [r7, #0]
        break;
 80090e6:	e05c      	b.n	80091a2 <_vsnprintf+0x92a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80090e8:	2308      	movs	r3, #8
 80090ea:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80090ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ee:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80090f2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80090f4:	2300      	movs	r3, #0
 80090f6:	75fb      	strb	r3, [r7, #23]
        if (is_ll) {
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d01d      	beq.n	800913a <_vsnprintf+0x8c2>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80090fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009100:	1d1a      	adds	r2, r3, #4
 8009102:	66ba      	str	r2, [r7, #104]	; 0x68
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f04f 0400 	mov.w	r4, #0
 800910a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800910c:	9208      	str	r2, [sp, #32]
 800910e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009110:	9207      	str	r2, [sp, #28]
 8009112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009114:	9206      	str	r2, [sp, #24]
 8009116:	f04f 0110 	mov.w	r1, #16
 800911a:	f04f 0200 	mov.w	r2, #0
 800911e:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009122:	2200      	movs	r2, #0
 8009124:	9202      	str	r2, [sp, #8]
 8009126:	e88d 0018 	stmia.w	sp, {r3, r4}
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800912e:	68b9      	ldr	r1, [r7, #8]
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f7fe fe3e 	bl	8007db2 <_ntoa_long_long>
 8009136:	6478      	str	r0, [r7, #68]	; 0x44
 8009138:	e016      	b.n	8009168 <_vsnprintf+0x8f0>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800913a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800913c:	1d1a      	adds	r2, r3, #4
 800913e:	66ba      	str	r2, [r7, #104]	; 0x68
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009146:	9305      	str	r3, [sp, #20]
 8009148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914a:	9304      	str	r3, [sp, #16]
 800914c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914e:	9303      	str	r3, [sp, #12]
 8009150:	2310      	movs	r3, #16
 8009152:	9302      	str	r3, [sp, #8]
 8009154:	2300      	movs	r3, #0
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	9200      	str	r2, [sp, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800915e:	68b9      	ldr	r1, [r7, #8]
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f7fe fdbf 	bl	8007ce4 <_ntoa_long>
 8009166:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	3301      	adds	r3, #1
 800916c:	603b      	str	r3, [r7, #0]
        break;
 800916e:	e018      	b.n	80091a2 <_vsnprintf+0x92a>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8009170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009172:	1c53      	adds	r3, r2, #1
 8009174:	647b      	str	r3, [r7, #68]	; 0x44
 8009176:	68fc      	ldr	r4, [r7, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68b9      	ldr	r1, [r7, #8]
 800917c:	2025      	movs	r0, #37	; 0x25
 800917e:	47a0      	blx	r4
        format++;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	3301      	adds	r3, #1
 8009184:	603b      	str	r3, [r7, #0]
        break;
 8009186:	e00c      	b.n	80091a2 <_vsnprintf+0x92a>

      default :
        out(*format, buffer, idx++, maxlen);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	7818      	ldrb	r0, [r3, #0]
 800918c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800918e:	1c53      	adds	r3, r2, #1
 8009190:	647b      	str	r3, [r7, #68]	; 0x44
 8009192:	68fc      	ldr	r4, [r7, #12]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	47a0      	blx	r4
        format++;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	3301      	adds	r3, #1
 800919e:	603b      	str	r3, [r7, #0]
        break;
 80091a0:	bf00      	nop
  while (*format)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f47f ab77 	bne.w	800889a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80091ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d302      	bcc.n	80091ba <_vsnprintf+0x942>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	1e5a      	subs	r2, r3, #1
 80091b8:	e000      	b.n	80091bc <_vsnprintf+0x944>
 80091ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091bc:	68fc      	ldr	r4, [r7, #12]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	2000      	movs	r0, #0
 80091c4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80091c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3758      	adds	r7, #88	; 0x58
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bdb0      	pop	{r4, r5, r7, pc}

080091d0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80091d0:	b40f      	push	{r0, r1, r2, r3}
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80091d8:	f107 031c 	add.w	r3, r7, #28
 80091dc:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80091de:	1d39      	adds	r1, r7, #4
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ea:	4806      	ldr	r0, [pc, #24]	; (8009204 <printf_+0x34>)
 80091ec:	f7ff fb44 	bl	8008878 <_vsnprintf>
 80091f0:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80091f2:	68fb      	ldr	r3, [r7, #12]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091fe:	b004      	add	sp, #16
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	080079bb 	.word	0x080079bb

08009208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009240 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800920c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800920e:	e003      	b.n	8009218 <LoopCopyDataInit>

08009210 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009210:	4b0c      	ldr	r3, [pc, #48]	; (8009244 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8009212:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009214:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009216:	3104      	adds	r1, #4

08009218 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009218:	480b      	ldr	r0, [pc, #44]	; (8009248 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800921a:	4b0c      	ldr	r3, [pc, #48]	; (800924c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800921c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800921e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009220:	d3f6      	bcc.n	8009210 <CopyDataInit>
	ldr	r2, =_sbss
 8009222:	4a0b      	ldr	r2, [pc, #44]	; (8009250 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8009224:	e002      	b.n	800922c <LoopFillZerobss>

08009226 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009226:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009228:	f842 3b04 	str.w	r3, [r2], #4

0800922c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800922c:	4b09      	ldr	r3, [pc, #36]	; (8009254 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800922e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009230:	d3f9      	bcc.n	8009226 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8009232:	f000 f82b 	bl	800928c <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 8009236:	f000 fa6d 	bl	8009714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800923a:	f7fc fc81 	bl	8005b40 <main>
	bx	lr
 800923e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009240:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 8009244:	0800a31c 	.word	0x0800a31c
	ldr	r0, =_sdata
 8009248:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800924c:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 8009250:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 8009254:	20001e54 	.word	0x20001e54

08009258 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009258:	e7fe      	b.n	8009258 <ADC1_IRQHandler>

0800925a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800925a:	b480      	push	{r7}
 800925c:	af00      	add	r7, sp, #0
}
 800925e:	bf00      	nop
 8009260:	46bd      	mov	sp, r7
 8009262:	bc80      	pop	{r7}
 8009264:	4770      	bx	lr

08009266 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8009266:	b480      	push	{r7}
 8009268:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800926a:	e7fe      	b.n	800926a <HardFault_Handler+0x4>

0800926c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8009270:	e7fe      	b.n	8009270 <MemManage_Handler+0x4>

08009272 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8009272:	b480      	push	{r7}
 8009274:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8009276:	e7fe      	b.n	8009276 <BusFault_Handler+0x4>

08009278 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800927c:	e7fe      	b.n	800927c <UsageFault_Handler+0x4>

0800927e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800927e:	b480      	push	{r7}
 8009280:	af00      	add	r7, sp, #0
}
 8009282:	bf00      	nop
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr
	...

0800928c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009290:	4a17      	ldr	r2, [pc, #92]	; (80092f0 <SystemInit+0x64>)
 8009292:	4b17      	ldr	r3, [pc, #92]	; (80092f0 <SystemInit+0x64>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f043 0301 	orr.w	r3, r3, #1
 800929a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800929c:	4914      	ldr	r1, [pc, #80]	; (80092f0 <SystemInit+0x64>)
 800929e:	4b14      	ldr	r3, [pc, #80]	; (80092f0 <SystemInit+0x64>)
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <SystemInit+0x68>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80092a8:	4a11      	ldr	r2, [pc, #68]	; (80092f0 <SystemInit+0x64>)
 80092aa:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <SystemInit+0x64>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80092b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80092b8:	4a0d      	ldr	r2, [pc, #52]	; (80092f0 <SystemInit+0x64>)
 80092ba:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <SystemInit+0x64>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80092c4:	4a0a      	ldr	r2, [pc, #40]	; (80092f0 <SystemInit+0x64>)
 80092c6:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <SystemInit+0x64>)
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80092ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80092d0:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <SystemInit+0x64>)
 80092d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80092d6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <SystemInit+0x64>)
 80092da:	2200      	movs	r2, #0
 80092dc:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80092de:	f000 f80d 	bl	80092fc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <SystemInit+0x6c>)
 80092e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80092e8:	609a      	str	r2, [r3, #8]
#endif 
}
 80092ea:	bf00      	nop
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	40021000 	.word	0x40021000
 80092f4:	f8ff0000 	.word	0xf8ff0000
 80092f8:	e000ed00 	.word	0xe000ed00

080092fc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8009300:	f000 f802 	bl	8009308 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8009304:	bf00      	nop
 8009306:	bd80      	pop	{r7, pc}

08009308 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	607b      	str	r3, [r7, #4]
 8009312:	2300      	movs	r3, #0
 8009314:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8009316:	4a30      	ldr	r2, [pc, #192]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009318:	4b2f      	ldr	r3, [pc, #188]	; (80093d8 <SetSysClockTo24+0xd0>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009320:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009322:	4b2d      	ldr	r3, [pc, #180]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800932a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3301      	adds	r3, #1
 8009330:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d103      	bne.n	8009340 <SetSysClockTo24+0x38>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800933e:	d1f0      	bne.n	8009322 <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8009340:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800934c:	2301      	movs	r3, #1
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	e001      	b.n	8009356 <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8009352:	2300      	movs	r3, #0
 8009354:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d137      	bne.n	80093cc <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800935c:	4a1e      	ldr	r2, [pc, #120]	; (80093d8 <SetSysClockTo24+0xd0>)
 800935e:	4b1e      	ldr	r3, [pc, #120]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8009364:	4a1c      	ldr	r2, [pc, #112]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009366:	4b1c      	ldr	r3, [pc, #112]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800936c:	4a1a      	ldr	r2, [pc, #104]	; (80093d8 <SetSysClockTo24+0xd0>)
 800936e:	4b1a      	ldr	r3, [pc, #104]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8009374:	4a18      	ldr	r2, [pc, #96]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009376:	4b18      	ldr	r3, [pc, #96]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800937e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8009380:	4a15      	ldr	r2, [pc, #84]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 800938a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800938c:	4a12      	ldr	r2, [pc, #72]	; (80093d8 <SetSysClockTo24+0xd0>)
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <SetSysClockTo24+0xd0>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009396:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009398:	bf00      	nop
 800939a:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <SetSysClockTo24+0xd0>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0f9      	beq.n	800939a <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80093a6:	4a0c      	ldr	r2, [pc, #48]	; (80093d8 <SetSysClockTo24+0xd0>)
 80093a8:	4b0b      	ldr	r3, [pc, #44]	; (80093d8 <SetSysClockTo24+0xd0>)
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	f023 0303 	bic.w	r3, r3, #3
 80093b0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80093b2:	4a09      	ldr	r2, [pc, #36]	; (80093d8 <SetSysClockTo24+0xd0>)
 80093b4:	4b08      	ldr	r3, [pc, #32]	; (80093d8 <SetSysClockTo24+0xd0>)
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f043 0302 	orr.w	r3, r3, #2
 80093bc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80093be:	bf00      	nop
 80093c0:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <SetSysClockTo24+0xd0>)
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f003 030c 	and.w	r3, r3, #12
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	d1f9      	bne.n	80093c0 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	40021000 	.word	0x40021000

080093dc <TIM3_IRQHandler>:
 * Timer 3 ISR
 *
 * @return none.
 **************************************************************************/
void TIM3_IRQHandler(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
    if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 80093e0:	2101      	movs	r1, #1
 80093e2:	4811      	ldr	r0, [pc, #68]	; (8009428 <TIM3_IRQHandler+0x4c>)
 80093e4:	f7fb f9c5 	bl	8004772 <TIM_GetITStatus>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d015      	beq.n	800941a <TIM3_IRQHandler+0x3e>
    {
    	elapsed_ms++;
 80093ee:	4b0f      	ldr	r3, [pc, #60]	; (800942c <TIM3_IRQHandler+0x50>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3301      	adds	r3, #1
 80093f4:	4a0d      	ldr	r2, [pc, #52]	; (800942c <TIM3_IRQHandler+0x50>)
 80093f6:	6013      	str	r3, [r2, #0]
    	if(timeOutTimerStatus == 1)
 80093f8:	4b0d      	ldr	r3, [pc, #52]	; (8009430 <TIM3_IRQHandler+0x54>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d10b      	bne.n	800941a <TIM3_IRQHandler+0x3e>
    	{
    		if((elapsed_ms - timeOutTimerStartTime) > timeOutTimerAlarmTime)
 8009402:	4b0a      	ldr	r3, [pc, #40]	; (800942c <TIM3_IRQHandler+0x50>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	4b0b      	ldr	r3, [pc, #44]	; (8009434 <TIM3_IRQHandler+0x58>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	1ad2      	subs	r2, r2, r3
 800940c:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <TIM3_IRQHandler+0x5c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	429a      	cmp	r2, r3
 8009412:	d902      	bls.n	800941a <TIM3_IRQHandler+0x3e>
    			timeOutTimerAlarmStatus = 1;
 8009414:	4b09      	ldr	r3, [pc, #36]	; (800943c <TIM3_IRQHandler+0x60>)
 8009416:	2201      	movs	r2, #1
 8009418:	701a      	strb	r2, [r3, #0]
    	}
   }

    TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 800941a:	2101      	movs	r1, #1
 800941c:	4802      	ldr	r0, [pc, #8]	; (8009428 <TIM3_IRQHandler+0x4c>)
 800941e:	f7fb f9d1 	bl	80047c4 <TIM_ClearITPendingBit>
}
 8009422:	bf00      	nop
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	40000400 	.word	0x40000400
 800942c:	20001e28 	.word	0x20001e28
 8009430:	20001e2c 	.word	0x20001e2c
 8009434:	20001e34 	.word	0x20001e34
 8009438:	20001e30 	.word	0x20001e30
 800943c:	20001e38 	.word	0x20001e38

08009440 <timer3_init>:
 * Initializes timer 3 peripheral for delay and millis functions.
 *
 * @return none.
 **************************************************************************/
void timer3_init(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef nvicStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8009446:	2101      	movs	r1, #1
 8009448:	2002      	movs	r0, #2
 800944a:	f7fa fe25 	bl	8004098 <RCC_APB1PeriphClockCmd>

	//configure timer 3 interrupt
	nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 800944e:	231d      	movs	r3, #29
 8009450:	733b      	strb	r3, [r7, #12]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	737b      	strb	r3, [r7, #13]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8009456:	2301      	movs	r3, #1
 8009458:	73bb      	strb	r3, [r7, #14]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 800945a:	2301      	movs	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&nvicStructure);
 800945e:	f107 030c 	add.w	r3, r7, #12
 8009462:	4618      	mov	r0, r3
 8009464:	f7fa fa88 	bl	8003978 <NVIC_Init>
	 * interrupt.
	 *
	 * TIM_Period is actually auto reload register(ARR).
	 */
	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 2400-1;
 8009468:	f640 135f 	movw	r3, #2399	; 0x95f
 800946c:	803b      	strh	r3, [r7, #0]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800946e:	2300      	movs	r3, #0
 8009470:	807b      	strh	r3, [r7, #2]
	timerInitStructure.TIM_Period = 10-1;
 8009472:	2309      	movs	r3, #9
 8009474:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8009476:	2300      	movs	r3, #0
 8009478:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_RepetitionCounter = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	723b      	strb	r3, [r7, #8]
	TIM_TimeBaseInit(TIM3, &timerInitStructure);
 800947e:	463b      	mov	r3, r7
 8009480:	4619      	mov	r1, r3
 8009482:	4808      	ldr	r0, [pc, #32]	; (80094a4 <timer3_init+0x64>)
 8009484:	f7fa fe26 	bl	80040d4 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM3, TIM_IT_Update , ENABLE);
 8009488:	2201      	movs	r2, #1
 800948a:	2101      	movs	r1, #1
 800948c:	4805      	ldr	r0, [pc, #20]	; (80094a4 <timer3_init+0x64>)
 800948e:	f7fb f8be 	bl	800460e <TIM_ITConfig>
	TIM_Cmd(TIM3, ENABLE);
 8009492:	2101      	movs	r1, #1
 8009494:	4803      	ldr	r0, [pc, #12]	; (80094a4 <timer3_init+0x64>)
 8009496:	f7fb f89b 	bl	80045d0 <TIM_Cmd>
}
 800949a:	bf00      	nop
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	40000400 	.word	0x40000400

080094a8 <motors_pwm_init>:
 * initializes timer 2 to output PWM signals
 *
 * @return none.
 **************************************************************************/
void motors_pwm_init(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80094ae:	2101      	movs	r1, #1
 80094b0:	2001      	movs	r0, #1
 80094b2:	f7fa fdf1 	bl	8004098 <RCC_APB1PeriphClockCmd>
	/* GPIOA and GPIOB clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 80094b6:	2101      	movs	r1, #1
 80094b8:	2005      	movs	r0, #5
 80094ba:	f7fa fdcf 	bl	800405c <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 80094be:	230f      	movs	r3, #15
 80094c0:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80094c2:	2318      	movs	r3, #24
 80094c4:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80094c6:	2303      	movs	r3, #3
 80094c8:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80094ca:	463b      	mov	r3, r7
 80094cc:	4619      	mov	r1, r3
 80094ce:	4831      	ldr	r0, [pc, #196]	; (8009594 <motors_pwm_init+0xec>)
 80094d0:	f7fa fab4 	bl	8003a3c <GPIO_Init>

	TIM_TimeBaseStructure.TIM_Period = MOTOR_TIM_ARR_REG_VAL;
 80094d4:	f240 2357 	movw	r3, #599	; 0x257
 80094d8:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = MOTOR_TIM_PRESCALER_VAL;
 80094da:	f240 331f 	movw	r3, #799	; 0x31f
 80094de:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80094e0:	2300      	movs	r3, #0
 80094e2:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80094e4:	2300      	movs	r3, #0
 80094e6:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80094e8:	f107 0314 	add.w	r3, r7, #20
 80094ec:	4619      	mov	r1, r3
 80094ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80094f2:	f7fa fdef 	bl	80040d4 <TIM_TimeBaseInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80094f6:	2360      	movs	r3, #96	; 0x60
 80094f8:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80094fa:	2301      	movs	r3, #1
 80094fc:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8009502:	2300      	movs	r3, #0
 8009504:	81bb      	strh	r3, [r7, #12]
	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	4619      	mov	r1, r3
 800950a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800950e:	f7fa fe5d 	bl	80041cc <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8009512:	2108      	movs	r1, #8
 8009514:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009518:	f7fb f8bb 	bl	8004692 <TIM_OC1PreloadConfig>

	/* PWM1 Mode configuration: Channel2 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800951c:	2301      	movs	r3, #1
 800951e:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	817b      	strh	r3, [r7, #10]
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8009524:	1d3b      	adds	r3, r7, #4
 8009526:	4619      	mov	r1, r3
 8009528:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800952c:	f7fa feda 	bl	80042e4 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8009530:	2108      	movs	r1, #8
 8009532:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009536:	f7fb f8c7 	bl	80046c8 <TIM_OC2PreloadConfig>

	/* PWM1 Mode configuration: Channel3 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800953a:	2301      	movs	r3, #1
 800953c:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	817b      	strh	r3, [r7, #10]
	TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8009542:	1d3b      	adds	r3, r7, #4
 8009544:	4619      	mov	r1, r3
 8009546:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800954a:	f7fa ff53 	bl	80043f4 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 800954e:	2108      	movs	r1, #8
 8009550:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009554:	f7fb f8d5 	bl	8004702 <TIM_OC3PreloadConfig>

	/* PWM1 Mode configuration: Channel4 */
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8009558:	2301      	movs	r3, #1
 800955a:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	817b      	strh	r3, [r7, #10]
	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8009560:	1d3b      	adds	r3, r7, #4
 8009562:	4619      	mov	r1, r3
 8009564:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009568:	f7fa ffca 	bl	8004500 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 800956c:	2108      	movs	r1, #8
 800956e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009572:	f7fb f8e1 	bl	8004738 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 8009576:	2101      	movs	r1, #1
 8009578:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800957c:	f7fb f86a 	bl	8004654 <TIM_ARRPreloadConfig>
	/* TIM3 enable counter */
	TIM_Cmd(TIM2, ENABLE);
 8009580:	2101      	movs	r1, #1
 8009582:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009586:	f7fb f823 	bl	80045d0 <TIM_Cmd>
}
 800958a:	bf00      	nop
 800958c:	3720      	adds	r7, #32
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	40010800 	.word	0x40010800

08009598 <millis>:
 * for tracking the current time
 *
 * @retval current time in milliseconds
 **************************************************************************/
uint32_t millis(void)
{
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0
	return elapsed_ms;
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <millis+0x10>)
 800959e:	681b      	ldr	r3, [r3, #0]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bc80      	pop	{r7}
 80095a6:	4770      	bx	lr
 80095a8:	20001e28 	.word	0x20001e28

080095ac <delay_ms>:
 *
 * @param delay_ms: delay time in milli seconds
 * @return none.
 **************************************************************************/
void delay_ms(uint32_t delay_ms)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
	uint32_t currentTime_ms;
	uint32_t startTime_ms;

	startTime_ms = millis();
 80095b4:	f7ff fff0 	bl	8009598 <millis>
 80095b8:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		currentTime_ms = millis();
 80095ba:	f7ff ffed 	bl	8009598 <millis>
 80095be:	60b8      	str	r0, [r7, #8]
		if((currentTime_ms-startTime_ms)>delay_ms)
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	1ad2      	subs	r2, r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d800      	bhi.n	80095ce <delay_ms+0x22>
		currentTime_ms = millis();
 80095cc:	e7f5      	b.n	80095ba <delay_ms+0xe>
			return ;
 80095ce:	bf00      	nop
	}
}
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <timeout_alarm_set>:
 *
 * @param alarmTime_ms: timeout time in milliseconds.
 * @return none.
 **************************************************************************/
void timeout_alarm_set(uint32_t alarmTime_ms)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	timeOutTimerStartTime = millis();
 80095e0:	f7ff ffda 	bl	8009598 <millis>
 80095e4:	4602      	mov	r2, r0
 80095e6:	4b07      	ldr	r3, [pc, #28]	; (8009604 <timeout_alarm_set+0x2c>)
 80095e8:	601a      	str	r2, [r3, #0]
	timeOutTimerStatus = 1;
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <timeout_alarm_set+0x30>)
 80095ec:	2201      	movs	r2, #1
 80095ee:	701a      	strb	r2, [r3, #0]
	timeOutTimerAlarmTime = alarmTime_ms;
 80095f0:	4a06      	ldr	r2, [pc, #24]	; (800960c <timeout_alarm_set+0x34>)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6013      	str	r3, [r2, #0]
	timeOutTimerAlarmStatus = 0;
 80095f6:	4b06      	ldr	r3, [pc, #24]	; (8009610 <timeout_alarm_set+0x38>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	20001e34 	.word	0x20001e34
 8009608:	20001e2c 	.word	0x20001e2c
 800960c:	20001e30 	.word	0x20001e30
 8009610:	20001e38 	.word	0x20001e38

08009614 <timeout_alarm_status_check>:
 * checks if timeout has occurred
 *
 * retval 1 if timeout happened. else 0.
 **************************************************************************/
uint8_t timeout_alarm_status_check(void)
{
 8009614:	b480      	push	{r7}
 8009616:	af00      	add	r7, sp, #0
	return timeOutTimerAlarmStatus;
 8009618:	4b03      	ldr	r3, [pc, #12]	; (8009628 <timeout_alarm_status_check+0x14>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	b2db      	uxtb	r3, r3
}
 800961e:	4618      	mov	r0, r3
 8009620:	46bd      	mov	sp, r7
 8009622:	bc80      	pop	{r7}
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	20001e38 	.word	0x20001e38

0800962c <timeout_alarm_off>:
 * turns off the alarm.
 *
 * @return none.
 **************************************************************************/
void timeout_alarm_off(void)
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
	timeOutTimerStatus = 0;
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <timeout_alarm_off+0x18>)
 8009632:	2200      	movs	r2, #0
 8009634:	701a      	strb	r2, [r3, #0]
	timeOutTimerAlarmStatus = 0;
 8009636:	4b04      	ldr	r3, [pc, #16]	; (8009648 <timeout_alarm_off+0x1c>)
 8009638:	2200      	movs	r2, #0
 800963a:	701a      	strb	r2, [r3, #0]
}
 800963c:	bf00      	nop
 800963e:	46bd      	mov	sp, r7
 8009640:	bc80      	pop	{r7}
 8009642:	4770      	bx	lr
 8009644:	20001e2c 	.word	0x20001e2c
 8009648:	20001e38 	.word	0x20001e38

0800964c <USART1_IRQHandler>:
#include "stm32f10x_usart.h"
#include "uart_comm.h"


void USART1_IRQHandler()
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
	// Check if the USART receive interrupt flag was set
	if (USART_GetITStatus(USART1, USART_IT_RXNE))
 8009650:	f240 5125 	movw	r1, #1317	; 0x525
 8009654:	4805      	ldr	r0, [pc, #20]	; (800966c <USART1_IRQHandler+0x20>)
 8009656:	f7fb fa20 	bl	8004a9a <USART_GetITStatus>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <USART1_IRQHandler+0x1a>
	{
		USART_ReceiveData(USART1);
 8009660:	4802      	ldr	r0, [pc, #8]	; (800966c <USART1_IRQHandler+0x20>)
 8009662:	f7fb f9f0 	bl	8004a46 <USART_ReceiveData>
	}
}
 8009666:	bf00      	nop
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	40013800 	.word	0x40013800

08009670 <uart_console_init>:
 *
 * @param baudRate: uart baud rate
 * @return none.
 **************************************************************************/
void uart_console_init(uint32_t baudRate)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStruct;

	/* Enable peripheral clocks for USART1 on GPIOA */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA |
 8009678:	2101      	movs	r1, #1
 800967a:	f244 0005 	movw	r0, #16389	; 0x4005
 800967e:	f7fa fced 	bl	800405c <RCC_APB2PeriphClockCmd>

	//----------------------------- interrupt testing ongoing ------------------------------

	/* NVIC Configuration */
	/* Enable the USARTx Interrupt */
	NVIC_InitStruct.NVIC_IRQChannel = USART1_IRQn;
 8009682:	2325      	movs	r3, #37	; 0x25
 8009684:	723b      	strb	r3, [r7, #8]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	727b      	strb	r3, [r7, #9]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
 800968a:	2301      	movs	r3, #1
 800968c:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800968e:	2301      	movs	r3, #1
 8009690:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStruct);
 8009692:	f107 0308 	add.w	r3, r7, #8
 8009696:	4618      	mov	r0, r3
 8009698:	f7fa f96e 	bl	8003978 <NVIC_Init>
	//--------------------------------------------------------------------------------------


	/* Configure PA9 and PA10 as USART1 TX/RX */
	/* PA9 = alternate function push/pull output */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 800969c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096a0:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80096a2:	2303      	movs	r3, #3
 80096a4:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80096a6:	2318      	movs	r3, #24
 80096a8:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80096aa:	f107 031c 	add.w	r3, r7, #28
 80096ae:	4619      	mov	r1, r3
 80096b0:	4816      	ldr	r0, [pc, #88]	; (800970c <uart_console_init+0x9c>)
 80096b2:	f7fa f9c3 	bl	8003a3c <GPIO_Init>

	/* PA10 = floating input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80096b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ba:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80096bc:	2304      	movs	r3, #4
 80096be:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80096c0:	f107 031c 	add.w	r3, r7, #28
 80096c4:	4619      	mov	r1, r3
 80096c6:	4811      	ldr	r0, [pc, #68]	; (800970c <uart_console_init+0x9c>)
 80096c8:	f7fa f9b8 	bl	8003a3c <GPIO_Init>

	/* Configure and initialize usart... */
	USART_InitStructure.USART_BaudRate = baudRate;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80096d0:	2300      	movs	r3, #0
 80096d2:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80096d4:	2300      	movs	r3, #0
 80096d6:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80096d8:	2300      	movs	r3, #0
 80096da:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80096dc:	2300      	movs	r3, #0
 80096de:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80096e0:	230c      	movs	r3, #12
 80096e2:	82fb      	strh	r3, [r7, #22]
	USART_Init(USART1, &USART_InitStructure);
 80096e4:	f107 030c 	add.w	r3, r7, #12
 80096e8:	4619      	mov	r1, r3
 80096ea:	4809      	ldr	r0, [pc, #36]	; (8009710 <uart_console_init+0xa0>)
 80096ec:	f7fb f87a 	bl	80047e4 <USART_Init>

	//	Enable USART receive interrupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80096f0:	2201      	movs	r2, #1
 80096f2:	f240 5125 	movw	r1, #1317	; 0x525
 80096f6:	4806      	ldr	r0, [pc, #24]	; (8009710 <uart_console_init+0xa0>)
 80096f8:	f7fb f94d 	bl	8004996 <USART_ITConfig>

	/* Enable USART1 */
	USART_Cmd(USART1, ENABLE);
 80096fc:	2101      	movs	r1, #1
 80096fe:	4804      	ldr	r0, [pc, #16]	; (8009710 <uart_console_init+0xa0>)
 8009700:	f7fb f92a 	bl	8004958 <USART_Cmd>
}
 8009704:	bf00      	nop
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	40010800 	.word	0x40010800
 8009710:	40013800 	.word	0x40013800

08009714 <__libc_init_array>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	2500      	movs	r5, #0
 8009718:	4e0c      	ldr	r6, [pc, #48]	; (800974c <__libc_init_array+0x38>)
 800971a:	4c0d      	ldr	r4, [pc, #52]	; (8009750 <__libc_init_array+0x3c>)
 800971c:	1ba4      	subs	r4, r4, r6
 800971e:	10a4      	asrs	r4, r4, #2
 8009720:	42a5      	cmp	r5, r4
 8009722:	d109      	bne.n	8009738 <__libc_init_array+0x24>
 8009724:	f000 fcc6 	bl	800a0b4 <_init>
 8009728:	2500      	movs	r5, #0
 800972a:	4e0a      	ldr	r6, [pc, #40]	; (8009754 <__libc_init_array+0x40>)
 800972c:	4c0a      	ldr	r4, [pc, #40]	; (8009758 <__libc_init_array+0x44>)
 800972e:	1ba4      	subs	r4, r4, r6
 8009730:	10a4      	asrs	r4, r4, #2
 8009732:	42a5      	cmp	r5, r4
 8009734:	d105      	bne.n	8009742 <__libc_init_array+0x2e>
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800973c:	4798      	blx	r3
 800973e:	3501      	adds	r5, #1
 8009740:	e7ee      	b.n	8009720 <__libc_init_array+0xc>
 8009742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009746:	4798      	blx	r3
 8009748:	3501      	adds	r5, #1
 800974a:	e7f2      	b.n	8009732 <__libc_init_array+0x1e>
 800974c:	0800a314 	.word	0x0800a314
 8009750:	0800a314 	.word	0x0800a314
 8009754:	0800a314 	.word	0x0800a314
 8009758:	0800a318 	.word	0x0800a318

0800975c <memcpy>:
 800975c:	b510      	push	{r4, lr}
 800975e:	1e43      	subs	r3, r0, #1
 8009760:	440a      	add	r2, r1
 8009762:	4291      	cmp	r1, r2
 8009764:	d100      	bne.n	8009768 <memcpy+0xc>
 8009766:	bd10      	pop	{r4, pc}
 8009768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009770:	e7f7      	b.n	8009762 <memcpy+0x6>

08009772 <memset>:
 8009772:	4603      	mov	r3, r0
 8009774:	4402      	add	r2, r0
 8009776:	4293      	cmp	r3, r2
 8009778:	d100      	bne.n	800977c <memset+0xa>
 800977a:	4770      	bx	lr
 800977c:	f803 1b01 	strb.w	r1, [r3], #1
 8009780:	e7f9      	b.n	8009776 <memset+0x4>
	...

08009784 <sqrt>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	b08b      	sub	sp, #44	; 0x2c
 800978a:	4604      	mov	r4, r0
 800978c:	460d      	mov	r5, r1
 800978e:	f000 f89d 	bl	80098cc <__ieee754_sqrt>
 8009792:	4b24      	ldr	r3, [pc, #144]	; (8009824 <sqrt+0xa0>)
 8009794:	4680      	mov	r8, r0
 8009796:	f993 a000 	ldrsb.w	sl, [r3]
 800979a:	4689      	mov	r9, r1
 800979c:	f1ba 3fff 	cmp.w	sl, #4294967295
 80097a0:	d02b      	beq.n	80097fa <sqrt+0x76>
 80097a2:	4622      	mov	r2, r4
 80097a4:	462b      	mov	r3, r5
 80097a6:	4620      	mov	r0, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	f7f7 f983 	bl	8000ab4 <__aeabi_dcmpun>
 80097ae:	4683      	mov	fp, r0
 80097b0:	bb18      	cbnz	r0, 80097fa <sqrt+0x76>
 80097b2:	2600      	movs	r6, #0
 80097b4:	2700      	movs	r7, #0
 80097b6:	4632      	mov	r2, r6
 80097b8:	463b      	mov	r3, r7
 80097ba:	4620      	mov	r0, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	f7f7 f951 	bl	8000a64 <__aeabi_dcmplt>
 80097c2:	b1d0      	cbz	r0, 80097fa <sqrt+0x76>
 80097c4:	2301      	movs	r3, #1
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	4b17      	ldr	r3, [pc, #92]	; (8009828 <sqrt+0xa4>)
 80097ca:	f8cd b020 	str.w	fp, [sp, #32]
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80097d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80097d8:	f1ba 0f00 	cmp.w	sl, #0
 80097dc:	d112      	bne.n	8009804 <sqrt+0x80>
 80097de:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80097e2:	4668      	mov	r0, sp
 80097e4:	f000 fb44 	bl	8009e70 <matherr>
 80097e8:	b1b8      	cbz	r0, 800981a <sqrt+0x96>
 80097ea:	9b08      	ldr	r3, [sp, #32]
 80097ec:	b11b      	cbz	r3, 80097f6 <sqrt+0x72>
 80097ee:	f000 fc5b 	bl	800a0a8 <__errno>
 80097f2:	9b08      	ldr	r3, [sp, #32]
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80097fa:	4640      	mov	r0, r8
 80097fc:	4649      	mov	r1, r9
 80097fe:	b00b      	add	sp, #44	; 0x2c
 8009800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009804:	4632      	mov	r2, r6
 8009806:	463b      	mov	r3, r7
 8009808:	4630      	mov	r0, r6
 800980a:	4639      	mov	r1, r7
 800980c:	f7f6 ffe2 	bl	80007d4 <__aeabi_ddiv>
 8009810:	f1ba 0f02 	cmp.w	sl, #2
 8009814:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009818:	d1e3      	bne.n	80097e2 <sqrt+0x5e>
 800981a:	f000 fc45 	bl	800a0a8 <__errno>
 800981e:	2321      	movs	r3, #33	; 0x21
 8009820:	6003      	str	r3, [r0, #0]
 8009822:	e7e2      	b.n	80097ea <sqrt+0x66>
 8009824:	20000024 	.word	0x20000024
 8009828:	0800a2e0 	.word	0x0800a2e0

0800982c <asinf>:
 800982c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800982e:	b08b      	sub	sp, #44	; 0x2c
 8009830:	4604      	mov	r4, r0
 8009832:	f000 f8f7 	bl	8009a24 <__ieee754_asinf>
 8009836:	4e21      	ldr	r6, [pc, #132]	; (80098bc <asinf+0x90>)
 8009838:	4605      	mov	r5, r0
 800983a:	f996 3000 	ldrsb.w	r3, [r6]
 800983e:	3301      	adds	r3, #1
 8009840:	d038      	beq.n	80098b4 <asinf+0x88>
 8009842:	4621      	mov	r1, r4
 8009844:	4620      	mov	r0, r4
 8009846:	f7f7 fcb7 	bl	80011b8 <__aeabi_fcmpun>
 800984a:	4607      	mov	r7, r0
 800984c:	2800      	cmp	r0, #0
 800984e:	d131      	bne.n	80098b4 <asinf+0x88>
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fc25 	bl	800a0a0 <fabsf>
 8009856:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800985a:	f7f7 fca3 	bl	80011a4 <__aeabi_fcmpgt>
 800985e:	b348      	cbz	r0, 80098b4 <asinf+0x88>
 8009860:	2301      	movs	r3, #1
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	4b16      	ldr	r3, [pc, #88]	; (80098c0 <asinf+0x94>)
 8009866:	4620      	mov	r0, r4
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	9708      	str	r7, [sp, #32]
 800986c:	f7f6 fe34 	bl	80004d8 <__aeabi_f2d>
 8009870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009878:	4812      	ldr	r0, [pc, #72]	; (80098c4 <asinf+0x98>)
 800987a:	f000 fafb 	bl	8009e74 <nan>
 800987e:	f996 3000 	ldrsb.w	r3, [r6]
 8009882:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d104      	bne.n	8009894 <asinf+0x68>
 800988a:	f000 fc0d 	bl	800a0a8 <__errno>
 800988e:	2321      	movs	r3, #33	; 0x21
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	e004      	b.n	800989e <asinf+0x72>
 8009894:	4668      	mov	r0, sp
 8009896:	f000 faeb 	bl	8009e70 <matherr>
 800989a:	2800      	cmp	r0, #0
 800989c:	d0f5      	beq.n	800988a <asinf+0x5e>
 800989e:	9b08      	ldr	r3, [sp, #32]
 80098a0:	b11b      	cbz	r3, 80098aa <asinf+0x7e>
 80098a2:	f000 fc01 	bl	800a0a8 <__errno>
 80098a6:	9b08      	ldr	r3, [sp, #32]
 80098a8:	6003      	str	r3, [r0, #0]
 80098aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098ae:	f7f7 f95f 	bl	8000b70 <__aeabi_d2f>
 80098b2:	4605      	mov	r5, r0
 80098b4:	4628      	mov	r0, r5
 80098b6:	b00b      	add	sp, #44	; 0x2c
 80098b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20000024 	.word	0x20000024
 80098c0:	0800a2e5 	.word	0x0800a2e5
 80098c4:	0800a2ea 	.word	0x0800a2ea

080098c8 <atan2f>:
 80098c8:	f000 b9f0 	b.w	8009cac <__ieee754_atan2f>

080098cc <__ieee754_sqrt>:
 80098cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8009a20 <__ieee754_sqrt+0x154>
 80098d4:	4606      	mov	r6, r0
 80098d6:	ea3e 0e01 	bics.w	lr, lr, r1
 80098da:	460d      	mov	r5, r1
 80098dc:	4607      	mov	r7, r0
 80098de:	460a      	mov	r2, r1
 80098e0:	460c      	mov	r4, r1
 80098e2:	4603      	mov	r3, r0
 80098e4:	d10f      	bne.n	8009906 <__ieee754_sqrt+0x3a>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	f7f6 fe49 	bl	8000580 <__aeabi_dmul>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4630      	mov	r0, r6
 80098f4:	4629      	mov	r1, r5
 80098f6:	f7f6 fc91 	bl	800021c <__adddf3>
 80098fa:	4606      	mov	r6, r0
 80098fc:	460d      	mov	r5, r1
 80098fe:	4630      	mov	r0, r6
 8009900:	4629      	mov	r1, r5
 8009902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009906:	2900      	cmp	r1, #0
 8009908:	dc0e      	bgt.n	8009928 <__ieee754_sqrt+0x5c>
 800990a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800990e:	ea5e 0707 	orrs.w	r7, lr, r7
 8009912:	d0f4      	beq.n	80098fe <__ieee754_sqrt+0x32>
 8009914:	b141      	cbz	r1, 8009928 <__ieee754_sqrt+0x5c>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	f7f6 fc7d 	bl	8000218 <__aeabi_dsub>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	f7f6 ff57 	bl	80007d4 <__aeabi_ddiv>
 8009926:	e7e8      	b.n	80098fa <__ieee754_sqrt+0x2e>
 8009928:	1512      	asrs	r2, r2, #20
 800992a:	d10c      	bne.n	8009946 <__ieee754_sqrt+0x7a>
 800992c:	2c00      	cmp	r4, #0
 800992e:	d06e      	beq.n	8009a0e <__ieee754_sqrt+0x142>
 8009930:	2100      	movs	r1, #0
 8009932:	02e6      	lsls	r6, r4, #11
 8009934:	d56f      	bpl.n	8009a16 <__ieee754_sqrt+0x14a>
 8009936:	1e48      	subs	r0, r1, #1
 8009938:	1a12      	subs	r2, r2, r0
 800993a:	f1c1 0020 	rsb	r0, r1, #32
 800993e:	fa23 f000 	lsr.w	r0, r3, r0
 8009942:	4304      	orrs	r4, r0
 8009944:	408b      	lsls	r3, r1
 8009946:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800994a:	07d5      	lsls	r5, r2, #31
 800994c:	f04f 0500 	mov.w	r5, #0
 8009950:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009954:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009958:	bf42      	ittt	mi
 800995a:	0064      	lslmi	r4, r4, #1
 800995c:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8009960:	005b      	lslmi	r3, r3, #1
 8009962:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8009966:	1050      	asrs	r0, r2, #1
 8009968:	4421      	add	r1, r4
 800996a:	2216      	movs	r2, #22
 800996c:	462c      	mov	r4, r5
 800996e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	19a7      	adds	r7, r4, r6
 8009976:	428f      	cmp	r7, r1
 8009978:	bfde      	ittt	le
 800997a:	1bc9      	suble	r1, r1, r7
 800997c:	19bc      	addle	r4, r7, r6
 800997e:	19ad      	addle	r5, r5, r6
 8009980:	0049      	lsls	r1, r1, #1
 8009982:	3a01      	subs	r2, #1
 8009984:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009988:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800998c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009990:	d1f0      	bne.n	8009974 <__ieee754_sqrt+0xa8>
 8009992:	f04f 0e20 	mov.w	lr, #32
 8009996:	4694      	mov	ip, r2
 8009998:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800999c:	42a1      	cmp	r1, r4
 800999e:	eb06 070c 	add.w	r7, r6, ip
 80099a2:	dc02      	bgt.n	80099aa <__ieee754_sqrt+0xde>
 80099a4:	d112      	bne.n	80099cc <__ieee754_sqrt+0x100>
 80099a6:	429f      	cmp	r7, r3
 80099a8:	d810      	bhi.n	80099cc <__ieee754_sqrt+0x100>
 80099aa:	2f00      	cmp	r7, #0
 80099ac:	eb07 0c06 	add.w	ip, r7, r6
 80099b0:	da34      	bge.n	8009a1c <__ieee754_sqrt+0x150>
 80099b2:	f1bc 0f00 	cmp.w	ip, #0
 80099b6:	db31      	blt.n	8009a1c <__ieee754_sqrt+0x150>
 80099b8:	f104 0801 	add.w	r8, r4, #1
 80099bc:	1b09      	subs	r1, r1, r4
 80099be:	4644      	mov	r4, r8
 80099c0:	429f      	cmp	r7, r3
 80099c2:	bf88      	it	hi
 80099c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80099c8:	1bdb      	subs	r3, r3, r7
 80099ca:	4432      	add	r2, r6
 80099cc:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 80099d0:	f1be 0e01 	subs.w	lr, lr, #1
 80099d4:	4439      	add	r1, r7
 80099d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80099de:	d1dd      	bne.n	800999c <__ieee754_sqrt+0xd0>
 80099e0:	430b      	orrs	r3, r1
 80099e2:	d006      	beq.n	80099f2 <__ieee754_sqrt+0x126>
 80099e4:	1c54      	adds	r4, r2, #1
 80099e6:	bf0b      	itete	eq
 80099e8:	4672      	moveq	r2, lr
 80099ea:	3201      	addne	r2, #1
 80099ec:	3501      	addeq	r5, #1
 80099ee:	f022 0201 	bicne.w	r2, r2, #1
 80099f2:	106b      	asrs	r3, r5, #1
 80099f4:	0852      	lsrs	r2, r2, #1
 80099f6:	07e9      	lsls	r1, r5, #31
 80099f8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80099fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009a00:	bf48      	it	mi
 8009a02:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009a06:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8009a0a:	4616      	mov	r6, r2
 8009a0c:	e777      	b.n	80098fe <__ieee754_sqrt+0x32>
 8009a0e:	0adc      	lsrs	r4, r3, #11
 8009a10:	3a15      	subs	r2, #21
 8009a12:	055b      	lsls	r3, r3, #21
 8009a14:	e78a      	b.n	800992c <__ieee754_sqrt+0x60>
 8009a16:	0064      	lsls	r4, r4, #1
 8009a18:	3101      	adds	r1, #1
 8009a1a:	e78a      	b.n	8009932 <__ieee754_sqrt+0x66>
 8009a1c:	46a0      	mov	r8, r4
 8009a1e:	e7cd      	b.n	80099bc <__ieee754_sqrt+0xf0>
 8009a20:	7ff00000 	.word	0x7ff00000

08009a24 <__ieee754_asinf>:
 8009a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a28:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8009a2c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8009a30:	4604      	mov	r4, r0
 8009a32:	4607      	mov	r7, r0
 8009a34:	d10c      	bne.n	8009a50 <__ieee754_asinf+0x2c>
 8009a36:	498d      	ldr	r1, [pc, #564]	; (8009c6c <__ieee754_asinf+0x248>)
 8009a38:	f7f7 f9f8 	bl	8000e2c <__aeabi_fmul>
 8009a3c:	498c      	ldr	r1, [pc, #560]	; (8009c70 <__ieee754_asinf+0x24c>)
 8009a3e:	4605      	mov	r5, r0
 8009a40:	4620      	mov	r0, r4
 8009a42:	f7f7 f9f3 	bl	8000e2c <__aeabi_fmul>
 8009a46:	4601      	mov	r1, r0
 8009a48:	4628      	mov	r0, r5
 8009a4a:	f7f7 f8e7 	bl	8000c1c <__addsf3>
 8009a4e:	e006      	b.n	8009a5e <__ieee754_asinf+0x3a>
 8009a50:	dd09      	ble.n	8009a66 <__ieee754_asinf+0x42>
 8009a52:	4601      	mov	r1, r0
 8009a54:	f7f7 f8e0 	bl	8000c18 <__aeabi_fsub>
 8009a58:	4601      	mov	r1, r0
 8009a5a:	f7f7 fa9b 	bl	8000f94 <__aeabi_fdiv>
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4620      	mov	r0, r4
 8009a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a66:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8009a6a:	da0b      	bge.n	8009a84 <__ieee754_asinf+0x60>
 8009a6c:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 8009a70:	da73      	bge.n	8009b5a <__ieee754_asinf+0x136>
 8009a72:	4980      	ldr	r1, [pc, #512]	; (8009c74 <__ieee754_asinf+0x250>)
 8009a74:	f7f7 f8d2 	bl	8000c1c <__addsf3>
 8009a78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009a7c:	f7f7 fb92 	bl	80011a4 <__aeabi_fcmpgt>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d1ed      	bne.n	8009a60 <__ieee754_asinf+0x3c>
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 fb0b 	bl	800a0a0 <fabsf>
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009a90:	f7f7 f8c2 	bl	8000c18 <__aeabi_fsub>
 8009a94:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009a98:	f7f7 f9c8 	bl	8000e2c <__aeabi_fmul>
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	4976      	ldr	r1, [pc, #472]	; (8009c78 <__ieee754_asinf+0x254>)
 8009aa0:	f7f7 f9c4 	bl	8000e2c <__aeabi_fmul>
 8009aa4:	4975      	ldr	r1, [pc, #468]	; (8009c7c <__ieee754_asinf+0x258>)
 8009aa6:	f7f7 f8b9 	bl	8000c1c <__addsf3>
 8009aaa:	4621      	mov	r1, r4
 8009aac:	f7f7 f9be 	bl	8000e2c <__aeabi_fmul>
 8009ab0:	4973      	ldr	r1, [pc, #460]	; (8009c80 <__ieee754_asinf+0x25c>)
 8009ab2:	f7f7 f8b1 	bl	8000c18 <__aeabi_fsub>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	f7f7 f9b8 	bl	8000e2c <__aeabi_fmul>
 8009abc:	4971      	ldr	r1, [pc, #452]	; (8009c84 <__ieee754_asinf+0x260>)
 8009abe:	f7f7 f8ad 	bl	8000c1c <__addsf3>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	f7f7 f9b2 	bl	8000e2c <__aeabi_fmul>
 8009ac8:	496f      	ldr	r1, [pc, #444]	; (8009c88 <__ieee754_asinf+0x264>)
 8009aca:	f7f7 f8a5 	bl	8000c18 <__aeabi_fsub>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	f7f7 f9ac 	bl	8000e2c <__aeabi_fmul>
 8009ad4:	496d      	ldr	r1, [pc, #436]	; (8009c8c <__ieee754_asinf+0x268>)
 8009ad6:	f7f7 f8a1 	bl	8000c1c <__addsf3>
 8009ada:	4621      	mov	r1, r4
 8009adc:	f7f7 f9a6 	bl	8000e2c <__aeabi_fmul>
 8009ae0:	496b      	ldr	r1, [pc, #428]	; (8009c90 <__ieee754_asinf+0x26c>)
 8009ae2:	4680      	mov	r8, r0
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f7f7 f9a1 	bl	8000e2c <__aeabi_fmul>
 8009aea:	496a      	ldr	r1, [pc, #424]	; (8009c94 <__ieee754_asinf+0x270>)
 8009aec:	f7f7 f894 	bl	8000c18 <__aeabi_fsub>
 8009af0:	4621      	mov	r1, r4
 8009af2:	f7f7 f99b 	bl	8000e2c <__aeabi_fmul>
 8009af6:	4968      	ldr	r1, [pc, #416]	; (8009c98 <__ieee754_asinf+0x274>)
 8009af8:	f7f7 f890 	bl	8000c1c <__addsf3>
 8009afc:	4621      	mov	r1, r4
 8009afe:	f7f7 f995 	bl	8000e2c <__aeabi_fmul>
 8009b02:	4966      	ldr	r1, [pc, #408]	; (8009c9c <__ieee754_asinf+0x278>)
 8009b04:	f7f7 f888 	bl	8000c18 <__aeabi_fsub>
 8009b08:	4621      	mov	r1, r4
 8009b0a:	f7f7 f98f 	bl	8000e2c <__aeabi_fmul>
 8009b0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009b12:	f7f7 f883 	bl	8000c1c <__addsf3>
 8009b16:	4681      	mov	r9, r0
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 f957 	bl	8009dcc <__ieee754_sqrtf>
 8009b1e:	4b60      	ldr	r3, [pc, #384]	; (8009ca0 <__ieee754_asinf+0x27c>)
 8009b20:	4606      	mov	r6, r0
 8009b22:	429d      	cmp	r5, r3
 8009b24:	dd63      	ble.n	8009bee <__ieee754_asinf+0x1ca>
 8009b26:	4649      	mov	r1, r9
 8009b28:	4640      	mov	r0, r8
 8009b2a:	f7f7 fa33 	bl	8000f94 <__aeabi_fdiv>
 8009b2e:	4631      	mov	r1, r6
 8009b30:	f7f7 f97c 	bl	8000e2c <__aeabi_fmul>
 8009b34:	4631      	mov	r1, r6
 8009b36:	f7f7 f871 	bl	8000c1c <__addsf3>
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	f7f7 f86e 	bl	8000c1c <__addsf3>
 8009b40:	4958      	ldr	r1, [pc, #352]	; (8009ca4 <__ieee754_asinf+0x280>)
 8009b42:	f7f7 f86b 	bl	8000c1c <__addsf3>
 8009b46:	4601      	mov	r1, r0
 8009b48:	4848      	ldr	r0, [pc, #288]	; (8009c6c <__ieee754_asinf+0x248>)
 8009b4a:	f7f7 f865 	bl	8000c18 <__aeabi_fsub>
 8009b4e:	2f00      	cmp	r7, #0
 8009b50:	4604      	mov	r4, r0
 8009b52:	bfd8      	it	le
 8009b54:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 8009b58:	e782      	b.n	8009a60 <__ieee754_asinf+0x3c>
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	f7f7 f966 	bl	8000e2c <__aeabi_fmul>
 8009b60:	4605      	mov	r5, r0
 8009b62:	4945      	ldr	r1, [pc, #276]	; (8009c78 <__ieee754_asinf+0x254>)
 8009b64:	f7f7 f962 	bl	8000e2c <__aeabi_fmul>
 8009b68:	4944      	ldr	r1, [pc, #272]	; (8009c7c <__ieee754_asinf+0x258>)
 8009b6a:	f7f7 f857 	bl	8000c1c <__addsf3>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f7 f95c 	bl	8000e2c <__aeabi_fmul>
 8009b74:	4942      	ldr	r1, [pc, #264]	; (8009c80 <__ieee754_asinf+0x25c>)
 8009b76:	f7f7 f84f 	bl	8000c18 <__aeabi_fsub>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7f7 f956 	bl	8000e2c <__aeabi_fmul>
 8009b80:	4940      	ldr	r1, [pc, #256]	; (8009c84 <__ieee754_asinf+0x260>)
 8009b82:	f7f7 f84b 	bl	8000c1c <__addsf3>
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7f7 f950 	bl	8000e2c <__aeabi_fmul>
 8009b8c:	493e      	ldr	r1, [pc, #248]	; (8009c88 <__ieee754_asinf+0x264>)
 8009b8e:	f7f7 f843 	bl	8000c18 <__aeabi_fsub>
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f7 f94a 	bl	8000e2c <__aeabi_fmul>
 8009b98:	493c      	ldr	r1, [pc, #240]	; (8009c8c <__ieee754_asinf+0x268>)
 8009b9a:	f7f7 f83f 	bl	8000c1c <__addsf3>
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f7f7 f944 	bl	8000e2c <__aeabi_fmul>
 8009ba4:	493a      	ldr	r1, [pc, #232]	; (8009c90 <__ieee754_asinf+0x26c>)
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f7f7 f93f 	bl	8000e2c <__aeabi_fmul>
 8009bae:	4939      	ldr	r1, [pc, #228]	; (8009c94 <__ieee754_asinf+0x270>)
 8009bb0:	f7f7 f832 	bl	8000c18 <__aeabi_fsub>
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	f7f7 f939 	bl	8000e2c <__aeabi_fmul>
 8009bba:	4937      	ldr	r1, [pc, #220]	; (8009c98 <__ieee754_asinf+0x274>)
 8009bbc:	f7f7 f82e 	bl	8000c1c <__addsf3>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	f7f7 f933 	bl	8000e2c <__aeabi_fmul>
 8009bc6:	4935      	ldr	r1, [pc, #212]	; (8009c9c <__ieee754_asinf+0x278>)
 8009bc8:	f7f7 f826 	bl	8000c18 <__aeabi_fsub>
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f7 f92d 	bl	8000e2c <__aeabi_fmul>
 8009bd2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009bd6:	f7f7 f821 	bl	8000c1c <__addsf3>
 8009bda:	4601      	mov	r1, r0
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7f7 f9d9 	bl	8000f94 <__aeabi_fdiv>
 8009be2:	4621      	mov	r1, r4
 8009be4:	f7f7 f922 	bl	8000e2c <__aeabi_fmul>
 8009be8:	4601      	mov	r1, r0
 8009bea:	4620      	mov	r0, r4
 8009bec:	e72d      	b.n	8009a4a <__ieee754_asinf+0x26>
 8009bee:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	f7f7 f9cd 	bl	8000f94 <__aeabi_fdiv>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4680      	mov	r8, r0
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7f7 f80c 	bl	8000c1c <__addsf3>
 8009c04:	4601      	mov	r1, r0
 8009c06:	4640      	mov	r0, r8
 8009c08:	f7f7 f910 	bl	8000e2c <__aeabi_fmul>
 8009c0c:	f025 050f 	bic.w	r5, r5, #15
 8009c10:	4680      	mov	r8, r0
 8009c12:	4629      	mov	r1, r5
 8009c14:	4628      	mov	r0, r5
 8009c16:	f7f7 f909 	bl	8000e2c <__aeabi_fmul>
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f7f6 fffb 	bl	8000c18 <__aeabi_fsub>
 8009c22:	4631      	mov	r1, r6
 8009c24:	4604      	mov	r4, r0
 8009c26:	4628      	mov	r0, r5
 8009c28:	f7f6 fff8 	bl	8000c1c <__addsf3>
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f7f7 f9b0 	bl	8000f94 <__aeabi_fdiv>
 8009c34:	4601      	mov	r1, r0
 8009c36:	f7f6 fff1 	bl	8000c1c <__addsf3>
 8009c3a:	4601      	mov	r1, r0
 8009c3c:	480c      	ldr	r0, [pc, #48]	; (8009c70 <__ieee754_asinf+0x24c>)
 8009c3e:	f7f6 ffeb 	bl	8000c18 <__aeabi_fsub>
 8009c42:	4601      	mov	r1, r0
 8009c44:	4640      	mov	r0, r8
 8009c46:	f7f6 ffe7 	bl	8000c18 <__aeabi_fsub>
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f7f6 ffe4 	bl	8000c1c <__addsf3>
 8009c54:	4601      	mov	r1, r0
 8009c56:	4814      	ldr	r0, [pc, #80]	; (8009ca8 <__ieee754_asinf+0x284>)
 8009c58:	f7f6 ffde 	bl	8000c18 <__aeabi_fsub>
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f7f6 ffda 	bl	8000c18 <__aeabi_fsub>
 8009c64:	4601      	mov	r1, r0
 8009c66:	4810      	ldr	r0, [pc, #64]	; (8009ca8 <__ieee754_asinf+0x284>)
 8009c68:	e76f      	b.n	8009b4a <__ieee754_asinf+0x126>
 8009c6a:	bf00      	nop
 8009c6c:	3fc90fdb 	.word	0x3fc90fdb
 8009c70:	b33bbd2e 	.word	0xb33bbd2e
 8009c74:	7149f2ca 	.word	0x7149f2ca
 8009c78:	3811ef08 	.word	0x3811ef08
 8009c7c:	3a4f7f04 	.word	0x3a4f7f04
 8009c80:	3d241146 	.word	0x3d241146
 8009c84:	3e4e0aa8 	.word	0x3e4e0aa8
 8009c88:	3ea6b090 	.word	0x3ea6b090
 8009c8c:	3e2aaaab 	.word	0x3e2aaaab
 8009c90:	3d9dc62e 	.word	0x3d9dc62e
 8009c94:	3f303361 	.word	0x3f303361
 8009c98:	4001572d 	.word	0x4001572d
 8009c9c:	4019d139 	.word	0x4019d139
 8009ca0:	3f799999 	.word	0x3f799999
 8009ca4:	333bbd2e 	.word	0x333bbd2e
 8009ca8:	3f490fdb 	.word	0x3f490fdb

08009cac <__ieee754_atan2f>:
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009cb2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	dc05      	bgt.n	8009cc6 <__ieee754_atan2f+0x1a>
 8009cba:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009cbe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009cc2:	4607      	mov	r7, r0
 8009cc4:	dd04      	ble.n	8009cd0 <__ieee754_atan2f+0x24>
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7f6 ffa8 	bl	8000c1c <__addsf3>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	e010      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009cd0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8009cd4:	d103      	bne.n	8009cde <__ieee754_atan2f+0x32>
 8009cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cda:	f000 b8d1 	b.w	8009e80 <atanf>
 8009cde:	178c      	asrs	r4, r1, #30
 8009ce0:	f004 0402 	and.w	r4, r4, #2
 8009ce4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009ce8:	b92a      	cbnz	r2, 8009cf6 <__ieee754_atan2f+0x4a>
 8009cea:	2c02      	cmp	r4, #2
 8009cec:	d023      	beq.n	8009d36 <__ieee754_atan2f+0x8a>
 8009cee:	2c03      	cmp	r4, #3
 8009cf0:	d023      	beq.n	8009d3a <__ieee754_atan2f+0x8e>
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf6:	b91e      	cbnz	r6, 8009d00 <__ieee754_atan2f+0x54>
 8009cf8:	2f00      	cmp	r7, #0
 8009cfa:	da53      	bge.n	8009da4 <__ieee754_atan2f+0xf8>
 8009cfc:	4b2a      	ldr	r3, [pc, #168]	; (8009da8 <__ieee754_atan2f+0xfc>)
 8009cfe:	e7f8      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009d00:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009d04:	d11b      	bne.n	8009d3e <__ieee754_atan2f+0x92>
 8009d06:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009d0a:	d10b      	bne.n	8009d24 <__ieee754_atan2f+0x78>
 8009d0c:	2c02      	cmp	r4, #2
 8009d0e:	d005      	beq.n	8009d1c <__ieee754_atan2f+0x70>
 8009d10:	2c03      	cmp	r4, #3
 8009d12:	d005      	beq.n	8009d20 <__ieee754_atan2f+0x74>
 8009d14:	2c01      	cmp	r4, #1
 8009d16:	d141      	bne.n	8009d9c <__ieee754_atan2f+0xf0>
 8009d18:	4b24      	ldr	r3, [pc, #144]	; (8009dac <__ieee754_atan2f+0x100>)
 8009d1a:	e7ea      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009d1c:	4b24      	ldr	r3, [pc, #144]	; (8009db0 <__ieee754_atan2f+0x104>)
 8009d1e:	e7e8      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009d20:	4b24      	ldr	r3, [pc, #144]	; (8009db4 <__ieee754_atan2f+0x108>)
 8009d22:	e7e6      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009d24:	2c02      	cmp	r4, #2
 8009d26:	d006      	beq.n	8009d36 <__ieee754_atan2f+0x8a>
 8009d28:	2c03      	cmp	r4, #3
 8009d2a:	d006      	beq.n	8009d3a <__ieee754_atan2f+0x8e>
 8009d2c:	2c01      	cmp	r4, #1
 8009d2e:	d137      	bne.n	8009da0 <__ieee754_atan2f+0xf4>
 8009d30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d34:	e7dd      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009d36:	4b20      	ldr	r3, [pc, #128]	; (8009db8 <__ieee754_atan2f+0x10c>)
 8009d38:	e7db      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009d3a:	4b20      	ldr	r3, [pc, #128]	; (8009dbc <__ieee754_atan2f+0x110>)
 8009d3c:	e7d9      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009d3e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009d42:	d0d9      	beq.n	8009cf8 <__ieee754_atan2f+0x4c>
 8009d44:	1b92      	subs	r2, r2, r6
 8009d46:	15d2      	asrs	r2, r2, #23
 8009d48:	2a3c      	cmp	r2, #60	; 0x3c
 8009d4a:	dc17      	bgt.n	8009d7c <__ieee754_atan2f+0xd0>
 8009d4c:	2900      	cmp	r1, #0
 8009d4e:	da01      	bge.n	8009d54 <__ieee754_atan2f+0xa8>
 8009d50:	323c      	adds	r2, #60	; 0x3c
 8009d52:	db15      	blt.n	8009d80 <__ieee754_atan2f+0xd4>
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7f7 f91d 	bl	8000f94 <__aeabi_fdiv>
 8009d5a:	f000 f9a1 	bl	800a0a0 <fabsf>
 8009d5e:	f000 f88f 	bl	8009e80 <atanf>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2c01      	cmp	r4, #1
 8009d66:	d00d      	beq.n	8009d84 <__ieee754_atan2f+0xd8>
 8009d68:	2c02      	cmp	r4, #2
 8009d6a:	d00e      	beq.n	8009d8a <__ieee754_atan2f+0xde>
 8009d6c:	2c00      	cmp	r4, #0
 8009d6e:	d0c0      	beq.n	8009cf2 <__ieee754_atan2f+0x46>
 8009d70:	4913      	ldr	r1, [pc, #76]	; (8009dc0 <__ieee754_atan2f+0x114>)
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7f6 ff52 	bl	8000c1c <__addsf3>
 8009d78:	490f      	ldr	r1, [pc, #60]	; (8009db8 <__ieee754_atan2f+0x10c>)
 8009d7a:	e00c      	b.n	8009d96 <__ieee754_atan2f+0xea>
 8009d7c:	4b11      	ldr	r3, [pc, #68]	; (8009dc4 <__ieee754_atan2f+0x118>)
 8009d7e:	e7f1      	b.n	8009d64 <__ieee754_atan2f+0xb8>
 8009d80:	2300      	movs	r3, #0
 8009d82:	e7ef      	b.n	8009d64 <__ieee754_atan2f+0xb8>
 8009d84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d88:	e7b3      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009d8a:	490d      	ldr	r1, [pc, #52]	; (8009dc0 <__ieee754_atan2f+0x114>)
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7f6 ff45 	bl	8000c1c <__addsf3>
 8009d92:	4601      	mov	r1, r0
 8009d94:	4808      	ldr	r0, [pc, #32]	; (8009db8 <__ieee754_atan2f+0x10c>)
 8009d96:	f7f6 ff3f 	bl	8000c18 <__aeabi_fsub>
 8009d9a:	e797      	b.n	8009ccc <__ieee754_atan2f+0x20>
 8009d9c:	4b0a      	ldr	r3, [pc, #40]	; (8009dc8 <__ieee754_atan2f+0x11c>)
 8009d9e:	e7a8      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009da0:	2300      	movs	r3, #0
 8009da2:	e7a6      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009da4:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <__ieee754_atan2f+0x118>)
 8009da6:	e7a4      	b.n	8009cf2 <__ieee754_atan2f+0x46>
 8009da8:	bfc90fdb 	.word	0xbfc90fdb
 8009dac:	bf490fdb 	.word	0xbf490fdb
 8009db0:	4016cbe4 	.word	0x4016cbe4
 8009db4:	c016cbe4 	.word	0xc016cbe4
 8009db8:	40490fdb 	.word	0x40490fdb
 8009dbc:	c0490fdb 	.word	0xc0490fdb
 8009dc0:	33bbbd2e 	.word	0x33bbbd2e
 8009dc4:	3fc90fdb 	.word	0x3fc90fdb
 8009dc8:	3f490fdb 	.word	0x3f490fdb

08009dcc <__ieee754_sqrtf>:
 8009dcc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009dd0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4604      	mov	r4, r0
 8009dda:	d309      	bcc.n	8009df0 <__ieee754_sqrtf+0x24>
 8009ddc:	4601      	mov	r1, r0
 8009dde:	f7f7 f825 	bl	8000e2c <__aeabi_fmul>
 8009de2:	4601      	mov	r1, r0
 8009de4:	4620      	mov	r0, r4
 8009de6:	f7f6 ff19 	bl	8000c1c <__addsf3>
 8009dea:	4604      	mov	r4, r0
 8009dec:	4620      	mov	r0, r4
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	d0fb      	beq.n	8009dec <__ieee754_sqrtf+0x20>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	da06      	bge.n	8009e06 <__ieee754_sqrtf+0x3a>
 8009df8:	4601      	mov	r1, r0
 8009dfa:	f7f6 ff0d 	bl	8000c18 <__aeabi_fsub>
 8009dfe:	4601      	mov	r1, r0
 8009e00:	f7f7 f8c8 	bl	8000f94 <__aeabi_fdiv>
 8009e04:	e7f1      	b.n	8009dea <__ieee754_sqrtf+0x1e>
 8009e06:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009e0a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8009e0e:	d204      	bcs.n	8009e1a <__ieee754_sqrtf+0x4e>
 8009e10:	2200      	movs	r2, #0
 8009e12:	0219      	lsls	r1, r3, #8
 8009e14:	d529      	bpl.n	8009e6a <__ieee754_sqrtf+0x9e>
 8009e16:	3a01      	subs	r2, #1
 8009e18:	1aa4      	subs	r4, r4, r2
 8009e1a:	3c7f      	subs	r4, #127	; 0x7f
 8009e1c:	07e2      	lsls	r2, r4, #31
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	ea4f 0164 	mov.w	r1, r4, asr #1
 8009e26:	4616      	mov	r6, r2
 8009e28:	f04f 0419 	mov.w	r4, #25
 8009e2c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8009e30:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009e34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e38:	bf48      	it	mi
 8009e3a:	005b      	lslmi	r3, r3, #1
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	1835      	adds	r5, r6, r0
 8009e40:	429d      	cmp	r5, r3
 8009e42:	bfde      	ittt	le
 8009e44:	182e      	addle	r6, r5, r0
 8009e46:	1b5b      	suble	r3, r3, r5
 8009e48:	1812      	addle	r2, r2, r0
 8009e4a:	3c01      	subs	r4, #1
 8009e4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e50:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009e54:	d1f3      	bne.n	8009e3e <__ieee754_sqrtf+0x72>
 8009e56:	b113      	cbz	r3, 8009e5e <__ieee754_sqrtf+0x92>
 8009e58:	3201      	adds	r2, #1
 8009e5a:	f022 0201 	bic.w	r2, r2, #1
 8009e5e:	1054      	asrs	r4, r2, #1
 8009e60:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8009e64:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8009e68:	e7c0      	b.n	8009dec <__ieee754_sqrtf+0x20>
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	3201      	adds	r2, #1
 8009e6e:	e7d0      	b.n	8009e12 <__ieee754_sqrtf+0x46>

08009e70 <matherr>:
 8009e70:	2000      	movs	r0, #0
 8009e72:	4770      	bx	lr

08009e74 <nan>:
 8009e74:	2000      	movs	r0, #0
 8009e76:	4901      	ldr	r1, [pc, #4]	; (8009e7c <nan+0x8>)
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	7ff80000 	.word	0x7ff80000

08009e80 <atanf>:
 8009e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e84:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8009e88:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	4607      	mov	r7, r0
 8009e90:	db0e      	blt.n	8009eb0 <atanf+0x30>
 8009e92:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009e96:	dd04      	ble.n	8009ea2 <atanf+0x22>
 8009e98:	4601      	mov	r1, r0
 8009e9a:	f7f6 febf 	bl	8000c1c <__addsf3>
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	e003      	b.n	8009eaa <atanf+0x2a>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f300 80d2 	bgt.w	800a04c <atanf+0x1cc>
 8009ea8:	4c69      	ldr	r4, [pc, #420]	; (800a050 <atanf+0x1d0>)
 8009eaa:	4620      	mov	r0, r4
 8009eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb0:	4b68      	ldr	r3, [pc, #416]	; (800a054 <atanf+0x1d4>)
 8009eb2:	429d      	cmp	r5, r3
 8009eb4:	dc0e      	bgt.n	8009ed4 <atanf+0x54>
 8009eb6:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8009eba:	da08      	bge.n	8009ece <atanf+0x4e>
 8009ebc:	4966      	ldr	r1, [pc, #408]	; (800a058 <atanf+0x1d8>)
 8009ebe:	f7f6 fead 	bl	8000c1c <__addsf3>
 8009ec2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009ec6:	f7f7 f96d 	bl	80011a4 <__aeabi_fcmpgt>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d1ed      	bne.n	8009eaa <atanf+0x2a>
 8009ece:	f04f 36ff 	mov.w	r6, #4294967295
 8009ed2:	e01c      	b.n	8009f0e <atanf+0x8e>
 8009ed4:	f000 f8e4 	bl	800a0a0 <fabsf>
 8009ed8:	4b60      	ldr	r3, [pc, #384]	; (800a05c <atanf+0x1dc>)
 8009eda:	4604      	mov	r4, r0
 8009edc:	429d      	cmp	r5, r3
 8009ede:	dc7c      	bgt.n	8009fda <atanf+0x15a>
 8009ee0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009ee4:	429d      	cmp	r5, r3
 8009ee6:	dc67      	bgt.n	8009fb8 <atanf+0x138>
 8009ee8:	4601      	mov	r1, r0
 8009eea:	f7f6 fe97 	bl	8000c1c <__addsf3>
 8009eee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009ef2:	f7f6 fe91 	bl	8000c18 <__aeabi_fsub>
 8009ef6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009efa:	4605      	mov	r5, r0
 8009efc:	4620      	mov	r0, r4
 8009efe:	f7f6 fe8d 	bl	8000c1c <__addsf3>
 8009f02:	4601      	mov	r1, r0
 8009f04:	4628      	mov	r0, r5
 8009f06:	f7f7 f845 	bl	8000f94 <__aeabi_fdiv>
 8009f0a:	2600      	movs	r6, #0
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4620      	mov	r0, r4
 8009f12:	f7f6 ff8b 	bl	8000e2c <__aeabi_fmul>
 8009f16:	4601      	mov	r1, r0
 8009f18:	4680      	mov	r8, r0
 8009f1a:	f7f6 ff87 	bl	8000e2c <__aeabi_fmul>
 8009f1e:	4605      	mov	r5, r0
 8009f20:	494f      	ldr	r1, [pc, #316]	; (800a060 <atanf+0x1e0>)
 8009f22:	f7f6 ff83 	bl	8000e2c <__aeabi_fmul>
 8009f26:	494f      	ldr	r1, [pc, #316]	; (800a064 <atanf+0x1e4>)
 8009f28:	f7f6 fe78 	bl	8000c1c <__addsf3>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	f7f6 ff7d 	bl	8000e2c <__aeabi_fmul>
 8009f32:	494d      	ldr	r1, [pc, #308]	; (800a068 <atanf+0x1e8>)
 8009f34:	f7f6 fe72 	bl	8000c1c <__addsf3>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 ff77 	bl	8000e2c <__aeabi_fmul>
 8009f3e:	494b      	ldr	r1, [pc, #300]	; (800a06c <atanf+0x1ec>)
 8009f40:	f7f6 fe6c 	bl	8000c1c <__addsf3>
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7f6 ff71 	bl	8000e2c <__aeabi_fmul>
 8009f4a:	4949      	ldr	r1, [pc, #292]	; (800a070 <atanf+0x1f0>)
 8009f4c:	f7f6 fe66 	bl	8000c1c <__addsf3>
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7f6 ff6b 	bl	8000e2c <__aeabi_fmul>
 8009f56:	4947      	ldr	r1, [pc, #284]	; (800a074 <atanf+0x1f4>)
 8009f58:	f7f6 fe60 	bl	8000c1c <__addsf3>
 8009f5c:	4641      	mov	r1, r8
 8009f5e:	f7f6 ff65 	bl	8000e2c <__aeabi_fmul>
 8009f62:	4945      	ldr	r1, [pc, #276]	; (800a078 <atanf+0x1f8>)
 8009f64:	4680      	mov	r8, r0
 8009f66:	4628      	mov	r0, r5
 8009f68:	f7f6 ff60 	bl	8000e2c <__aeabi_fmul>
 8009f6c:	4943      	ldr	r1, [pc, #268]	; (800a07c <atanf+0x1fc>)
 8009f6e:	f7f6 fe53 	bl	8000c18 <__aeabi_fsub>
 8009f72:	4629      	mov	r1, r5
 8009f74:	f7f6 ff5a 	bl	8000e2c <__aeabi_fmul>
 8009f78:	4941      	ldr	r1, [pc, #260]	; (800a080 <atanf+0x200>)
 8009f7a:	f7f6 fe4d 	bl	8000c18 <__aeabi_fsub>
 8009f7e:	4629      	mov	r1, r5
 8009f80:	f7f6 ff54 	bl	8000e2c <__aeabi_fmul>
 8009f84:	493f      	ldr	r1, [pc, #252]	; (800a084 <atanf+0x204>)
 8009f86:	f7f6 fe47 	bl	8000c18 <__aeabi_fsub>
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	f7f6 ff4e 	bl	8000e2c <__aeabi_fmul>
 8009f90:	493d      	ldr	r1, [pc, #244]	; (800a088 <atanf+0x208>)
 8009f92:	f7f6 fe41 	bl	8000c18 <__aeabi_fsub>
 8009f96:	4629      	mov	r1, r5
 8009f98:	f7f6 ff48 	bl	8000e2c <__aeabi_fmul>
 8009f9c:	1c73      	adds	r3, r6, #1
 8009f9e:	4601      	mov	r1, r0
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	d139      	bne.n	800a018 <atanf+0x198>
 8009fa4:	f7f6 fe3a 	bl	8000c1c <__addsf3>
 8009fa8:	4621      	mov	r1, r4
 8009faa:	f7f6 ff3f 	bl	8000e2c <__aeabi_fmul>
 8009fae:	4601      	mov	r1, r0
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f7f6 fe31 	bl	8000c18 <__aeabi_fsub>
 8009fb6:	e772      	b.n	8009e9e <atanf+0x1e>
 8009fb8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009fbc:	f7f6 fe2c 	bl	8000c18 <__aeabi_fsub>
 8009fc0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f7f6 fe28 	bl	8000c1c <__addsf3>
 8009fcc:	4601      	mov	r1, r0
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f7f6 ffe0 	bl	8000f94 <__aeabi_fdiv>
 8009fd4:	2601      	movs	r6, #1
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	e799      	b.n	8009f0e <atanf+0x8e>
 8009fda:	4b2c      	ldr	r3, [pc, #176]	; (800a08c <atanf+0x20c>)
 8009fdc:	429d      	cmp	r5, r3
 8009fde:	dc14      	bgt.n	800a00a <atanf+0x18a>
 8009fe0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009fe4:	f7f6 fe18 	bl	8000c18 <__aeabi_fsub>
 8009fe8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009fec:	4605      	mov	r5, r0
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f7f6 ff1c 	bl	8000e2c <__aeabi_fmul>
 8009ff4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009ff8:	f7f6 fe10 	bl	8000c1c <__addsf3>
 8009ffc:	4601      	mov	r1, r0
 8009ffe:	4628      	mov	r0, r5
 800a000:	f7f6 ffc8 	bl	8000f94 <__aeabi_fdiv>
 800a004:	2602      	movs	r6, #2
 800a006:	4604      	mov	r4, r0
 800a008:	e781      	b.n	8009f0e <atanf+0x8e>
 800a00a:	4601      	mov	r1, r0
 800a00c:	4820      	ldr	r0, [pc, #128]	; (800a090 <atanf+0x210>)
 800a00e:	f7f6 ffc1 	bl	8000f94 <__aeabi_fdiv>
 800a012:	2603      	movs	r6, #3
 800a014:	4604      	mov	r4, r0
 800a016:	e77a      	b.n	8009f0e <atanf+0x8e>
 800a018:	f7f6 fe00 	bl	8000c1c <__addsf3>
 800a01c:	4621      	mov	r1, r4
 800a01e:	f7f6 ff05 	bl	8000e2c <__aeabi_fmul>
 800a022:	4b1c      	ldr	r3, [pc, #112]	; (800a094 <atanf+0x214>)
 800a024:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800a028:	f7f6 fdf6 	bl	8000c18 <__aeabi_fsub>
 800a02c:	4621      	mov	r1, r4
 800a02e:	f7f6 fdf3 	bl	8000c18 <__aeabi_fsub>
 800a032:	4b19      	ldr	r3, [pc, #100]	; (800a098 <atanf+0x218>)
 800a034:	4601      	mov	r1, r0
 800a036:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a03a:	f7f6 fded 	bl	8000c18 <__aeabi_fsub>
 800a03e:	2f00      	cmp	r7, #0
 800a040:	4604      	mov	r4, r0
 800a042:	f6bf af32 	bge.w	8009eaa <atanf+0x2a>
 800a046:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800a04a:	e72e      	b.n	8009eaa <atanf+0x2a>
 800a04c:	4c13      	ldr	r4, [pc, #76]	; (800a09c <atanf+0x21c>)
 800a04e:	e72c      	b.n	8009eaa <atanf+0x2a>
 800a050:	bfc90fdb 	.word	0xbfc90fdb
 800a054:	3edfffff 	.word	0x3edfffff
 800a058:	7149f2ca 	.word	0x7149f2ca
 800a05c:	3f97ffff 	.word	0x3f97ffff
 800a060:	3c8569d7 	.word	0x3c8569d7
 800a064:	3d4bda59 	.word	0x3d4bda59
 800a068:	3d886b35 	.word	0x3d886b35
 800a06c:	3dba2e6e 	.word	0x3dba2e6e
 800a070:	3e124925 	.word	0x3e124925
 800a074:	3eaaaaab 	.word	0x3eaaaaab
 800a078:	bd15a221 	.word	0xbd15a221
 800a07c:	3d6ef16b 	.word	0x3d6ef16b
 800a080:	3d9d8795 	.word	0x3d9d8795
 800a084:	3de38e38 	.word	0x3de38e38
 800a088:	3e4ccccd 	.word	0x3e4ccccd
 800a08c:	401bffff 	.word	0x401bffff
 800a090:	bf800000 	.word	0xbf800000
 800a094:	0800a2fc 	.word	0x0800a2fc
 800a098:	0800a2ec 	.word	0x0800a2ec
 800a09c:	3fc90fdb 	.word	0x3fc90fdb

0800a0a0 <fabsf>:
 800a0a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a0a4:	4770      	bx	lr
	...

0800a0a8 <__errno>:
 800a0a8:	4b01      	ldr	r3, [pc, #4]	; (800a0b0 <__errno+0x8>)
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	20000028 	.word	0x20000028

0800a0b4 <_init>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	bf00      	nop
 800a0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ba:	bc08      	pop	{r3}
 800a0bc:	469e      	mov	lr, r3
 800a0be:	4770      	bx	lr

0800a0c0 <_fini>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr
